
AccelerometerAndGyro-Kalman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  0000391a  000039ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000391a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024e  00800226  00800226  00003ad4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003ad4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000878  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012b51  00000000  00000000  000043e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d2e  00000000  00000000  00016f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000044c7  00000000  00000000  00019c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001af4  00000000  00000000  0001e130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003342  00000000  00000000  0001fc24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000091a5  00000000  00000000  00022f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  0002c10b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__dtors_end>
       4:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
       8:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
       c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      10:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      14:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      18:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      1c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      20:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      24:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      28:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      2c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      30:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      34:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      38:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      3c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      40:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__vector_16>
      44:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      48:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__vector_18>
      4c:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__vector_19>
      50:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      54:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      58:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      5c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      60:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__vector_24>
      64:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	4e 41       	sbci	r20, 0x1E	; 30
      98:	4e 49       	Address 0x00000098 is out of bounds.
.word	0xffff	; ????

00000099 <pstr_inity>:
      99:	49 4e 49 54 59                                      INITY

0000009e <pstr_inf>:
      9e:	49 4e 46                                            INF

000000a1 <pwr_m10>:
      a1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      b1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000b9 <pwr_p10>:
      b9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      c9:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000d1 <digital_pin_to_timer_PGM>:
      d1:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      e1:	00 00 00 00                                         ....

000000e5 <digital_pin_to_bit_mask_PGM>:
      e5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      f5:	04 08 10 20                                         ... 

000000f9 <digital_pin_to_port_PGM>:
      f9:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     109:	03 03 03 03                                         ....

0000010d <port_to_output_PGM>:
     10d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000117 <port_to_mode_PGM>:
     117:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000122 <__ctors_start>:
     122:	aa 01       	movw	r20, r20
     124:	3b 0d       	add	r19, r11
     126:	fa 15       	cp	r31, r10

00000128 <__ctors_end>:
     128:	c6 01       	movw	r24, r12

0000012a <__dtors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d8 e0       	ldi	r29, 0x08	; 8
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61

00000136 <__do_copy_data>:
     136:	12 e0       	ldi	r17, 0x02	; 2
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	ea e1       	ldi	r30, 0x1A	; 26
     13e:	f9 e3       	ldi	r31, 0x39	; 57
     140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x10>
     142:	05 90       	lpm	r0, Z+
     144:	0d 92       	st	X+, r0
     146:	a6 32       	cpi	r26, 0x26	; 38
     148:	b1 07       	cpc	r27, r17
     14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0xc>

0000014c <__do_clear_bss>:
     14c:	24 e0       	ldi	r18, 0x04	; 4
     14e:	a6 e2       	ldi	r26, 0x26	; 38
     150:	b2 e0       	ldi	r27, 0x02	; 2
     152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
     154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
     156:	a4 37       	cpi	r26, 0x74	; 116
     158:	b2 07       	cpc	r27, r18
     15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>

0000015c <__do_global_ctors>:
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	c4 e9       	ldi	r28, 0x94	; 148
     160:	d0 e0       	ldi	r29, 0x00	; 0
     162:	04 c0       	rjmp	.+8      	; 0x16c <__do_global_ctors+0x10>
     164:	21 97       	sbiw	r28, 0x01	; 1
     166:	fe 01       	movw	r30, r28
     168:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__tablejump2__>
     16c:	c1 39       	cpi	r28, 0x91	; 145
     16e:	d1 07       	cpc	r29, r17
     170:	c9 f7       	brne	.-14     	; 0x164 <__do_global_ctors+0x8>
     172:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <main>
     176:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__do_global_dtors>

0000017a <__bad_interrupt>:
     17a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017e <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
	Serial.print(" RF ");
	Serial.print(speedFromPC[1]);
	Serial.print(" LB ");
	Serial.print(speedFromPC[2]);
	Serial.print(" RB ");
	Serial.println(speedFromPC[3]);
     17e:	08 95       	ret

00000180 <_ZN7TwoWire5writeEi>:
     180:	dc 01       	movw	r26, r24
     182:	ed 91       	ld	r30, X+
     184:	fc 91       	ld	r31, X
     186:	01 90       	ld	r0, Z+
     188:	f0 81       	ld	r31, Z
     18a:	e0 2d       	mov	r30, r0
     18c:	09 94       	ijmp

0000018e <_Z10MotorsInitv>:
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <dir1PinLF>
     194:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
     198:	61 e0       	ldi	r22, 0x01	; 1
     19a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <dir2PinLF>
     19e:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
     1a2:	61 e0       	ldi	r22, 0x01	; 1
     1a4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <speedPinLF>
     1a8:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <dir1PinRF>
     1b2:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <dir2PinRF>
     1bc:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <speedPinRF>
     1c6:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <dir1PinLB>
     1d0:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
     1d4:	61 e0       	ldi	r22, 0x01	; 1
     1d6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dir2PinLB>
     1da:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <speedPinLB>
     1e4:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
     1e8:	61 e0       	ldi	r22, 0x01	; 1
     1ea:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dir1PinRB>
     1ee:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <dir2PinRB>
     1f8:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <speedPinRB>
     202:	0c 94 c2 10 	jmp	0x2184	; 0x2184 <pinMode>

00000206 <_Z8wheeldiri>:
     206:	cf 92       	push	r12
     208:	df 92       	push	r13
     20a:	ef 92       	push	r14
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	ec 01       	movw	r28, r24
     218:	8c 01       	movw	r16, r24
     21a:	00 0f       	add	r16, r16
     21c:	11 1f       	adc	r17, r17
     21e:	00 0f       	add	r16, r16
     220:	11 1f       	adc	r17, r17
     222:	f8 01       	movw	r30, r16
     224:	e6 5b       	subi	r30, 0xB6	; 182
     226:	fd 4f       	sbci	r31, 0xFD	; 253
     228:	c0 80       	ld	r12, Z
     22a:	d1 80       	ldd	r13, Z+1	; 0x01
     22c:	e2 80       	ldd	r14, Z+2	; 0x02
     22e:	f3 80       	ldd	r15, Z+3	; 0x03
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	a9 01       	movw	r20, r18
     236:	c7 01       	movw	r24, r14
     238:	b6 01       	movw	r22, r12
     23a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     23e:	cc 0f       	add	r28, r28
     240:	dd 1f       	adc	r29, r29
     242:	18 16       	cp	r1, r24
     244:	4c f4       	brge	.+18     	; 0x258 <_Z8wheeldiri+0x52>
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	fe 01       	movw	r30, r28
     24a:	e2 5f       	subi	r30, 0xF2	; 242
     24c:	fe 4f       	sbci	r31, 0xFE	; 254
     24e:	80 81       	ld	r24, Z
     250:	0e 94 fe 10 	call	0x21fc	; 0x21fc <digitalWrite>
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	13 c0       	rjmp	.+38     	; 0x27e <_Z8wheeldiri+0x78>
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	a9 01       	movw	r20, r18
     25e:	c7 01       	movw	r24, r14
     260:	b6 01       	movw	r22, r12
     262:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
     266:	87 ff       	sbrs	r24, 7
     268:	02 c0       	rjmp	.+4      	; 0x26e <_Z8wheeldiri+0x68>
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	01 c0       	rjmp	.+2      	; 0x270 <_Z8wheeldiri+0x6a>
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	fe 01       	movw	r30, r28
     272:	e2 5f       	subi	r30, 0xF2	; 242
     274:	fe 4f       	sbci	r31, 0xFE	; 254
     276:	80 81       	ld	r24, Z
     278:	0e 94 fe 10 	call	0x21fc	; 0x21fc <digitalWrite>
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	fe 01       	movw	r30, r28
     280:	ea 5f       	subi	r30, 0xFA	; 250
     282:	fe 4f       	sbci	r31, 0xFE	; 254
     284:	80 81       	ld	r24, Z
     286:	0e 94 fe 10 	call	0x21fc	; 0x21fc <digitalWrite>
     28a:	f8 01       	movw	r30, r16
     28c:	e6 5b       	subi	r30, 0xB6	; 182
     28e:	fd 4f       	sbci	r31, 0xFD	; 253
     290:	c0 80       	ld	r12, Z
     292:	d1 80       	ldd	r13, Z+1	; 0x01
     294:	e2 80       	ldd	r14, Z+2	; 0x02
     296:	f3 80       	ldd	r15, Z+3	; 0x03
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	a9 01       	movw	r20, r18
     29e:	c7 01       	movw	r24, r14
     2a0:	b6 01       	movw	r22, r12
     2a2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     2a6:	18 16       	cp	r1, r24
     2a8:	1c f4       	brge	.+6      	; 0x2b0 <_Z8wheeldiri+0xaa>
     2aa:	c7 01       	movw	r24, r14
     2ac:	b6 01       	movw	r22, r12
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <_Z8wheeldiri+0xb0>
     2b0:	c7 01       	movw	r24, r14
     2b2:	b6 01       	movw	r22, r12
     2b4:	90 58       	subi	r25, 0x80	; 128
     2b6:	0e 94 c6 09 	call	0x138c	; 0x138c <__fixsfsi>
     2ba:	ca 5e       	subi	r28, 0xEA	; 234
     2bc:	de 4f       	sbci	r29, 0xFE	; 254
     2be:	88 81       	ld	r24, Y
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <analogWrite>

000002d4 <_Z9parseDatav>:
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	68 e7       	ldi	r22, 0x78	; 120
     2da:	71 e0       	ldi	r23, 0x01	; 1
     2dc:	89 e2       	ldi	r24, 0x29	; 41
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <strtok>
     2e4:	0e 94 5f 1a 	call	0x34be	; 0x34be <atof>
     2e8:	ca e4       	ldi	r28, 0x4A	; 74
     2ea:	d2 e0       	ldi	r29, 0x02	; 2
     2ec:	68 83       	st	Y, r22
     2ee:	79 83       	std	Y+1, r23	; 0x01
     2f0:	8a 83       	std	Y+2, r24	; 0x02
     2f2:	9b 83       	std	Y+3, r25	; 0x03
     2f4:	68 e7       	ldi	r22, 0x78	; 120
     2f6:	71 e0       	ldi	r23, 0x01	; 1
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <strtok>
     300:	0e 94 5f 1a 	call	0x34be	; 0x34be <atof>
     304:	6c 83       	std	Y+4, r22	; 0x04
     306:	7d 83       	std	Y+5, r23	; 0x05
     308:	8e 83       	std	Y+6, r24	; 0x06
     30a:	9f 83       	std	Y+7, r25	; 0x07
     30c:	68 e7       	ldi	r22, 0x78	; 120
     30e:	71 e0       	ldi	r23, 0x01	; 1
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <strtok>
     318:	0e 94 5f 1a 	call	0x34be	; 0x34be <atof>
     31c:	68 87       	std	Y+8, r22	; 0x08
     31e:	79 87       	std	Y+9, r23	; 0x09
     320:	8a 87       	std	Y+10, r24	; 0x0a
     322:	9b 87       	std	Y+11, r25	; 0x0b
     324:	68 e7       	ldi	r22, 0x78	; 120
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <strtok>
     330:	0e 94 5f 1a 	call	0x34be	; 0x34be <atof>
     334:	6c 87       	std	Y+12, r22	; 0x0c
     336:	7d 87       	std	Y+13, r23	; 0x0d
     338:	8e 87       	std	Y+14, r24	; 0x0e
     33a:	9f 87       	std	Y+15, r25	; 0x0f
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <_Z11showNewDatav>:
     342:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <newData>
     346:	88 23       	and	r24, r24
     348:	21 f0       	breq	.+8      	; 0x352 <_Z11showNewDatav+0x10>
     34a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z9parseDatav>
     34e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <newData>
     352:	08 95       	ret

00000354 <_GLOBAL__sub_I_mag>:
//End of Auto generated function prototypes by Atmel Studio



/* Assign a unique ID to this sensor at the same time */
Adafruit_HMC5883_Unified mag = Adafruit_HMC5883_Unified(12345);
     354:	49 e3       	ldi	r20, 0x39	; 57
     356:	50 e3       	ldi	r21, 0x30	; 48
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	80 ef       	ldi	r24, 0xF0	; 240
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN24Adafruit_HMC5883_UnifiedC1El>
int g_offy = 20;
int g_offz = 93;
int truetemp;
uint32_t timer;

Kalman kalmanX; // Create the Kalman instances
     364:	82 ec       	ldi	r24, 0xC2	; 194
     366:	92 e0       	ldi	r25, 0x02	; 2
     368:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN6KalmanC1Ev>
Kalman kalmanY;
     36c:	8a e9       	ldi	r24, 0x9A	; 154
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN6KalmanC1Ev>
double kalAngleX, kalAngleY; // Calculated angle using a Kalman filter
float headingDegrees;

int d = 100;
int speedall = 255;
String inputString = "";         // a string to hold incoming data
     374:	61 ef       	ldi	r22, 0xF1	; 241
     376:	71 e0       	ldi	r23, 0x01	; 1
     378:	80 e6       	ldi	r24, 0x60	; 96
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	0e 94 9c 11 	call	0x2338	; 0x2338 <_ZN6StringC1EPKc>
boolean stringComplete = false;  // whether the string is complete
String newlinechar = "\n\r";
     380:	6c ed       	ldi	r22, 0xDC	; 220
     382:	71 e0       	ldi	r23, 0x01	; 1
     384:	8a e5       	ldi	r24, 0x5A	; 90
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <_ZN6StringC1EPKc>

0000038c <_GLOBAL__sub_D_mag>:
     38c:	8a e5       	ldi	r24, 0x5A	; 90
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	0e 94 2e 11 	call	0x225c	; 0x225c <_ZN6StringD1Ev>
double kalAngleX, kalAngleY; // Calculated angle using a Kalman filter
float headingDegrees;

int d = 100;
int speedall = 255;
String inputString = "";         // a string to hold incoming data
     394:	80 e6       	ldi	r24, 0x60	; 96
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	0c 94 2e 11 	jmp	0x225c	; 0x225c <_ZN6StringD1Ev>

0000039c <_Z17AccelerometerInitv>:
	pinMode(dir2PinRB, OUTPUT);
	pinMode(speedPinRB, OUTPUT);
}

void AccelerometerInit()
{
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
	Wire.beginTransmission(0x40); // address of the accelerometer
     3a0:	60 e4       	ldi	r22, 0x40	; 64
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	8e ea       	ldi	r24, 0xAE	; 174
     3a6:	93 e0       	ldi	r25, 0x03	; 3
     3a8:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire17beginTransmissionEi>
	// reset the accelerometer
	Wire.write(0x10);
     3ac:	60 e1       	ldi	r22, 0x10	; 16
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	8e ea       	ldi	r24, 0xAE	; 174
     3b2:	93 e0       	ldi	r25, 0x03	; 3
     3b4:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.write(0xB6);
     3b8:	66 eb       	ldi	r22, 0xB6	; 182
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	8e ea       	ldi	r24, 0xAE	; 174
     3be:	93 e0       	ldi	r25, 0x03	; 3
     3c0:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     3c4:	8e ea       	ldi	r24, 0xAE	; 174
     3c6:	93 e0       	ldi	r25, 0x03	; 3
     3c8:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>
	delay(10);
     3cc:	6a e0       	ldi	r22, 0x0A	; 10
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <delay>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     3d8:	60 e4       	ldi	r22, 0x40	; 64
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	8e ea       	ldi	r24, 0xAE	; 174
     3de:	93 e0       	ldi	r25, 0x03	; 3
     3e0:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire17beginTransmissionEi>
	// low pass filter, range settings
	Wire.write(0x0D);
     3e4:	6d e0       	ldi	r22, 0x0D	; 13
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	8e ea       	ldi	r24, 0xAE	; 174
     3ea:	93 e0       	ldi	r25, 0x03	; 3
     3ec:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.write(0x10);
     3f0:	60 e1       	ldi	r22, 0x10	; 16
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	8e ea       	ldi	r24, 0xAE	; 174
     3f6:	93 e0       	ldi	r25, 0x03	; 3
     3f8:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     3fc:	8e ea       	ldi	r24, 0xAE	; 174
     3fe:	93 e0       	ldi	r25, 0x03	; 3
     400:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     404:	60 e4       	ldi	r22, 0x40	; 64
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	8e ea       	ldi	r24, 0xAE	; 174
     40a:	93 e0       	ldi	r25, 0x03	; 3
     40c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x20); // read from here
     410:	60 e2       	ldi	r22, 0x20	; 32
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	8e ea       	ldi	r24, 0xAE	; 174
     416:	93 e0       	ldi	r25, 0x03	; 3
     418:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     41c:	8e ea       	ldi	r24, 0xAE	; 174
     41e:	93 e0       	ldi	r25, 0x03	; 3
     420:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 1);
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	60 e4       	ldi	r22, 0x40	; 64
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	8e ea       	ldi	r24, 0xAE	; 174
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7TwoWire11requestFromEii>
	byte data = Wire.read();
     434:	8e ea       	ldi	r24, 0xAE	; 174
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
     43c:	ec 01       	movw	r28, r24

	Wire.beginTransmission(0x40); // address of the accelerometer
     43e:	60 e4       	ldi	r22, 0x40	; 64
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	8e ea       	ldi	r24, 0xAE	; 174
     444:	93 e0       	ldi	r25, 0x03	; 3
     446:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x20);
     44a:	60 e2       	ldi	r22, 0x20	; 32
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	8e ea       	ldi	r24, 0xAE	; 174
     450:	93 e0       	ldi	r25, 0x03	; 3
     452:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	//	Wire.write(data & 0x0F); // low pass filter to 10 Hz
	Wire.write(data & 0x0F); // low pass filter to 10 Hz
     456:	be 01       	movw	r22, r28
     458:	6f 70       	andi	r22, 0x0F	; 15
     45a:	77 27       	eor	r23, r23
     45c:	8e ea       	ldi	r24, 0xAE	; 174
     45e:	93 e0       	ldi	r25, 0x03	; 3
     460:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     464:	8e ea       	ldi	r24, 0xAE	; 174
     466:	93 e0       	ldi	r25, 0x03	; 3
     468:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     46c:	60 e4       	ldi	r22, 0x40	; 64
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	8e ea       	ldi	r24, 0xAE	; 174
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x35); // read from here
     478:	65 e3       	ldi	r22, 0x35	; 53
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	8e ea       	ldi	r24, 0xAE	; 174
     47e:	93 e0       	ldi	r25, 0x03	; 3
     480:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     484:	8e ea       	ldi	r24, 0xAE	; 174
     486:	93 e0       	ldi	r25, 0x03	; 3
     488:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 1);
     48c:	41 e0       	ldi	r20, 0x01	; 1
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	60 e4       	ldi	r22, 0x40	; 64
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	8e ea       	ldi	r24, 0xAE	; 174
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     49c:	8e ea       	ldi	r24, 0xAE	; 174
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
     4a4:	ec 01       	movw	r28, r24
	Wire.beginTransmission(0x40); // address of the accelerometer
     4a6:	60 e4       	ldi	r22, 0x40	; 64
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	8e ea       	ldi	r24, 0xAE	; 174
     4ac:	93 e0       	ldi	r25, 0x03	; 3
     4ae:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x35);
     4b2:	65 e3       	ldi	r22, 0x35	; 53
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	8e ea       	ldi	r24, 0xAE	; 174
     4b8:	93 e0       	ldi	r25, 0x03	; 3
     4ba:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.write((data & 0xF1) | 0x04); // range +/- 2g
     4be:	be 01       	movw	r22, r28
     4c0:	61 7f       	andi	r22, 0xF1	; 241
     4c2:	77 27       	eor	r23, r23
     4c4:	64 60       	ori	r22, 0x04	; 4
     4c6:	8e ea       	ldi	r24, 0xAE	; 174
     4c8:	93 e0       	ldi	r25, 0x03	; 3
     4ca:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     4ce:	8e ea       	ldi	r24, 0xAE	; 174
     4d0:	93 e0       	ldi	r25, 0x03	; 3
     4d2:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(0x40); // address of the accelerometer
     4d6:	60 e4       	ldi	r22, 0x40	; 64
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	8e ea       	ldi	r24, 0xAE	; 174
     4dc:	93 e0       	ldi	r25, 0x03	; 3
     4de:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x30);
     4e2:	60 e3       	ldi	r22, 0x30	; 48
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	8e ea       	ldi	r24, 0xAE	; 174
     4e8:	93 e0       	ldi	r25, 0x03	; 3
     4ea:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	//Wire.write(0x); //
	Wire.endTransmission();
     4ee:	8e ea       	ldi	r24, 0xAE	; 174
     4f0:	93 e0       	ldi	r25, 0x03	; 3

	//Serial.println(data, BIN);

}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
	Wire.endTransmission();

	Wire.beginTransmission(0x40); // address of the accelerometer
	Wire.write(0x30);
	//Wire.write(0x); //
	Wire.endTransmission();
     4f6:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>

000004fa <_Z17AccelerometerReadv>:
	//Serial.println(data, BIN);

}

void AccelerometerRead()
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
	Wire.beginTransmission(0x40); // address of the accelerometer
     4fe:	60 e4       	ldi	r22, 0x40	; 64
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	8e ea       	ldi	r24, 0xAE	; 174
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x02); // set read pointer to data
     50a:	62 e0       	ldi	r22, 0x02	; 2
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	8e ea       	ldi	r24, 0xAE	; 174
     510:	93 e0       	ldi	r25, 0x03	; 3
     512:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     516:	8e ea       	ldi	r24, 0xAE	; 174
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 6);
     51e:	46 e0       	ldi	r20, 0x06	; 6
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	60 e4       	ldi	r22, 0x40	; 64
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	8e ea       	ldi	r24, 0xAE	; 174
     528:	93 e0       	ldi	r25, 0x03	; 3
     52a:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7TwoWire11requestFromEii>
	
	// read in the 3 axis data, each one is 16 bits
	// print the data to terminal
	
	short data = Wire.read();
     52e:	8e ea       	ldi	r24, 0xAE	; 174
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
     536:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     538:	8e ea       	ldi	r24, 0xAE	; 174
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	78 2f       	mov	r23, r24
     546:	6c 0f       	add	r22, r28
     548:	7d 1f       	adc	r23, r29
	accX = data;
     54a:	07 2e       	mov	r0, r23
     54c:	00 0c       	add	r0, r0
     54e:	88 0b       	sbc	r24, r24
     550:	99 0b       	sbc	r25, r25
     552:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__floatsisf>
     556:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <accX>
     55a:	70 93 97 02 	sts	0x0297, r23	; 0x800297 <accX+0x1>
     55e:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <accX+0x2>
     562:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <accX+0x3>
	data = Wire.read();
     566:	8e ea       	ldi	r24, 0xAE	; 174
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
     56e:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     570:	8e ea       	ldi	r24, 0xAE	; 174
     572:	93 e0       	ldi	r25, 0x03	; 3
     574:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	78 2f       	mov	r23, r24
     57e:	6c 0f       	add	r22, r28
     580:	7d 1f       	adc	r23, r29
	accY = data;
     582:	07 2e       	mov	r0, r23
     584:	00 0c       	add	r0, r0
     586:	88 0b       	sbc	r24, r24
     588:	99 0b       	sbc	r25, r25
     58a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__floatsisf>
     58e:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <accY>
     592:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <accY+0x1>
     596:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <accY+0x2>
     59a:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <accY+0x3>
	data = Wire.read();
     59e:	8e ea       	ldi	r24, 0xAE	; 174
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
     5a6:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     5a8:	8e ea       	ldi	r24, 0xAE	; 174
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	78 2f       	mov	r23, r24
     5b6:	6c 0f       	add	r22, r28
     5b8:	7d 1f       	adc	r23, r29
	accZ = data;
     5ba:	07 2e       	mov	r0, r23
     5bc:	00 0c       	add	r0, r0
     5be:	88 0b       	sbc	r24, r24
     5c0:	99 0b       	sbc	r25, r25
     5c2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__floatsisf>
     5c6:	60 93 8e 02 	sts	0x028E, r22	; 0x80028e <accZ>
     5ca:	70 93 8f 02 	sts	0x028F, r23	; 0x80028f <accZ+0x1>
     5ce:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <accZ+0x2>
     5d2:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <accZ+0x3>
	Serial.print(" , Z = ");
	Serial.print(accZ);
	Serial.println();
	#endif

}
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <_Z7writeToihh>:

	
}

//Writes val to address register on ACC
void writeTo(int DEVICE, byte address, byte val) {
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	1f 92       	push	r1
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	16 2f       	mov	r17, r22
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     5ea:	bc 01       	movw	r22, r24
     5ec:	8e ea       	ldi	r24, 0xAE	; 174
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	49 83       	std	Y+1, r20	; 0x01
     5f2:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);        // send register address
     5f6:	61 2f       	mov	r22, r17
     5f8:	8e ea       	ldi	r24, 0xAE	; 174
     5fa:	93 e0       	ldi	r25, 0x03	; 3
     5fc:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <_ZN7TwoWire5writeEh>
	Wire.write(val);        // send value to write
     600:	49 81       	ldd	r20, Y+1	; 0x01
     602:	64 2f       	mov	r22, r20
     604:	8e ea       	ldi	r24, 0xAE	; 174
     606:	93 e0       	ldi	r25, 0x03	; 3
     608:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <_ZN7TwoWire5writeEh>
	Wire.endTransmission(); //end transmission
     60c:	8e ea       	ldi	r24, 0xAE	; 174
     60e:	93 e0       	ldi	r25, 0x03	; 3
}
     610:	0f 90       	pop	r0
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
//Writes val to address register on ACC
void writeTo(int DEVICE, byte address, byte val) {
	Wire.beginTransmission(DEVICE); //start transmission to ACC
	Wire.write(address);        // send register address
	Wire.write(val);        // send value to write
	Wire.endTransmission(); //end transmission
     618:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>

0000061c <_Z8GyroInitv>:
	* sample rate to = 125Hz
	* parameter to +/- 2000 degrees/sec
	* low pass filter = 5Hz
	* no interrupt
	******************************************/
	writeTo(GYRO, G_PWR_MGM, 0x00);
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	6e e3       	ldi	r22, 0x3E	; 62
     620:	88 e6       	ldi	r24, 0x68	; 104
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z7writeToihh>
	writeTo(GYRO, G_SMPLRT_DIV, 0x07); // EB, 50, 80, 7F, DE, 23, 20, FF
     628:	47 e0       	ldi	r20, 0x07	; 7
     62a:	65 e1       	ldi	r22, 0x15	; 21
     62c:	88 e6       	ldi	r24, 0x68	; 104
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z7writeToihh>
	writeTo(GYRO, G_DLPF_FS, 0x1E); // +/- 2000 dgrs/sec, 1KHz, 1E, 19
     634:	4e e1       	ldi	r20, 0x1E	; 30
     636:	66 e1       	ldi	r22, 0x16	; 22
     638:	88 e6       	ldi	r24, 0x68	; 104
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z7writeToihh>
	writeTo(GYRO, G_INT_CFG, 0x00);
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	67 e1       	ldi	r22, 0x17	; 23
     644:	88 e6       	ldi	r24, 0x68	; 104
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <_Z7writeToihh>

0000064c <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     64c:	26 e0       	ldi	r18, 0x06	; 6
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	52 ec       	ldi	r21, 0xC2	; 194
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	88 e0       	ldi	r24, 0x08	; 8
     658:	93 e0       	ldi	r25, 0x03	; 3
     65a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN14HardwareSerial5beginEmh>
	newlinechar = "\n";
	#endif

		
	Serial.begin(115200);
	Wire.begin();
     65e:	8e ea       	ldi	r24, 0xAE	; 174
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire5beginEv>

	MotorsInit();
     666:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z10MotorsInitv>
	AccelerometerInit();
     66a:	0e 94 ce 01 	call	0x39c	; 0x39c <_Z17AccelerometerInitv>
	GyroInit();
     66e:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z8GyroInitv>
	inputString.reserve(200); // reserve 200 bytes for the inputString:
     672:	68 ec       	ldi	r22, 0xC8	; 200
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	80 e6       	ldi	r24, 0x60	; 96
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN6String7reserveEj>

	//Serial.println("start");
	timer = micros();
     67e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <micros>
     682:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <timer>
     686:	70 93 eb 02 	sts	0x02EB, r23	; 0x8002eb <timer+0x1>
     68a:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <timer+0x2>
     68e:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <timer+0x3>
     692:	08 95       	ret

00000694 <_Z8readFromihiPh>:
	Wire.write(val);        // send value to write
	Wire.endTransmission(); //end transmission
}

//reads num bytes starting from address register on ACC in to buff array
void readFrom(int DEVICE, byte address, int num, byte buff[]) {
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <_Z8readFromihiPh+0xe>
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <_Z8readFromihiPh+0x10>
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	7c 01       	movw	r14, r24
     6aa:	16 2f       	mov	r17, r22
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     6ac:	bc 01       	movw	r22, r24
     6ae:	8e ea       	ldi	r24, 0xAE	; 174
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	2b 83       	std	Y+3, r18	; 0x03
     6b4:	3c 83       	std	Y+4, r19	; 0x04
     6b6:	49 83       	std	Y+1, r20	; 0x01
     6b8:	5a 83       	std	Y+2, r21	; 0x02
     6ba:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);        //sends address to read from
     6be:	61 2f       	mov	r22, r17
     6c0:	8e ea       	ldi	r24, 0xAE	; 174
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <_ZN7TwoWire5writeEh>
	Wire.endTransmission(); //end transmission
     6c8:	8e ea       	ldi	r24, 0xAE	; 174
     6ca:	93 e0       	ldi	r25, 0x03	; 3
     6cc:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     6d0:	b7 01       	movw	r22, r14
     6d2:	8e ea       	ldi	r24, 0xAE	; 174
     6d4:	93 e0       	ldi	r25, 0x03	; 3
     6d6:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN7TwoWire17beginTransmissionEi>
	Wire.requestFrom(DEVICE, num);    // request 6 bytes from ACC
     6da:	49 81       	ldd	r20, Y+1	; 0x01
     6dc:	5a 81       	ldd	r21, Y+2	; 0x02
     6de:	b7 01       	movw	r22, r14
     6e0:	8e ea       	ldi	r24, 0xAE	; 174
     6e2:	93 e0       	ldi	r25, 0x03	; 3
     6e4:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <_ZN7TwoWire11requestFromEii>
     6e8:	2b 81       	ldd	r18, Y+3	; 0x03
     6ea:	02 2f       	mov	r16, r18
     6ec:	3c 81       	ldd	r19, Y+4	; 0x04
     6ee:	13 2f       	mov	r17, r19
	
	int i = 0;
	while(Wire.available())    //ACC may send less than requested (abnormal)
     6f0:	8e ea       	ldi	r24, 0xAE	; 174
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	0e 94 c9 14 	call	0x2992	; 0x2992 <_ZN7TwoWire9availableEv>
     6f8:	89 2b       	or	r24, r25
     6fa:	41 f0       	breq	.+16     	; 0x70c <_Z8readFromihiPh+0x78>
	{
		buff[i] = Wire.read(); // receive a byte
     6fc:	8e ea       	ldi	r24, 0xAE	; 174
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
     704:	f8 01       	movw	r30, r16
     706:	81 93       	st	Z+, r24
     708:	8f 01       	movw	r16, r30
     70a:	f2 cf       	rjmp	.-28     	; 0x6f0 <_Z8readFromihiPh+0x5c>
		i++;
	}
	Wire.endTransmission(); //end transmission
     70c:	8e ea       	ldi	r24, 0xAE	; 174
     70e:	93 e0       	ldi	r25, 0x03	; 3
}
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
	while(Wire.available())    //ACC may send less than requested (abnormal)
	{
		buff[i] = Wire.read(); // receive a byte
		i++;
	}
	Wire.endTransmission(); //end transmission
     724:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>

00000728 <_Z16getGyroscopeDataPi>:
	writeTo(GYRO, G_DLPF_FS, 0x1E); // +/- 2000 dgrs/sec, 1KHz, 1E, 19
	writeTo(GYRO, G_INT_CFG, 0x00);
}

void getGyroscopeData(int * result)
{
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	28 97       	sbiw	r28, 0x08	; 8
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	cd bf       	out	0x3d, r28	; 61
     740:	8c 01       	movw	r16, r24
	z axis MSB = 21, z axis LSB = 22
	*************************************/
	int regAddress = 0x1B;
	int temp, x, y, z;
	byte buff[G_TO_READ];
	readFrom(GYRO, regAddress, G_TO_READ, buff); //read the gyro data from the ITG3200
     742:	9e 01       	movw	r18, r28
     744:	2f 5f       	subi	r18, 0xFF	; 255
     746:	3f 4f       	sbci	r19, 0xFF	; 255
     748:	48 e0       	ldi	r20, 0x08	; 8
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	6b e1       	ldi	r22, 0x1B	; 27
     74e:	88 e6       	ldi	r24, 0x68	; 104
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 4a 03 	call	0x694	; 0x694 <_Z8readFromihiPh>
	result[0] = ((buff[2] << 8) | buff[3]) + g_offx;
     756:	8b 81       	ldd	r24, Y+3	; 0x03
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	98 2f       	mov	r25, r24
     75c:	88 27       	eor	r24, r24
     75e:	2c 81       	ldd	r18, Y+4	; 0x04
     760:	82 2b       	or	r24, r18
     762:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <g_offx>
     766:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <g_offx+0x1>
     76a:	82 0f       	add	r24, r18
     76c:	93 1f       	adc	r25, r19
     76e:	f8 01       	movw	r30, r16
     770:	91 83       	std	Z+1, r25	; 0x01
     772:	80 83       	st	Z, r24
	result[1] = ((buff[4] << 8) | buff[5]) + g_offy;
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	98 2f       	mov	r25, r24
     77a:	88 27       	eor	r24, r24
     77c:	2e 81       	ldd	r18, Y+6	; 0x06
     77e:	82 2b       	or	r24, r18
     780:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <g_offy>
     784:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <g_offy+0x1>
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	93 83       	std	Z+3, r25	; 0x03
     78e:	82 83       	std	Z+2, r24	; 0x02
	result[2] = ((buff[6] << 8) | buff[7]) + g_offz;
     790:	2f 81       	ldd	r18, Y+7	; 0x07
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	32 2f       	mov	r19, r18
     796:	22 27       	eor	r18, r18
     798:	88 85       	ldd	r24, Y+8	; 0x08
     79a:	28 2b       	or	r18, r24
     79c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_offz>
     7a0:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <g_offz+0x1>
     7a4:	28 0f       	add	r18, r24
     7a6:	39 1f       	adc	r19, r25
     7a8:	35 83       	std	Z+5, r19	; 0x05
     7aa:	24 83       	std	Z+4, r18	; 0x04
	result[3] = (buff[0] << 8) | buff[1]; // temperature
     7ac:	29 81       	ldd	r18, Y+1	; 0x01
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	32 2f       	mov	r19, r18
     7b2:	22 27       	eor	r18, r18
     7b4:	8a 81       	ldd	r24, Y+2	; 0x02
     7b6:	28 2b       	or	r18, r24
     7b8:	37 83       	std	Z+7, r19	; 0x07
     7ba:	26 83       	std	Z+6, r18	; 0x06
}
     7bc:	28 96       	adiw	r28, 0x08	; 8
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <_Z8GyroReadv>:

void GyroRead (){
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	28 97       	sbiw	r28, 0x08	; 8
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
	byte addr;
	int gyro[4];
	getGyroscopeData(gyro);
     7e6:	ce 01       	movw	r24, r28
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	0e 94 94 03 	call	0x728	; 0x728 <_Z16getGyroscopeDataPi>
	gyroX = gyro[0] / 14.375; //convert to degrees per second
     7ee:	69 81       	ldd	r22, Y+1	; 0x01
     7f0:	7a 81       	ldd	r23, Y+2	; 0x02
     7f2:	07 2e       	mov	r0, r23
     7f4:	00 0c       	add	r0, r0
     7f6:	88 0b       	sbc	r24, r24
     7f8:	99 0b       	sbc	r25, r25
     7fa:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__floatsisf>
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	46 e6       	ldi	r20, 0x66	; 102
     804:	51 e4       	ldi	r21, 0x41	; 65
     806:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
     80a:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <gyroX>
     80e:	70 93 8b 02 	sts	0x028B, r23	; 0x80028b <gyroX+0x1>
     812:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <gyroX+0x2>
     816:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <gyroX+0x3>
	gyroY = gyro[1] / 14.375;
     81a:	6b 81       	ldd	r22, Y+3	; 0x03
     81c:	7c 81       	ldd	r23, Y+4	; 0x04
     81e:	07 2e       	mov	r0, r23
     820:	00 0c       	add	r0, r0
     822:	88 0b       	sbc	r24, r24
     824:	99 0b       	sbc	r25, r25
     826:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__floatsisf>
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	46 e6       	ldi	r20, 0x66	; 102
     830:	51 e4       	ldi	r21, 0x41	; 65
     832:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
     836:	60 93 86 02 	sts	0x0286, r22	; 0x800286 <gyroY>
     83a:	70 93 87 02 	sts	0x0287, r23	; 0x800287 <gyroY+0x1>
     83e:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <gyroY+0x2>
     842:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <gyroY+0x3>
	gyroZ = gyro[2] / 14.375;
     846:	6d 81       	ldd	r22, Y+5	; 0x05
     848:	7e 81       	ldd	r23, Y+6	; 0x06
     84a:	07 2e       	mov	r0, r23
     84c:	00 0c       	add	r0, r0
     84e:	88 0b       	sbc	r24, r24
     850:	99 0b       	sbc	r25, r25
     852:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__floatsisf>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	46 e6       	ldi	r20, 0x66	; 102
     85c:	51 e4       	ldi	r21, 0x41	; 65
     85e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
     862:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <gyroZ>
     866:	70 93 83 02 	sts	0x0283, r23	; 0x800283 <gyroZ+0x1>
     86a:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <gyroZ+0x2>
     86e:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <gyroZ+0x3>
	truetemp = 35+ ((double) (gyro[3] + 13200)) / 280; // temperature
     872:	6f 81       	ldd	r22, Y+7	; 0x07
     874:	78 85       	ldd	r23, Y+8	; 0x08
     876:	60 57       	subi	r22, 0x70	; 112
     878:	7c 4c       	sbci	r23, 0xCC	; 204
     87a:	07 2e       	mov	r0, r23
     87c:	00 0c       	add	r0, r0
     87e:	88 0b       	sbc	r24, r24
     880:	99 0b       	sbc	r25, r25
     882:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__floatsisf>
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	4c e8       	ldi	r20, 0x8C	; 140
     88c:	53 e4       	ldi	r21, 0x43	; 67
     88e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	4c e0       	ldi	r20, 0x0C	; 12
     898:	52 e4       	ldi	r21, 0x42	; 66
     89a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     89e:	0e 94 c6 09 	call	0x138c	; 0x138c <__fixsfsi>
     8a2:	70 93 ef 02 	sts	0x02EF, r23	; 0x8002ef <truetemp+0x1>
     8a6:	60 93 ee 02 	sts	0x02EE, r22	; 0x8002ee <truetemp>
	Serial.println("C");
	//delay(500);
	#endif

	
}
     8aa:	28 96       	adiw	r28, 0x08	; 8
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <_Z10sensorloopi>:
	Serial.print(" RB ");
	Serial.println(speedFromPC[3]);
}

void sensorloop(int printout)
{
     8bc:	2f 92       	push	r2
     8be:	3f 92       	push	r3
     8c0:	4f 92       	push	r4
     8c2:	5f 92       	push	r5
     8c4:	6f 92       	push	r6
     8c6:	7f 92       	push	r7
     8c8:	8f 92       	push	r8
     8ca:	9f 92       	push	r9
     8cc:	af 92       	push	r10
     8ce:	bf 92       	push	r11
     8d0:	cf 92       	push	r12
     8d2:	df 92       	push	r13
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	e8 97       	sbiw	r28, 0x38	; 56
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	1c 01       	movw	r2, r24
	
	AccelerometerRead();
     8f2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_Z17AccelerometerReadv>
	GyroRead();
     8f6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_Z8GyroReadv>
	
	double dt = (double)(micros() - timer) / 1000000; // Calculate delta time
     8fa:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <micros>
     8fe:	c0 90 ea 02 	lds	r12, 0x02EA	; 0x8002ea <timer>
     902:	d0 90 eb 02 	lds	r13, 0x02EB	; 0x8002eb <timer+0x1>
     906:	e0 90 ec 02 	lds	r14, 0x02EC	; 0x8002ec <timer+0x2>
     90a:	f0 90 ed 02 	lds	r15, 0x02ED	; 0x8002ed <timer+0x3>
     90e:	6c 19       	sub	r22, r12
     910:	7d 09       	sbc	r23, r13
     912:	8e 09       	sbc	r24, r14
     914:	9f 09       	sbc	r25, r15
     916:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__floatunsisf>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	34 e2       	ldi	r19, 0x24	; 36
     91e:	44 e7       	ldi	r20, 0x74	; 116
     920:	59 e4       	ldi	r21, 0x49	; 73
     922:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
     926:	69 a7       	std	Y+41, r22	; 0x29
     928:	7a a7       	std	Y+42, r23	; 0x2a
     92a:	8b a7       	std	Y+43, r24	; 0x2b
     92c:	9c a7       	std	Y+44, r25	; 0x2c
	timer = micros();
     92e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <micros>
     932:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <timer>
     936:	70 93 eb 02 	sts	0x02EB, r23	; 0x8002eb <timer+0x1>
     93a:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <timer+0x2>
     93e:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <timer+0x3>

	// Source: http://www.freescale.com/files/sensors/doc/app_note/AN3461.pdf eq. 25 and eq. 26
	// atan2 outputs the value of -π to π (radians) - see http://en.wikipedia.org/wiki/Atan2
	// It is then converted from radians to degrees
	#ifdef RESTRICT_PITCH // Eq. 25 and 26
	double roll  = atan2(accY, accZ) * RAD_TO_DEG;
     942:	c0 90 8e 02 	lds	r12, 0x028E	; 0x80028e <accZ>
     946:	d0 90 8f 02 	lds	r13, 0x028F	; 0x80028f <accZ+0x1>
     94a:	e0 90 90 02 	lds	r14, 0x0290	; 0x800290 <accZ+0x2>
     94e:	f0 90 91 02 	lds	r15, 0x0291	; 0x800291 <accZ+0x3>
     952:	80 90 92 02 	lds	r8, 0x0292	; 0x800292 <accY>
     956:	90 90 93 02 	lds	r9, 0x0293	; 0x800293 <accY+0x1>
     95a:	a0 90 94 02 	lds	r10, 0x0294	; 0x800294 <accY+0x2>
     95e:	b0 90 95 02 	lds	r11, 0x0295	; 0x800295 <accY+0x3>
     962:	a7 01       	movw	r20, r14
     964:	96 01       	movw	r18, r12
     966:	c5 01       	movw	r24, r10
     968:	b4 01       	movw	r22, r8
     96a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <atan2>
     96e:	21 ee       	ldi	r18, 0xE1	; 225
     970:	3e e2       	ldi	r19, 0x2E	; 46
     972:	45 e6       	ldi	r20, 0x65	; 101
     974:	52 e4       	ldi	r21, 0x42	; 66
     976:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     97a:	2b 01       	movw	r4, r22
     97c:	3c 01       	movw	r6, r24
	double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
     97e:	a5 01       	movw	r20, r10
     980:	94 01       	movw	r18, r8
     982:	c5 01       	movw	r24, r10
     984:	b4 01       	movw	r22, r8
     986:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     98a:	4b 01       	movw	r8, r22
     98c:	5c 01       	movw	r10, r24
     98e:	a7 01       	movw	r20, r14
     990:	96 01       	movw	r18, r12
     992:	c7 01       	movw	r24, r14
     994:	b6 01       	movw	r22, r12
     996:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	c5 01       	movw	r24, r10
     9a0:	b4 01       	movw	r22, r8
     9a2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     9a6:	0e 94 55 0b 	call	0x16aa	; 0x16aa <sqrt>
     9aa:	9b 01       	movw	r18, r22
     9ac:	ac 01       	movw	r20, r24
     9ae:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <accX>
     9b2:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <accX+0x1>
     9b6:	a0 91 98 02 	lds	r26, 0x0298	; 0x800298 <accX+0x2>
     9ba:	b0 91 99 02 	lds	r27, 0x0299	; 0x800299 <accX+0x3>
     9be:	bc 01       	movw	r22, r24
     9c0:	cd 01       	movw	r24, r26
     9c2:	90 58       	subi	r25, 0x80	; 128
     9c4:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
     9c8:	0e 94 20 09 	call	0x1240	; 0x1240 <atan>
     9cc:	21 ee       	ldi	r18, 0xE1	; 225
     9ce:	3e e2       	ldi	r19, 0x2E	; 46
     9d0:	45 e6       	ldi	r20, 0x65	; 101
     9d2:	52 e4       	ldi	r21, 0x42	; 66
     9d4:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     9d8:	69 ab       	std	Y+49, r22	; 0x31
     9da:	7a ab       	std	Y+50, r23	; 0x32
     9dc:	8b ab       	std	Y+51, r24	; 0x33
     9de:	9c ab       	std	Y+52, r25	; 0x34
	#else // Eq. 28 and 29
	double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
	double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
	#endif

	double gyroXrate = gyroX / 131.0; // Convert to deg/s
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	43 e0       	ldi	r20, 0x03	; 3
     9e6:	53 e4       	ldi	r21, 0x43	; 67
     9e8:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <gyroX>
     9ec:	70 91 8b 02 	lds	r23, 0x028B	; 0x80028b <gyroX+0x1>
     9f0:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <gyroX+0x2>
     9f4:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <gyroX+0x3>
     9f8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
     9fc:	6d a3       	std	Y+37, r22	; 0x25
     9fe:	7e a3       	std	Y+38, r23	; 0x26
     a00:	8f a3       	std	Y+39, r24	; 0x27
     a02:	98 a7       	std	Y+40, r25	; 0x28
	double gyroYrate = gyroY / 131.0; // Convert to deg/s
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	43 e0       	ldi	r20, 0x03	; 3
     a0a:	53 e4       	ldi	r21, 0x43	; 67
     a0c:	60 91 86 02 	lds	r22, 0x0286	; 0x800286 <gyroY>
     a10:	70 91 87 02 	lds	r23, 0x0287	; 0x800287 <gyroY+0x1>
     a14:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <gyroY+0x2>
     a18:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <gyroY+0x3>
     a1c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
     a20:	4b 01       	movw	r8, r22
     a22:	5c 01       	movw	r10, r24

	#ifdef RESTRICT_PITCH
	// This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees
	if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90)) {
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	44 eb       	ldi	r20, 0xB4	; 180
     a2a:	52 ec       	ldi	r21, 0xC2	; 194
     a2c:	c3 01       	movw	r24, r6
     a2e:	b2 01       	movw	r22, r4
     a30:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
     a34:	87 ff       	sbrs	r24, 7
     a36:	10 c0       	rjmp	.+32     	; 0xa58 <__stack+0x159>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	44 eb       	ldi	r20, 0xB4	; 180
     a3e:	52 e4       	ldi	r21, 0x42	; 66
     a40:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <kalAngleX>
     a44:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <kalAngleX+0x1>
     a48:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <kalAngleX+0x2>
     a4c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <kalAngleX+0x3>
     a50:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     a54:	18 16       	cp	r1, r24
     a56:	d4 f0       	brlt	.+52     	; 0xa8c <__stack+0x18d>
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	44 eb       	ldi	r20, 0xB4	; 180
     a5e:	52 e4       	ldi	r21, 0x42	; 66
     a60:	c3 01       	movw	r24, r6
     a62:	b2 01       	movw	r22, r4
     a64:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     a68:	18 16       	cp	r1, r24
     a6a:	7c f5       	brge	.+94     	; 0xaca <__stack+0x1cb>
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	44 eb       	ldi	r20, 0xB4	; 180
     a72:	52 ec       	ldi	r21, 0xC2	; 194
     a74:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <kalAngleX>
     a78:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <kalAngleX+0x1>
     a7c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <kalAngleX+0x2>
     a80:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <kalAngleX+0x3>
     a84:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
     a88:	87 ff       	sbrs	r24, 7
     a8a:	1f c0       	rjmp	.+62     	; 0xaca <__stack+0x1cb>
		kalmanX.setAngle(roll);
     a8c:	b3 01       	movw	r22, r6
     a8e:	a2 01       	movw	r20, r4
     a90:	82 ec       	ldi	r24, 0xC2	; 194
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	0e 94 c3 14 	call	0x2986	; 0x2986 <_ZN6Kalman8setAngleEf>
		compAngleX = roll;
     a98:	40 92 76 02 	sts	0x0276, r4	; 0x800276 <compAngleX>
     a9c:	50 92 77 02 	sts	0x0277, r5	; 0x800277 <compAngleX+0x1>
     aa0:	60 92 78 02 	sts	0x0278, r6	; 0x800278 <compAngleX+0x2>
     aa4:	70 92 79 02 	sts	0x0279, r7	; 0x800279 <compAngleX+0x3>
		kalAngleX = roll;
     aa8:	40 92 6e 02 	sts	0x026E, r4	; 0x80026e <kalAngleX>
     aac:	50 92 6f 02 	sts	0x026F, r5	; 0x80026f <kalAngleX+0x1>
     ab0:	60 92 70 02 	sts	0x0270, r6	; 0x800270 <kalAngleX+0x2>
     ab4:	70 92 71 02 	sts	0x0271, r7	; 0x800271 <kalAngleX+0x3>
		gyroXangle = roll;
     ab8:	40 92 7e 02 	sts	0x027E, r4	; 0x80027e <gyroXangle>
     abc:	50 92 7f 02 	sts	0x027F, r5	; 0x80027f <gyroXangle+0x1>
     ac0:	60 92 80 02 	sts	0x0280, r6	; 0x800280 <gyroXangle+0x2>
     ac4:	70 92 81 02 	sts	0x0281, r7	; 0x800281 <gyroXangle+0x3>
     ac8:	16 c0       	rjmp	.+44     	; 0xaf6 <__stack+0x1f7>
	} else
	kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
     aca:	c9 a4       	ldd	r12, Y+41	; 0x29
     acc:	da a4       	ldd	r13, Y+42	; 0x2a
     ace:	eb a4       	ldd	r14, Y+43	; 0x2b
     ad0:	fc a4       	ldd	r15, Y+44	; 0x2c
     ad2:	0d a1       	ldd	r16, Y+37	; 0x25
     ad4:	1e a1       	ldd	r17, Y+38	; 0x26
     ad6:	2f a1       	ldd	r18, Y+39	; 0x27
     ad8:	38 a5       	ldd	r19, Y+40	; 0x28
     ada:	b3 01       	movw	r22, r6
     adc:	a2 01       	movw	r20, r4
     ade:	82 ec       	ldi	r24, 0xC2	; 194
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZN6Kalman8getAngleEfff>
     ae6:	60 93 6e 02 	sts	0x026E, r22	; 0x80026e <kalAngleX>
     aea:	70 93 6f 02 	sts	0x026F, r23	; 0x80026f <kalAngleX+0x1>
     aee:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <kalAngleX+0x2>
     af2:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <kalAngleX+0x3>

	if (abs(kalAngleX) > 90)
     af6:	c0 90 6e 02 	lds	r12, 0x026E	; 0x80026e <kalAngleX>
     afa:	d0 90 6f 02 	lds	r13, 0x026F	; 0x80026f <kalAngleX+0x1>
     afe:	e0 90 70 02 	lds	r14, 0x0270	; 0x800270 <kalAngleX+0x2>
     b02:	f0 90 71 02 	lds	r15, 0x0271	; 0x800271 <kalAngleX+0x3>
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	a9 01       	movw	r20, r18
     b0c:	c7 01       	movw	r24, r14
     b0e:	b6 01       	movw	r22, r12
     b10:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     b14:	18 16       	cp	r1, r24
     b16:	5c f4       	brge	.+22     	; 0xb2e <__stack+0x22f>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	44 eb       	ldi	r20, 0xB4	; 180
     b1e:	52 e4       	ldi	r21, 0x42	; 66
     b20:	c7 01       	movw	r24, r14
     b22:	b6 01       	movw	r22, r12
     b24:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     b28:	18 16       	cp	r1, r24
     b2a:	5c f0       	brlt	.+22     	; 0xb42 <__stack+0x243>
     b2c:	0e c0       	rjmp	.+28     	; 0xb4a <__stack+0x24b>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	44 eb       	ldi	r20, 0xB4	; 180
     b34:	52 ec       	ldi	r21, 0xC2	; 194
     b36:	c7 01       	movw	r24, r14
     b38:	b6 01       	movw	r22, r12
     b3a:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
     b3e:	87 ff       	sbrs	r24, 7
     b40:	04 c0       	rjmp	.+8      	; 0xb4a <__stack+0x24b>
	gyroYrate = -gyroYrate; // Invert rate, so it fits the restriced accelerometer reading
     b42:	b7 fa       	bst	r11, 7
     b44:	b0 94       	com	r11
     b46:	b7 f8       	bld	r11, 7
     b48:	b0 94       	com	r11
	kalAngleY = kalmanY.getAngle(pitch, gyroYrate, dt);
     b4a:	c9 a4       	ldd	r12, Y+41	; 0x29
     b4c:	da a4       	ldd	r13, Y+42	; 0x2a
     b4e:	eb a4       	ldd	r14, Y+43	; 0x2b
     b50:	fc a4       	ldd	r15, Y+44	; 0x2c
     b52:	95 01       	movw	r18, r10
     b54:	84 01       	movw	r16, r8
     b56:	49 a9       	ldd	r20, Y+49	; 0x31
     b58:	5a a9       	ldd	r21, Y+50	; 0x32
     b5a:	6b a9       	ldd	r22, Y+51	; 0x33
     b5c:	7c a9       	ldd	r23, Y+52	; 0x34
     b5e:	8a e9       	ldi	r24, 0x9A	; 154
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZN6Kalman8getAngleEfff>
     b66:	6d ab       	std	Y+53, r22	; 0x35
     b68:	7e ab       	std	Y+54, r23	; 0x36
     b6a:	8f ab       	std	Y+55, r24	; 0x37
     b6c:	98 af       	std	Y+56, r25	; 0x38
     b6e:	60 93 6a 02 	sts	0x026A, r22	; 0x80026a <kalAngleY>
     b72:	70 93 6b 02 	sts	0x026B, r23	; 0x80026b <kalAngleY+0x1>
     b76:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <kalAngleY+0x2>
     b7a:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <kalAngleY+0x3>
	if (abs(kalAngleY) > 90)
	gyroXrate = -gyroXrate; // Invert rate, so it fits the restriced accelerometer reading
	kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
	#endif

	gyroXangle += gyroXrate * dt; // Calculate gyro angle without any filter
     b7e:	29 a5       	ldd	r18, Y+41	; 0x29
     b80:	3a a5       	ldd	r19, Y+42	; 0x2a
     b82:	4b a5       	ldd	r20, Y+43	; 0x2b
     b84:	5c a5       	ldd	r21, Y+44	; 0x2c
     b86:	6d a1       	ldd	r22, Y+37	; 0x25
     b88:	7e a1       	ldd	r23, Y+38	; 0x26
     b8a:	8f a1       	ldd	r24, Y+39	; 0x27
     b8c:	98 a5       	ldd	r25, Y+40	; 0x28
     b8e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     b92:	6d a7       	std	Y+45, r22	; 0x2d
     b94:	7e a7       	std	Y+46, r23	; 0x2e
     b96:	8f a7       	std	Y+47, r24	; 0x2f
     b98:	98 ab       	std	Y+48, r25	; 0x30
     b9a:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <gyroXangle>
     b9e:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <gyroXangle+0x1>
     ba2:	40 91 80 02 	lds	r20, 0x0280	; 0x800280 <gyroXangle+0x2>
     ba6:	50 91 81 02 	lds	r21, 0x0281	; 0x800281 <gyroXangle+0x3>
     baa:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     bae:	6d a3       	std	Y+37, r22	; 0x25
     bb0:	7e a3       	std	Y+38, r23	; 0x26
     bb2:	8f a3       	std	Y+39, r24	; 0x27
     bb4:	98 a7       	std	Y+40, r25	; 0x28
     bb6:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <gyroXangle>
     bba:	70 93 7f 02 	sts	0x027F, r23	; 0x80027f <gyroXangle+0x1>
     bbe:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <gyroXangle+0x2>
     bc2:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <gyroXangle+0x3>
	gyroYangle += gyroYrate * dt;
     bc6:	29 a5       	ldd	r18, Y+41	; 0x29
     bc8:	3a a5       	ldd	r19, Y+42	; 0x2a
     bca:	4b a5       	ldd	r20, Y+43	; 0x2b
     bcc:	5c a5       	ldd	r21, Y+44	; 0x2c
     bce:	c5 01       	movw	r24, r10
     bd0:	b4 01       	movw	r22, r8
     bd2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     bd6:	6b 01       	movw	r12, r22
     bd8:	7c 01       	movw	r14, r24
     bda:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <gyroYangle>
     bde:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <gyroYangle+0x1>
     be2:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <gyroYangle+0x2>
     be6:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <gyroYangle+0x3>
     bea:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     bee:	4b 01       	movw	r8, r22
     bf0:	5c 01       	movw	r10, r24
     bf2:	60 93 7a 02 	sts	0x027A, r22	; 0x80027a <gyroYangle>
     bf6:	70 93 7b 02 	sts	0x027B, r23	; 0x80027b <gyroYangle+0x1>
     bfa:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <gyroYangle+0x2>
     bfe:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <gyroYangle+0x3>
	//gyroXangle += kalmanX.getRate() * dt; // Calculate gyro angle using the unbiased rate
	//gyroYangle += kalmanY.getRate() * dt;

	compAngleX = 0.93 * (compAngleX + gyroXrate * dt) + 0.07 * roll; // Calculate the angle using a Complimentary filter
     c02:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <compAngleX>
     c06:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <compAngleX+0x1>
     c0a:	40 91 78 02 	lds	r20, 0x0278	; 0x800278 <compAngleX+0x2>
     c0e:	50 91 79 02 	lds	r21, 0x0279	; 0x800279 <compAngleX+0x3>
     c12:	6d a5       	ldd	r22, Y+45	; 0x2d
     c14:	7e a5       	ldd	r23, Y+46	; 0x2e
     c16:	8f a5       	ldd	r24, Y+47	; 0x2f
     c18:	98 a9       	ldd	r25, Y+48	; 0x30
     c1a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     c1e:	2b e7       	ldi	r18, 0x7B	; 123
     c20:	34 e1       	ldi	r19, 0x14	; 20
     c22:	4e e6       	ldi	r20, 0x6E	; 110
     c24:	5f e3       	ldi	r21, 0x3F	; 63
     c26:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     c2a:	6d a7       	std	Y+45, r22	; 0x2d
     c2c:	7e a7       	std	Y+46, r23	; 0x2e
     c2e:	8f a7       	std	Y+47, r24	; 0x2f
     c30:	98 ab       	std	Y+48, r25	; 0x30
     c32:	29 e2       	ldi	r18, 0x29	; 41
     c34:	3c e5       	ldi	r19, 0x5C	; 92
     c36:	4f e8       	ldi	r20, 0x8F	; 143
     c38:	5d e3       	ldi	r21, 0x3D	; 61
     c3a:	c3 01       	movw	r24, r6
     c3c:	b2 01       	movw	r22, r4
     c3e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	6d a5       	ldd	r22, Y+45	; 0x2d
     c48:	7e a5       	ldd	r23, Y+46	; 0x2e
     c4a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c4c:	98 a9       	ldd	r25, Y+48	; 0x30
     c4e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     c52:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <compAngleX>
     c56:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <compAngleX+0x1>
     c5a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <compAngleX+0x2>
     c5e:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <compAngleX+0x3>
	compAngleY = 0.93 * (compAngleY + gyroYrate * dt) + 0.07 * pitch;
     c62:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <compAngleY>
     c66:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <compAngleY+0x1>
     c6a:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <compAngleY+0x2>
     c6e:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <compAngleY+0x3>
     c72:	c7 01       	movw	r24, r14
     c74:	b6 01       	movw	r22, r12
     c76:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     c7a:	2b e7       	ldi	r18, 0x7B	; 123
     c7c:	34 e1       	ldi	r19, 0x14	; 20
     c7e:	4e e6       	ldi	r20, 0x6E	; 110
     c80:	5f e3       	ldi	r21, 0x3F	; 63
     c82:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     c86:	6b 01       	movw	r12, r22
     c88:	7c 01       	movw	r14, r24
     c8a:	29 e2       	ldi	r18, 0x29	; 41
     c8c:	3c e5       	ldi	r19, 0x5C	; 92
     c8e:	4f e8       	ldi	r20, 0x8F	; 143
     c90:	5d e3       	ldi	r21, 0x3D	; 61
     c92:	69 a9       	ldd	r22, Y+49	; 0x31
     c94:	7a a9       	ldd	r23, Y+50	; 0x32
     c96:	8b a9       	ldd	r24, Y+51	; 0x33
     c98:	9c a9       	ldd	r25, Y+52	; 0x34
     c9a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     c9e:	9b 01       	movw	r18, r22
     ca0:	ac 01       	movw	r20, r24
     ca2:	c7 01       	movw	r24, r14
     ca4:	b6 01       	movw	r22, r12
     ca6:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     caa:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <compAngleY>
     cae:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <compAngleY+0x1>
     cb2:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <compAngleY+0x2>
     cb6:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <compAngleY+0x3>

	// Reset the gyro angle when it has drifted too much
	if (gyroXangle < -180 || gyroXangle > 180)
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	44 e3       	ldi	r20, 0x34	; 52
     cc0:	53 ec       	ldi	r21, 0xC3	; 195
     cc2:	6d a1       	ldd	r22, Y+37	; 0x25
     cc4:	7e a1       	ldd	r23, Y+38	; 0x26
     cc6:	8f a1       	ldd	r24, Y+39	; 0x27
     cc8:	98 a5       	ldd	r25, Y+40	; 0x28
     cca:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
     cce:	87 fd       	sbrc	r24, 7
     cd0:	0c c0       	rjmp	.+24     	; 0xcea <__stack+0x3eb>
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	44 e3       	ldi	r20, 0x34	; 52
     cd8:	53 e4       	ldi	r21, 0x43	; 67
     cda:	6d a1       	ldd	r22, Y+37	; 0x25
     cdc:	7e a1       	ldd	r23, Y+38	; 0x26
     cde:	8f a1       	ldd	r24, Y+39	; 0x27
     ce0:	98 a5       	ldd	r25, Y+40	; 0x28
     ce2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     ce6:	18 16       	cp	r1, r24
     ce8:	84 f4       	brge	.+32     	; 0xd0a <__stack+0x40b>
	gyroXangle = kalAngleX;
     cea:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <kalAngleX>
     cee:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <kalAngleX+0x1>
     cf2:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <kalAngleX+0x2>
     cf6:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <kalAngleX+0x3>
     cfa:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <gyroXangle>
     cfe:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <gyroXangle+0x1>
     d02:	a0 93 80 02 	sts	0x0280, r26	; 0x800280 <gyroXangle+0x2>
     d06:	b0 93 81 02 	sts	0x0281, r27	; 0x800281 <gyroXangle+0x3>
	if (gyroYangle < -180 || gyroYangle > 180)
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	44 e3       	ldi	r20, 0x34	; 52
     d10:	53 ec       	ldi	r21, 0xC3	; 195
     d12:	c5 01       	movw	r24, r10
     d14:	b4 01       	movw	r22, r8
     d16:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
     d1a:	87 fd       	sbrc	r24, 7
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <__stack+0x433>
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	44 e3       	ldi	r20, 0x34	; 52
     d24:	53 e4       	ldi	r21, 0x43	; 67
     d26:	c5 01       	movw	r24, r10
     d28:	b4 01       	movw	r22, r8
     d2a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     d2e:	18 16       	cp	r1, r24
     d30:	64 f4       	brge	.+24     	; 0xd4a <__stack+0x44b>
	gyroYangle = kalAngleY;
     d32:	8d a9       	ldd	r24, Y+53	; 0x35
     d34:	9e a9       	ldd	r25, Y+54	; 0x36
     d36:	af a9       	ldd	r26, Y+55	; 0x37
     d38:	b8 ad       	ldd	r27, Y+56	; 0x38
     d3a:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <gyroYangle>
     d3e:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <gyroYangle+0x1>
     d42:	a0 93 7c 02 	sts	0x027C, r26	; 0x80027c <gyroYangle+0x2>
     d46:	b0 93 7d 02 	sts	0x027D, r27	; 0x80027d <gyroYangle+0x3>



	/* Get a new sensor event */
	sensors_event_t event;
	mag.getEvent(&event);
     d4a:	be 01       	movw	r22, r28
     d4c:	6f 5f       	subi	r22, 0xFF	; 255
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
     d50:	80 ef       	ldi	r24, 0xF0	; 240
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t>
	

	// Hold the module so that Z is pointing 'up' and you can measure the heading with x&y
	// Calculate heading when the magnetometer is level, then correct for signs of axis.
	float heading = atan2(event.magnetic.y, event.magnetic.x);
     d58:	2d 89       	ldd	r18, Y+21	; 0x15
     d5a:	3e 89       	ldd	r19, Y+22	; 0x16
     d5c:	4f 89       	ldd	r20, Y+23	; 0x17
     d5e:	58 8d       	ldd	r21, Y+24	; 0x18
     d60:	69 8d       	ldd	r22, Y+25	; 0x19
     d62:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d66:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d68:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <atan2>
	// Once you have your heading, you must then add your 'Declination Angle', which is the 'Error' of the magnetic field in your location.
	// Find yours here: http://www.magnetic-declination.com/
	// Mine is: -13* 2' W, which is ~13 Degrees, or (which we need) 0.22 radians
	// If you cannot find your Declination, comment out these two lines, your compass will be slightly off.
	float declinationAngle = 0.22;
	heading += declinationAngle;
     d6c:	2e ea       	ldi	r18, 0xAE	; 174
     d6e:	37 e4       	ldi	r19, 0x47	; 71
     d70:	41 e6       	ldi	r20, 0x61	; 97
     d72:	5e e3       	ldi	r21, 0x3E	; 62
     d74:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     d78:	6b 01       	movw	r12, r22
     d7a:	7c 01       	movw	r14, r24
	
	// Correct for when signs are reversed.
	if(heading < 0)
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	a9 01       	movw	r20, r18
     d82:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
     d86:	87 ff       	sbrs	r24, 7
     d88:	0a c0       	rjmp	.+20     	; 0xd9e <__stack+0x49f>
	heading += 2*PI;
     d8a:	2b ed       	ldi	r18, 0xDB	; 219
     d8c:	3f e0       	ldi	r19, 0x0F	; 15
     d8e:	49 ec       	ldi	r20, 0xC9	; 201
     d90:	50 e4       	ldi	r21, 0x40	; 64
     d92:	c7 01       	movw	r24, r14
     d94:	b6 01       	movw	r22, r12
     d96:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     d9a:	6b 01       	movw	r12, r22
     d9c:	7c 01       	movw	r14, r24
	
	// Check for wrap due to addition of declination.
	if(heading > 2*PI)
     d9e:	2b ed       	ldi	r18, 0xDB	; 219
     da0:	3f e0       	ldi	r19, 0x0F	; 15
     da2:	49 ec       	ldi	r20, 0xC9	; 201
     da4:	50 e4       	ldi	r21, 0x40	; 64
     da6:	c7 01       	movw	r24, r14
     da8:	b6 01       	movw	r22, r12
     daa:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
     dae:	18 16       	cp	r1, r24
     db0:	54 f4       	brge	.+20     	; 0xdc6 <__stack+0x4c7>
	heading -= 2*PI;
     db2:	2b ed       	ldi	r18, 0xDB	; 219
     db4:	3f e0       	ldi	r19, 0x0F	; 15
     db6:	49 ec       	ldi	r20, 0xC9	; 201
     db8:	50 e4       	ldi	r21, 0x40	; 64
     dba:	c7 01       	movw	r24, r14
     dbc:	b6 01       	movw	r22, r12
     dbe:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
     dc2:	6b 01       	movw	r12, r22
     dc4:	7c 01       	movw	r14, r24
	
	// Convert radians to degrees for readability.
	headingDegrees = heading * 180/M_PI;
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	44 e3       	ldi	r20, 0x34	; 52
     dcc:	53 e4       	ldi	r21, 0x43	; 67
     dce:	c7 01       	movw	r24, r14
     dd0:	b6 01       	movw	r22, r12
     dd2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     dd6:	2b ed       	ldi	r18, 0xDB	; 219
     dd8:	3f e0       	ldi	r19, 0x0F	; 15
     dda:	49 e4       	ldi	r20, 0x49	; 73
     ddc:	50 e4       	ldi	r21, 0x40	; 64
     dde:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
     de2:	60 93 66 02 	sts	0x0266, r22	; 0x800266 <headingDegrees>
     de6:	70 93 67 02 	sts	0x0267, r23	; 0x800267 <headingDegrees+0x1>
     dea:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <headingDegrees+0x2>
     dee:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <headingDegrees+0x3>
	
	#endif
	
	/* Print Data */
	
	if (printout)
     df2:	23 28       	or	r2, r3
     df4:	09 f4       	brne	.+2      	; 0xdf8 <__stack+0x4f9>
     df6:	e6 c0       	rjmp	.+460    	; 0xfc4 <__stack+0x6c5>
	{
	Serial.print(accX/16384*9.80665); Serial.print(" ");
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e8       	ldi	r20, 0x80	; 128
     dfe:	58 e3       	ldi	r21, 0x38	; 56
     e00:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <accX>
     e04:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <accX+0x1>
     e08:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <accX+0x2>
     e0c:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <accX+0x3>
     e10:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     e14:	2a e0       	ldi	r18, 0x0A	; 10
     e16:	38 ee       	ldi	r19, 0xE8	; 232
     e18:	4c e1       	ldi	r20, 0x1C	; 28
     e1a:	51 e4       	ldi	r21, 0x41	; 65
     e1c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     e20:	ab 01       	movw	r20, r22
     e22:	bc 01       	movw	r22, r24
     e24:	22 e0       	ldi	r18, 0x02	; 2
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	93 e0       	ldi	r25, 0x03	; 3
     e2c:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN5Print5printEdi>
     e30:	68 e7       	ldi	r22, 0x78	; 120
     e32:	71 e0       	ldi	r23, 0x01	; 1
     e34:	88 e0       	ldi	r24, 0x08	; 8
     e36:	93 e0       	ldi	r25, 0x03	; 3
     e38:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN5Print5printEPKc>
	Serial.print(accY/16384*9.80665); Serial.print(" ");
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e8       	ldi	r20, 0x80	; 128
     e42:	58 e3       	ldi	r21, 0x38	; 56
     e44:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <accY>
     e48:	70 91 93 02 	lds	r23, 0x0293	; 0x800293 <accY+0x1>
     e4c:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <accY+0x2>
     e50:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <accY+0x3>
     e54:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     e58:	2a e0       	ldi	r18, 0x0A	; 10
     e5a:	38 ee       	ldi	r19, 0xE8	; 232
     e5c:	4c e1       	ldi	r20, 0x1C	; 28
     e5e:	51 e4       	ldi	r21, 0x41	; 65
     e60:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     e64:	ab 01       	movw	r20, r22
     e66:	bc 01       	movw	r22, r24
     e68:	22 e0       	ldi	r18, 0x02	; 2
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	88 e0       	ldi	r24, 0x08	; 8
     e6e:	93 e0       	ldi	r25, 0x03	; 3
     e70:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN5Print5printEdi>
     e74:	68 e7       	ldi	r22, 0x78	; 120
     e76:	71 e0       	ldi	r23, 0x01	; 1
     e78:	88 e0       	ldi	r24, 0x08	; 8
     e7a:	93 e0       	ldi	r25, 0x03	; 3
     e7c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN5Print5printEPKc>
	Serial.print(accZ/16384*9.80665); Serial.print(" ");
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e8       	ldi	r20, 0x80	; 128
     e86:	58 e3       	ldi	r21, 0x38	; 56
     e88:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <accZ>
     e8c:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <accZ+0x1>
     e90:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <accZ+0x2>
     e94:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <accZ+0x3>
     e98:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     e9c:	2a e0       	ldi	r18, 0x0A	; 10
     e9e:	38 ee       	ldi	r19, 0xE8	; 232
     ea0:	4c e1       	ldi	r20, 0x1C	; 28
     ea2:	51 e4       	ldi	r21, 0x41	; 65
     ea4:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
     ea8:	ab 01       	movw	r20, r22
     eaa:	bc 01       	movw	r22, r24
     eac:	22 e0       	ldi	r18, 0x02	; 2
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	93 e0       	ldi	r25, 0x03	; 3
     eb4:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN5Print5printEdi>
     eb8:	68 e7       	ldi	r22, 0x78	; 120
     eba:	71 e0       	ldi	r23, 0x01	; 1
     ebc:	88 e0       	ldi	r24, 0x08	; 8
     ebe:	93 e0       	ldi	r25, 0x03	; 3
     ec0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN5Print5printEPKc>

	Serial.print(gyroX); Serial.print(" ");
     ec4:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <gyroX>
     ec8:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <gyroX+0x1>
     ecc:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <gyroX+0x2>
     ed0:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <gyroX+0x3>
     ed4:	22 e0       	ldi	r18, 0x02	; 2
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	88 e0       	ldi	r24, 0x08	; 8
     eda:	93 e0       	ldi	r25, 0x03	; 3
     edc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN5Print5printEdi>
     ee0:	68 e7       	ldi	r22, 0x78	; 120
     ee2:	71 e0       	ldi	r23, 0x01	; 1
     ee4:	88 e0       	ldi	r24, 0x08	; 8
     ee6:	93 e0       	ldi	r25, 0x03	; 3
     ee8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN5Print5printEPKc>
	Serial.print(gyroY); Serial.print(" ");
     eec:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <gyroY>
     ef0:	50 91 87 02 	lds	r21, 0x0287	; 0x800287 <gyroY+0x1>
     ef4:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <gyroY+0x2>
     ef8:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <gyroY+0x3>
     efc:	22 e0       	ldi	r18, 0x02	; 2
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	88 e0       	ldi	r24, 0x08	; 8
     f02:	93 e0       	ldi	r25, 0x03	; 3
     f04:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN5Print5printEdi>
     f08:	68 e7       	ldi	r22, 0x78	; 120
     f0a:	71 e0       	ldi	r23, 0x01	; 1
     f0c:	88 e0       	ldi	r24, 0x08	; 8
     f0e:	93 e0       	ldi	r25, 0x03	; 3
     f10:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN5Print5printEPKc>
	Serial.print(gyroZ); Serial.print(" ");
     f14:	40 91 82 02 	lds	r20, 0x0282	; 0x800282 <gyroZ>
     f18:	50 91 83 02 	lds	r21, 0x0283	; 0x800283 <gyroZ+0x1>
     f1c:	60 91 84 02 	lds	r22, 0x0284	; 0x800284 <gyroZ+0x2>
     f20:	70 91 85 02 	lds	r23, 0x0285	; 0x800285 <gyroZ+0x3>
     f24:	22 e0       	ldi	r18, 0x02	; 2
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN5Print5printEdi>
     f30:	68 e7       	ldi	r22, 0x78	; 120
     f32:	71 e0       	ldi	r23, 0x01	; 1
     f34:	88 e0       	ldi	r24, 0x08	; 8
     f36:	93 e0       	ldi	r25, 0x03	; 3
     f38:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN5Print5printEPKc>

	Serial.print(event.magnetic.x); Serial.print(" ");
     f3c:	4d 89       	ldd	r20, Y+21	; 0x15
     f3e:	5e 89       	ldd	r21, Y+22	; 0x16
     f40:	6f 89       	ldd	r22, Y+23	; 0x17
     f42:	78 8d       	ldd	r23, Y+24	; 0x18
     f44:	22 e0       	ldi	r18, 0x02	; 2
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	88 e0       	ldi	r24, 0x08	; 8
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN5Print5printEdi>
     f50:	68 e7       	ldi	r22, 0x78	; 120
     f52:	71 e0       	ldi	r23, 0x01	; 1
     f54:	88 e0       	ldi	r24, 0x08	; 8
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN5Print5printEPKc>
	Serial.print(event.magnetic.y); Serial.print(" ");
     f5c:	49 8d       	ldd	r20, Y+25	; 0x19
     f5e:	5a 8d       	ldd	r21, Y+26	; 0x1a
     f60:	6b 8d       	ldd	r22, Y+27	; 0x1b
     f62:	7c 8d       	ldd	r23, Y+28	; 0x1c
     f64:	22 e0       	ldi	r18, 0x02	; 2
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	88 e0       	ldi	r24, 0x08	; 8
     f6a:	93 e0       	ldi	r25, 0x03	; 3
     f6c:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN5Print5printEdi>
     f70:	68 e7       	ldi	r22, 0x78	; 120
     f72:	71 e0       	ldi	r23, 0x01	; 1
     f74:	88 e0       	ldi	r24, 0x08	; 8
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN5Print5printEPKc>
	Serial.print(headingDegrees); Serial.print(" ");
     f7c:	40 91 66 02 	lds	r20, 0x0266	; 0x800266 <headingDegrees>
     f80:	50 91 67 02 	lds	r21, 0x0267	; 0x800267 <headingDegrees+0x1>
     f84:	60 91 68 02 	lds	r22, 0x0268	; 0x800268 <headingDegrees+0x2>
     f88:	70 91 69 02 	lds	r23, 0x0269	; 0x800269 <headingDegrees+0x3>
     f8c:	22 e0       	ldi	r18, 0x02	; 2
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	88 e0       	ldi	r24, 0x08	; 8
     f92:	93 e0       	ldi	r25, 0x03	; 3
     f94:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN5Print5printEdi>
     f98:	68 e7       	ldi	r22, 0x78	; 120
     f9a:	71 e0       	ldi	r23, 0x01	; 1
     f9c:	88 e0       	ldi	r24, 0x08	; 8
     f9e:	93 e0       	ldi	r25, 0x03	; 3
     fa0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN5Print5printEPKc>
	
	Serial.print(dt);
     fa4:	22 e0       	ldi	r18, 0x02	; 2
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	49 a5       	ldd	r20, Y+41	; 0x29
     faa:	5a a5       	ldd	r21, Y+42	; 0x2a
     fac:	6b a5       	ldd	r22, Y+43	; 0x2b
     fae:	7c a5       	ldd	r23, Y+44	; 0x2c
     fb0:	88 e0       	ldi	r24, 0x08	; 8
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN5Print5printEdi>
	Serial.print(newlinechar);
     fb8:	6a e5       	ldi	r22, 0x5A	; 90
     fba:	72 e0       	ldi	r23, 0x02	; 2
     fbc:	88 e0       	ldi	r24, 0x08	; 8
     fbe:	93 e0       	ldi	r25, 0x03	; 3
     fc0:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <_ZN5Print5printERK6String>
	Serial.print(" ");
	Serial.print(headingDegrees);
	Serial.println();
	#endif
	
	delay(d); // slow down output
     fc4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <d>
     fc8:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <d+0x1>
     fcc:	07 2e       	mov	r0, r23
     fce:	00 0c       	add	r0, r0
     fd0:	88 0b       	sbc	r24, r24
     fd2:	99 0b       	sbc	r25, r25
     fd4:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <delay>
}
     fd8:	e8 96       	adiw	r28, 0x38	; 56
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	bf 90       	pop	r11
     ff6:	af 90       	pop	r10
     ff8:	9f 90       	pop	r9
     ffa:	8f 90       	pop	r8
     ffc:	7f 90       	pop	r7
     ffe:	6f 90       	pop	r6
    1000:	5f 90       	pop	r5
    1002:	4f 90       	pop	r4
    1004:	3f 90       	pop	r3
    1006:	2f 90       	pop	r2
    1008:	08 95       	ret

0000100a <_Z11delaysensori>:

void delaysensor(int t){
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	8c 01       	movw	r16, r24
	for (int x = 0; x < t/d; x++)
    1014:	c0 e0       	ldi	r28, 0x00	; 0
    1016:	d0 e0       	ldi	r29, 0x00	; 0
    1018:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <d>
    101c:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <d+0x1>
    1020:	c8 01       	movw	r24, r16
    1022:	0e 94 18 18 	call	0x3030	; 0x3030 <__divmodhi4>
    1026:	c6 17       	cp	r28, r22
    1028:	d7 07       	cpc	r29, r23
    102a:	34 f4       	brge	.+12     	; 0x1038 <_Z11delaysensori+0x2e>
	{
		sensorloop(1);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_Z10sensorloopi>
	
	delay(d); // slow down output
}

void delaysensor(int t){
	for (int x = 0; x < t/d; x++)
    1034:	21 96       	adiw	r28, 0x01	; 1
    1036:	f0 cf       	rjmp	.-32     	; 0x1018 <_Z11delaysensori+0xe>
	{
		sensorloop(1);
	}
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	08 95       	ret

00001042 <_Z17recvWithEndMarkerv>:
	analogWrite(speedPin[wheelnum], int(abs(speedFromPC[wheelnum])));

}


void recvWithEndMarker() {
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
			}
		}
		else {
			receivedChars[ndx] = '\0'; // terminate the string
			ndx = 0;
			newData = true;
    1046:	c1 e0       	ldi	r28, 0x01	; 1

		if (rc != endMarker) {
			receivedChars[ndx] = rc;
			ndx++;
			if (ndx >= numChars) {
				ndx = numChars - 1;
    1048:	df e1       	ldi	r29, 0x1F	; 31
	static byte ndx = 0;
	char endMarker = '\r';
	char rc;
	
	// if (Serial.available() > 0) {
	while (Serial.available() > 0 && newData == false) {
    104a:	88 e0       	ldi	r24, 0x08	; 8
    104c:	93 e0       	ldi	r25, 0x03	; 3
    104e:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN14HardwareSerial9availableEv>
    1052:	18 16       	cp	r1, r24
    1054:	19 06       	cpc	r1, r25
    1056:	1c f5       	brge	.+70     	; 0x109e <_Z17recvWithEndMarkerv+0x5c>
    1058:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <newData>
    105c:	81 11       	cpse	r24, r1
    105e:	1f c0       	rjmp	.+62     	; 0x109e <_Z17recvWithEndMarkerv+0x5c>
		rc = Serial.read();
    1060:	88 e0       	ldi	r24, 0x08	; 8
    1062:	93 e0       	ldi	r25, 0x03	; 3
    1064:	0e 94 c8 0b 	call	0x1790	; 0x1790 <_ZN14HardwareSerial4readEv>
    1068:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <_ZZ17recvWithEndMarkervE3ndx>

		if (rc != endMarker) {
    106c:	8d 30       	cpi	r24, 0x0D	; 13
    106e:	71 f0       	breq	.+28     	; 0x108c <_Z17recvWithEndMarkerv+0x4a>
			receivedChars[ndx] = rc;
    1070:	ae 2f       	mov	r26, r30
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	a7 5d       	subi	r26, 0xD7	; 215
    1076:	bd 4f       	sbci	r27, 0xFD	; 253
    1078:	8c 93       	st	X, r24
			ndx++;
    107a:	ef 5f       	subi	r30, 0xFF	; 255
			if (ndx >= numChars) {
    107c:	e0 32       	cpi	r30, 0x20	; 32
    107e:	18 f4       	brcc	.+6      	; 0x1086 <_Z17recvWithEndMarkerv+0x44>
	while (Serial.available() > 0 && newData == false) {
		rc = Serial.read();

		if (rc != endMarker) {
			receivedChars[ndx] = rc;
			ndx++;
    1080:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <_ZZ17recvWithEndMarkervE3ndx>
    1084:	e2 cf       	rjmp	.-60     	; 0x104a <_Z17recvWithEndMarkerv+0x8>
			if (ndx >= numChars) {
				ndx = numChars - 1;
    1086:	d0 93 28 02 	sts	0x0228, r29	; 0x800228 <_ZZ17recvWithEndMarkervE3ndx>
    108a:	df cf       	rjmp	.-66     	; 0x104a <_Z17recvWithEndMarkerv+0x8>
			}
		}
		else {
			receivedChars[ndx] = '\0'; // terminate the string
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	e7 5d       	subi	r30, 0xD7	; 215
    1090:	fd 4f       	sbci	r31, 0xFD	; 253
    1092:	10 82       	st	Z, r1
			ndx = 0;
    1094:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <_ZZ17recvWithEndMarkervE3ndx>
			newData = true;
    1098:	c0 93 49 02 	sts	0x0249, r28	; 0x800249 <newData>
    109c:	d6 cf       	rjmp	.-84     	; 0x104a <_Z17recvWithEndMarkerv+0x8>
		}
	}
}
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <loop>:
		sensorloop(1);
	}
}

void loop() {
	delaysensor(100);
    10a4:	84 e6       	ldi	r24, 0x64	; 100
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 05 08 	call	0x100a	; 0x100a <_Z11delaysensori>
	d = 100;
    10ac:	84 e6       	ldi	r24, 0x64	; 100
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <d+0x1>
    10b4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <d>
	recvWithEndMarker();
    10b8:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z17recvWithEndMarkerv>
	showNewData();
    10bc:	0e 94 a1 01 	call	0x342	; 0x342 <_Z11showNewDatav>
	
	for (int x = 0; x < 4; x++)
	{
		wheeldir(x);
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 03 01 	call	0x206	; 0x206 <_Z8wheeldiri>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 03 01 	call	0x206	; 0x206 <_Z8wheeldiri>
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 03 01 	call	0x206	; 0x206 <_Z8wheeldiri>
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0c 94 03 01 	jmp	0x206	; 0x206 <_Z8wheeldiri>

000010e0 <__subsf3>:
    10e0:	50 58       	subi	r21, 0x80	; 128

000010e2 <__addsf3>:
    10e2:	bb 27       	eor	r27, r27
    10e4:	aa 27       	eor	r26, r26
    10e6:	0e 94 88 08 	call	0x1110	; 0x1110 <__addsf3x>
    10ea:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_round>
    10ee:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fp_pscA>
    10f2:	38 f0       	brcs	.+14     	; 0x1102 <__addsf3+0x20>
    10f4:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fp_pscB>
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__addsf3+0x20>
    10fa:	39 f4       	brne	.+14     	; 0x110a <__addsf3+0x28>
    10fc:	9f 3f       	cpi	r25, 0xFF	; 255
    10fe:	19 f4       	brne	.+6      	; 0x1106 <__addsf3+0x24>
    1100:	26 f4       	brtc	.+8      	; 0x110a <__addsf3+0x28>
    1102:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__fp_nan>
    1106:	0e f4       	brtc	.+2      	; 0x110a <__addsf3+0x28>
    1108:	e0 95       	com	r30
    110a:	e7 fb       	bst	r30, 7
    110c:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__fp_inf>

00001110 <__addsf3x>:
    1110:	e9 2f       	mov	r30, r25
    1112:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__fp_split3>
    1116:	58 f3       	brcs	.-42     	; 0x10ee <__addsf3+0xc>
    1118:	ba 17       	cp	r27, r26
    111a:	62 07       	cpc	r22, r18
    111c:	73 07       	cpc	r23, r19
    111e:	84 07       	cpc	r24, r20
    1120:	95 07       	cpc	r25, r21
    1122:	20 f0       	brcs	.+8      	; 0x112c <__addsf3x+0x1c>
    1124:	79 f4       	brne	.+30     	; 0x1144 <__addsf3x+0x34>
    1126:	a6 f5       	brtc	.+104    	; 0x1190 <__addsf3x+0x80>
    1128:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__fp_zero>
    112c:	0e f4       	brtc	.+2      	; 0x1130 <__addsf3x+0x20>
    112e:	e0 95       	com	r30
    1130:	0b 2e       	mov	r0, r27
    1132:	ba 2f       	mov	r27, r26
    1134:	a0 2d       	mov	r26, r0
    1136:	0b 01       	movw	r0, r22
    1138:	b9 01       	movw	r22, r18
    113a:	90 01       	movw	r18, r0
    113c:	0c 01       	movw	r0, r24
    113e:	ca 01       	movw	r24, r20
    1140:	a0 01       	movw	r20, r0
    1142:	11 24       	eor	r1, r1
    1144:	ff 27       	eor	r31, r31
    1146:	59 1b       	sub	r21, r25
    1148:	99 f0       	breq	.+38     	; 0x1170 <__addsf3x+0x60>
    114a:	59 3f       	cpi	r21, 0xF9	; 249
    114c:	50 f4       	brcc	.+20     	; 0x1162 <__addsf3x+0x52>
    114e:	50 3e       	cpi	r21, 0xE0	; 224
    1150:	68 f1       	brcs	.+90     	; 0x11ac <__addsf3x+0x9c>
    1152:	1a 16       	cp	r1, r26
    1154:	f0 40       	sbci	r31, 0x00	; 0
    1156:	a2 2f       	mov	r26, r18
    1158:	23 2f       	mov	r18, r19
    115a:	34 2f       	mov	r19, r20
    115c:	44 27       	eor	r20, r20
    115e:	58 5f       	subi	r21, 0xF8	; 248
    1160:	f3 cf       	rjmp	.-26     	; 0x1148 <__addsf3x+0x38>
    1162:	46 95       	lsr	r20
    1164:	37 95       	ror	r19
    1166:	27 95       	ror	r18
    1168:	a7 95       	ror	r26
    116a:	f0 40       	sbci	r31, 0x00	; 0
    116c:	53 95       	inc	r21
    116e:	c9 f7       	brne	.-14     	; 0x1162 <__addsf3x+0x52>
    1170:	7e f4       	brtc	.+30     	; 0x1190 <__addsf3x+0x80>
    1172:	1f 16       	cp	r1, r31
    1174:	ba 0b       	sbc	r27, r26
    1176:	62 0b       	sbc	r22, r18
    1178:	73 0b       	sbc	r23, r19
    117a:	84 0b       	sbc	r24, r20
    117c:	ba f0       	brmi	.+46     	; 0x11ac <__addsf3x+0x9c>
    117e:	91 50       	subi	r25, 0x01	; 1
    1180:	a1 f0       	breq	.+40     	; 0x11aa <__addsf3x+0x9a>
    1182:	ff 0f       	add	r31, r31
    1184:	bb 1f       	adc	r27, r27
    1186:	66 1f       	adc	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	c2 f7       	brpl	.-16     	; 0x117e <__addsf3x+0x6e>
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <__addsf3x+0x9c>
    1190:	ba 0f       	add	r27, r26
    1192:	62 1f       	adc	r22, r18
    1194:	73 1f       	adc	r23, r19
    1196:	84 1f       	adc	r24, r20
    1198:	48 f4       	brcc	.+18     	; 0x11ac <__addsf3x+0x9c>
    119a:	87 95       	ror	r24
    119c:	77 95       	ror	r23
    119e:	67 95       	ror	r22
    11a0:	b7 95       	ror	r27
    11a2:	f7 95       	ror	r31
    11a4:	9e 3f       	cpi	r25, 0xFE	; 254
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <__addsf3x+0x9a>
    11a8:	b0 cf       	rjmp	.-160    	; 0x110a <__addsf3+0x28>
    11aa:	93 95       	inc	r25
    11ac:	88 0f       	add	r24, r24
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <__addsf3x+0xa2>
    11b0:	99 27       	eor	r25, r25
    11b2:	ee 0f       	add	r30, r30
    11b4:	97 95       	ror	r25
    11b6:	87 95       	ror	r24
    11b8:	08 95       	ret
    11ba:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fp_pscA>
    11be:	60 f0       	brcs	.+24     	; 0x11d8 <__addsf3x+0xc8>
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <__addsf3x+0xb8>
    11c6:	9e ef       	ldi	r25, 0xFE	; 254
    11c8:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fp_pscB>
    11cc:	28 f0       	brcs	.+10     	; 0x11d8 <__addsf3x+0xc8>
    11ce:	40 e8       	ldi	r20, 0x80	; 128
    11d0:	51 e0       	ldi	r21, 0x01	; 1
    11d2:	71 f4       	brne	.+28     	; 0x11f0 <atan2+0x10>
    11d4:	5e ef       	ldi	r21, 0xFE	; 254
    11d6:	0c c0       	rjmp	.+24     	; 0x11f0 <atan2+0x10>
    11d8:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__fp_nan>
    11dc:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__fp_zero>

000011e0 <atan2>:
    11e0:	e9 2f       	mov	r30, r25
    11e2:	e0 78       	andi	r30, 0x80	; 128
    11e4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__fp_split3>
    11e8:	40 f3       	brcs	.-48     	; 0x11ba <__addsf3x+0xaa>
    11ea:	09 2e       	mov	r0, r25
    11ec:	05 2a       	or	r0, r21
    11ee:	b1 f3       	breq	.-20     	; 0x11dc <__addsf3x+0xcc>
    11f0:	26 17       	cp	r18, r22
    11f2:	37 07       	cpc	r19, r23
    11f4:	48 07       	cpc	r20, r24
    11f6:	59 07       	cpc	r21, r25
    11f8:	38 f0       	brcs	.+14     	; 0x1208 <atan2+0x28>
    11fa:	0e 2e       	mov	r0, r30
    11fc:	07 f8       	bld	r0, 7
    11fe:	e0 25       	eor	r30, r0
    1200:	69 f0       	breq	.+26     	; 0x121c <atan2+0x3c>
    1202:	e0 25       	eor	r30, r0
    1204:	e0 64       	ori	r30, 0x40	; 64
    1206:	0a c0       	rjmp	.+20     	; 0x121c <atan2+0x3c>
    1208:	ef 63       	ori	r30, 0x3F	; 63
    120a:	07 f8       	bld	r0, 7
    120c:	00 94       	com	r0
    120e:	07 fa       	bst	r0, 7
    1210:	db 01       	movw	r26, r22
    1212:	b9 01       	movw	r22, r18
    1214:	9d 01       	movw	r18, r26
    1216:	dc 01       	movw	r26, r24
    1218:	ca 01       	movw	r24, r20
    121a:	ad 01       	movw	r20, r26
    121c:	ef 93       	push	r30
    121e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__divsf3_pse>
    1222:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_round>
    1226:	0e 94 20 09 	call	0x1240	; 0x1240 <atan>
    122a:	5f 91       	pop	r21
    122c:	55 23       	and	r21, r21
    122e:	39 f0       	breq	.+14     	; 0x123e <atan2+0x5e>
    1230:	2b ed       	ldi	r18, 0xDB	; 219
    1232:	3f e0       	ldi	r19, 0x0F	; 15
    1234:	49 e4       	ldi	r20, 0x49	; 73
    1236:	50 fd       	sbrc	r21, 0
    1238:	49 ec       	ldi	r20, 0xC9	; 201
    123a:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__addsf3>
    123e:	08 95       	ret

00001240 <atan>:
    1240:	df 93       	push	r29
    1242:	dd 27       	eor	r29, r29
    1244:	b9 2f       	mov	r27, r25
    1246:	bf 77       	andi	r27, 0x7F	; 127
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	5f e3       	ldi	r21, 0x3F	; 63
    124c:	16 16       	cp	r1, r22
    124e:	17 06       	cpc	r1, r23
    1250:	48 07       	cpc	r20, r24
    1252:	5b 07       	cpc	r21, r27
    1254:	18 f4       	brcc	.+6      	; 0x125c <atan+0x1c>
    1256:	d9 2f       	mov	r29, r25
    1258:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <inverse>
    125c:	9f 93       	push	r25
    125e:	8f 93       	push	r24
    1260:	7f 93       	push	r23
    1262:	6f 93       	push	r22
    1264:	0e 94 95 0b 	call	0x172a	; 0x172a <square>
    1268:	e8 e6       	ldi	r30, 0x68	; 104
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__fp_powser>
    1270:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_round>
    1274:	2f 91       	pop	r18
    1276:	3f 91       	pop	r19
    1278:	4f 91       	pop	r20
    127a:	5f 91       	pop	r21
    127c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__mulsf3x>
    1280:	dd 23       	and	r29, r29
    1282:	51 f0       	breq	.+20     	; 0x1298 <atan+0x58>
    1284:	90 58       	subi	r25, 0x80	; 128
    1286:	a2 ea       	ldi	r26, 0xA2	; 162
    1288:	2a ed       	ldi	r18, 0xDA	; 218
    128a:	3f e0       	ldi	r19, 0x0F	; 15
    128c:	49 ec       	ldi	r20, 0xC9	; 201
    128e:	5f e3       	ldi	r21, 0x3F	; 63
    1290:	d0 78       	andi	r29, 0x80	; 128
    1292:	5d 27       	eor	r21, r29
    1294:	0e 94 88 08 	call	0x1110	; 0x1110 <__addsf3x>
    1298:	df 91       	pop	r29
    129a:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_round>

0000129e <__cmpsf2>:
    129e:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fp_cmp>
    12a2:	08 f4       	brcc	.+2      	; 0x12a6 <__cmpsf2+0x8>
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	08 95       	ret

000012a8 <__divsf3>:
    12a8:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__divsf3x>
    12ac:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_round>
    12b0:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fp_pscB>
    12b4:	58 f0       	brcs	.+22     	; 0x12cc <__divsf3+0x24>
    12b6:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fp_pscA>
    12ba:	40 f0       	brcs	.+16     	; 0x12cc <__divsf3+0x24>
    12bc:	29 f4       	brne	.+10     	; 0x12c8 <__divsf3+0x20>
    12be:	5f 3f       	cpi	r21, 0xFF	; 255
    12c0:	29 f0       	breq	.+10     	; 0x12cc <__divsf3+0x24>
    12c2:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__fp_inf>
    12c6:	51 11       	cpse	r21, r1
    12c8:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_szero>
    12cc:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__fp_nan>

000012d0 <__divsf3x>:
    12d0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__fp_split3>
    12d4:	68 f3       	brcs	.-38     	; 0x12b0 <__divsf3+0x8>

000012d6 <__divsf3_pse>:
    12d6:	99 23       	and	r25, r25
    12d8:	b1 f3       	breq	.-20     	; 0x12c6 <__divsf3+0x1e>
    12da:	55 23       	and	r21, r21
    12dc:	91 f3       	breq	.-28     	; 0x12c2 <__divsf3+0x1a>
    12de:	95 1b       	sub	r25, r21
    12e0:	55 0b       	sbc	r21, r21
    12e2:	bb 27       	eor	r27, r27
    12e4:	aa 27       	eor	r26, r26
    12e6:	62 17       	cp	r22, r18
    12e8:	73 07       	cpc	r23, r19
    12ea:	84 07       	cpc	r24, r20
    12ec:	38 f0       	brcs	.+14     	; 0x12fc <__divsf3_pse+0x26>
    12ee:	9f 5f       	subi	r25, 0xFF	; 255
    12f0:	5f 4f       	sbci	r21, 0xFF	; 255
    12f2:	22 0f       	add	r18, r18
    12f4:	33 1f       	adc	r19, r19
    12f6:	44 1f       	adc	r20, r20
    12f8:	aa 1f       	adc	r26, r26
    12fa:	a9 f3       	breq	.-22     	; 0x12e6 <__divsf3_pse+0x10>
    12fc:	35 d0       	rcall	.+106    	; 0x1368 <__divsf3_pse+0x92>
    12fe:	0e 2e       	mov	r0, r30
    1300:	3a f0       	brmi	.+14     	; 0x1310 <__divsf3_pse+0x3a>
    1302:	e0 e8       	ldi	r30, 0x80	; 128
    1304:	32 d0       	rcall	.+100    	; 0x136a <__divsf3_pse+0x94>
    1306:	91 50       	subi	r25, 0x01	; 1
    1308:	50 40       	sbci	r21, 0x00	; 0
    130a:	e6 95       	lsr	r30
    130c:	00 1c       	adc	r0, r0
    130e:	ca f7       	brpl	.-14     	; 0x1302 <__divsf3_pse+0x2c>
    1310:	2b d0       	rcall	.+86     	; 0x1368 <__divsf3_pse+0x92>
    1312:	fe 2f       	mov	r31, r30
    1314:	29 d0       	rcall	.+82     	; 0x1368 <__divsf3_pse+0x92>
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	88 1f       	adc	r24, r24
    131c:	bb 1f       	adc	r27, r27
    131e:	26 17       	cp	r18, r22
    1320:	37 07       	cpc	r19, r23
    1322:	48 07       	cpc	r20, r24
    1324:	ab 07       	cpc	r26, r27
    1326:	b0 e8       	ldi	r27, 0x80	; 128
    1328:	09 f0       	breq	.+2      	; 0x132c <__divsf3_pse+0x56>
    132a:	bb 0b       	sbc	r27, r27
    132c:	80 2d       	mov	r24, r0
    132e:	bf 01       	movw	r22, r30
    1330:	ff 27       	eor	r31, r31
    1332:	93 58       	subi	r25, 0x83	; 131
    1334:	5f 4f       	sbci	r21, 0xFF	; 255
    1336:	3a f0       	brmi	.+14     	; 0x1346 <__divsf3_pse+0x70>
    1338:	9e 3f       	cpi	r25, 0xFE	; 254
    133a:	51 05       	cpc	r21, r1
    133c:	78 f0       	brcs	.+30     	; 0x135c <__divsf3_pse+0x86>
    133e:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__fp_inf>
    1342:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_szero>
    1346:	5f 3f       	cpi	r21, 0xFF	; 255
    1348:	e4 f3       	brlt	.-8      	; 0x1342 <__divsf3_pse+0x6c>
    134a:	98 3e       	cpi	r25, 0xE8	; 232
    134c:	d4 f3       	brlt	.-12     	; 0x1342 <__divsf3_pse+0x6c>
    134e:	86 95       	lsr	r24
    1350:	77 95       	ror	r23
    1352:	67 95       	ror	r22
    1354:	b7 95       	ror	r27
    1356:	f7 95       	ror	r31
    1358:	9f 5f       	subi	r25, 0xFF	; 255
    135a:	c9 f7       	brne	.-14     	; 0x134e <__divsf3_pse+0x78>
    135c:	88 0f       	add	r24, r24
    135e:	91 1d       	adc	r25, r1
    1360:	96 95       	lsr	r25
    1362:	87 95       	ror	r24
    1364:	97 f9       	bld	r25, 7
    1366:	08 95       	ret
    1368:	e1 e0       	ldi	r30, 0x01	; 1
    136a:	66 0f       	add	r22, r22
    136c:	77 1f       	adc	r23, r23
    136e:	88 1f       	adc	r24, r24
    1370:	bb 1f       	adc	r27, r27
    1372:	62 17       	cp	r22, r18
    1374:	73 07       	cpc	r23, r19
    1376:	84 07       	cpc	r24, r20
    1378:	ba 07       	cpc	r27, r26
    137a:	20 f0       	brcs	.+8      	; 0x1384 <__divsf3_pse+0xae>
    137c:	62 1b       	sub	r22, r18
    137e:	73 0b       	sbc	r23, r19
    1380:	84 0b       	sbc	r24, r20
    1382:	ba 0b       	sbc	r27, r26
    1384:	ee 1f       	adc	r30, r30
    1386:	88 f7       	brcc	.-30     	; 0x136a <__divsf3_pse+0x94>
    1388:	e0 95       	com	r30
    138a:	08 95       	ret

0000138c <__fixsfsi>:
    138c:	0e 94 cd 09 	call	0x139a	; 0x139a <__fixunssfsi>
    1390:	68 94       	set
    1392:	b1 11       	cpse	r27, r1
    1394:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_szero>
    1398:	08 95       	ret

0000139a <__fixunssfsi>:
    139a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_splitA>
    139e:	88 f0       	brcs	.+34     	; 0x13c2 <__fixunssfsi+0x28>
    13a0:	9f 57       	subi	r25, 0x7F	; 127
    13a2:	98 f0       	brcs	.+38     	; 0x13ca <__fixunssfsi+0x30>
    13a4:	b9 2f       	mov	r27, r25
    13a6:	99 27       	eor	r25, r25
    13a8:	b7 51       	subi	r27, 0x17	; 23
    13aa:	b0 f0       	brcs	.+44     	; 0x13d8 <__fixunssfsi+0x3e>
    13ac:	e1 f0       	breq	.+56     	; 0x13e6 <__fixunssfsi+0x4c>
    13ae:	66 0f       	add	r22, r22
    13b0:	77 1f       	adc	r23, r23
    13b2:	88 1f       	adc	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	1a f0       	brmi	.+6      	; 0x13be <__fixunssfsi+0x24>
    13b8:	ba 95       	dec	r27
    13ba:	c9 f7       	brne	.-14     	; 0x13ae <__fixunssfsi+0x14>
    13bc:	14 c0       	rjmp	.+40     	; 0x13e6 <__fixunssfsi+0x4c>
    13be:	b1 30       	cpi	r27, 0x01	; 1
    13c0:	91 f0       	breq	.+36     	; 0x13e6 <__fixunssfsi+0x4c>
    13c2:	0e 94 ce 0a 	call	0x159c	; 0x159c <__fp_zero>
    13c6:	b1 e0       	ldi	r27, 0x01	; 1
    13c8:	08 95       	ret
    13ca:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__fp_zero>
    13ce:	67 2f       	mov	r22, r23
    13d0:	78 2f       	mov	r23, r24
    13d2:	88 27       	eor	r24, r24
    13d4:	b8 5f       	subi	r27, 0xF8	; 248
    13d6:	39 f0       	breq	.+14     	; 0x13e6 <__fixunssfsi+0x4c>
    13d8:	b9 3f       	cpi	r27, 0xF9	; 249
    13da:	cc f3       	brlt	.-14     	; 0x13ce <__fixunssfsi+0x34>
    13dc:	86 95       	lsr	r24
    13de:	77 95       	ror	r23
    13e0:	67 95       	ror	r22
    13e2:	b3 95       	inc	r27
    13e4:	d9 f7       	brne	.-10     	; 0x13dc <__fixunssfsi+0x42>
    13e6:	3e f4       	brtc	.+14     	; 0x13f6 <__fixunssfsi+0x5c>
    13e8:	90 95       	com	r25
    13ea:	80 95       	com	r24
    13ec:	70 95       	com	r23
    13ee:	61 95       	neg	r22
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	8f 4f       	sbci	r24, 0xFF	; 255
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	08 95       	ret

000013f8 <__floatunsisf>:
    13f8:	e8 94       	clt
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <__floatsisf+0x12>

000013fc <__floatsisf>:
    13fc:	97 fb       	bst	r25, 7
    13fe:	3e f4       	brtc	.+14     	; 0x140e <__floatsisf+0x12>
    1400:	90 95       	com	r25
    1402:	80 95       	com	r24
    1404:	70 95       	com	r23
    1406:	61 95       	neg	r22
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	8f 4f       	sbci	r24, 0xFF	; 255
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	99 23       	and	r25, r25
    1410:	a9 f0       	breq	.+42     	; 0x143c <__floatsisf+0x40>
    1412:	f9 2f       	mov	r31, r25
    1414:	96 e9       	ldi	r25, 0x96	; 150
    1416:	bb 27       	eor	r27, r27
    1418:	93 95       	inc	r25
    141a:	f6 95       	lsr	r31
    141c:	87 95       	ror	r24
    141e:	77 95       	ror	r23
    1420:	67 95       	ror	r22
    1422:	b7 95       	ror	r27
    1424:	f1 11       	cpse	r31, r1
    1426:	f8 cf       	rjmp	.-16     	; 0x1418 <__floatsisf+0x1c>
    1428:	fa f4       	brpl	.+62     	; 0x1468 <__floatsisf+0x6c>
    142a:	bb 0f       	add	r27, r27
    142c:	11 f4       	brne	.+4      	; 0x1432 <__floatsisf+0x36>
    142e:	60 ff       	sbrs	r22, 0
    1430:	1b c0       	rjmp	.+54     	; 0x1468 <__floatsisf+0x6c>
    1432:	6f 5f       	subi	r22, 0xFF	; 255
    1434:	7f 4f       	sbci	r23, 0xFF	; 255
    1436:	8f 4f       	sbci	r24, 0xFF	; 255
    1438:	9f 4f       	sbci	r25, 0xFF	; 255
    143a:	16 c0       	rjmp	.+44     	; 0x1468 <__floatsisf+0x6c>
    143c:	88 23       	and	r24, r24
    143e:	11 f0       	breq	.+4      	; 0x1444 <__floatsisf+0x48>
    1440:	96 e9       	ldi	r25, 0x96	; 150
    1442:	11 c0       	rjmp	.+34     	; 0x1466 <__floatsisf+0x6a>
    1444:	77 23       	and	r23, r23
    1446:	21 f0       	breq	.+8      	; 0x1450 <__floatsisf+0x54>
    1448:	9e e8       	ldi	r25, 0x8E	; 142
    144a:	87 2f       	mov	r24, r23
    144c:	76 2f       	mov	r23, r22
    144e:	05 c0       	rjmp	.+10     	; 0x145a <__floatsisf+0x5e>
    1450:	66 23       	and	r22, r22
    1452:	71 f0       	breq	.+28     	; 0x1470 <__floatsisf+0x74>
    1454:	96 e8       	ldi	r25, 0x86	; 134
    1456:	86 2f       	mov	r24, r22
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	2a f0       	brmi	.+10     	; 0x1468 <__floatsisf+0x6c>
    145e:	9a 95       	dec	r25
    1460:	66 0f       	add	r22, r22
    1462:	77 1f       	adc	r23, r23
    1464:	88 1f       	adc	r24, r24
    1466:	da f7       	brpl	.-10     	; 0x145e <__floatsisf+0x62>
    1468:	88 0f       	add	r24, r24
    146a:	96 95       	lsr	r25
    146c:	87 95       	ror	r24
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret

00001472 <__fp_cmp>:
    1472:	99 0f       	add	r25, r25
    1474:	00 08       	sbc	r0, r0
    1476:	55 0f       	add	r21, r21
    1478:	aa 0b       	sbc	r26, r26
    147a:	e0 e8       	ldi	r30, 0x80	; 128
    147c:	fe ef       	ldi	r31, 0xFE	; 254
    147e:	16 16       	cp	r1, r22
    1480:	17 06       	cpc	r1, r23
    1482:	e8 07       	cpc	r30, r24
    1484:	f9 07       	cpc	r31, r25
    1486:	c0 f0       	brcs	.+48     	; 0x14b8 <__fp_cmp+0x46>
    1488:	12 16       	cp	r1, r18
    148a:	13 06       	cpc	r1, r19
    148c:	e4 07       	cpc	r30, r20
    148e:	f5 07       	cpc	r31, r21
    1490:	98 f0       	brcs	.+38     	; 0x14b8 <__fp_cmp+0x46>
    1492:	62 1b       	sub	r22, r18
    1494:	73 0b       	sbc	r23, r19
    1496:	84 0b       	sbc	r24, r20
    1498:	95 0b       	sbc	r25, r21
    149a:	39 f4       	brne	.+14     	; 0x14aa <__fp_cmp+0x38>
    149c:	0a 26       	eor	r0, r26
    149e:	61 f0       	breq	.+24     	; 0x14b8 <__fp_cmp+0x46>
    14a0:	23 2b       	or	r18, r19
    14a2:	24 2b       	or	r18, r20
    14a4:	25 2b       	or	r18, r21
    14a6:	21 f4       	brne	.+8      	; 0x14b0 <__fp_cmp+0x3e>
    14a8:	08 95       	ret
    14aa:	0a 26       	eor	r0, r26
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <__fp_cmp+0x3e>
    14ae:	a1 40       	sbci	r26, 0x01	; 1
    14b0:	a6 95       	lsr	r26
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	81 1d       	adc	r24, r1
    14b6:	81 1d       	adc	r24, r1
    14b8:	08 95       	ret

000014ba <__fp_inf>:
    14ba:	97 f9       	bld	r25, 7
    14bc:	9f 67       	ori	r25, 0x7F	; 127
    14be:	80 e8       	ldi	r24, 0x80	; 128
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	08 95       	ret

000014c6 <__fp_nan>:
    14c6:	9f ef       	ldi	r25, 0xFF	; 255
    14c8:	80 ec       	ldi	r24, 0xC0	; 192
    14ca:	08 95       	ret

000014cc <__fp_powser>:
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	1f 93       	push	r17
    14d2:	0f 93       	push	r16
    14d4:	ff 92       	push	r15
    14d6:	ef 92       	push	r14
    14d8:	df 92       	push	r13
    14da:	7b 01       	movw	r14, r22
    14dc:	8c 01       	movw	r16, r24
    14de:	68 94       	set
    14e0:	06 c0       	rjmp	.+12     	; 0x14ee <__fp_powser+0x22>
    14e2:	da 2e       	mov	r13, r26
    14e4:	ef 01       	movw	r28, r30
    14e6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__mulsf3x>
    14ea:	fe 01       	movw	r30, r28
    14ec:	e8 94       	clt
    14ee:	a5 91       	lpm	r26, Z+
    14f0:	25 91       	lpm	r18, Z+
    14f2:	35 91       	lpm	r19, Z+
    14f4:	45 91       	lpm	r20, Z+
    14f6:	55 91       	lpm	r21, Z+
    14f8:	a6 f3       	brts	.-24     	; 0x14e2 <__fp_powser+0x16>
    14fa:	ef 01       	movw	r28, r30
    14fc:	0e 94 88 08 	call	0x1110	; 0x1110 <__addsf3x>
    1500:	fe 01       	movw	r30, r28
    1502:	97 01       	movw	r18, r14
    1504:	a8 01       	movw	r20, r16
    1506:	da 94       	dec	r13
    1508:	69 f7       	brne	.-38     	; 0x14e4 <__fp_powser+0x18>
    150a:	df 90       	pop	r13
    150c:	ef 90       	pop	r14
    150e:	ff 90       	pop	r15
    1510:	0f 91       	pop	r16
    1512:	1f 91       	pop	r17
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <__fp_pscA>:
    151a:	00 24       	eor	r0, r0
    151c:	0a 94       	dec	r0
    151e:	16 16       	cp	r1, r22
    1520:	17 06       	cpc	r1, r23
    1522:	18 06       	cpc	r1, r24
    1524:	09 06       	cpc	r0, r25
    1526:	08 95       	ret

00001528 <__fp_pscB>:
    1528:	00 24       	eor	r0, r0
    152a:	0a 94       	dec	r0
    152c:	12 16       	cp	r1, r18
    152e:	13 06       	cpc	r1, r19
    1530:	14 06       	cpc	r1, r20
    1532:	05 06       	cpc	r0, r21
    1534:	08 95       	ret

00001536 <__fp_round>:
    1536:	09 2e       	mov	r0, r25
    1538:	03 94       	inc	r0
    153a:	00 0c       	add	r0, r0
    153c:	11 f4       	brne	.+4      	; 0x1542 <__fp_round+0xc>
    153e:	88 23       	and	r24, r24
    1540:	52 f0       	brmi	.+20     	; 0x1556 <__fp_round+0x20>
    1542:	bb 0f       	add	r27, r27
    1544:	40 f4       	brcc	.+16     	; 0x1556 <__fp_round+0x20>
    1546:	bf 2b       	or	r27, r31
    1548:	11 f4       	brne	.+4      	; 0x154e <__fp_round+0x18>
    154a:	60 ff       	sbrs	r22, 0
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <__fp_round+0x20>
    154e:	6f 5f       	subi	r22, 0xFF	; 255
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	08 95       	ret

00001558 <__fp_split3>:
    1558:	57 fd       	sbrc	r21, 7
    155a:	90 58       	subi	r25, 0x80	; 128
    155c:	44 0f       	add	r20, r20
    155e:	55 1f       	adc	r21, r21
    1560:	59 f0       	breq	.+22     	; 0x1578 <__fp_splitA+0x10>
    1562:	5f 3f       	cpi	r21, 0xFF	; 255
    1564:	71 f0       	breq	.+28     	; 0x1582 <__fp_splitA+0x1a>
    1566:	47 95       	ror	r20

00001568 <__fp_splitA>:
    1568:	88 0f       	add	r24, r24
    156a:	97 fb       	bst	r25, 7
    156c:	99 1f       	adc	r25, r25
    156e:	61 f0       	breq	.+24     	; 0x1588 <__fp_splitA+0x20>
    1570:	9f 3f       	cpi	r25, 0xFF	; 255
    1572:	79 f0       	breq	.+30     	; 0x1592 <__fp_splitA+0x2a>
    1574:	87 95       	ror	r24
    1576:	08 95       	ret
    1578:	12 16       	cp	r1, r18
    157a:	13 06       	cpc	r1, r19
    157c:	14 06       	cpc	r1, r20
    157e:	55 1f       	adc	r21, r21
    1580:	f2 cf       	rjmp	.-28     	; 0x1566 <__fp_split3+0xe>
    1582:	46 95       	lsr	r20
    1584:	f1 df       	rcall	.-30     	; 0x1568 <__fp_splitA>
    1586:	08 c0       	rjmp	.+16     	; 0x1598 <__fp_splitA+0x30>
    1588:	16 16       	cp	r1, r22
    158a:	17 06       	cpc	r1, r23
    158c:	18 06       	cpc	r1, r24
    158e:	99 1f       	adc	r25, r25
    1590:	f1 cf       	rjmp	.-30     	; 0x1574 <__fp_splitA+0xc>
    1592:	86 95       	lsr	r24
    1594:	71 05       	cpc	r23, r1
    1596:	61 05       	cpc	r22, r1
    1598:	08 94       	sec
    159a:	08 95       	ret

0000159c <__fp_zero>:
    159c:	e8 94       	clt

0000159e <__fp_szero>:
    159e:	bb 27       	eor	r27, r27
    15a0:	66 27       	eor	r22, r22
    15a2:	77 27       	eor	r23, r23
    15a4:	cb 01       	movw	r24, r22
    15a6:	97 f9       	bld	r25, 7
    15a8:	08 95       	ret

000015aa <__gesf2>:
    15aa:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fp_cmp>
    15ae:	08 f4       	brcc	.+2      	; 0x15b2 <__gesf2+0x8>
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	08 95       	ret

000015b4 <inverse>:
    15b4:	9b 01       	movw	r18, r22
    15b6:	ac 01       	movw	r20, r24
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	80 e8       	ldi	r24, 0x80	; 128
    15be:	9f e3       	ldi	r25, 0x3F	; 63
    15c0:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__divsf3>

000015c4 <__mulsf3>:
    15c4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__mulsf3x>
    15c8:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__fp_round>
    15cc:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fp_pscA>
    15d0:	38 f0       	brcs	.+14     	; 0x15e0 <__mulsf3+0x1c>
    15d2:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fp_pscB>
    15d6:	20 f0       	brcs	.+8      	; 0x15e0 <__mulsf3+0x1c>
    15d8:	95 23       	and	r25, r21
    15da:	11 f0       	breq	.+4      	; 0x15e0 <__mulsf3+0x1c>
    15dc:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__fp_inf>
    15e0:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__fp_nan>
    15e4:	11 24       	eor	r1, r1
    15e6:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_szero>

000015ea <__mulsf3x>:
    15ea:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__fp_split3>
    15ee:	70 f3       	brcs	.-36     	; 0x15cc <__mulsf3+0x8>

000015f0 <__mulsf3_pse>:
    15f0:	95 9f       	mul	r25, r21
    15f2:	c1 f3       	breq	.-16     	; 0x15e4 <__mulsf3+0x20>
    15f4:	95 0f       	add	r25, r21
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	55 1f       	adc	r21, r21
    15fa:	62 9f       	mul	r22, r18
    15fc:	f0 01       	movw	r30, r0
    15fe:	72 9f       	mul	r23, r18
    1600:	bb 27       	eor	r27, r27
    1602:	f0 0d       	add	r31, r0
    1604:	b1 1d       	adc	r27, r1
    1606:	63 9f       	mul	r22, r19
    1608:	aa 27       	eor	r26, r26
    160a:	f0 0d       	add	r31, r0
    160c:	b1 1d       	adc	r27, r1
    160e:	aa 1f       	adc	r26, r26
    1610:	64 9f       	mul	r22, r20
    1612:	66 27       	eor	r22, r22
    1614:	b0 0d       	add	r27, r0
    1616:	a1 1d       	adc	r26, r1
    1618:	66 1f       	adc	r22, r22
    161a:	82 9f       	mul	r24, r18
    161c:	22 27       	eor	r18, r18
    161e:	b0 0d       	add	r27, r0
    1620:	a1 1d       	adc	r26, r1
    1622:	62 1f       	adc	r22, r18
    1624:	73 9f       	mul	r23, r19
    1626:	b0 0d       	add	r27, r0
    1628:	a1 1d       	adc	r26, r1
    162a:	62 1f       	adc	r22, r18
    162c:	83 9f       	mul	r24, r19
    162e:	a0 0d       	add	r26, r0
    1630:	61 1d       	adc	r22, r1
    1632:	22 1f       	adc	r18, r18
    1634:	74 9f       	mul	r23, r20
    1636:	33 27       	eor	r19, r19
    1638:	a0 0d       	add	r26, r0
    163a:	61 1d       	adc	r22, r1
    163c:	23 1f       	adc	r18, r19
    163e:	84 9f       	mul	r24, r20
    1640:	60 0d       	add	r22, r0
    1642:	21 1d       	adc	r18, r1
    1644:	82 2f       	mov	r24, r18
    1646:	76 2f       	mov	r23, r22
    1648:	6a 2f       	mov	r22, r26
    164a:	11 24       	eor	r1, r1
    164c:	9f 57       	subi	r25, 0x7F	; 127
    164e:	50 40       	sbci	r21, 0x00	; 0
    1650:	9a f0       	brmi	.+38     	; 0x1678 <__mulsf3_pse+0x88>
    1652:	f1 f0       	breq	.+60     	; 0x1690 <__mulsf3_pse+0xa0>
    1654:	88 23       	and	r24, r24
    1656:	4a f0       	brmi	.+18     	; 0x166a <__mulsf3_pse+0x7a>
    1658:	ee 0f       	add	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	bb 1f       	adc	r27, r27
    165e:	66 1f       	adc	r22, r22
    1660:	77 1f       	adc	r23, r23
    1662:	88 1f       	adc	r24, r24
    1664:	91 50       	subi	r25, 0x01	; 1
    1666:	50 40       	sbci	r21, 0x00	; 0
    1668:	a9 f7       	brne	.-22     	; 0x1654 <__mulsf3_pse+0x64>
    166a:	9e 3f       	cpi	r25, 0xFE	; 254
    166c:	51 05       	cpc	r21, r1
    166e:	80 f0       	brcs	.+32     	; 0x1690 <__mulsf3_pse+0xa0>
    1670:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__fp_inf>
    1674:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_szero>
    1678:	5f 3f       	cpi	r21, 0xFF	; 255
    167a:	e4 f3       	brlt	.-8      	; 0x1674 <__mulsf3_pse+0x84>
    167c:	98 3e       	cpi	r25, 0xE8	; 232
    167e:	d4 f3       	brlt	.-12     	; 0x1674 <__mulsf3_pse+0x84>
    1680:	86 95       	lsr	r24
    1682:	77 95       	ror	r23
    1684:	67 95       	ror	r22
    1686:	b7 95       	ror	r27
    1688:	f7 95       	ror	r31
    168a:	e7 95       	ror	r30
    168c:	9f 5f       	subi	r25, 0xFF	; 255
    168e:	c1 f7       	brne	.-16     	; 0x1680 <__mulsf3_pse+0x90>
    1690:	fe 2b       	or	r31, r30
    1692:	88 0f       	add	r24, r24
    1694:	91 1d       	adc	r25, r1
    1696:	96 95       	lsr	r25
    1698:	87 95       	ror	r24
    169a:	97 f9       	bld	r25, 7
    169c:	08 95       	ret
    169e:	19 f4       	brne	.+6      	; 0x16a6 <__mulsf3_pse+0xb6>
    16a0:	16 f4       	brtc	.+4      	; 0x16a6 <__mulsf3_pse+0xb6>
    16a2:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__fp_nan>
    16a6:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__fp_mpack>

000016aa <sqrt>:
    16aa:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_splitA>
    16ae:	b8 f3       	brcs	.-18     	; 0x169e <__mulsf3_pse+0xae>
    16b0:	99 23       	and	r25, r25
    16b2:	c9 f3       	breq	.-14     	; 0x16a6 <__mulsf3_pse+0xb6>
    16b4:	b6 f3       	brts	.-20     	; 0x16a2 <__mulsf3_pse+0xb2>
    16b6:	9f 57       	subi	r25, 0x7F	; 127
    16b8:	55 0b       	sbc	r21, r21
    16ba:	87 ff       	sbrs	r24, 7
    16bc:	0e 94 a7 0b 	call	0x174e	; 0x174e <__fp_norm2>
    16c0:	00 24       	eor	r0, r0
    16c2:	a0 e6       	ldi	r26, 0x60	; 96
    16c4:	40 ea       	ldi	r20, 0xA0	; 160
    16c6:	90 01       	movw	r18, r0
    16c8:	80 58       	subi	r24, 0x80	; 128
    16ca:	56 95       	lsr	r21
    16cc:	97 95       	ror	r25
    16ce:	28 f4       	brcc	.+10     	; 0x16da <sqrt+0x30>
    16d0:	80 5c       	subi	r24, 0xC0	; 192
    16d2:	66 0f       	add	r22, r22
    16d4:	77 1f       	adc	r23, r23
    16d6:	88 1f       	adc	r24, r24
    16d8:	20 f0       	brcs	.+8      	; 0x16e2 <sqrt+0x38>
    16da:	26 17       	cp	r18, r22
    16dc:	37 07       	cpc	r19, r23
    16de:	48 07       	cpc	r20, r24
    16e0:	30 f4       	brcc	.+12     	; 0x16ee <sqrt+0x44>
    16e2:	62 1b       	sub	r22, r18
    16e4:	73 0b       	sbc	r23, r19
    16e6:	84 0b       	sbc	r24, r20
    16e8:	20 29       	or	r18, r0
    16ea:	31 29       	or	r19, r1
    16ec:	4a 2b       	or	r20, r26
    16ee:	a6 95       	lsr	r26
    16f0:	17 94       	ror	r1
    16f2:	07 94       	ror	r0
    16f4:	20 25       	eor	r18, r0
    16f6:	31 25       	eor	r19, r1
    16f8:	4a 27       	eor	r20, r26
    16fa:	58 f7       	brcc	.-42     	; 0x16d2 <sqrt+0x28>
    16fc:	66 0f       	add	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	20 f0       	brcs	.+8      	; 0x170c <sqrt+0x62>
    1704:	26 17       	cp	r18, r22
    1706:	37 07       	cpc	r19, r23
    1708:	48 07       	cpc	r20, r24
    170a:	30 f4       	brcc	.+12     	; 0x1718 <sqrt+0x6e>
    170c:	62 0b       	sbc	r22, r18
    170e:	73 0b       	sbc	r23, r19
    1710:	84 0b       	sbc	r24, r20
    1712:	20 0d       	add	r18, r0
    1714:	31 1d       	adc	r19, r1
    1716:	41 1d       	adc	r20, r1
    1718:	a0 95       	com	r26
    171a:	81 f7       	brne	.-32     	; 0x16fc <sqrt+0x52>
    171c:	b9 01       	movw	r22, r18
    171e:	84 2f       	mov	r24, r20
    1720:	91 58       	subi	r25, 0x81	; 129
    1722:	88 0f       	add	r24, r24
    1724:	96 95       	lsr	r25
    1726:	87 95       	ror	r24
    1728:	08 95       	ret

0000172a <square>:
    172a:	9b 01       	movw	r18, r22
    172c:	ac 01       	movw	r20, r24
    172e:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__mulsf3>

00001732 <__fp_mpack>:
    1732:	9f 3f       	cpi	r25, 0xFF	; 255
    1734:	31 f0       	breq	.+12     	; 0x1742 <__fp_mpack_finite+0xc>

00001736 <__fp_mpack_finite>:
    1736:	91 50       	subi	r25, 0x01	; 1
    1738:	20 f4       	brcc	.+8      	; 0x1742 <__fp_mpack_finite+0xc>
    173a:	87 95       	ror	r24
    173c:	77 95       	ror	r23
    173e:	67 95       	ror	r22
    1740:	b7 95       	ror	r27
    1742:	88 0f       	add	r24, r24
    1744:	91 1d       	adc	r25, r1
    1746:	96 95       	lsr	r25
    1748:	87 95       	ror	r24
    174a:	97 f9       	bld	r25, 7
    174c:	08 95       	ret

0000174e <__fp_norm2>:
    174e:	91 50       	subi	r25, 0x01	; 1
    1750:	50 40       	sbci	r21, 0x00	; 0
    1752:	66 0f       	add	r22, r22
    1754:	77 1f       	adc	r23, r23
    1756:	88 1f       	adc	r24, r24
    1758:	d2 f7       	brpl	.-12     	; 0x174e <__fp_norm2>
    175a:	08 95       	ret

0000175c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    175c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    175e:	91 8d       	ldd	r25, Z+25	; 0x19
    1760:	22 8d       	ldd	r18, Z+26	; 0x1a
    1762:	89 2f       	mov	r24, r25
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	80 5c       	subi	r24, 0xC0	; 192
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
    176a:	82 1b       	sub	r24, r18
    176c:	91 09       	sbc	r25, r1
}
    176e:	8f 73       	andi	r24, 0x3F	; 63
    1770:	99 27       	eor	r25, r25
    1772:	08 95       	ret

00001774 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1774:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1776:	91 8d       	ldd	r25, Z+25	; 0x19
    1778:	82 8d       	ldd	r24, Z+26	; 0x1a
    177a:	98 17       	cp	r25, r24
    177c:	31 f0       	breq	.+12     	; 0x178a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    177e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1780:	e8 0f       	add	r30, r24
    1782:	f1 1d       	adc	r31, r1
    1784:	85 8d       	ldd	r24, Z+29	; 0x1d
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    178a:	8f ef       	ldi	r24, 0xFF	; 255
    178c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    178e:	08 95       	ret

00001790 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1790:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1792:	91 8d       	ldd	r25, Z+25	; 0x19
    1794:	82 8d       	ldd	r24, Z+26	; 0x1a
    1796:	98 17       	cp	r25, r24
    1798:	61 f0       	breq	.+24     	; 0x17b2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    179a:	82 8d       	ldd	r24, Z+26	; 0x1a
    179c:	df 01       	movw	r26, r30
    179e:	a8 0f       	add	r26, r24
    17a0:	b1 1d       	adc	r27, r1
    17a2:	5d 96       	adiw	r26, 0x1d	; 29
    17a4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    17a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    17a8:	9f 5f       	subi	r25, 0xFF	; 255
    17aa:	9f 73       	andi	r25, 0x3F	; 63
    17ac:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    17b6:	08 95       	ret

000017b8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    17b8:	81 e3       	ldi	r24, 0x31	; 49
    17ba:	9d e0       	ldi	r25, 0x0D	; 13
    17bc:	89 2b       	or	r24, r25
    17be:	49 f0       	breq	.+18     	; 0x17d2 <_Z14serialEventRunv+0x1a>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	89 2b       	or	r24, r25
    17c6:	29 f0       	breq	.+10     	; 0x17d2 <_Z14serialEventRunv+0x1a>
    17c8:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_Z17Serial0_availablev>
    17cc:	81 11       	cpse	r24, r1
    17ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    17d2:	08 95       	ret

000017d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    17d4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    17d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    17d8:	df 01       	movw	r26, r30
    17da:	a8 0f       	add	r26, r24
    17dc:	b1 1d       	adc	r27, r1
    17de:	a3 5a       	subi	r26, 0xA3	; 163
    17e0:	bf 4f       	sbci	r27, 0xFF	; 255
    17e2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    17e4:	84 8d       	ldd	r24, Z+28	; 0x1c
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	8f 73       	andi	r24, 0x3F	; 63
    17ec:	99 27       	eor	r25, r25
    17ee:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    17f0:	a6 89       	ldd	r26, Z+22	; 0x16
    17f2:	b7 89       	ldd	r27, Z+23	; 0x17
    17f4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    17f6:	a0 89       	ldd	r26, Z+16	; 0x10
    17f8:	b1 89       	ldd	r27, Z+17	; 0x11
    17fa:	8c 91       	ld	r24, X
    17fc:	80 64       	ori	r24, 0x40	; 64
    17fe:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1800:	93 8d       	ldd	r25, Z+27	; 0x1b
    1802:	84 8d       	ldd	r24, Z+28	; 0x1c
    1804:	98 13       	cpse	r25, r24
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1808:	02 88       	ldd	r0, Z+18	; 0x12
    180a:	f3 89       	ldd	r31, Z+19	; 0x13
    180c:	e0 2d       	mov	r30, r0
    180e:	80 81       	ld	r24, Z
    1810:	8f 7d       	andi	r24, 0xDF	; 223
    1812:	80 83       	st	Z, r24
    1814:	08 95       	ret

00001816 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    181c:	88 8d       	ldd	r24, Y+24	; 0x18
    181e:	88 23       	and	r24, r24
    1820:	c9 f0       	breq	.+50     	; 0x1854 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1822:	ea 89       	ldd	r30, Y+18	; 0x12
    1824:	fb 89       	ldd	r31, Y+19	; 0x13
    1826:	80 81       	ld	r24, Z
    1828:	85 fd       	sbrc	r24, 5
    182a:	05 c0       	rjmp	.+10     	; 0x1836 <_ZN14HardwareSerial5flushEv+0x20>
    182c:	a8 89       	ldd	r26, Y+16	; 0x10
    182e:	b9 89       	ldd	r27, Y+17	; 0x11
    1830:	8c 91       	ld	r24, X
    1832:	86 fd       	sbrc	r24, 6
    1834:	0f c0       	rjmp	.+30     	; 0x1854 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	07 fc       	sbrc	r0, 7
    183a:	f5 cf       	rjmp	.-22     	; 0x1826 <_ZN14HardwareSerial5flushEv+0x10>
    183c:	80 81       	ld	r24, Z
    183e:	85 ff       	sbrs	r24, 5
    1840:	f2 cf       	rjmp	.-28     	; 0x1826 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1842:	a8 89       	ldd	r26, Y+16	; 0x10
    1844:	b9 89       	ldd	r27, Y+17	; 0x11
    1846:	8c 91       	ld	r24, X
    1848:	85 ff       	sbrs	r24, 5
    184a:	ed cf       	rjmp	.-38     	; 0x1826 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    184c:	ce 01       	movw	r24, r28
    184e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1852:	e7 cf       	rjmp	.-50     	; 0x1822 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret

0000185a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	ec 01       	movw	r28, r24
  _written = true;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    186c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    186e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1870:	98 13       	cpse	r25, r24
    1872:	05 c0       	rjmp	.+10     	; 0x187e <_ZN14HardwareSerial5writeEh+0x24>
    1874:	e8 89       	ldd	r30, Y+16	; 0x10
    1876:	f9 89       	ldd	r31, Y+17	; 0x11
    1878:	80 81       	ld	r24, Z
    187a:	85 fd       	sbrc	r24, 5
    187c:	24 c0       	rjmp	.+72     	; 0x18c6 <_ZN14HardwareSerial5writeEh+0x6c>
    187e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1880:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1882:	10 e0       	ldi	r17, 0x00	; 0
    1884:	0f 5f       	subi	r16, 0xFF	; 255
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	0f 73       	andi	r16, 0x3F	; 63
    188a:	11 27       	eor	r17, r17
    188c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    188e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1890:	e8 12       	cpse	r14, r24
    1892:	0c c0       	rjmp	.+24     	; 0x18ac <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	07 fc       	sbrc	r0, 7
    1898:	fa cf       	rjmp	.-12     	; 0x188e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    189a:	e8 89       	ldd	r30, Y+16	; 0x10
    189c:	f9 89       	ldd	r31, Y+17	; 0x11
    189e:	80 81       	ld	r24, Z
    18a0:	85 ff       	sbrs	r24, 5
    18a2:	f5 cf       	rjmp	.-22     	; 0x188e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    18a4:	ce 01       	movw	r24, r28
    18a6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    18aa:	f1 cf       	rjmp	.-30     	; 0x188e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    18ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ae:	fe 01       	movw	r30, r28
    18b0:	e8 0f       	add	r30, r24
    18b2:	f1 1d       	adc	r31, r1
    18b4:	e3 5a       	subi	r30, 0xA3	; 163
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    18ba:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    18bc:	ea 89       	ldd	r30, Y+18	; 0x12
    18be:	fb 89       	ldd	r31, Y+19	; 0x13
    18c0:	80 81       	ld	r24, Z
    18c2:	80 62       	ori	r24, 0x20	; 32
    18c4:	07 c0       	rjmp	.+14     	; 0x18d4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    18c6:	ee 89       	ldd	r30, Y+22	; 0x16
    18c8:	ff 89       	ldd	r31, Y+23	; 0x17
    18ca:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    18cc:	e8 89       	ldd	r30, Y+16	; 0x10
    18ce:	f9 89       	ldd	r31, Y+17	; 0x11
    18d0:	80 81       	ld	r24, Z
    18d2:	80 64       	ori	r24, 0x40	; 64
    18d4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	08 95       	ret

000018e8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    18e8:	cf 92       	push	r12
    18ea:	df 92       	push	r13
    18ec:	ef 92       	push	r14
    18ee:	ff 92       	push	r15
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	ec 01       	movw	r28, r24
    18f8:	6a 01       	movw	r12, r20
    18fa:	7b 01       	movw	r14, r22
    18fc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    18fe:	e8 89       	ldd	r30, Y+16	; 0x10
    1900:	f9 89       	ldd	r31, Y+17	; 0x11
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1906:	41 15       	cp	r20, r1
    1908:	51 4e       	sbci	r21, 0xE1	; 225
    190a:	61 05       	cpc	r22, r1
    190c:	71 05       	cpc	r23, r1
    190e:	b1 f0       	breq	.+44     	; 0x193c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	79 e0       	ldi	r23, 0x09	; 9
    1914:	8d e3       	ldi	r24, 0x3D	; 61
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	a7 01       	movw	r20, r14
    191a:	96 01       	movw	r18, r12
    191c:	0e 94 2c 18 	call	0x3058	; 0x3058 <__udivmodsi4>
    1920:	da 01       	movw	r26, r20
    1922:	c9 01       	movw	r24, r18
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	a1 09       	sbc	r26, r1
    1928:	b1 09       	sbc	r27, r1
    192a:	b6 95       	lsr	r27
    192c:	a7 95       	ror	r26
    192e:	97 95       	ror	r25
    1930:	87 95       	ror	r24
    1932:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1934:	41 15       	cp	r20, r1
    1936:	80 e1       	ldi	r24, 0x10	; 16
    1938:	58 07       	cpc	r21, r24
    193a:	a8 f0       	brcs	.+42     	; 0x1966 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    193c:	e8 89       	ldd	r30, Y+16	; 0x10
    193e:	f9 89       	ldd	r31, Y+17	; 0x11
    1940:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1942:	60 e8       	ldi	r22, 0x80	; 128
    1944:	74 e8       	ldi	r23, 0x84	; 132
    1946:	8e e1       	ldi	r24, 0x1E	; 30
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a7 01       	movw	r20, r14
    194c:	96 01       	movw	r18, r12
    194e:	0e 94 2c 18 	call	0x3058	; 0x3058 <__udivmodsi4>
    1952:	ba 01       	movw	r22, r20
    1954:	a9 01       	movw	r20, r18
    1956:	41 50       	subi	r20, 0x01	; 1
    1958:	51 09       	sbc	r21, r1
    195a:	61 09       	sbc	r22, r1
    195c:	71 09       	sbc	r23, r1
    195e:	76 95       	lsr	r23
    1960:	67 95       	ror	r22
    1962:	57 95       	ror	r21
    1964:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1966:	ec 85       	ldd	r30, Y+12	; 0x0c
    1968:	fd 85       	ldd	r31, Y+13	; 0x0d
    196a:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    196c:	ee 85       	ldd	r30, Y+14	; 0x0e
    196e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1970:	40 83       	st	Z, r20

  _written = false;
    1972:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1974:	ec 89       	ldd	r30, Y+20	; 0x14
    1976:	fd 89       	ldd	r31, Y+21	; 0x15
    1978:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    197a:	ea 89       	ldd	r30, Y+18	; 0x12
    197c:	fb 89       	ldd	r31, Y+19	; 0x13
    197e:	80 81       	ld	r24, Z
    1980:	80 61       	ori	r24, 0x10	; 16
    1982:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1984:	ea 89       	ldd	r30, Y+18	; 0x12
    1986:	fb 89       	ldd	r31, Y+19	; 0x13
    1988:	80 81       	ld	r24, Z
    198a:	88 60       	ori	r24, 0x08	; 8
    198c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    198e:	ea 89       	ldd	r30, Y+18	; 0x12
    1990:	fb 89       	ldd	r31, Y+19	; 0x13
    1992:	80 81       	ld	r24, Z
    1994:	80 68       	ori	r24, 0x80	; 128
    1996:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1998:	ea 89       	ldd	r30, Y+18	; 0x12
    199a:	fb 89       	ldd	r31, Y+19	; 0x13
    199c:	80 81       	ld	r24, Z
    199e:	8f 7d       	andi	r24, 0xDF	; 223
    19a0:	80 83       	st	Z, r24
}
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	ff 90       	pop	r15
    19aa:	ef 90       	pop	r14
    19ac:	df 90       	pop	r13
    19ae:	cf 90       	pop	r12
    19b0:	08 95       	ret

000019b2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    19b2:	1f 92       	push	r1
    19b4:	0f 92       	push	r0
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	0f 92       	push	r0
    19ba:	11 24       	eor	r1, r1
    19bc:	2f 93       	push	r18
    19be:	8f 93       	push	r24
    19c0:	9f 93       	push	r25
    19c2:	ef 93       	push	r30
    19c4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    19c6:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <Serial+0x10>
    19ca:	f0 91 19 03 	lds	r31, 0x0319	; 0x800319 <Serial+0x11>
    19ce:	80 81       	ld	r24, Z
    19d0:	e0 91 1e 03 	lds	r30, 0x031E	; 0x80031e <Serial+0x16>
    19d4:	f0 91 1f 03 	lds	r31, 0x031F	; 0x80031f <Serial+0x17>
    19d8:	82 fd       	sbrc	r24, 2
    19da:	12 c0       	rjmp	.+36     	; 0x1a00 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    19dc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    19de:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <Serial+0x19>
    19e2:	8f 5f       	subi	r24, 0xFF	; 255
    19e4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    19e6:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <Serial+0x1a>
    19ea:	82 17       	cp	r24, r18
    19ec:	51 f0       	breq	.+20     	; 0x1a02 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    19ee:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <Serial+0x19>
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	e8 5f       	subi	r30, 0xF8	; 248
    19f6:	fc 4f       	sbci	r31, 0xFC	; 252
    19f8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    19fa:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <Serial+0x19>
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1a00:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1a02:	ff 91       	pop	r31
    1a04:	ef 91       	pop	r30
    1a06:	9f 91       	pop	r25
    1a08:	8f 91       	pop	r24
    1a0a:	2f 91       	pop	r18
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti

00001a16 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1a16:	1f 92       	push	r1
    1a18:	0f 92       	push	r0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	0f 92       	push	r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	2f 93       	push	r18
    1a22:	3f 93       	push	r19
    1a24:	4f 93       	push	r20
    1a26:	5f 93       	push	r21
    1a28:	6f 93       	push	r22
    1a2a:	7f 93       	push	r23
    1a2c:	8f 93       	push	r24
    1a2e:	9f 93       	push	r25
    1a30:	af 93       	push	r26
    1a32:	bf 93       	push	r27
    1a34:	ef 93       	push	r30
    1a36:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1a38:	88 e0       	ldi	r24, 0x08	; 8
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1a40:	ff 91       	pop	r31
    1a42:	ef 91       	pop	r30
    1a44:	bf 91       	pop	r27
    1a46:	af 91       	pop	r26
    1a48:	9f 91       	pop	r25
    1a4a:	8f 91       	pop	r24
    1a4c:	7f 91       	pop	r23
    1a4e:	6f 91       	pop	r22
    1a50:	5f 91       	pop	r21
    1a52:	4f 91       	pop	r20
    1a54:	3f 91       	pop	r19
    1a56:	2f 91       	pop	r18
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	0f 90       	pop	r0
    1a5e:	1f 90       	pop	r1
    1a60:	18 95       	reti

00001a62 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1a62:	88 e0       	ldi	r24, 0x08	; 8
    1a64:	93 e0       	ldi	r25, 0x03	; 3
    1a66:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN14HardwareSerial9availableEv>
    1a6a:	21 e0       	ldi	r18, 0x01	; 1
    1a6c:	89 2b       	or	r24, r25
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <_Z17Serial0_availablev+0x10>
    1a70:	20 e0       	ldi	r18, 0x00	; 0
}
    1a72:	82 2f       	mov	r24, r18
    1a74:	08 95       	ret

00001a76 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1a76:	e8 e0       	ldi	r30, 0x08	; 8
    1a78:	f3 e0       	ldi	r31, 0x03	; 3
    1a7a:	13 82       	std	Z+3, r1	; 0x03
    1a7c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1a7e:	88 ee       	ldi	r24, 0xE8	; 232
    1a80:	93 e0       	ldi	r25, 0x03	; 3
    1a82:	a0 e0       	ldi	r26, 0x00	; 0
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	84 83       	std	Z+4, r24	; 0x04
    1a88:	95 83       	std	Z+5, r25	; 0x05
    1a8a:	a6 83       	std	Z+6, r26	; 0x06
    1a8c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1a8e:	83 ee       	ldi	r24, 0xE3	; 227
    1a90:	91 e0       	ldi	r25, 0x01	; 1
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	80 83       	st	Z, r24
    1a96:	85 ec       	ldi	r24, 0xC5	; 197
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	95 87       	std	Z+13, r25	; 0x0d
    1a9c:	84 87       	std	Z+12, r24	; 0x0c
    1a9e:	84 ec       	ldi	r24, 0xC4	; 196
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	97 87       	std	Z+15, r25	; 0x0f
    1aa4:	86 87       	std	Z+14, r24	; 0x0e
    1aa6:	80 ec       	ldi	r24, 0xC0	; 192
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	91 8b       	std	Z+17, r25	; 0x11
    1aac:	80 8b       	std	Z+16, r24	; 0x10
    1aae:	81 ec       	ldi	r24, 0xC1	; 193
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	93 8b       	std	Z+19, r25	; 0x13
    1ab4:	82 8b       	std	Z+18, r24	; 0x12
    1ab6:	82 ec       	ldi	r24, 0xC2	; 194
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	95 8b       	std	Z+21, r25	; 0x15
    1abc:	84 8b       	std	Z+20, r24	; 0x14
    1abe:	86 ec       	ldi	r24, 0xC6	; 198
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	97 8b       	std	Z+23, r25	; 0x17
    1ac4:	86 8b       	std	Z+22, r24	; 0x16
    1ac6:	11 8e       	std	Z+25, r1	; 0x19
    1ac8:	12 8e       	std	Z+26, r1	; 0x1a
    1aca:	13 8e       	std	Z+27, r1	; 0x1b
    1acc:	14 8e       	std	Z+28, r1	; 0x1c
    1ace:	08 95       	ret

00001ad0 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    1ad0:	08 95       	ret

00001ad2 <main>:

int main(void)
{
	init();
    1ad2:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <init>

	initVariant();
    1ad6:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1ada:	0e 94 26 03 	call	0x64c	; 0x64c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1ade:	cc ed       	ldi	r28, 0xDC	; 220
    1ae0:	db e0       	ldi	r29, 0x0B	; 11
#endif
	
	setup();
    
	for (;;) {
		loop();
    1ae2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <loop>
		if (serialEventRun) serialEventRun();
    1ae6:	20 97       	sbiw	r28, 0x00	; 0
    1ae8:	e1 f3       	breq	.-8      	; 0x1ae2 <main+0x10>
    1aea:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <_Z14serialEventRunv>
    1aee:	f9 cf       	rjmp	.-14     	; 0x1ae2 <main+0x10>

00001af0 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1af0:	cf 92       	push	r12
    1af2:	df 92       	push	r13
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	6c 01       	movw	r12, r24
    1b02:	7a 01       	movw	r14, r20
    1b04:	8b 01       	movw	r16, r22
    1b06:	c0 e0       	ldi	r28, 0x00	; 0
    1b08:	d0 e0       	ldi	r29, 0x00	; 0
    1b0a:	ce 15       	cp	r28, r14
    1b0c:	df 05       	cpc	r29, r15
    1b0e:	89 f0       	breq	.+34     	; 0x1b32 <_ZN5Print5writeEPKhj+0x42>
    1b10:	d8 01       	movw	r26, r16
    1b12:	6d 91       	ld	r22, X+
    1b14:	8d 01       	movw	r16, r26
    1b16:	d6 01       	movw	r26, r12
    1b18:	ed 91       	ld	r30, X+
    1b1a:	fc 91       	ld	r31, X
    1b1c:	01 90       	ld	r0, Z+
    1b1e:	f0 81       	ld	r31, Z
    1b20:	e0 2d       	mov	r30, r0
    1b22:	c6 01       	movw	r24, r12
    1b24:	09 95       	icall
    1b26:	89 2b       	or	r24, r25
    1b28:	11 f4       	brne	.+4      	; 0x1b2e <_ZN5Print5writeEPKhj+0x3e>
    1b2a:	7e 01       	movw	r14, r28
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <_ZN5Print5writeEPKhj+0x42>
    1b2e:	21 96       	adiw	r28, 0x01	; 1
    1b30:	ec cf       	rjmp	.-40     	; 0x1b0a <_ZN5Print5writeEPKhj+0x1a>
    1b32:	c7 01       	movw	r24, r14
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	ff 90       	pop	r15
    1b3e:	ef 90       	pop	r14
    1b40:	df 90       	pop	r13
    1b42:	cf 90       	pop	r12
    1b44:	08 95       	ret

00001b46 <_ZN5Print5writeEPKc>:
    1b46:	61 15       	cp	r22, r1
    1b48:	71 05       	cpc	r23, r1
    1b4a:	79 f0       	breq	.+30     	; 0x1b6a <_ZN5Print5writeEPKc+0x24>
    1b4c:	fb 01       	movw	r30, r22
    1b4e:	01 90       	ld	r0, Z+
    1b50:	00 20       	and	r0, r0
    1b52:	e9 f7       	brne	.-6      	; 0x1b4e <_ZN5Print5writeEPKc+0x8>
    1b54:	31 97       	sbiw	r30, 0x01	; 1
    1b56:	af 01       	movw	r20, r30
    1b58:	46 1b       	sub	r20, r22
    1b5a:	57 0b       	sbc	r21, r23
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	ed 91       	ld	r30, X+
    1b60:	fc 91       	ld	r31, X
    1b62:	02 80       	ldd	r0, Z+2	; 0x02
    1b64:	f3 81       	ldd	r31, Z+3	; 0x03
    1b66:	e0 2d       	mov	r30, r0
    1b68:	09 94       	ijmp
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	08 95       	ret

00001b70 <_ZN5Print5printERK6String>:
    1b70:	dc 01       	movw	r26, r24
    1b72:	ed 91       	ld	r30, X+
    1b74:	fc 91       	ld	r31, X
    1b76:	db 01       	movw	r26, r22
    1b78:	14 96       	adiw	r26, 0x04	; 4
    1b7a:	4d 91       	ld	r20, X+
    1b7c:	5c 91       	ld	r21, X
    1b7e:	15 97       	sbiw	r26, 0x05	; 5
    1b80:	6d 91       	ld	r22, X+
    1b82:	7c 91       	ld	r23, X
    1b84:	02 80       	ldd	r0, Z+2	; 0x02
    1b86:	f3 81       	ldd	r31, Z+3	; 0x03
    1b88:	e0 2d       	mov	r30, r0
    1b8a:	09 94       	ijmp

00001b8c <_ZN5Print5printEPKc>:
    1b8c:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <_ZN5Print5writeEPKc>

00001b90 <_ZN5Print5printEc>:
    1b90:	dc 01       	movw	r26, r24
    1b92:	ed 91       	ld	r30, X+
    1b94:	fc 91       	ld	r31, X
    1b96:	01 90       	ld	r0, Z+
    1b98:	f0 81       	ld	r31, Z
    1b9a:	e0 2d       	mov	r30, r0
    1b9c:	09 94       	ijmp

00001b9e <_ZN5Print11printNumberEmh>:
    1b9e:	8f 92       	push	r8
    1ba0:	9f 92       	push	r9
    1ba2:	af 92       	push	r10
    1ba4:	bf 92       	push	r11
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	a1 97       	sbiw	r28, 0x21	; 33
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	7c 01       	movw	r14, r24
    1bc8:	d4 2e       	mov	r13, r20
    1bca:	c5 2e       	mov	r12, r21
    1bcc:	db 01       	movw	r26, r22
    1bce:	19 a2       	std	Y+33, r1	; 0x21
    1bd0:	22 30       	cpi	r18, 0x02	; 2
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <_ZN5Print11printNumberEmh+0x38>
    1bd4:	2a e0       	ldi	r18, 0x0A	; 10
    1bd6:	8e 01       	movw	r16, r28
    1bd8:	0f 5d       	subi	r16, 0xDF	; 223
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
    1bdc:	82 2e       	mov	r8, r18
    1bde:	91 2c       	mov	r9, r1
    1be0:	a1 2c       	mov	r10, r1
    1be2:	b1 2c       	mov	r11, r1
    1be4:	6d 2d       	mov	r22, r13
    1be6:	7c 2d       	mov	r23, r12
    1be8:	cd 01       	movw	r24, r26
    1bea:	a5 01       	movw	r20, r10
    1bec:	94 01       	movw	r18, r8
    1bee:	0e 94 2c 18 	call	0x3058	; 0x3058 <__udivmodsi4>
    1bf2:	d2 2e       	mov	r13, r18
    1bf4:	c3 2e       	mov	r12, r19
    1bf6:	da 01       	movw	r26, r20
    1bf8:	01 50       	subi	r16, 0x01	; 1
    1bfa:	11 09       	sbc	r17, r1
    1bfc:	6a 30       	cpi	r22, 0x0A	; 10
    1bfe:	71 05       	cpc	r23, r1
    1c00:	81 05       	cpc	r24, r1
    1c02:	91 05       	cpc	r25, r1
    1c04:	10 f4       	brcc	.+4      	; 0x1c0a <_ZN5Print11printNumberEmh+0x6c>
    1c06:	60 5d       	subi	r22, 0xD0	; 208
    1c08:	01 c0       	rjmp	.+2      	; 0x1c0c <_ZN5Print11printNumberEmh+0x6e>
    1c0a:	69 5c       	subi	r22, 0xC9	; 201
    1c0c:	f8 01       	movw	r30, r16
    1c0e:	60 83       	st	Z, r22
    1c10:	23 2b       	or	r18, r19
    1c12:	24 2b       	or	r18, r20
    1c14:	25 2b       	or	r18, r21
    1c16:	31 f7       	brne	.-52     	; 0x1be4 <_ZN5Print11printNumberEmh+0x46>
    1c18:	b8 01       	movw	r22, r16
    1c1a:	c7 01       	movw	r24, r14
    1c1c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <_ZN5Print5writeEPKc>
    1c20:	a1 96       	adiw	r28, 0x21	; 33
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	9f 90       	pop	r9
    1c42:	8f 90       	pop	r8
    1c44:	08 95       	ret

00001c46 <_ZN5Print5printEli>:
    1c46:	cf 92       	push	r12
    1c48:	df 92       	push	r13
    1c4a:	ef 92       	push	r14
    1c4c:	ff 92       	push	r15
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	ec 01       	movw	r28, r24
    1c58:	6a 01       	movw	r12, r20
    1c5a:	7b 01       	movw	r14, r22
    1c5c:	21 15       	cp	r18, r1
    1c5e:	31 05       	cpc	r19, r1
    1c60:	79 f4       	brne	.+30     	; 0x1c80 <_ZN5Print5printEli+0x3a>
    1c62:	e8 81       	ld	r30, Y
    1c64:	f9 81       	ldd	r31, Y+1	; 0x01
    1c66:	01 90       	ld	r0, Z+
    1c68:	f0 81       	ld	r31, Z
    1c6a:	e0 2d       	mov	r30, r0
    1c6c:	64 2f       	mov	r22, r20
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	ff 90       	pop	r15
    1c78:	ef 90       	pop	r14
    1c7a:	df 90       	pop	r13
    1c7c:	cf 90       	pop	r12
    1c7e:	09 94       	ijmp
    1c80:	2a 30       	cpi	r18, 0x0A	; 10
    1c82:	31 05       	cpc	r19, r1
    1c84:	e9 f4       	brne	.+58     	; 0x1cc0 <_ZN5Print5printEli+0x7a>
    1c86:	77 ff       	sbrs	r23, 7
    1c88:	1a c0       	rjmp	.+52     	; 0x1cbe <_ZN5Print5printEli+0x78>
    1c8a:	6d e2       	ldi	r22, 0x2D	; 45
    1c8c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_ZN5Print5printEc>
    1c90:	8c 01       	movw	r16, r24
    1c92:	44 27       	eor	r20, r20
    1c94:	55 27       	eor	r21, r21
    1c96:	ba 01       	movw	r22, r20
    1c98:	4c 19       	sub	r20, r12
    1c9a:	5d 09       	sbc	r21, r13
    1c9c:	6e 09       	sbc	r22, r14
    1c9e:	7f 09       	sbc	r23, r15
    1ca0:	2a e0       	ldi	r18, 0x0A	; 10
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_ZN5Print11printNumberEmh>
    1ca8:	80 0f       	add	r24, r16
    1caa:	91 1f       	adc	r25, r17
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	df 90       	pop	r13
    1cba:	cf 90       	pop	r12
    1cbc:	08 95       	ret
    1cbe:	2a e0       	ldi	r18, 0x0A	; 10
    1cc0:	b7 01       	movw	r22, r14
    1cc2:	a6 01       	movw	r20, r12
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	ff 90       	pop	r15
    1cd0:	ef 90       	pop	r14
    1cd2:	df 90       	pop	r13
    1cd4:	cf 90       	pop	r12
    1cd6:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <_ZN5Print11printNumberEmh>

00001cda <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1cda:	4f 92       	push	r4
    1cdc:	5f 92       	push	r5
    1cde:	6f 92       	push	r6
    1ce0:	7f 92       	push	r7
    1ce2:	8f 92       	push	r8
    1ce4:	9f 92       	push	r9
    1ce6:	af 92       	push	r10
    1ce8:	bf 92       	push	r11
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	ec 01       	movw	r28, r24
    1cf8:	6a 01       	movw	r12, r20
    1cfa:	7b 01       	movw	r14, r22
    1cfc:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1cfe:	9a 01       	movw	r18, r20
    1d00:	ab 01       	movw	r20, r22
    1d02:	c7 01       	movw	r24, r14
    1d04:	b6 01       	movw	r22, r12
    1d06:	0e 94 13 18 	call	0x3026	; 0x3026 <__unordsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	19 f0       	breq	.+6      	; 0x1d14 <_ZN5Print10printFloatEdh+0x3a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1d0e:	62 ef       	ldi	r22, 0xF2	; 242
    1d10:	71 e0       	ldi	r23, 0x01	; 1
    1d12:	27 c0       	rjmp	.+78     	; 0x1d62 <_ZN5Print10printFloatEdh+0x88>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1d14:	26 01       	movw	r4, r12
    1d16:	37 01       	movw	r6, r14
    1d18:	e8 94       	clt
    1d1a:	77 f8       	bld	r7, 7
    1d1c:	2f ef       	ldi	r18, 0xFF	; 255
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	5f e7       	ldi	r21, 0x7F	; 127
    1d24:	c3 01       	movw	r24, r6
    1d26:	b2 01       	movw	r22, r4
    1d28:	0e 94 13 18 	call	0x3026	; 0x3026 <__unordsf2>
    1d2c:	81 11       	cpse	r24, r1
    1d2e:	0d c0       	rjmp	.+26     	; 0x1d4a <_ZN5Print10printFloatEdh+0x70>
    1d30:	2f ef       	ldi	r18, 0xFF	; 255
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	5f e7       	ldi	r21, 0x7F	; 127
    1d38:	c3 01       	movw	r24, r6
    1d3a:	b2 01       	movw	r22, r4
    1d3c:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	1c f4       	brge	.+6      	; 0x1d4a <_ZN5Print10printFloatEdh+0x70>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1d44:	66 ef       	ldi	r22, 0xF6	; 246
    1d46:	71 e0       	ldi	r23, 0x01	; 1
    1d48:	0c c0       	rjmp	.+24     	; 0x1d62 <_ZN5Print10printFloatEdh+0x88>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1d4a:	2f ef       	ldi	r18, 0xFF	; 255
    1d4c:	3f ef       	ldi	r19, 0xFF	; 255
    1d4e:	4f e7       	ldi	r20, 0x7F	; 127
    1d50:	5f e4       	ldi	r21, 0x4F	; 79
    1d52:	c7 01       	movw	r24, r14
    1d54:	b6 01       	movw	r22, r12
    1d56:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__gesf2>
    1d5a:	18 16       	cp	r1, r24
    1d5c:	9c f4       	brge	.+38     	; 0x1d84 <_ZN5Print10printFloatEdh+0xaa>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1d5e:	6a ef       	ldi	r22, 0xFA	; 250
    1d60:	71 e0       	ldi	r23, 0x01	; 1
    1d62:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	ff 90       	pop	r15
    1d6a:	ef 90       	pop	r14
    1d6c:	df 90       	pop	r13
    1d6e:	cf 90       	pop	r12
    1d70:	bf 90       	pop	r11
    1d72:	af 90       	pop	r10
    1d74:	9f 90       	pop	r9
    1d76:	8f 90       	pop	r8
    1d78:	7f 90       	pop	r7
    1d7a:	6f 90       	pop	r6
    1d7c:	5f 90       	pop	r5
    1d7e:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1d80:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1d84:	2f ef       	ldi	r18, 0xFF	; 255
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	4f e7       	ldi	r20, 0x7F	; 127
    1d8a:	5f ec       	ldi	r21, 0xCF	; 207
    1d8c:	c7 01       	movw	r24, r14
    1d8e:	b6 01       	movw	r22, r12
    1d90:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
    1d94:	87 fd       	sbrc	r24, 7
    1d96:	e3 cf       	rjmp	.-58     	; 0x1d5e <_ZN5Print10printFloatEdh+0x84>
  
  // Handle negative numbers
  if (number < 0.0)
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	a9 01       	movw	r20, r18
    1d9e:	c7 01       	movw	r24, r14
    1da0:	b6 01       	movw	r22, r12
    1da2:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
    1da6:	87 ff       	sbrs	r24, 7
    1da8:	0a c0       	rjmp	.+20     	; 0x1dbe <_ZN5Print10printFloatEdh+0xe4>
  {
     n += print('-');
    1daa:	6d e2       	ldi	r22, 0x2D	; 45
    1dac:	ce 01       	movw	r24, r28
    1dae:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_ZN5Print5printEc>
    1db2:	4c 01       	movw	r8, r24
     number = -number;
    1db4:	f7 fa       	bst	r15, 7
    1db6:	f0 94       	com	r15
    1db8:	f7 f8       	bld	r15, 7
    1dba:	f0 94       	com	r15
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <_ZN5Print10printFloatEdh+0xe8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1dbe:	81 2c       	mov	r8, r1
    1dc0:	91 2c       	mov	r9, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1dc2:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1dcc:	ab 14       	cp	r10, r11
    1dce:	41 f0       	breq	.+16     	; 0x1de0 <_ZN5Print10printFloatEdh+0x106>
    rounding /= 10.0;
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e2       	ldi	r20, 0x20	; 32
    1dd6:	51 e4       	ldi	r21, 0x41	; 65
    1dd8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1ddc:	a3 94       	inc	r10
    1dde:	f6 cf       	rjmp	.-20     	; 0x1dcc <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
  
  number += rounding;
    1de0:	9b 01       	movw	r18, r22
    1de2:	ac 01       	movw	r20, r24
    1de4:	c7 01       	movw	r24, r14
    1de6:	b6 01       	movw	r22, r12
    1de8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
    1dec:	2b 01       	movw	r4, r22
    1dee:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1df0:	0e 94 cd 09 	call	0x139a	; 0x139a <__fixunssfsi>
    1df4:	6b 01       	movw	r12, r22
    1df6:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    1df8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__floatunsisf>
    1dfc:	9b 01       	movw	r18, r22
    1dfe:	ac 01       	movw	r20, r24
    1e00:	c3 01       	movw	r24, r6
    1e02:	b2 01       	movw	r22, r4
    1e04:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    1e08:	2b 01       	movw	r4, r22
    1e0a:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1e0c:	2a e0       	ldi	r18, 0x0A	; 10
    1e0e:	b7 01       	movw	r22, r14
    1e10:	a6 01       	movw	r20, r12
    1e12:	ce 01       	movw	r24, r28
    1e14:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1e18:	7c 01       	movw	r14, r24
    1e1a:	e8 0c       	add	r14, r8
    1e1c:	f9 1c       	adc	r15, r9

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1e1e:	bb 20       	and	r11, r11
    1e20:	39 f0       	breq	.+14     	; 0x1e30 <_ZN5Print10printFloatEdh+0x156>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e22:	6e ef       	ldi	r22, 0xFE	; 254
    1e24:	71 e0       	ldi	r23, 0x01	; 1
    1e26:	ce 01       	movw	r24, r28
    1e28:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1e2c:	e8 0e       	add	r14, r24
    1e2e:	f9 1e       	adc	r15, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1e30:	db 2c       	mov	r13, r11
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1e32:	dd 20       	and	r13, r13
    1e34:	39 f1       	breq	.+78     	; 0x1e84 <_ZN5Print10printFloatEdh+0x1aa>
  {
    remainder *= 10.0;
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	c3 01       	movw	r24, r6
    1e40:	b2 01       	movw	r22, r4
    1e42:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    1e46:	2b 01       	movw	r4, r22
    1e48:	3c 01       	movw	r6, r24
    int toPrint = int(remainder);
    1e4a:	0e 94 c6 09 	call	0x138c	; 0x138c <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1e4e:	4b 01       	movw	r8, r22
    1e50:	77 0f       	add	r23, r23
    1e52:	aa 08       	sbc	r10, r10
    1e54:	bb 08       	sbc	r11, r11
    1e56:	2a e0       	ldi	r18, 0x0A	; 10
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	b5 01       	movw	r22, r10
    1e5c:	a4 01       	movw	r20, r8
    1e5e:	ce 01       	movw	r24, r28
    1e60:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1e64:	e8 0e       	add	r14, r24
    1e66:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    1e68:	c5 01       	movw	r24, r10
    1e6a:	b4 01       	movw	r22, r8
    1e6c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__floatsisf>
    1e70:	9b 01       	movw	r18, r22
    1e72:	ac 01       	movw	r20, r24
    1e74:	c3 01       	movw	r24, r6
    1e76:	b2 01       	movw	r22, r4
    1e78:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    1e7c:	2b 01       	movw	r4, r22
    1e7e:	3c 01       	movw	r6, r24
    1e80:	da 94       	dec	r13
    1e82:	d7 cf       	rjmp	.-82     	; 0x1e32 <_ZN5Print10printFloatEdh+0x158>
  } 
  
  return n;
}
    1e84:	c7 01       	movw	r24, r14
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	ff 90       	pop	r15
    1e8c:	ef 90       	pop	r14
    1e8e:	df 90       	pop	r13
    1e90:	cf 90       	pop	r12
    1e92:	bf 90       	pop	r11
    1e94:	af 90       	pop	r10
    1e96:	9f 90       	pop	r9
    1e98:	8f 90       	pop	r8
    1e9a:	7f 90       	pop	r7
    1e9c:	6f 90       	pop	r6
    1e9e:	5f 90       	pop	r5
    1ea0:	4f 90       	pop	r4
    1ea2:	08 95       	ret

00001ea4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1ea4:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <_ZN5Print10printFloatEdh>

00001ea8 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1ea8:	1f 92       	push	r1
    1eaa:	0f 92       	push	r0
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	0f 92       	push	r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	2f 93       	push	r18
    1eb4:	3f 93       	push	r19
    1eb6:	8f 93       	push	r24
    1eb8:	9f 93       	push	r25
    1eba:	af 93       	push	r26
    1ebc:	bf 93       	push	r27
    1ebe:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer0_millis>
    1ec2:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer0_millis+0x1>
    1ec6:	a0 91 a8 03 	lds	r26, 0x03A8	; 0x8003a8 <timer0_millis+0x2>
    1eca:	b0 91 a9 03 	lds	r27, 0x03A9	; 0x8003a9 <timer0_millis+0x3>
    1ece:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <timer0_fract>
    1ed2:	23 e0       	ldi	r18, 0x03	; 3
    1ed4:	23 0f       	add	r18, r19
    1ed6:	2d 37       	cpi	r18, 0x7D	; 125
    1ed8:	20 f4       	brcc	.+8      	; 0x1ee2 <__vector_16+0x3a>
    1eda:	01 96       	adiw	r24, 0x01	; 1
    1edc:	a1 1d       	adc	r26, r1
    1ede:	b1 1d       	adc	r27, r1
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <__vector_16+0x44>
    1ee2:	26 e8       	ldi	r18, 0x86	; 134
    1ee4:	23 0f       	add	r18, r19
    1ee6:	02 96       	adiw	r24, 0x02	; 2
    1ee8:	a1 1d       	adc	r26, r1
    1eea:	b1 1d       	adc	r27, r1
    1eec:	20 93 a5 03 	sts	0x03A5, r18	; 0x8003a5 <timer0_fract>
    1ef0:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timer0_millis>
    1ef4:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <timer0_millis+0x1>
    1ef8:	a0 93 a8 03 	sts	0x03A8, r26	; 0x8003a8 <timer0_millis+0x2>
    1efc:	b0 93 a9 03 	sts	0x03A9, r27	; 0x8003a9 <timer0_millis+0x3>
    1f00:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <timer0_overflow_count>
    1f04:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <timer0_overflow_count+0x1>
    1f08:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <timer0_overflow_count+0x2>
    1f0c:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <timer0_overflow_count+0x3>
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	a1 1d       	adc	r26, r1
    1f14:	b1 1d       	adc	r27, r1
    1f16:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <timer0_overflow_count>
    1f1a:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <timer0_overflow_count+0x1>
    1f1e:	a0 93 ac 03 	sts	0x03AC, r26	; 0x8003ac <timer0_overflow_count+0x2>
    1f22:	b0 93 ad 03 	sts	0x03AD, r27	; 0x8003ad <timer0_overflow_count+0x3>
    1f26:	bf 91       	pop	r27
    1f28:	af 91       	pop	r26
    1f2a:	9f 91       	pop	r25
    1f2c:	8f 91       	pop	r24
    1f2e:	3f 91       	pop	r19
    1f30:	2f 91       	pop	r18
    1f32:	0f 90       	pop	r0
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	0f 90       	pop	r0
    1f38:	1f 90       	pop	r1
    1f3a:	18 95       	reti

00001f3c <micros>:
    1f3c:	3f b7       	in	r19, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <timer0_overflow_count>
    1f44:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <timer0_overflow_count+0x1>
    1f48:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <timer0_overflow_count+0x2>
    1f4c:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <timer0_overflow_count+0x3>
    1f50:	26 b5       	in	r18, 0x26	; 38
    1f52:	a8 9b       	sbis	0x15, 0	; 21
    1f54:	05 c0       	rjmp	.+10     	; 0x1f60 <micros+0x24>
    1f56:	2f 3f       	cpi	r18, 0xFF	; 255
    1f58:	19 f0       	breq	.+6      	; 0x1f60 <micros+0x24>
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	a1 1d       	adc	r26, r1
    1f5e:	b1 1d       	adc	r27, r1
    1f60:	3f bf       	out	0x3f, r19	; 63
    1f62:	ba 2f       	mov	r27, r26
    1f64:	a9 2f       	mov	r26, r25
    1f66:	98 2f       	mov	r25, r24
    1f68:	88 27       	eor	r24, r24
    1f6a:	82 0f       	add	r24, r18
    1f6c:	91 1d       	adc	r25, r1
    1f6e:	a1 1d       	adc	r26, r1
    1f70:	b1 1d       	adc	r27, r1
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	42 e0       	ldi	r20, 0x02	; 2
    1f78:	66 0f       	add	r22, r22
    1f7a:	77 1f       	adc	r23, r23
    1f7c:	88 1f       	adc	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	4a 95       	dec	r20
    1f82:	d1 f7       	brne	.-12     	; 0x1f78 <micros+0x3c>
    1f84:	08 95       	ret

00001f86 <delay>:
    1f86:	8f 92       	push	r8
    1f88:	9f 92       	push	r9
    1f8a:	af 92       	push	r10
    1f8c:	bf 92       	push	r11
    1f8e:	cf 92       	push	r12
    1f90:	df 92       	push	r13
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	6b 01       	movw	r12, r22
    1f98:	7c 01       	movw	r14, r24
    1f9a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <micros>
    1f9e:	4b 01       	movw	r8, r22
    1fa0:	5c 01       	movw	r10, r24
    1fa2:	c1 14       	cp	r12, r1
    1fa4:	d1 04       	cpc	r13, r1
    1fa6:	e1 04       	cpc	r14, r1
    1fa8:	f1 04       	cpc	r15, r1
    1faa:	01 f1       	breq	.+64     	; 0x1fec <delay+0x66>
    1fac:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <yield>
    1fb0:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <micros>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	88 19       	sub	r24, r8
    1fba:	99 09       	sbc	r25, r9
    1fbc:	aa 09       	sbc	r26, r10
    1fbe:	bb 09       	sbc	r27, r11
    1fc0:	88 3e       	cpi	r24, 0xE8	; 232
    1fc2:	93 40       	sbci	r25, 0x03	; 3
    1fc4:	a1 05       	cpc	r26, r1
    1fc6:	b1 05       	cpc	r27, r1
    1fc8:	60 f3       	brcs	.-40     	; 0x1fa2 <delay+0x1c>
    1fca:	21 e0       	ldi	r18, 0x01	; 1
    1fcc:	c2 1a       	sub	r12, r18
    1fce:	d1 08       	sbc	r13, r1
    1fd0:	e1 08       	sbc	r14, r1
    1fd2:	f1 08       	sbc	r15, r1
    1fd4:	88 ee       	ldi	r24, 0xE8	; 232
    1fd6:	88 0e       	add	r8, r24
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	98 1e       	adc	r9, r24
    1fdc:	a1 1c       	adc	r10, r1
    1fde:	b1 1c       	adc	r11, r1
    1fe0:	c1 14       	cp	r12, r1
    1fe2:	d1 04       	cpc	r13, r1
    1fe4:	e1 04       	cpc	r14, r1
    1fe6:	f1 04       	cpc	r15, r1
    1fe8:	19 f7       	brne	.-58     	; 0x1fb0 <delay+0x2a>
    1fea:	db cf       	rjmp	.-74     	; 0x1fa2 <delay+0x1c>
    1fec:	ff 90       	pop	r15
    1fee:	ef 90       	pop	r14
    1ff0:	df 90       	pop	r13
    1ff2:	cf 90       	pop	r12
    1ff4:	bf 90       	pop	r11
    1ff6:	af 90       	pop	r10
    1ff8:	9f 90       	pop	r9
    1ffa:	8f 90       	pop	r8
    1ffc:	08 95       	ret

00001ffe <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1ffe:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2000:	84 b5       	in	r24, 0x24	; 36
    2002:	82 60       	ori	r24, 0x02	; 2
    2004:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2006:	84 b5       	in	r24, 0x24	; 36
    2008:	81 60       	ori	r24, 0x01	; 1
    200a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    200c:	85 b5       	in	r24, 0x25	; 37
    200e:	82 60       	ori	r24, 0x02	; 2
    2010:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2012:	85 b5       	in	r24, 0x25	; 37
    2014:	81 60       	ori	r24, 0x01	; 1
    2016:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2018:	ee e6       	ldi	r30, 0x6E	; 110
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	81 60       	ori	r24, 0x01	; 1
    2020:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2022:	e1 e8       	ldi	r30, 0x81	; 129
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2028:	80 81       	ld	r24, Z
    202a:	82 60       	ori	r24, 0x02	; 2
    202c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    202e:	80 81       	ld	r24, Z
    2030:	81 60       	ori	r24, 0x01	; 1
    2032:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2034:	e0 e8       	ldi	r30, 0x80	; 128
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	81 60       	ori	r24, 0x01	; 1
    203c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    203e:	e1 eb       	ldi	r30, 0xB1	; 177
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	84 60       	ori	r24, 0x04	; 4
    2046:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2048:	e0 eb       	ldi	r30, 0xB0	; 176
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	81 60       	ori	r24, 0x01	; 1
    2050:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2052:	ea e7       	ldi	r30, 0x7A	; 122
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	84 60       	ori	r24, 0x04	; 4
    205a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    205c:	80 81       	ld	r24, Z
    205e:	82 60       	ori	r24, 0x02	; 2
    2060:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2062:	80 81       	ld	r24, Z
    2064:	81 60       	ori	r24, 0x01	; 1
    2066:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2068:	80 81       	ld	r24, Z
    206a:	80 68       	ori	r24, 0x80	; 128
    206c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    206e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2072:	08 95       	ret

00002074 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2074:	1f 93       	push	r17
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	18 2f       	mov	r17, r24
    207c:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    207e:	61 e0       	ldi	r22, 0x01	; 1
    2080:	0e 94 c2 10 	call	0x2184	; 0x2184 <pinMode>
	if (val == 0)
    2084:	20 97       	sbiw	r28, 0x00	; 0
    2086:	11 f4       	brne	.+4      	; 0x208c <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	04 c0       	rjmp	.+8      	; 0x2094 <analogWrite+0x20>
	}
	else if (val == 255)
    208c:	cf 3f       	cpi	r28, 0xFF	; 255
    208e:	d1 05       	cpc	r29, r1
    2090:	39 f4       	brne	.+14     	; 0x20a0 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    2092:	61 e0       	ldi	r22, 0x01	; 1
    2094:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    209c:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    20a0:	e1 2f       	mov	r30, r17
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	ef 52       	subi	r30, 0x2F	; 47
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	e4 91       	lpm	r30, Z
    20aa:	e3 30       	cpi	r30, 0x03	; 3
    20ac:	f9 f0       	breq	.+62     	; 0x20ec <analogWrite+0x78>
    20ae:	48 f4       	brcc	.+18     	; 0x20c2 <analogWrite+0x4e>
    20b0:	e1 30       	cpi	r30, 0x01	; 1
    20b2:	b9 f0       	breq	.+46     	; 0x20e2 <analogWrite+0x6e>
    20b4:	e2 30       	cpi	r30, 0x02	; 2
    20b6:	a1 f5       	brne	.+104    	; 0x2120 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    20b8:	84 b5       	in	r24, 0x24	; 36
    20ba:	80 62       	ori	r24, 0x20	; 32
    20bc:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    20be:	c8 bd       	out	0x28, r28	; 40
				break;
    20c0:	34 c0       	rjmp	.+104    	; 0x212a <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    20c2:	e7 30       	cpi	r30, 0x07	; 7
    20c4:	e9 f0       	breq	.+58     	; 0x2100 <analogWrite+0x8c>
    20c6:	e8 30       	cpi	r30, 0x08	; 8
    20c8:	19 f1       	breq	.+70     	; 0x2110 <analogWrite+0x9c>
    20ca:	e4 30       	cpi	r30, 0x04	; 4
    20cc:	49 f5       	brne	.+82     	; 0x2120 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    20ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    20d2:	80 62       	ori	r24, 0x20	; 32
    20d4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    20d8:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    20dc:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    20e0:	24 c0       	rjmp	.+72     	; 0x212a <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    20e2:	84 b5       	in	r24, 0x24	; 36
    20e4:	80 68       	ori	r24, 0x80	; 128
    20e6:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    20e8:	c7 bd       	out	0x27, r28	; 39
				break;
    20ea:	1f c0       	rjmp	.+62     	; 0x212a <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    20ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    20f0:	80 68       	ori	r24, 0x80	; 128
    20f2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    20f6:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    20fa:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    20fe:	15 c0       	rjmp	.+42     	; 0x212a <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2100:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2104:	80 68       	ori	r24, 0x80	; 128
    2106:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    210a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    210e:	0d c0       	rjmp	.+26     	; 0x212a <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2110:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2114:	80 62       	ori	r24, 0x20	; 32
    2116:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    211a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    211e:	05 c0       	rjmp	.+10     	; 0x212a <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2120:	c0 38       	cpi	r28, 0x80	; 128
    2122:	d1 05       	cpc	r29, r1
    2124:	0c f0       	brlt	.+2      	; 0x2128 <analogWrite+0xb4>
    2126:	b5 cf       	rjmp	.-150    	; 0x2092 <analogWrite+0x1e>
    2128:	af cf       	rjmp	.-162    	; 0x2088 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	1f 91       	pop	r17
    2130:	08 95       	ret

00002132 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2132:	83 30       	cpi	r24, 0x03	; 3
    2134:	81 f0       	breq	.+32     	; 0x2156 <turnOffPWM+0x24>
    2136:	28 f4       	brcc	.+10     	; 0x2142 <turnOffPWM+0x10>
    2138:	81 30       	cpi	r24, 0x01	; 1
    213a:	99 f0       	breq	.+38     	; 0x2162 <turnOffPWM+0x30>
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	a1 f0       	breq	.+40     	; 0x2168 <turnOffPWM+0x36>
    2140:	08 95       	ret
    2142:	87 30       	cpi	r24, 0x07	; 7
    2144:	a9 f0       	breq	.+42     	; 0x2170 <turnOffPWM+0x3e>
    2146:	88 30       	cpi	r24, 0x08	; 8
    2148:	b9 f0       	breq	.+46     	; 0x2178 <turnOffPWM+0x46>
    214a:	84 30       	cpi	r24, 0x04	; 4
    214c:	d1 f4       	brne	.+52     	; 0x2182 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    214e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2152:	8f 7d       	andi	r24, 0xDF	; 223
    2154:	03 c0       	rjmp	.+6      	; 0x215c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2156:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    215a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    215c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2160:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2162:	84 b5       	in	r24, 0x24	; 36
    2164:	8f 77       	andi	r24, 0x7F	; 127
    2166:	02 c0       	rjmp	.+4      	; 0x216c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2168:	84 b5       	in	r24, 0x24	; 36
    216a:	8f 7d       	andi	r24, 0xDF	; 223
    216c:	84 bd       	out	0x24, r24	; 36
    216e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2170:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2174:	8f 77       	andi	r24, 0x7F	; 127
    2176:	03 c0       	rjmp	.+6      	; 0x217e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2178:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    217c:	8f 7d       	andi	r24, 0xDF	; 223
    217e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2182:	08 95       	ret

00002184 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	fc 01       	movw	r30, r24
    218c:	eb 51       	subi	r30, 0x1B	; 27
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2192:	fc 01       	movw	r30, r24
    2194:	e7 50       	subi	r30, 0x07	; 7
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    219a:	88 23       	and	r24, r24
    219c:	61 f1       	breq	.+88     	; 0x21f6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	fc 01       	movw	r30, r24
    21a6:	e9 5e       	subi	r30, 0xE9	; 233
    21a8:	fe 4f       	sbci	r31, 0xFE	; 254
    21aa:	c5 91       	lpm	r28, Z+
    21ac:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    21ae:	fc 01       	movw	r30, r24
    21b0:	e3 5f       	subi	r30, 0xF3	; 243
    21b2:	fe 4f       	sbci	r31, 0xFE	; 254
    21b4:	a5 91       	lpm	r26, Z+
    21b6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    21b8:	61 11       	cpse	r22, r1
    21ba:	09 c0       	rjmp	.+18     	; 0x21ce <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    21bc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    21be:	f8 94       	cli
		*reg &= ~bit;
    21c0:	88 81       	ld	r24, Y
    21c2:	20 95       	com	r18
    21c4:	82 23       	and	r24, r18
    21c6:	88 83       	st	Y, r24
		*out &= ~bit;
    21c8:	ec 91       	ld	r30, X
    21ca:	2e 23       	and	r18, r30
    21cc:	0b c0       	rjmp	.+22     	; 0x21e4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    21ce:	62 30       	cpi	r22, 0x02	; 2
    21d0:	61 f4       	brne	.+24     	; 0x21ea <pinMode+0x66>
		uint8_t oldSREG = SREG;
    21d2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    21d4:	f8 94       	cli
		*reg &= ~bit;
    21d6:	38 81       	ld	r19, Y
    21d8:	82 2f       	mov	r24, r18
    21da:	80 95       	com	r24
    21dc:	83 23       	and	r24, r19
    21de:	88 83       	st	Y, r24
		*out |= bit;
    21e0:	ec 91       	ld	r30, X
    21e2:	2e 2b       	or	r18, r30
    21e4:	2c 93       	st	X, r18
		SREG = oldSREG;
    21e6:	9f bf       	out	0x3f, r25	; 63
    21e8:	06 c0       	rjmp	.+12     	; 0x21f6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    21ea:	8f b7       	in	r24, 0x3f	; 63
                cli();
    21ec:	f8 94       	cli
		*reg |= bit;
    21ee:	e8 81       	ld	r30, Y
    21f0:	2e 2b       	or	r18, r30
    21f2:	28 83       	st	Y, r18
		SREG = oldSREG;
    21f4:	8f bf       	out	0x3f, r24	; 63
	}
}
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	08 95       	ret

000021fc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	f9 01       	movw	r30, r18
    2208:	ef 52       	subi	r30, 0x2F	; 47
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    220e:	f9 01       	movw	r30, r18
    2210:	eb 51       	subi	r30, 0x1B	; 27
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2216:	f9 01       	movw	r30, r18
    2218:	e7 50       	subi	r30, 0x07	; 7
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    221e:	cc 23       	and	r28, r28
    2220:	c9 f0       	breq	.+50     	; 0x2254 <digitalWrite+0x58>
    2222:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2224:	81 11       	cpse	r24, r1
    2226:	0e 94 99 10 	call	0x2132	; 0x2132 <turnOffPWM>

	out = portOutputRegister(port);
    222a:	ec 2f       	mov	r30, r28
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	ee 0f       	add	r30, r30
    2230:	ff 1f       	adc	r31, r31
    2232:	e3 5f       	subi	r30, 0xF3	; 243
    2234:	fe 4f       	sbci	r31, 0xFE	; 254
    2236:	a5 91       	lpm	r26, Z+
    2238:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    223a:	8f b7       	in	r24, 0x3f	; 63
	cli();
    223c:	f8 94       	cli

	if (val == LOW) {
    223e:	11 11       	cpse	r17, r1
    2240:	05 c0       	rjmp	.+10     	; 0x224c <digitalWrite+0x50>
		*out &= ~bit;
    2242:	9c 91       	ld	r25, X
    2244:	ed 2f       	mov	r30, r29
    2246:	e0 95       	com	r30
    2248:	e9 23       	and	r30, r25
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <digitalWrite+0x54>
	} else {
		*out |= bit;
    224c:	ec 91       	ld	r30, X
    224e:	ed 2b       	or	r30, r29
    2250:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    2252:	8f bf       	out	0x3f, r24	; 63
}
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	1f 91       	pop	r17
    225a:	08 95       	ret

0000225c <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    225c:	fc 01       	movw	r30, r24
    225e:	80 81       	ld	r24, Z
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <free>

00002266 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    226c:	88 81       	ld	r24, Y
    226e:	99 81       	ldd	r25, Y+1	; 0x01
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	11 f0       	breq	.+4      	; 0x2278 <_ZN6String10invalidateEv+0x12>
    2274:	0e 94 fd 18 	call	0x31fa	; 0x31fa <free>
	buffer = NULL;
    2278:	19 82       	std	Y+1, r1	; 0x01
    227a:	18 82       	st	Y, r1
	capacity = len = 0;
    227c:	1d 82       	std	Y+5, r1	; 0x05
    227e:	1c 82       	std	Y+4, r1	; 0x04
    2280:	1b 82       	std	Y+3, r1	; 0x03
    2282:	1a 82       	std	Y+2, r1	; 0x02
}
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	08 95       	ret

0000228a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    228a:	0f 93       	push	r16
    228c:	1f 93       	push	r17
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	ec 01       	movw	r28, r24
    2294:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2296:	6f 5f       	subi	r22, 0xFF	; 255
    2298:	7f 4f       	sbci	r23, 0xFF	; 255
    229a:	88 81       	ld	r24, Y
    229c:	99 81       	ldd	r25, Y+1	; 0x01
    229e:	0e 94 95 19 	call	0x332a	; 0x332a <realloc>
	if (newbuffer) {
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	31 f0       	breq	.+12     	; 0x22b2 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    22a6:	99 83       	std	Y+1, r25	; 0x01
    22a8:	88 83       	st	Y, r24
		capacity = maxStrLen;
    22aa:	1b 83       	std	Y+3, r17	; 0x03
    22ac:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    22b2:	80 e0       	ldi	r24, 0x00	; 0
}
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	08 95       	ret

000022be <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    22c4:	88 81       	ld	r24, Y
    22c6:	99 81       	ldd	r25, Y+1	; 0x01
    22c8:	89 2b       	or	r24, r25
    22ca:	29 f0       	breq	.+10     	; 0x22d6 <_ZN6String7reserveEj+0x18>
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	86 17       	cp	r24, r22
    22d2:	97 07       	cpc	r25, r23
    22d4:	60 f4       	brcc	.+24     	; 0x22ee <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    22d6:	ce 01       	movw	r24, r28
    22d8:	0e 94 45 11 	call	0x228a	; 0x228a <_ZN6String12changeBufferEj>
    22dc:	88 23       	and	r24, r24
    22de:	41 f0       	breq	.+16     	; 0x22f0 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    22e0:	8c 81       	ldd	r24, Y+4	; 0x04
    22e2:	9d 81       	ldd	r25, Y+5	; 0x05
    22e4:	89 2b       	or	r24, r25
    22e6:	19 f4       	brne	.+6      	; 0x22ee <_ZN6String7reserveEj+0x30>
    22e8:	e8 81       	ld	r30, Y
    22ea:	f9 81       	ldd	r31, Y+1	; 0x01
    22ec:	10 82       	st	Z, r1
    22ee:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	08 95       	ret

000022f6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    22f6:	ef 92       	push	r14
    22f8:	ff 92       	push	r15
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	ec 01       	movw	r28, r24
    2304:	7b 01       	movw	r14, r22
    2306:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    2308:	ba 01       	movw	r22, r20
    230a:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN6String7reserveEj>
    230e:	81 11       	cpse	r24, r1
    2310:	04 c0       	rjmp	.+8      	; 0x231a <_ZN6String4copyEPKcj+0x24>
		invalidate();
    2312:	ce 01       	movw	r24, r28
    2314:	0e 94 33 11 	call	0x2266	; 0x2266 <_ZN6String10invalidateEv>
		return *this;
    2318:	07 c0       	rjmp	.+14     	; 0x2328 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    231a:	1d 83       	std	Y+5, r17	; 0x05
    231c:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    231e:	b7 01       	movw	r22, r14
    2320:	88 81       	ld	r24, Y
    2322:	99 81       	ldd	r25, Y+1	; 0x01
    2324:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <strcpy>
	return *this;
}
    2328:	ce 01       	movw	r24, r28
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	1f 91       	pop	r17
    2330:	0f 91       	pop	r16
    2332:	ff 90       	pop	r15
    2334:	ef 90       	pop	r14
    2336:	08 95       	ret

00002338 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2338:	fc 01       	movw	r30, r24
    233a:	11 82       	std	Z+1, r1	; 0x01
    233c:	10 82       	st	Z, r1
	capacity = 0;
    233e:	13 82       	std	Z+3, r1	; 0x03
    2340:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2342:	15 82       	std	Z+5, r1	; 0x05
    2344:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2346:	61 15       	cp	r22, r1
    2348:	71 05       	cpc	r23, r1
    234a:	51 f0       	breq	.+20     	; 0x2360 <_ZN6StringC1EPKc+0x28>
    234c:	fb 01       	movw	r30, r22
    234e:	01 90       	ld	r0, Z+
    2350:	00 20       	and	r0, r0
    2352:	e9 f7       	brne	.-6      	; 0x234e <_ZN6StringC1EPKc+0x16>
    2354:	31 97       	sbiw	r30, 0x01	; 1
    2356:	af 01       	movw	r20, r30
    2358:	46 1b       	sub	r20, r22
    235a:	57 0b       	sbc	r21, r23
    235c:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <_ZN6String4copyEPKcj>
    2360:	08 95       	ret

00002362 <_ZN24Adafruit_HMC5883_UnifiedD1Ev>:
    value = Wire.receive();
  #endif  
  Wire.endTransmission();

  return value;
}
    2362:	08 95       	ret

00002364 <_ZN24Adafruit_HMC5883_Unified9getSensorEP8sensor_t>:
    2364:	0f 93       	push	r16
    2366:	1f 93       	push	r17
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	8c 01       	movw	r16, r24
    236e:	eb 01       	movw	r28, r22
    2370:	88 e2       	ldi	r24, 0x28	; 40
    2372:	fb 01       	movw	r30, r22
    2374:	11 92       	st	Z+, r1
    2376:	8a 95       	dec	r24
    2378:	e9 f7       	brne	.-6      	; 0x2374 <_ZN24Adafruit_HMC5883_Unified9getSensorEP8sensor_t+0x10>
    237a:	4b e0       	ldi	r20, 0x0B	; 11
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	72 e0       	ldi	r23, 0x02	; 2
    2382:	ce 01       	movw	r24, r28
    2384:	0e 94 81 1a 	call	0x3502	; 0x3502 <strncpy>
    2388:	1b 86       	std	Y+11, r1	; 0x0b
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a0 e0       	ldi	r26, 0x00	; 0
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	8c 87       	std	Y+12, r24	; 0x0c
    2394:	9d 87       	std	Y+13, r25	; 0x0d
    2396:	ae 87       	std	Y+14, r26	; 0x0e
    2398:	bf 87       	std	Y+15, r27	; 0x0f
    239a:	f8 01       	movw	r30, r16
    239c:	84 89       	ldd	r24, Z+20	; 0x14
    239e:	95 89       	ldd	r25, Z+21	; 0x15
    23a0:	a6 89       	ldd	r26, Z+22	; 0x16
    23a2:	b7 89       	ldd	r27, Z+23	; 0x17
    23a4:	88 8b       	std	Y+16, r24	; 0x10
    23a6:	99 8b       	std	Y+17, r25	; 0x11
    23a8:	aa 8b       	std	Y+18, r26	; 0x12
    23aa:	bb 8b       	std	Y+19, r27	; 0x13
    23ac:	82 e0       	ldi	r24, 0x02	; 2
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	a0 e0       	ldi	r26, 0x00	; 0
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	8c 8b       	std	Y+20, r24	; 0x14
    23b6:	9d 8b       	std	Y+21, r25	; 0x15
    23b8:	ae 8b       	std	Y+22, r26	; 0x16
    23ba:	bf 8b       	std	Y+23, r27	; 0x17
    23bc:	1c a2       	std	Y+36, r1	; 0x24
    23be:	1d a2       	std	Y+37, r1	; 0x25
    23c0:	1e a2       	std	Y+38, r1	; 0x26
    23c2:	1f a2       	std	Y+39, r1	; 0x27
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	a8 e4       	ldi	r26, 0x48	; 72
    23ca:	b4 e4       	ldi	r27, 0x44	; 68
    23cc:	88 8f       	std	Y+24, r24	; 0x18
    23ce:	99 8f       	std	Y+25, r25	; 0x19
    23d0:	aa 8f       	std	Y+26, r26	; 0x1a
    23d2:	bb 8f       	std	Y+27, r27	; 0x1b
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	a8 e4       	ldi	r26, 0x48	; 72
    23da:	b4 ec       	ldi	r27, 0xC4	; 196
    23dc:	8c 8f       	std	Y+28, r24	; 0x1c
    23de:	9d 8f       	std	Y+29, r25	; 0x1d
    23e0:	ae 8f       	std	Y+30, r26	; 0x1e
    23e2:	bf 8f       	std	Y+31, r27	; 0x1f
    23e4:	8d ec       	ldi	r24, 0xCD	; 205
    23e6:	9c ec       	ldi	r25, 0xCC	; 204
    23e8:	ac e4       	ldi	r26, 0x4C	; 76
    23ea:	be e3       	ldi	r27, 0x3E	; 62
    23ec:	88 a3       	std	Y+32, r24	; 0x20
    23ee:	99 a3       	std	Y+33, r25	; 0x21
    23f0:	aa a3       	std	Y+34, r26	; 0x22
    23f2:	bb a3       	std	Y+35, r27	; 0x23
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	1f 91       	pop	r17
    23fa:	0f 91       	pop	r16
    23fc:	08 95       	ret

000023fe <_ZN24Adafruit_HMC5883_UnifiedD0Ev>:
    23fe:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <_ZdlPv>

00002402 <_ZN24Adafruit_HMC5883_UnifiedC1El>:
    2402:	2c e0       	ldi	r18, 0x0C	; 12
    2404:	32 e0       	ldi	r19, 0x02	; 2
    2406:	fc 01       	movw	r30, r24
    2408:	31 83       	std	Z+1, r19	; 0x01
    240a:	20 83       	st	Z, r18
    240c:	44 8b       	std	Z+20, r20	; 0x14
    240e:	55 8b       	std	Z+21, r21	; 0x15
    2410:	66 8b       	std	Z+22, r22	; 0x16
    2412:	77 8b       	std	Z+23, r23	; 0x17
    2414:	08 95       	ret

00002416 <_ZN24Adafruit_HMC5883_Unified4readEv>:
/*!
    @brief  Reads the raw data from the sensor
*/
/**************************************************************************/
void Adafruit_HMC5883_Unified::read()
{
    2416:	6f 92       	push	r6
    2418:	7f 92       	push	r7
    241a:	8f 92       	push	r8
    241c:	9f 92       	push	r9
    241e:	af 92       	push	r10
    2420:	bf 92       	push	r11
    2422:	cf 92       	push	r12
    2424:	df 92       	push	r13
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	8c 01       	movw	r16, r24
  // Read the magnetometer
  Wire.beginTransmission((byte)HMC5883_ADDRESS_MAG);
    2434:	6e e1       	ldi	r22, 0x1E	; 30
    2436:	8e ea       	ldi	r24, 0xAE	; 174
    2438:	93 e0       	ldi	r25, 0x03	; 3
    243a:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN7TwoWire17beginTransmissionEh>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    243e:	63 e0       	ldi	r22, 0x03	; 3
    2440:	8e ea       	ldi	r24, 0xAE	; 174
    2442:	93 e0       	ldi	r25, 0x03	; 3
    2444:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <_ZN7TwoWire5writeEh>
  #if ARDUINO >= 100
    Wire.write(HMC5883_REGISTER_MAG_OUT_X_H_M);
  #else
    Wire.send(HMC5883_REGISTER_MAG_OUT_X_H_M);
  #endif
  Wire.endTransmission();
    2448:	8e ea       	ldi	r24, 0xAE	; 174
    244a:	93 e0       	ldi	r25, 0x03	; 3
    244c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)HMC5883_ADDRESS_MAG, (byte)6);
    2450:	46 e0       	ldi	r20, 0x06	; 6
    2452:	6e e1       	ldi	r22, 0x1E	; 30
    2454:	8e ea       	ldi	r24, 0xAE	; 174
    2456:	93 e0       	ldi	r25, 0x03	; 3
    2458:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <_ZN7TwoWire11requestFromEhh>
  
  // Wait around until enough data is available
  while (Wire.available() < 6);
    245c:	8e ea       	ldi	r24, 0xAE	; 174
    245e:	93 e0       	ldi	r25, 0x03	; 3
    2460:	0e 94 c9 14 	call	0x2992	; 0x2992 <_ZN7TwoWire9availableEv>
    2464:	06 97       	sbiw	r24, 0x06	; 6
    2466:	d4 f3       	brlt	.-12     	; 0x245c <_ZN24Adafruit_HMC5883_Unified4readEv+0x46>

  // Note high before low (different than accel)  
  #if ARDUINO >= 100
    uint8_t xhi = Wire.read();
    2468:	8e ea       	ldi	r24, 0xAE	; 174
    246a:	93 e0       	ldi	r25, 0x03	; 3
    246c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
    2470:	68 2e       	mov	r6, r24
    uint8_t xlo = Wire.read();
    2472:	8e ea       	ldi	r24, 0xAE	; 174
    2474:	93 e0       	ldi	r25, 0x03	; 3
    2476:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
    247a:	78 2e       	mov	r7, r24
    uint8_t zhi = Wire.read();
    247c:	8e ea       	ldi	r24, 0xAE	; 174
    247e:	93 e0       	ldi	r25, 0x03	; 3
    2480:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
    2484:	a8 2e       	mov	r10, r24
    uint8_t zlo = Wire.read();
    2486:	8e ea       	ldi	r24, 0xAE	; 174
    2488:	93 e0       	ldi	r25, 0x03	; 3
    248a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
    248e:	b8 2e       	mov	r11, r24
    uint8_t yhi = Wire.read();
    2490:	8e ea       	ldi	r24, 0xAE	; 174
    2492:	93 e0       	ldi	r25, 0x03	; 3
    2494:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
    2498:	88 2e       	mov	r8, r24
    uint8_t ylo = Wire.read();
    249a:	8e ea       	ldi	r24, 0xAE	; 174
    249c:	93 e0       	ldi	r25, 0x03	; 3
    249e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_ZN7TwoWire4readEv>
    24a2:	98 2e       	mov	r9, r24
    uint8_t yhi = Wire.receive();
    uint8_t ylo = Wire.receive();
  #endif
  
  // Shift values to create properly formed integer (low byte first)
  _magData.x = (int16_t)(xlo | ((int16_t)xhi << 8));
    24a4:	d6 2c       	mov	r13, r6
    24a6:	c1 2c       	mov	r12, r1
    24a8:	b6 01       	movw	r22, r12
    24aa:	67 29       	or	r22, r7
    24ac:	07 2e       	mov	r0, r23
    24ae:	00 0c       	add	r0, r0
    24b0:	88 0b       	sbc	r24, r24
    24b2:	99 0b       	sbc	r25, r25
    24b4:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__floatsisf>
    24b8:	f8 01       	movw	r30, r16
    24ba:	64 83       	std	Z+4, r22	; 0x04
    24bc:	75 83       	std	Z+5, r23	; 0x05
    24be:	86 83       	std	Z+6, r24	; 0x06
    24c0:	97 83       	std	Z+7, r25	; 0x07
  _magData.y = (int16_t)(ylo | ((int16_t)yhi << 8));
    24c2:	f8 2c       	mov	r15, r8
    24c4:	e1 2c       	mov	r14, r1
    24c6:	b7 01       	movw	r22, r14
    24c8:	69 29       	or	r22, r9
    24ca:	07 2e       	mov	r0, r23
    24cc:	00 0c       	add	r0, r0
    24ce:	88 0b       	sbc	r24, r24
    24d0:	99 0b       	sbc	r25, r25
    24d2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__floatsisf>
    24d6:	f8 01       	movw	r30, r16
    24d8:	60 87       	std	Z+8, r22	; 0x08
    24da:	71 87       	std	Z+9, r23	; 0x09
    24dc:	82 87       	std	Z+10, r24	; 0x0a
    24de:	93 87       	std	Z+11, r25	; 0x0b
  _magData.z = (int16_t)(zlo | ((int16_t)zhi << 8));
    24e0:	da 2d       	mov	r29, r10
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	cf 2f       	mov	r28, r31
    24e6:	be 01       	movw	r22, r28
    24e8:	6b 29       	or	r22, r11
    24ea:	07 2e       	mov	r0, r23
    24ec:	00 0c       	add	r0, r0
    24ee:	88 0b       	sbc	r24, r24
    24f0:	99 0b       	sbc	r25, r25
    24f2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__floatsisf>
    24f6:	f8 01       	movw	r30, r16
    24f8:	64 87       	std	Z+12, r22	; 0x0c
    24fa:	75 87       	std	Z+13, r23	; 0x0d
    24fc:	86 87       	std	Z+14, r24	; 0x0e
    24fe:	97 87       	std	Z+15, r25	; 0x0f
  
  // ToDo: Calculate orientation
  _magData.orientation = 0.0;
    2500:	10 8a       	std	Z+16, r1	; 0x10
    2502:	11 8a       	std	Z+17, r1	; 0x11
    2504:	12 8a       	std	Z+18, r1	; 0x12
    2506:	13 8a       	std	Z+19, r1	; 0x13
}
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	df 90       	pop	r13
    2516:	cf 90       	pop	r12
    2518:	bf 90       	pop	r11
    251a:	af 90       	pop	r10
    251c:	9f 90       	pop	r9
    251e:	8f 90       	pop	r8
    2520:	7f 90       	pop	r7
    2522:	6f 90       	pop	r6
    2524:	08 95       	ret

00002526 <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t>:
/**************************************************************************/
/*! 
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_HMC5883_Unified::getEvent(sensors_event_t *event) {
    2526:	cf 92       	push	r12
    2528:	df 92       	push	r13
    252a:	ef 92       	push	r14
    252c:	ff 92       	push	r15
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	8c 01       	movw	r16, r24
    2538:	eb 01       	movw	r28, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
    253a:	84 e2       	ldi	r24, 0x24	; 36
    253c:	fb 01       	movw	r30, r22
    253e:	11 92       	st	Z+, r1
    2540:	8a 95       	dec	r24
    2542:	e9 f7       	brne	.-6      	; 0x253e <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t+0x18>

  /* Read new data */
  read();
    2544:	c8 01       	movw	r24, r16
    2546:	0e 94 0b 12 	call	0x2416	; 0x2416 <_ZN24Adafruit_HMC5883_Unified4readEv>
  
  event->version   = sizeof(sensors_event_t);
    254a:	84 e2       	ldi	r24, 0x24	; 36
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	a0 e0       	ldi	r26, 0x00	; 0
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	88 83       	st	Y, r24
    2554:	99 83       	std	Y+1, r25	; 0x01
    2556:	aa 83       	std	Y+2, r26	; 0x02
    2558:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _sensorID;
    255a:	f8 01       	movw	r30, r16
    255c:	84 89       	ldd	r24, Z+20	; 0x14
    255e:	95 89       	ldd	r25, Z+21	; 0x15
    2560:	a6 89       	ldd	r26, Z+22	; 0x16
    2562:	b7 89       	ldd	r27, Z+23	; 0x17
    2564:	8c 83       	std	Y+4, r24	; 0x04
    2566:	9d 83       	std	Y+5, r25	; 0x05
    2568:	ae 83       	std	Y+6, r26	; 0x06
    256a:	bf 83       	std	Y+7, r27	; 0x07
  event->type      = SENSOR_TYPE_MAGNETIC_FIELD;
    256c:	82 e0       	ldi	r24, 0x02	; 2
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	a0 e0       	ldi	r26, 0x00	; 0
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	88 87       	std	Y+8, r24	; 0x08
    2576:	99 87       	std	Y+9, r25	; 0x09
    2578:	aa 87       	std	Y+10, r26	; 0x0a
    257a:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = 0;
    257c:	18 8a       	std	Y+16, r1	; 0x10
    257e:	19 8a       	std	Y+17, r1	; 0x11
    2580:	1a 8a       	std	Y+18, r1	; 0x12
    2582:	1b 8a       	std	Y+19, r1	; 0x13
  event->magnetic.x = _magData.x / _hmc5883_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA;
    2584:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <_ZL21_hmc5883_Gauss_LSB_XY>
    2588:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <_ZL21_hmc5883_Gauss_LSB_XY+0x1>
    258c:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <_ZL21_hmc5883_Gauss_LSB_XY+0x2>
    2590:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <_ZL21_hmc5883_Gauss_LSB_XY+0x3>
    2594:	a7 01       	movw	r20, r14
    2596:	96 01       	movw	r18, r12
    2598:	64 81       	ldd	r22, Z+4	; 0x04
    259a:	75 81       	ldd	r23, Z+5	; 0x05
    259c:	86 81       	ldd	r24, Z+6	; 0x06
    259e:	97 81       	ldd	r25, Z+7	; 0x07
    25a0:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	48 ec       	ldi	r20, 0xC8	; 200
    25aa:	52 e4       	ldi	r21, 0x42	; 66
    25ac:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    25b0:	6c 8b       	std	Y+20, r22	; 0x14
    25b2:	7d 8b       	std	Y+21, r23	; 0x15
    25b4:	8e 8b       	std	Y+22, r24	; 0x16
    25b6:	9f 8b       	std	Y+23, r25	; 0x17
  event->magnetic.y = _magData.y / _hmc5883_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA;
    25b8:	a7 01       	movw	r20, r14
    25ba:	96 01       	movw	r18, r12
    25bc:	f8 01       	movw	r30, r16
    25be:	60 85       	ldd	r22, Z+8	; 0x08
    25c0:	71 85       	ldd	r23, Z+9	; 0x09
    25c2:	82 85       	ldd	r24, Z+10	; 0x0a
    25c4:	93 85       	ldd	r25, Z+11	; 0x0b
    25c6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	48 ec       	ldi	r20, 0xC8	; 200
    25d0:	52 e4       	ldi	r21, 0x42	; 66
    25d2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    25d6:	68 8f       	std	Y+24, r22	; 0x18
    25d8:	79 8f       	std	Y+25, r23	; 0x19
    25da:	8a 8f       	std	Y+26, r24	; 0x1a
    25dc:	9b 8f       	std	Y+27, r25	; 0x1b
  event->magnetic.z = _magData.z / _hmc5883_Gauss_LSB_Z * SENSORS_GAUSS_TO_MICROTESLA;
    25de:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <_ZL20_hmc5883_Gauss_LSB_Z>
    25e2:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <_ZL20_hmc5883_Gauss_LSB_Z+0x1>
    25e6:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <_ZL20_hmc5883_Gauss_LSB_Z+0x2>
    25ea:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <_ZL20_hmc5883_Gauss_LSB_Z+0x3>
    25ee:	f8 01       	movw	r30, r16
    25f0:	64 85       	ldd	r22, Z+12	; 0x0c
    25f2:	75 85       	ldd	r23, Z+13	; 0x0d
    25f4:	86 85       	ldd	r24, Z+14	; 0x0e
    25f6:	97 85       	ldd	r25, Z+15	; 0x0f
    25f8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	48 ec       	ldi	r20, 0xC8	; 200
    2602:	52 e4       	ldi	r21, 0x42	; 66
    2604:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    2608:	6c 8f       	std	Y+28, r22	; 0x1c
    260a:	7d 8f       	std	Y+29, r23	; 0x1d
    260c:	8e 8f       	std	Y+30, r24	; 0x1e
    260e:	9f 8f       	std	Y+31, r25	; 0x1f
  
  return true;
}
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	1f 91       	pop	r17
    2618:	0f 91       	pop	r16
    261a:	ff 90       	pop	r15
    261c:	ef 90       	pop	r14
    261e:	df 90       	pop	r13
    2620:	cf 90       	pop	r12
    2622:	08 95       	ret

00002624 <_ZN6KalmanC1Ev>:
 e-mail   :  kristianl@tkjelectronics.com
 */

#include "Kalman.h"

Kalman::Kalman() {
    2624:	fc 01       	movw	r30, r24
    /* We will set the variables like so, these can also be tuned by the user */
    Q_angle = 0.001f;
    2626:	8f e6       	ldi	r24, 0x6F	; 111
    2628:	92 e1       	ldi	r25, 0x12	; 18
    262a:	a3 e8       	ldi	r26, 0x83	; 131
    262c:	ba e3       	ldi	r27, 0x3A	; 58
    262e:	80 83       	st	Z, r24
    2630:	91 83       	std	Z+1, r25	; 0x01
    2632:	a2 83       	std	Z+2, r26	; 0x02
    2634:	b3 83       	std	Z+3, r27	; 0x03
    Q_bias = 0.003f;
    2636:	86 ea       	ldi	r24, 0xA6	; 166
    2638:	9b e9       	ldi	r25, 0x9B	; 155
    263a:	a4 e4       	ldi	r26, 0x44	; 68
    263c:	bb e3       	ldi	r27, 0x3B	; 59
    263e:	84 83       	std	Z+4, r24	; 0x04
    2640:	95 83       	std	Z+5, r25	; 0x05
    2642:	a6 83       	std	Z+6, r26	; 0x06
    2644:	b7 83       	std	Z+7, r27	; 0x07
    R_measure = 0.03f;
    2646:	8f e8       	ldi	r24, 0x8F	; 143
    2648:	92 ec       	ldi	r25, 0xC2	; 194
    264a:	a5 ef       	ldi	r26, 0xF5	; 245
    264c:	bc e3       	ldi	r27, 0x3C	; 60
    264e:	80 87       	std	Z+8, r24	; 0x08
    2650:	91 87       	std	Z+9, r25	; 0x09
    2652:	a2 87       	std	Z+10, r26	; 0x0a
    2654:	b3 87       	std	Z+11, r27	; 0x0b

    angle = 0.0f; // Reset the angle
    2656:	14 86       	std	Z+12, r1	; 0x0c
    2658:	15 86       	std	Z+13, r1	; 0x0d
    265a:	16 86       	std	Z+14, r1	; 0x0e
    265c:	17 86       	std	Z+15, r1	; 0x0f
    bias = 0.0f; // Reset bias
    265e:	10 8a       	std	Z+16, r1	; 0x10
    2660:	11 8a       	std	Z+17, r1	; 0x11
    2662:	12 8a       	std	Z+18, r1	; 0x12
    2664:	13 8a       	std	Z+19, r1	; 0x13

    P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
    2666:	10 8e       	std	Z+24, r1	; 0x18
    2668:	11 8e       	std	Z+25, r1	; 0x19
    266a:	12 8e       	std	Z+26, r1	; 0x1a
    266c:	13 8e       	std	Z+27, r1	; 0x1b
    P[0][1] = 0.0f;
    266e:	14 8e       	std	Z+28, r1	; 0x1c
    2670:	15 8e       	std	Z+29, r1	; 0x1d
    2672:	16 8e       	std	Z+30, r1	; 0x1e
    2674:	17 8e       	std	Z+31, r1	; 0x1f
    P[1][0] = 0.0f;
    2676:	10 a2       	std	Z+32, r1	; 0x20
    2678:	11 a2       	std	Z+33, r1	; 0x21
    267a:	12 a2       	std	Z+34, r1	; 0x22
    267c:	13 a2       	std	Z+35, r1	; 0x23
    P[1][1] = 0.0f;
    267e:	14 a2       	std	Z+36, r1	; 0x24
    2680:	15 a2       	std	Z+37, r1	; 0x25
    2682:	16 a2       	std	Z+38, r1	; 0x26
    2684:	17 a2       	std	Z+39, r1	; 0x27
    2686:	08 95       	ret

00002688 <_ZN6Kalman8getAngleEfff>:
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float Kalman::getAngle(float newAngle, float newRate, float dt) {
    2688:	2f 92       	push	r2
    268a:	3f 92       	push	r3
    268c:	4f 92       	push	r4
    268e:	5f 92       	push	r5
    2690:	6f 92       	push	r6
    2692:	7f 92       	push	r7
    2694:	8f 92       	push	r8
    2696:	9f 92       	push	r9
    2698:	af 92       	push	r10
    269a:	bf 92       	push	r11
    269c:	cf 92       	push	r12
    269e:	df 92       	push	r13
    26a0:	ef 92       	push	r14
    26a2:	ff 92       	push	r15
    26a4:	0f 93       	push	r16
    26a6:	1f 93       	push	r17
    26a8:	cf 93       	push	r28
    26aa:	df 93       	push	r29
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	6c 97       	sbiw	r28, 0x1c	; 28
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	1c 01       	movw	r2, r24
    26be:	4d 8b       	std	Y+21, r20	; 0x15
    26c0:	5e 8b       	std	Y+22, r21	; 0x16
    26c2:	6f 8b       	std	Y+23, r22	; 0x17
    26c4:	78 8f       	std	Y+24, r23	; 0x18
    26c6:	c9 01       	movw	r24, r18
    26c8:	b8 01       	movw	r22, r16
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
    26ca:	d1 01       	movw	r26, r2
    26cc:	50 96       	adiw	r26, 0x10	; 16
    26ce:	2d 91       	ld	r18, X+
    26d0:	3d 91       	ld	r19, X+
    26d2:	4d 91       	ld	r20, X+
    26d4:	5c 91       	ld	r21, X
    26d6:	53 97       	sbiw	r26, 0x13	; 19
    26d8:	29 8b       	std	Y+17, r18	; 0x11
    26da:	3a 8b       	std	Y+18, r19	; 0x12
    26dc:	4b 8b       	std	Y+19, r20	; 0x13
    26de:	5c 8b       	std	Y+20, r21	; 0x14
    26e0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    26e4:	9b 01       	movw	r18, r22
    26e6:	ac 01       	movw	r20, r24
    26e8:	f1 01       	movw	r30, r2
    26ea:	64 8b       	std	Z+20, r22	; 0x14
    26ec:	75 8b       	std	Z+21, r23	; 0x15
    26ee:	86 8b       	std	Z+22, r24	; 0x16
    26f0:	97 8b       	std	Z+23, r25	; 0x17
    angle += dt * rate;
    26f2:	c7 01       	movw	r24, r14
    26f4:	b6 01       	movw	r22, r12
    26f6:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    26fa:	d1 01       	movw	r26, r2
    26fc:	1c 96       	adiw	r26, 0x0c	; 12
    26fe:	2d 91       	ld	r18, X+
    2700:	3d 91       	ld	r19, X+
    2702:	4d 91       	ld	r20, X+
    2704:	5c 91       	ld	r21, X
    2706:	1f 97       	sbiw	r26, 0x0f	; 15
    2708:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
    270c:	6d 87       	std	Y+13, r22	; 0x0d
    270e:	7e 87       	std	Y+14, r23	; 0x0e
    2710:	8f 87       	std	Y+15, r24	; 0x0f
    2712:	98 8b       	std	Y+16, r25	; 0x10

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
    2714:	d1 01       	movw	r26, r2
    2716:	94 96       	adiw	r26, 0x24	; 36
    2718:	2d 91       	ld	r18, X+
    271a:	3d 91       	ld	r19, X+
    271c:	4d 91       	ld	r20, X+
    271e:	5c 91       	ld	r21, X
    2720:	97 97       	sbiw	r26, 0x27	; 39
    2722:	2d 83       	std	Y+5, r18	; 0x05
    2724:	3e 83       	std	Y+6, r19	; 0x06
    2726:	4f 83       	std	Y+7, r20	; 0x07
    2728:	58 87       	std	Y+8, r21	; 0x08
    272a:	c7 01       	movw	r24, r14
    272c:	b6 01       	movw	r22, r12
    272e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    2732:	4b 01       	movw	r8, r22
    2734:	5c 01       	movw	r10, r24
    2736:	f1 01       	movw	r30, r2
    2738:	44 8c       	ldd	r4, Z+28	; 0x1c
    273a:	55 8c       	ldd	r5, Z+29	; 0x1d
    273c:	66 8c       	ldd	r6, Z+30	; 0x1e
    273e:	77 8c       	ldd	r7, Z+31	; 0x1f
    2740:	20 a1       	ldd	r18, Z+32	; 0x20
    2742:	31 a1       	ldd	r19, Z+33	; 0x21
    2744:	42 a1       	ldd	r20, Z+34	; 0x22
    2746:	53 a1       	ldd	r21, Z+35	; 0x23
    2748:	29 87       	std	Y+9, r18	; 0x09
    274a:	3a 87       	std	Y+10, r19	; 0x0a
    274c:	4b 87       	std	Y+11, r20	; 0x0b
    274e:	5c 87       	std	Y+12, r21	; 0x0c
    2750:	a3 01       	movw	r20, r6
    2752:	92 01       	movw	r18, r4
    2754:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    2758:	29 85       	ldd	r18, Y+9	; 0x09
    275a:	3a 85       	ldd	r19, Y+10	; 0x0a
    275c:	4b 85       	ldd	r20, Y+11	; 0x0b
    275e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2760:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    2764:	f1 01       	movw	r30, r2
    2766:	20 81       	ld	r18, Z
    2768:	31 81       	ldd	r19, Z+1	; 0x01
    276a:	42 81       	ldd	r20, Z+2	; 0x02
    276c:	53 81       	ldd	r21, Z+3	; 0x03
    276e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
    2772:	9b 01       	movw	r18, r22
    2774:	ac 01       	movw	r20, r24
    2776:	c7 01       	movw	r24, r14
    2778:	b6 01       	movw	r22, r12
    277a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    277e:	d1 01       	movw	r26, r2
    2780:	58 96       	adiw	r26, 0x18	; 24
    2782:	2d 91       	ld	r18, X+
    2784:	3d 91       	ld	r19, X+
    2786:	4d 91       	ld	r20, X+
    2788:	5c 91       	ld	r21, X
    278a:	5b 97       	sbiw	r26, 0x1b	; 27
    278c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
    2790:	69 83       	std	Y+1, r22	; 0x01
    2792:	7a 83       	std	Y+2, r23	; 0x02
    2794:	8b 83       	std	Y+3, r24	; 0x03
    2796:	9c 83       	std	Y+4, r25	; 0x04
    P[0][1] -= dt * P[1][1];
    2798:	a5 01       	movw	r20, r10
    279a:	94 01       	movw	r18, r8
    279c:	c3 01       	movw	r24, r6
    279e:	b2 01       	movw	r22, r4
    27a0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    27a4:	2b 01       	movw	r4, r22
    27a6:	3c 01       	movw	r6, r24
    P[1][0] -= dt * P[1][1];
    27a8:	a5 01       	movw	r20, r10
    27aa:	94 01       	movw	r18, r8
    27ac:	69 85       	ldd	r22, Y+9	; 0x09
    27ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    27b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    27b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    27b4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    27b8:	69 87       	std	Y+9, r22	; 0x09
    27ba:	7a 87       	std	Y+10, r23	; 0x0a
    27bc:	8b 87       	std	Y+11, r24	; 0x0b
    27be:	9c 87       	std	Y+12, r25	; 0x0c
    P[1][1] += Q_bias * dt;
    27c0:	f1 01       	movw	r30, r2
    27c2:	24 81       	ldd	r18, Z+4	; 0x04
    27c4:	35 81       	ldd	r19, Z+5	; 0x05
    27c6:	46 81       	ldd	r20, Z+6	; 0x06
    27c8:	57 81       	ldd	r21, Z+7	; 0x07
    27ca:	c7 01       	movw	r24, r14
    27cc:	b6 01       	movw	r22, r12
    27ce:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    27d2:	9b 01       	movw	r18, r22
    27d4:	ac 01       	movw	r20, r24
    27d6:	6d 81       	ldd	r22, Y+5	; 0x05
    27d8:	7e 81       	ldd	r23, Y+6	; 0x06
    27da:	8f 81       	ldd	r24, Y+7	; 0x07
    27dc:	98 85       	ldd	r25, Y+8	; 0x08
    27de:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
    27e2:	69 8f       	std	Y+25, r22	; 0x19
    27e4:	7a 8f       	std	Y+26, r23	; 0x1a
    27e6:	8b 8f       	std	Y+27, r24	; 0x1b
    27e8:	9c 8f       	std	Y+28, r25	; 0x1c

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = P[0][0] + R_measure; // Estimate error
    27ea:	d1 01       	movw	r26, r2
    27ec:	18 96       	adiw	r26, 0x08	; 8
    27ee:	2d 91       	ld	r18, X+
    27f0:	3d 91       	ld	r19, X+
    27f2:	4d 91       	ld	r20, X+
    27f4:	5c 91       	ld	r21, X
    27f6:	1b 97       	sbiw	r26, 0x0b	; 11
    27f8:	69 81       	ldd	r22, Y+1	; 0x01
    27fa:	7a 81       	ldd	r23, Y+2	; 0x02
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
    2804:	6b 01       	movw	r12, r22
    2806:	7c 01       	movw	r14, r24
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
    2808:	9b 01       	movw	r18, r22
    280a:	ac 01       	movw	r20, r24
    280c:	69 81       	ldd	r22, Y+1	; 0x01
    280e:	7a 81       	ldd	r23, Y+2	; 0x02
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
    2818:	4b 01       	movw	r8, r22
    281a:	5c 01       	movw	r10, r24
    K[1] = P[1][0] / S;
    281c:	a7 01       	movw	r20, r14
    281e:	96 01       	movw	r18, r12
    2820:	69 85       	ldd	r22, Y+9	; 0x09
    2822:	7a 85       	ldd	r23, Y+10	; 0x0a
    2824:	8b 85       	ldd	r24, Y+11	; 0x0b
    2826:	9c 85       	ldd	r25, Y+12	; 0x0c
    2828:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__divsf3>
    282c:	6b 01       	movw	r12, r22
    282e:	7c 01       	movw	r14, r24

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
    2830:	2d 85       	ldd	r18, Y+13	; 0x0d
    2832:	3e 85       	ldd	r19, Y+14	; 0x0e
    2834:	4f 85       	ldd	r20, Y+15	; 0x0f
    2836:	58 89       	ldd	r21, Y+16	; 0x10
    2838:	6d 89       	ldd	r22, Y+21	; 0x15
    283a:	7e 89       	ldd	r23, Y+22	; 0x16
    283c:	8f 89       	ldd	r24, Y+23	; 0x17
    283e:	98 8d       	ldd	r25, Y+24	; 0x18
    2840:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    2844:	6d 83       	std	Y+5, r22	; 0x05
    2846:	7e 83       	std	Y+6, r23	; 0x06
    2848:	8f 83       	std	Y+7, r24	; 0x07
    284a:	98 87       	std	Y+8, r25	; 0x08
    /* Step 6 */
    angle += K[0] * y;
    284c:	9b 01       	movw	r18, r22
    284e:	ac 01       	movw	r20, r24
    2850:	c5 01       	movw	r24, r10
    2852:	b4 01       	movw	r22, r8
    2854:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    2858:	9b 01       	movw	r18, r22
    285a:	ac 01       	movw	r20, r24
    285c:	6d 85       	ldd	r22, Y+13	; 0x0d
    285e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2860:	8f 85       	ldd	r24, Y+15	; 0x0f
    2862:	98 89       	ldd	r25, Y+16	; 0x10
    2864:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
    2868:	6d 87       	std	Y+13, r22	; 0x0d
    286a:	7e 87       	std	Y+14, r23	; 0x0e
    286c:	8f 87       	std	Y+15, r24	; 0x0f
    286e:	98 8b       	std	Y+16, r25	; 0x10
    2870:	f1 01       	movw	r30, r2
    2872:	64 87       	std	Z+12, r22	; 0x0c
    2874:	75 87       	std	Z+13, r23	; 0x0d
    2876:	86 87       	std	Z+14, r24	; 0x0e
    2878:	97 87       	std	Z+15, r25	; 0x0f
    bias += K[1] * y;
    287a:	2d 81       	ldd	r18, Y+5	; 0x05
    287c:	3e 81       	ldd	r19, Y+6	; 0x06
    287e:	4f 81       	ldd	r20, Y+7	; 0x07
    2880:	58 85       	ldd	r21, Y+8	; 0x08
    2882:	c7 01       	movw	r24, r14
    2884:	b6 01       	movw	r22, r12
    2886:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    288a:	9b 01       	movw	r18, r22
    288c:	ac 01       	movw	r20, r24
    288e:	69 89       	ldd	r22, Y+17	; 0x11
    2890:	7a 89       	ldd	r23, Y+18	; 0x12
    2892:	8b 89       	ldd	r24, Y+19	; 0x13
    2894:	9c 89       	ldd	r25, Y+20	; 0x14
    2896:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
    289a:	d1 01       	movw	r26, r2
    289c:	50 96       	adiw	r26, 0x10	; 16
    289e:	6d 93       	st	X+, r22
    28a0:	7d 93       	st	X+, r23
    28a2:	8d 93       	st	X+, r24
    28a4:	9c 93       	st	X, r25
    28a6:	53 97       	sbiw	r26, 0x13	; 19
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
    28a8:	29 81       	ldd	r18, Y+1	; 0x01
    28aa:	3a 81       	ldd	r19, Y+2	; 0x02
    28ac:	4b 81       	ldd	r20, Y+3	; 0x03
    28ae:	5c 81       	ldd	r21, Y+4	; 0x04
    28b0:	c5 01       	movw	r24, r10
    28b2:	b4 01       	movw	r22, r8
    28b4:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    28b8:	9b 01       	movw	r18, r22
    28ba:	ac 01       	movw	r20, r24
    28bc:	69 81       	ldd	r22, Y+1	; 0x01
    28be:	7a 81       	ldd	r23, Y+2	; 0x02
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	9c 81       	ldd	r25, Y+4	; 0x04
    28c4:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    28c8:	f1 01       	movw	r30, r2
    28ca:	60 8f       	std	Z+24, r22	; 0x18
    28cc:	71 8f       	std	Z+25, r23	; 0x19
    28ce:	82 8f       	std	Z+26, r24	; 0x1a
    28d0:	93 8f       	std	Z+27, r25	; 0x1b
    P[0][1] -= K[0] * P01_temp;
    28d2:	a3 01       	movw	r20, r6
    28d4:	92 01       	movw	r18, r4
    28d6:	c5 01       	movw	r24, r10
    28d8:	b4 01       	movw	r22, r8
    28da:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    28de:	9b 01       	movw	r18, r22
    28e0:	ac 01       	movw	r20, r24
    28e2:	c3 01       	movw	r24, r6
    28e4:	b2 01       	movw	r22, r4
    28e6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    28ea:	d1 01       	movw	r26, r2
    28ec:	5c 96       	adiw	r26, 0x1c	; 28
    28ee:	6d 93       	st	X+, r22
    28f0:	7d 93       	st	X+, r23
    28f2:	8d 93       	st	X+, r24
    28f4:	9c 93       	st	X, r25
    28f6:	5f 97       	sbiw	r26, 0x1f	; 31
    P[1][0] -= K[1] * P00_temp;
    28f8:	29 81       	ldd	r18, Y+1	; 0x01
    28fa:	3a 81       	ldd	r19, Y+2	; 0x02
    28fc:	4b 81       	ldd	r20, Y+3	; 0x03
    28fe:	5c 81       	ldd	r21, Y+4	; 0x04
    2900:	c7 01       	movw	r24, r14
    2902:	b6 01       	movw	r22, r12
    2904:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    2908:	9b 01       	movw	r18, r22
    290a:	ac 01       	movw	r20, r24
    290c:	69 85       	ldd	r22, Y+9	; 0x09
    290e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2910:	8b 85       	ldd	r24, Y+11	; 0x0b
    2912:	9c 85       	ldd	r25, Y+12	; 0x0c
    2914:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    2918:	f1 01       	movw	r30, r2
    291a:	60 a3       	std	Z+32, r22	; 0x20
    291c:	71 a3       	std	Z+33, r23	; 0x21
    291e:	82 a3       	std	Z+34, r24	; 0x22
    2920:	93 a3       	std	Z+35, r25	; 0x23
    P[1][1] -= K[1] * P01_temp;
    2922:	a3 01       	movw	r20, r6
    2924:	92 01       	movw	r18, r4
    2926:	c7 01       	movw	r24, r14
    2928:	b6 01       	movw	r22, r12
    292a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    292e:	9b 01       	movw	r18, r22
    2930:	ac 01       	movw	r20, r24
    2932:	69 8d       	ldd	r22, Y+25	; 0x19
    2934:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2936:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2938:	9c 8d       	ldd	r25, Y+28	; 0x1c
    293a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    293e:	d1 01       	movw	r26, r2
    2940:	94 96       	adiw	r26, 0x24	; 36
    2942:	6d 93       	st	X+, r22
    2944:	7d 93       	st	X+, r23
    2946:	8d 93       	st	X+, r24
    2948:	9c 93       	st	X, r25
    294a:	97 97       	sbiw	r26, 0x27	; 39

    return angle;
};
    294c:	6d 85       	ldd	r22, Y+13	; 0x0d
    294e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2950:	8f 85       	ldd	r24, Y+15	; 0x0f
    2952:	98 89       	ldd	r25, Y+16	; 0x10
    2954:	6c 96       	adiw	r28, 0x1c	; 28
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	1f 91       	pop	r17
    2966:	0f 91       	pop	r16
    2968:	ff 90       	pop	r15
    296a:	ef 90       	pop	r14
    296c:	df 90       	pop	r13
    296e:	cf 90       	pop	r12
    2970:	bf 90       	pop	r11
    2972:	af 90       	pop	r10
    2974:	9f 90       	pop	r9
    2976:	8f 90       	pop	r8
    2978:	7f 90       	pop	r7
    297a:	6f 90       	pop	r6
    297c:	5f 90       	pop	r5
    297e:	4f 90       	pop	r4
    2980:	3f 90       	pop	r3
    2982:	2f 90       	pop	r2
    2984:	08 95       	ret

00002986 <_ZN6Kalman8setAngleEf>:

void Kalman::setAngle(float angle) { this->angle = angle; }; // Used to set angle, this should be set as the starting angle
    2986:	fc 01       	movw	r30, r24
    2988:	44 87       	std	Z+12, r20	; 0x0c
    298a:	55 87       	std	Z+13, r21	; 0x0d
    298c:	66 87       	std	Z+14, r22	; 0x0e
    298e:	77 87       	std	Z+15, r23	; 0x0f
    2990:	08 95       	ret

00002992 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2992:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <_ZN7TwoWire14rxBufferLengthE>
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	20 91 df 03 	lds	r18, 0x03DF	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    299c:	82 1b       	sub	r24, r18
    299e:	91 09       	sbc	r25, r1
    29a0:	08 95       	ret

000029a2 <_ZN7TwoWire4readEv>:
    29a2:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    29a6:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <_ZN7TwoWire14rxBufferLengthE>
    29aa:	98 17       	cp	r25, r24
    29ac:	50 f4       	brcc	.+20     	; 0x29c2 <_ZN7TwoWire4readEv+0x20>
    29ae:	e9 2f       	mov	r30, r25
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	e0 52       	subi	r30, 0x20	; 32
    29b4:	fc 4f       	sbci	r31, 0xFC	; 252
    29b6:	20 81       	ld	r18, Z
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	9f 5f       	subi	r25, 0xFF	; 255
    29bc:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <_ZN7TwoWire4readEv+0x24>
    29c2:	2f ef       	ldi	r18, 0xFF	; 255
    29c4:	3f ef       	ldi	r19, 0xFF	; 255
    29c6:	c9 01       	movw	r24, r18
    29c8:	08 95       	ret

000029ca <_ZN7TwoWire4peekEv>:
    29ca:	e0 91 df 03 	lds	r30, 0x03DF	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    29ce:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <_ZN7TwoWire14rxBufferLengthE>
    29d2:	e8 17       	cp	r30, r24
    29d4:	30 f4       	brcc	.+12     	; 0x29e2 <_ZN7TwoWire4peekEv+0x18>
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	e0 52       	subi	r30, 0x20	; 32
    29da:	fc 4f       	sbci	r31, 0xFC	; 252
    29dc:	80 81       	ld	r24, Z
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	08 95       	ret
    29e2:	8f ef       	ldi	r24, 0xFF	; 255
    29e4:	9f ef       	ldi	r25, 0xFF	; 255
    29e6:	08 95       	ret

000029e8 <_ZN7TwoWire5flushEv>:
    29e8:	08 95       	ret

000029ea <_ZN7TwoWire5writeEPKhj>:
    29ea:	cf 92       	push	r12
    29ec:	df 92       	push	r13
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	7c 01       	movw	r14, r24
    29fc:	26 2f       	mov	r18, r22
    29fe:	97 2f       	mov	r25, r23
    2a00:	8a 01       	movw	r16, r20
    2a02:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <_ZN7TwoWire12transmittingE>
    2a06:	88 23       	and	r24, r24
    2a08:	91 f0       	breq	.+36     	; 0x2a2e <_ZN7TwoWire5writeEPKhj+0x44>
    2a0a:	c6 2f       	mov	r28, r22
    2a0c:	d7 2f       	mov	r29, r23
    2a0e:	6e 01       	movw	r12, r28
    2a10:	c4 0e       	add	r12, r20
    2a12:	d5 1e       	adc	r13, r21
    2a14:	cc 15       	cp	r28, r12
    2a16:	dd 05       	cpc	r29, r13
    2a18:	71 f0       	breq	.+28     	; 0x2a36 <_ZN7TwoWire5writeEPKhj+0x4c>
    2a1a:	69 91       	ld	r22, Y+
    2a1c:	d7 01       	movw	r26, r14
    2a1e:	ed 91       	ld	r30, X+
    2a20:	fc 91       	ld	r31, X
    2a22:	01 90       	ld	r0, Z+
    2a24:	f0 81       	ld	r31, Z
    2a26:	e0 2d       	mov	r30, r0
    2a28:	c7 01       	movw	r24, r14
    2a2a:	09 95       	icall
    2a2c:	f3 cf       	rjmp	.-26     	; 0x2a14 <_ZN7TwoWire5writeEPKhj+0x2a>
    2a2e:	64 2f       	mov	r22, r20
    2a30:	82 2f       	mov	r24, r18
    2a32:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <twi_transmit>
    2a36:	c8 01       	movw	r24, r16
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	1f 91       	pop	r17
    2a3e:	0f 91       	pop	r16
    2a40:	ff 90       	pop	r15
    2a42:	ef 90       	pop	r14
    2a44:	df 90       	pop	r13
    2a46:	cf 90       	pop	r12
    2a48:	08 95       	ret

00002a4a <_ZN7TwoWire5writeEh>:
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	1f 92       	push	r1
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	69 83       	std	Y+1, r22	; 0x01
    2a56:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <_ZN7TwoWire12transmittingE>
    2a5a:	22 23       	and	r18, r18
    2a5c:	d1 f0       	breq	.+52     	; 0x2a92 <_ZN7TwoWire5writeEh+0x48>
    2a5e:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2a62:	20 32       	cpi	r18, 0x20	; 32
    2a64:	40 f0       	brcs	.+16     	; 0x2a76 <_ZN7TwoWire5writeEh+0x2c>
    2a66:	21 e0       	ldi	r18, 0x01	; 1
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	33 83       	std	Z+3, r19	; 0x03
    2a6e:	22 83       	std	Z+2, r18	; 0x02
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	15 c0       	rjmp	.+42     	; 0x2aa0 <_ZN7TwoWire5writeEh+0x56>
    2a76:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <_ZN7TwoWire13txBufferIndexE>
    2a7a:	e8 2f       	mov	r30, r24
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	e3 54       	subi	r30, 0x43	; 67
    2a80:	fc 4f       	sbci	r31, 0xFC	; 252
    2a82:	99 81       	ldd	r25, Y+1	; 0x01
    2a84:	90 83       	st	Z, r25
    2a86:	8f 5f       	subi	r24, 0xFF	; 255
    2a88:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <_ZN7TwoWire13txBufferIndexE>
    2a8c:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2a90:	05 c0       	rjmp	.+10     	; 0x2a9c <_ZN7TwoWire5writeEh+0x52>
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	ce 01       	movw	r24, r28
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <twi_transmit>
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0f 90       	pop	r0
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	08 95       	ret

00002aa8 <_ZN7TwoWireC1Ev>:
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	13 82       	std	Z+3, r1	; 0x03
    2aac:	12 82       	std	Z+2, r1	; 0x02
    2aae:	88 ee       	ldi	r24, 0xE8	; 232
    2ab0:	93 e0       	ldi	r25, 0x03	; 3
    2ab2:	a0 e0       	ldi	r26, 0x00	; 0
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	84 83       	std	Z+4, r24	; 0x04
    2ab8:	95 83       	std	Z+5, r25	; 0x05
    2aba:	a6 83       	std	Z+6, r26	; 0x06
    2abc:	b7 83       	std	Z+7, r27	; 0x07
    2abe:	8a e1       	ldi	r24, 0x1A	; 26
    2ac0:	92 e0       	ldi	r25, 0x02	; 2
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	80 83       	st	Z, r24
    2ac6:	08 95       	ret

00002ac8 <_ZN7TwoWire5beginEv>:
    2ac8:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    2acc:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <_ZN7TwoWire14rxBufferLengthE>
    2ad0:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <_ZN7TwoWire13txBufferIndexE>
    2ad4:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2ad8:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <twi_init>

00002adc <_ZN7TwoWire17beginTransmissionEh>:
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <_ZN7TwoWire12transmittingE>
    2ae2:	60 93 dd 03 	sts	0x03DD, r22	; 0x8003dd <_ZN7TwoWire9txAddressE>
    2ae6:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <_ZN7TwoWire13txBufferIndexE>
    2aea:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2aee:	08 95       	ret

00002af0 <_ZN7TwoWire17beginTransmissionEi>:
    2af0:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <_ZN7TwoWire17beginTransmissionEh>

00002af4 <_ZN7TwoWire15endTransmissionEh>:
    2af4:	0f 93       	push	r16
    2af6:	06 2f       	mov	r16, r22
    2af8:	21 e0       	ldi	r18, 0x01	; 1
    2afa:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2afe:	6d eb       	ldi	r22, 0xBD	; 189
    2b00:	73 e0       	ldi	r23, 0x03	; 3
    2b02:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZN7TwoWire9txAddressE>
    2b06:	0e 94 67 16 	call	0x2cce	; 0x2cce <twi_writeTo>
    2b0a:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <_ZN7TwoWire13txBufferIndexE>
    2b0e:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2b12:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <_ZN7TwoWire12transmittingE>
    2b16:	0f 91       	pop	r16
    2b18:	08 95       	ret

00002b1a <_ZN7TwoWire11requestFromEhhmhh>:
    2b1a:	4f 92       	push	r4
    2b1c:	5f 92       	push	r5
    2b1e:	6f 92       	push	r6
    2b20:	7f 92       	push	r7
    2b22:	af 92       	push	r10
    2b24:	bf 92       	push	r11
    2b26:	cf 92       	push	r12
    2b28:	ef 92       	push	r14
    2b2a:	ff 92       	push	r15
    2b2c:	0f 93       	push	r16
    2b2e:	1f 93       	push	r17
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	5c 01       	movw	r10, r24
    2b36:	f6 2e       	mov	r15, r22
    2b38:	d4 2f       	mov	r29, r20
    2b3a:	28 01       	movw	r4, r16
    2b3c:	39 01       	movw	r6, r18
    2b3e:	ee 20       	and	r14, r14
    2b40:	21 f1       	breq	.+72     	; 0x2b8a <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2b42:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN7TwoWire17beginTransmissionEh>
    2b46:	ce 2d       	mov	r28, r14
    2b48:	c4 30       	cpi	r28, 0x04	; 4
    2b4a:	08 f0       	brcs	.+2      	; 0x2b4e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2b4c:	c3 e0       	ldi	r28, 0x03	; 3
    2b4e:	c1 50       	subi	r28, 0x01	; 1
    2b50:	c0 f0       	brcs	.+48     	; 0x2b82 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2b52:	d5 01       	movw	r26, r10
    2b54:	ed 91       	ld	r30, X+
    2b56:	fc 91       	ld	r31, X
    2b58:	b8 e0       	ldi	r27, 0x08	; 8
    2b5a:	cb 9f       	mul	r28, r27
    2b5c:	c0 01       	movw	r24, r0
    2b5e:	11 24       	eor	r1, r1
    2b60:	a3 01       	movw	r20, r6
    2b62:	92 01       	movw	r18, r4
    2b64:	04 c0       	rjmp	.+8      	; 0x2b6e <_ZN7TwoWire11requestFromEhhmhh+0x54>
    2b66:	56 95       	lsr	r21
    2b68:	47 95       	ror	r20
    2b6a:	37 95       	ror	r19
    2b6c:	27 95       	ror	r18
    2b6e:	8a 95       	dec	r24
    2b70:	d2 f7       	brpl	.-12     	; 0x2b66 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    2b72:	ca 01       	movw	r24, r20
    2b74:	b9 01       	movw	r22, r18
    2b76:	01 90       	ld	r0, Z+
    2b78:	f0 81       	ld	r31, Z
    2b7a:	e0 2d       	mov	r30, r0
    2b7c:	c5 01       	movw	r24, r10
    2b7e:	09 95       	icall
    2b80:	e6 cf       	rjmp	.-52     	; 0x2b4e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	c5 01       	movw	r24, r10
    2b86:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <_ZN7TwoWire15endTransmissionEh>
    2b8a:	4d 2f       	mov	r20, r29
    2b8c:	d1 32       	cpi	r29, 0x21	; 33
    2b8e:	08 f0       	brcs	.+2      	; 0x2b92 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2b90:	40 e2       	ldi	r20, 0x20	; 32
    2b92:	2c 2d       	mov	r18, r12
    2b94:	60 ee       	ldi	r22, 0xE0	; 224
    2b96:	73 e0       	ldi	r23, 0x03	; 3
    2b98:	8f 2d       	mov	r24, r15
    2b9a:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <twi_readFrom>
    2b9e:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    2ba2:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <_ZN7TwoWire14rxBufferLengthE>
    2ba6:	df 91       	pop	r29
    2ba8:	cf 91       	pop	r28
    2baa:	1f 91       	pop	r17
    2bac:	0f 91       	pop	r16
    2bae:	ff 90       	pop	r15
    2bb0:	ef 90       	pop	r14
    2bb2:	cf 90       	pop	r12
    2bb4:	bf 90       	pop	r11
    2bb6:	af 90       	pop	r10
    2bb8:	7f 90       	pop	r7
    2bba:	6f 90       	pop	r6
    2bbc:	5f 90       	pop	r5
    2bbe:	4f 90       	pop	r4
    2bc0:	08 95       	ret

00002bc2 <_ZN7TwoWire11requestFromEhhh>:
    2bc2:	cf 92       	push	r12
    2bc4:	ef 92       	push	r14
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	c2 2e       	mov	r12, r18
    2bcc:	e1 2c       	mov	r14, r1
    2bce:	00 e0       	ldi	r16, 0x00	; 0
    2bd0:	10 e0       	ldi	r17, 0x00	; 0
    2bd2:	98 01       	movw	r18, r16
    2bd4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN7TwoWire11requestFromEhhmhh>
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	ef 90       	pop	r14
    2bde:	cf 90       	pop	r12
    2be0:	08 95       	ret

00002be2 <_ZN7TwoWire11requestFromEhh>:
    2be2:	21 e0       	ldi	r18, 0x01	; 1
    2be4:	0c 94 e1 15 	jmp	0x2bc2	; 0x2bc2 <_ZN7TwoWire11requestFromEhhh>

00002be8 <_ZN7TwoWire11requestFromEii>:
    2be8:	21 e0       	ldi	r18, 0x01	; 1
    2bea:	0c 94 e1 15 	jmp	0x2bc2	; 0x2bc2 <_ZN7TwoWire11requestFromEhhh>

00002bee <_ZN7TwoWire15endTransmissionEv>:
    2bee:	61 e0       	ldi	r22, 0x01	; 1
    2bf0:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <_ZN7TwoWire15endTransmissionEh>

00002bf4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2bf4:	8e ea       	ldi	r24, 0xAE	; 174
    2bf6:	93 e0       	ldi	r25, 0x03	; 3
    2bf8:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <_ZN7TwoWireC1Ev>

00002bfc <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2bfc:	08 95       	ret

00002bfe <_ZdlPv>:
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    2bfe:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <free>

00002c02 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2c02:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_state>
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <twi_sendStop>
    2c0c:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <twi_inRepStart>
    2c10:	61 e0       	ldi	r22, 0x01	; 1
    2c12:	82 e1       	ldi	r24, 0x12	; 18
    2c14:	0e 94 fe 10 	call	0x21fc	; 0x21fc <digitalWrite>
    2c18:	61 e0       	ldi	r22, 0x01	; 1
    2c1a:	83 e1       	ldi	r24, 0x13	; 19
    2c1c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <digitalWrite>
    2c20:	e9 eb       	ldi	r30, 0xB9	; 185
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	8e 7f       	andi	r24, 0xFE	; 254
    2c28:	80 83       	st	Z, r24
    2c2a:	80 81       	ld	r24, Z
    2c2c:	8d 7f       	andi	r24, 0xFD	; 253
    2c2e:	80 83       	st	Z, r24
    2c30:	88 e4       	ldi	r24, 0x48	; 72
    2c32:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2c36:	85 e4       	ldi	r24, 0x45	; 69
    2c38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2c3c:	08 95       	ret

00002c3e <twi_readFrom>:
    2c3e:	41 32       	cpi	r20, 0x21	; 33
    2c40:	08 f0       	brcs	.+2      	; 0x2c44 <twi_readFrom+0x6>
    2c42:	43 c0       	rjmp	.+134    	; 0x2cca <twi_readFrom+0x8c>
    2c44:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <twi_state>
    2c48:	91 11       	cpse	r25, r1
    2c4a:	fc cf       	rjmp	.-8      	; 0x2c44 <twi_readFrom+0x6>
    2c4c:	91 e0       	ldi	r25, 0x01	; 1
    2c4e:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <twi_state>
    2c52:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <twi_sendStop>
    2c56:	2f ef       	ldi	r18, 0xFF	; 255
    2c58:	20 93 00 04 	sts	0x0400, r18	; 0x800400 <twi_error>
    2c5c:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_masterBufferIndex>
    2c60:	24 0f       	add	r18, r20
    2c62:	20 93 44 04 	sts	0x0444, r18	; 0x800444 <twi_masterBufferLength>
    2c66:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <twi_slarw>
    2c6a:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <twi_slarw>
    2c6e:	88 0f       	add	r24, r24
    2c70:	89 2b       	or	r24, r25
    2c72:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <twi_slarw>
    2c76:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <twi_inRepStart>
    2c7a:	81 30       	cpi	r24, 0x01	; 1
    2c7c:	61 f4       	brne	.+24     	; 0x2c96 <twi_readFrom+0x58>
    2c7e:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <twi_inRepStart>
    2c82:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_slarw>
    2c86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2c8a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2c8e:	83 fd       	sbrc	r24, 3
    2c90:	f8 cf       	rjmp	.-16     	; 0x2c82 <twi_readFrom+0x44>
    2c92:	85 ec       	ldi	r24, 0xC5	; 197
    2c94:	01 c0       	rjmp	.+2      	; 0x2c98 <twi_readFrom+0x5a>
    2c96:	85 ee       	ldi	r24, 0xE5	; 229
    2c98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2c9c:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <twi_state>
    2ca0:	81 30       	cpi	r24, 0x01	; 1
    2ca2:	e1 f3       	breq	.-8      	; 0x2c9c <twi_readFrom+0x5e>
    2ca4:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2ca8:	84 17       	cp	r24, r20
    2caa:	10 f4       	brcc	.+4      	; 0x2cb0 <twi_readFrom+0x72>
    2cac:	40 91 45 04 	lds	r20, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2cb0:	26 e4       	ldi	r18, 0x46	; 70
    2cb2:	34 e0       	ldi	r19, 0x04	; 4
    2cb4:	fb 01       	movw	r30, r22
    2cb6:	d9 01       	movw	r26, r18
    2cb8:	8a 2f       	mov	r24, r26
    2cba:	82 1b       	sub	r24, r18
    2cbc:	84 17       	cp	r24, r20
    2cbe:	18 f4       	brcc	.+6      	; 0x2cc6 <twi_readFrom+0x88>
    2cc0:	8d 91       	ld	r24, X+
    2cc2:	81 93       	st	Z+, r24
    2cc4:	f9 cf       	rjmp	.-14     	; 0x2cb8 <twi_readFrom+0x7a>
    2cc6:	84 2f       	mov	r24, r20
    2cc8:	08 95       	ret
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	08 95       	ret

00002cce <twi_writeTo>:
    2cce:	0f 93       	push	r16
    2cd0:	41 32       	cpi	r20, 0x21	; 33
    2cd2:	08 f0       	brcs	.+2      	; 0x2cd6 <twi_writeTo+0x8>
    2cd4:	4a c0       	rjmp	.+148    	; 0x2d6a <twi_writeTo+0x9c>
    2cd6:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <twi_state>
    2cda:	91 11       	cpse	r25, r1
    2cdc:	fc cf       	rjmp	.-8      	; 0x2cd6 <twi_writeTo+0x8>
    2cde:	32 e0       	ldi	r19, 0x02	; 2
    2ce0:	30 93 6d 04 	sts	0x046D, r19	; 0x80046d <twi_state>
    2ce4:	00 93 6b 04 	sts	0x046B, r16	; 0x80046b <twi_sendStop>
    2ce8:	3f ef       	ldi	r19, 0xFF	; 255
    2cea:	30 93 00 04 	sts	0x0400, r19	; 0x800400 <twi_error>
    2cee:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_masterBufferIndex>
    2cf2:	40 93 44 04 	sts	0x0444, r20	; 0x800444 <twi_masterBufferLength>
    2cf6:	fb 01       	movw	r30, r22
    2cf8:	66 e4       	ldi	r22, 0x46	; 70
    2cfa:	74 e0       	ldi	r23, 0x04	; 4
    2cfc:	db 01       	movw	r26, r22
    2cfe:	3a 2f       	mov	r19, r26
    2d00:	36 1b       	sub	r19, r22
    2d02:	34 17       	cp	r19, r20
    2d04:	18 f4       	brcc	.+6      	; 0x2d0c <twi_writeTo+0x3e>
    2d06:	31 91       	ld	r19, Z+
    2d08:	3d 93       	st	X+, r19
    2d0a:	f9 cf       	rjmp	.-14     	; 0x2cfe <twi_writeTo+0x30>
    2d0c:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <twi_slarw>
    2d10:	30 91 6c 04 	lds	r19, 0x046C	; 0x80046c <twi_slarw>
    2d14:	88 0f       	add	r24, r24
    2d16:	83 2b       	or	r24, r19
    2d18:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <twi_slarw>
    2d1c:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <twi_inRepStart>
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	61 f4       	brne	.+24     	; 0x2d3c <twi_writeTo+0x6e>
    2d24:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <twi_inRepStart>
    2d28:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_slarw>
    2d2c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d30:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d34:	83 fd       	sbrc	r24, 3
    2d36:	f8 cf       	rjmp	.-16     	; 0x2d28 <twi_writeTo+0x5a>
    2d38:	85 ec       	ldi	r24, 0xC5	; 197
    2d3a:	01 c0       	rjmp	.+2      	; 0x2d3e <twi_writeTo+0x70>
    2d3c:	85 ee       	ldi	r24, 0xE5	; 229
    2d3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d42:	22 23       	and	r18, r18
    2d44:	21 f0       	breq	.+8      	; 0x2d4e <twi_writeTo+0x80>
    2d46:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <twi_state>
    2d4a:	82 30       	cpi	r24, 0x02	; 2
    2d4c:	d1 f3       	breq	.-12     	; 0x2d42 <twi_writeTo+0x74>
    2d4e:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_error>
    2d52:	8f 3f       	cpi	r24, 0xFF	; 255
    2d54:	79 f0       	breq	.+30     	; 0x2d74 <twi_writeTo+0xa6>
    2d56:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_error>
    2d5a:	80 32       	cpi	r24, 0x20	; 32
    2d5c:	41 f0       	breq	.+16     	; 0x2d6e <twi_writeTo+0xa0>
    2d5e:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_error>
    2d62:	80 33       	cpi	r24, 0x30	; 48
    2d64:	31 f0       	breq	.+12     	; 0x2d72 <twi_writeTo+0xa4>
    2d66:	94 e0       	ldi	r25, 0x04	; 4
    2d68:	05 c0       	rjmp	.+10     	; 0x2d74 <twi_writeTo+0xa6>
    2d6a:	91 e0       	ldi	r25, 0x01	; 1
    2d6c:	03 c0       	rjmp	.+6      	; 0x2d74 <twi_writeTo+0xa6>
    2d6e:	92 e0       	ldi	r25, 0x02	; 2
    2d70:	01 c0       	rjmp	.+2      	; 0x2d74 <twi_writeTo+0xa6>
    2d72:	93 e0       	ldi	r25, 0x03	; 3
    2d74:	89 2f       	mov	r24, r25
    2d76:	0f 91       	pop	r16
    2d78:	08 95       	ret

00002d7a <twi_transmit>:
    2d7a:	61 32       	cpi	r22, 0x21	; 33
    2d7c:	98 f4       	brcc	.+38     	; 0x2da4 <twi_transmit+0x2a>
    2d7e:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <twi_state>
    2d82:	24 30       	cpi	r18, 0x04	; 4
    2d84:	89 f4       	brne	.+34     	; 0x2da8 <twi_transmit+0x2e>
    2d86:	60 93 22 04 	sts	0x0422, r22	; 0x800422 <twi_txBufferLength>
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	24 e2       	ldi	r18, 0x24	; 36
    2d8e:	34 e0       	ldi	r19, 0x04	; 4
    2d90:	d9 01       	movw	r26, r18
    2d92:	8a 2f       	mov	r24, r26
    2d94:	82 1b       	sub	r24, r18
    2d96:	86 17       	cp	r24, r22
    2d98:	18 f4       	brcc	.+6      	; 0x2da0 <twi_transmit+0x26>
    2d9a:	81 91       	ld	r24, Z+
    2d9c:	8d 93       	st	X+, r24
    2d9e:	f9 cf       	rjmp	.-14     	; 0x2d92 <twi_transmit+0x18>
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	08 95       	ret
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	08 95       	ret
    2da8:	82 e0       	ldi	r24, 0x02	; 2
    2daa:	08 95       	ret

00002dac <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2dac:	85 ed       	ldi	r24, 0xD5	; 213
    2dae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2db2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2db6:	84 fd       	sbrc	r24, 4
    2db8:	fc cf       	rjmp	.-8      	; 0x2db2 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2dba:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_state>
    2dbe:	08 95       	ret

00002dc0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2dc0:	85 ec       	ldi	r24, 0xC5	; 197
    2dc2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2dc6:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_state>
    2dca:	08 95       	ret

00002dcc <__vector_24>:
}

ISR(TWI_vect)
{
    2dcc:	1f 92       	push	r1
    2dce:	0f 92       	push	r0
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	0f 92       	push	r0
    2dd4:	11 24       	eor	r1, r1
    2dd6:	2f 93       	push	r18
    2dd8:	3f 93       	push	r19
    2dda:	4f 93       	push	r20
    2ddc:	5f 93       	push	r21
    2dde:	6f 93       	push	r22
    2de0:	7f 93       	push	r23
    2de2:	8f 93       	push	r24
    2de4:	9f 93       	push	r25
    2de6:	af 93       	push	r26
    2de8:	bf 93       	push	r27
    2dea:	ef 93       	push	r30
    2dec:	ff 93       	push	r31
  switch(TW_STATUS){
    2dee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2df2:	88 7f       	andi	r24, 0xF8	; 248
    2df4:	80 36       	cpi	r24, 0x60	; 96
    2df6:	09 f4       	brne	.+2      	; 0x2dfa <__vector_24+0x2e>
    2df8:	9e c0       	rjmp	.+316    	; 0x2f36 <__vector_24+0x16a>
    2dfa:	78 f5       	brcc	.+94     	; 0x2e5a <__vector_24+0x8e>
    2dfc:	88 32       	cpi	r24, 0x28	; 40
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <__vector_24+0x36>
    2e00:	5d c0       	rjmp	.+186    	; 0x2ebc <__vector_24+0xf0>
    2e02:	90 f4       	brcc	.+36     	; 0x2e28 <__vector_24+0x5c>
    2e04:	80 31       	cpi	r24, 0x10	; 16
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <__vector_24+0x3e>
    2e08:	56 c0       	rjmp	.+172    	; 0x2eb6 <__vector_24+0xea>
    2e0a:	38 f4       	brcc	.+14     	; 0x2e1a <__vector_24+0x4e>
    2e0c:	88 23       	and	r24, r24
    2e0e:	09 f4       	brne	.+2      	; 0x2e12 <__vector_24+0x46>
    2e10:	f5 c0       	rjmp	.+490    	; 0x2ffc <__vector_24+0x230>
    2e12:	88 30       	cpi	r24, 0x08	; 8
    2e14:	09 f4       	brne	.+2      	; 0x2e18 <__vector_24+0x4c>
    2e16:	4f c0       	rjmp	.+158    	; 0x2eb6 <__vector_24+0xea>
    2e18:	f5 c0       	rjmp	.+490    	; 0x3004 <__vector_24+0x238>
    2e1a:	88 31       	cpi	r24, 0x18	; 24
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <__vector_24+0x54>
    2e1e:	4e c0       	rjmp	.+156    	; 0x2ebc <__vector_24+0xf0>
    2e20:	80 32       	cpi	r24, 0x20	; 32
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <__vector_24+0x5a>
    2e24:	5f c0       	rjmp	.+190    	; 0x2ee4 <__vector_24+0x118>
    2e26:	ee c0       	rjmp	.+476    	; 0x3004 <__vector_24+0x238>
    2e28:	80 34       	cpi	r24, 0x40	; 64
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <__vector_24+0x62>
    2e2c:	6a c0       	rjmp	.+212    	; 0x2f02 <__vector_24+0x136>
    2e2e:	58 f4       	brcc	.+22     	; 0x2e46 <__vector_24+0x7a>
    2e30:	80 33       	cpi	r24, 0x30	; 48
    2e32:	09 f4       	brne	.+2      	; 0x2e36 <__vector_24+0x6a>
    2e34:	57 c0       	rjmp	.+174    	; 0x2ee4 <__vector_24+0x118>
    2e36:	88 33       	cpi	r24, 0x38	; 56
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <__vector_24+0x70>
    2e3a:	e4 c0       	rjmp	.+456    	; 0x3004 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2e3c:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <twi_error>
      twi_releaseBus();
    2e40:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <twi_releaseBus>
      break;
    2e44:	df c0       	rjmp	.+446    	; 0x3004 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2e46:	80 35       	cpi	r24, 0x50	; 80
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <__vector_24+0x80>
    2e4a:	4f c0       	rjmp	.+158    	; 0x2eea <__vector_24+0x11e>
    2e4c:	88 35       	cpi	r24, 0x58	; 88
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <__vector_24+0x86>
    2e50:	5d c0       	rjmp	.+186    	; 0x2f0c <__vector_24+0x140>
    2e52:	88 34       	cpi	r24, 0x48	; 72
    2e54:	09 f0       	breq	.+2      	; 0x2e58 <__vector_24+0x8c>
    2e56:	d6 c0       	rjmp	.+428    	; 0x3004 <__vector_24+0x238>
    2e58:	d3 c0       	rjmp	.+422    	; 0x3000 <__vector_24+0x234>
    2e5a:	88 39       	cpi	r24, 0x98	; 152
    2e5c:	09 f4       	brne	.+2      	; 0x2e60 <__vector_24+0x94>
    2e5e:	c4 c0       	rjmp	.+392    	; 0x2fe8 <__vector_24+0x21c>
    2e60:	a8 f4       	brcc	.+42     	; 0x2e8c <__vector_24+0xc0>
    2e62:	88 37       	cpi	r24, 0x78	; 120
    2e64:	09 f4       	brne	.+2      	; 0x2e68 <__vector_24+0x9c>
    2e66:	67 c0       	rjmp	.+206    	; 0x2f36 <__vector_24+0x16a>
    2e68:	38 f4       	brcc	.+14     	; 0x2e78 <__vector_24+0xac>
    2e6a:	88 36       	cpi	r24, 0x68	; 104
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <__vector_24+0xa4>
    2e6e:	63 c0       	rjmp	.+198    	; 0x2f36 <__vector_24+0x16a>
    2e70:	80 37       	cpi	r24, 0x70	; 112
    2e72:	09 f4       	brne	.+2      	; 0x2e76 <__vector_24+0xaa>
    2e74:	60 c0       	rjmp	.+192    	; 0x2f36 <__vector_24+0x16a>
    2e76:	c6 c0       	rjmp	.+396    	; 0x3004 <__vector_24+0x238>
    2e78:	88 38       	cpi	r24, 0x88	; 136
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <__vector_24+0xb2>
    2e7c:	b5 c0       	rjmp	.+362    	; 0x2fe8 <__vector_24+0x21c>
    2e7e:	80 39       	cpi	r24, 0x90	; 144
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <__vector_24+0xb8>
    2e82:	5f c0       	rjmp	.+190    	; 0x2f42 <__vector_24+0x176>
    2e84:	80 38       	cpi	r24, 0x80	; 128
    2e86:	09 f0       	breq	.+2      	; 0x2e8a <__vector_24+0xbe>
    2e88:	bd c0       	rjmp	.+378    	; 0x3004 <__vector_24+0x238>
    2e8a:	5b c0       	rjmp	.+182    	; 0x2f42 <__vector_24+0x176>
    2e8c:	80 3b       	cpi	r24, 0xB0	; 176
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <__vector_24+0xc6>
    2e90:	83 c0       	rjmp	.+262    	; 0x2f98 <__vector_24+0x1cc>
    2e92:	38 f4       	brcc	.+14     	; 0x2ea2 <__vector_24+0xd6>
    2e94:	80 3a       	cpi	r24, 0xA0	; 160
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <__vector_24+0xce>
    2e98:	66 c0       	rjmp	.+204    	; 0x2f66 <__vector_24+0x19a>
    2e9a:	88 3a       	cpi	r24, 0xA8	; 168
    2e9c:	09 f4       	brne	.+2      	; 0x2ea0 <__vector_24+0xd4>
    2e9e:	7c c0       	rjmp	.+248    	; 0x2f98 <__vector_24+0x1cc>
    2ea0:	b1 c0       	rjmp	.+354    	; 0x3004 <__vector_24+0x238>
    2ea2:	80 3c       	cpi	r24, 0xC0	; 192
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <__vector_24+0xdc>
    2ea6:	a4 c0       	rjmp	.+328    	; 0x2ff0 <__vector_24+0x224>
    2ea8:	88 3c       	cpi	r24, 0xC8	; 200
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <__vector_24+0xe2>
    2eac:	a1 c0       	rjmp	.+322    	; 0x2ff0 <__vector_24+0x224>
    2eae:	88 3b       	cpi	r24, 0xB8	; 184
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <__vector_24+0xe8>
    2eb2:	87 c0       	rjmp	.+270    	; 0x2fc2 <__vector_24+0x1f6>
    2eb4:	a7 c0       	rjmp	.+334    	; 0x3004 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2eb6:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_slarw>
    2eba:	10 c0       	rjmp	.+32     	; 0x2edc <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2ebc:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2ec0:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_masterBufferLength>
    2ec4:	98 17       	cp	r25, r24
    2ec6:	70 f5       	brcc	.+92     	; 0x2f24 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2ec8:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	8e 0f       	add	r24, r30
    2ed0:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_masterBufferIndex>
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	ea 5b       	subi	r30, 0xBA	; 186
    2ed8:	fb 4f       	sbci	r31, 0xFB	; 251
    2eda:	80 81       	ld	r24, Z
    2edc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2ee0:	85 ec       	ldi	r24, 0xC5	; 197
    2ee2:	83 c0       	rjmp	.+262    	; 0x2fea <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2ee4:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <twi_error>
    2ee8:	8b c0       	rjmp	.+278    	; 0x3000 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2eea:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	8e 0f       	add	r24, r30
    2ef2:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_masterBufferIndex>
    2ef6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	ea 5b       	subi	r30, 0xBA	; 186
    2efe:	fb 4f       	sbci	r31, 0xFB	; 251
    2f00:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2f02:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2f06:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_masterBufferLength>
    2f0a:	6b c0       	rjmp	.+214    	; 0x2fe2 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2f0c:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	8e 0f       	add	r24, r30
    2f14:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_masterBufferIndex>
    2f18:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	ea 5b       	subi	r30, 0xBA	; 186
    2f20:	fb 4f       	sbci	r31, 0xFB	; 251
    2f22:	80 83       	st	Z, r24
	if (twi_sendStop)
    2f24:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <twi_sendStop>
    2f28:	81 11       	cpse	r24, r1
    2f2a:	6a c0       	rjmp	.+212    	; 0x3000 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2f32:	84 ea       	ldi	r24, 0xA4	; 164
    2f34:	5e c0       	rjmp	.+188    	; 0x2ff2 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2f36:	83 e0       	ldi	r24, 0x03	; 3
    2f38:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2f3c:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <twi_rxBufferIndex>
    2f40:	cf cf       	rjmp	.-98     	; 0x2ee0 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2f42:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_rxBufferIndex>
    2f46:	80 32       	cpi	r24, 0x20	; 32
    2f48:	08 f0       	brcs	.+2      	; 0x2f4c <__vector_24+0x180>
    2f4a:	4e c0       	rjmp	.+156    	; 0x2fe8 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2f4c:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <twi_rxBufferIndex>
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	8e 0f       	add	r24, r30
    2f54:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <twi_rxBufferIndex>
    2f58:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	ee 5f       	subi	r30, 0xFE	; 254
    2f60:	fb 4f       	sbci	r31, 0xFB	; 251
    2f62:	80 83       	st	Z, r24
    2f64:	bd cf       	rjmp	.-134    	; 0x2ee0 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2f66:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2f6a:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_rxBufferIndex>
    2f6e:	80 32       	cpi	r24, 0x20	; 32
    2f70:	30 f4       	brcc	.+12     	; 0x2f7e <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2f72:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <twi_rxBufferIndex>
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	ee 5f       	subi	r30, 0xFE	; 254
    2f7a:	fb 4f       	sbci	r31, 0xFB	; 251
    2f7c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2f7e:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <twi_rxBufferIndex>
    2f82:	70 e0       	ldi	r23, 0x00	; 0
    2f84:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <twi_onSlaveReceive>
    2f88:	f0 91 67 04 	lds	r31, 0x0467	; 0x800467 <twi_onSlaveReceive+0x1>
    2f8c:	82 e0       	ldi	r24, 0x02	; 2
    2f8e:	94 e0       	ldi	r25, 0x04	; 4
    2f90:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2f92:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <twi_rxBufferIndex>
      break;
    2f96:	36 c0       	rjmp	.+108    	; 0x3004 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2f98:	84 e0       	ldi	r24, 0x04	; 4
    2f9a:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2f9e:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2fa2:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2fa6:	e0 91 68 04 	lds	r30, 0x0468	; 0x800468 <twi_onSlaveTransmit>
    2faa:	f0 91 69 04 	lds	r31, 0x0469	; 0x800469 <twi_onSlaveTransmit+0x1>
    2fae:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2fb0:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <twi_txBufferLength>
    2fb4:	81 11       	cpse	r24, r1
    2fb6:	05 c0       	rjmp	.+10     	; 0x2fc2 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2fbe:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2fc2:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <twi_txBufferIndex>
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	8e 0f       	add	r24, r30
    2fca:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <twi_txBufferIndex>
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	ec 5d       	subi	r30, 0xDC	; 220
    2fd2:	fb 4f       	sbci	r31, 0xFB	; 251
    2fd4:	80 81       	ld	r24, Z
    2fd6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2fda:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <twi_txBufferIndex>
    2fde:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <twi_txBufferLength>
    2fe2:	98 17       	cp	r25, r24
    2fe4:	08 f4       	brcc	.+2      	; 0x2fe8 <__vector_24+0x21c>
    2fe6:	7c cf       	rjmp	.-264    	; 0x2ee0 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2fe8:	85 e8       	ldi	r24, 0x85	; 133
    2fea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2fee:	0a c0       	rjmp	.+20     	; 0x3004 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2ff0:	85 ec       	ldi	r24, 0xC5	; 197
    2ff2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2ff6:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_state>
      break;
    2ffa:	04 c0       	rjmp	.+8      	; 0x3004 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2ffc:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <twi_error>
      twi_stop();
    3000:	0e 94 d6 16 	call	0x2dac	; 0x2dac <twi_stop>
      break;
  }
}
    3004:	ff 91       	pop	r31
    3006:	ef 91       	pop	r30
    3008:	bf 91       	pop	r27
    300a:	af 91       	pop	r26
    300c:	9f 91       	pop	r25
    300e:	8f 91       	pop	r24
    3010:	7f 91       	pop	r23
    3012:	6f 91       	pop	r22
    3014:	5f 91       	pop	r21
    3016:	4f 91       	pop	r20
    3018:	3f 91       	pop	r19
    301a:	2f 91       	pop	r18
    301c:	0f 90       	pop	r0
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	0f 90       	pop	r0
    3022:	1f 90       	pop	r1
    3024:	18 95       	reti

00003026 <__unordsf2>:
    3026:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fp_cmp>
    302a:	88 0b       	sbc	r24, r24
    302c:	99 0b       	sbc	r25, r25
    302e:	08 95       	ret

00003030 <__divmodhi4>:
    3030:	97 fb       	bst	r25, 7
    3032:	07 2e       	mov	r0, r23
    3034:	16 f4       	brtc	.+4      	; 0x303a <__divmodhi4+0xa>
    3036:	00 94       	com	r0
    3038:	07 d0       	rcall	.+14     	; 0x3048 <__divmodhi4_neg1>
    303a:	77 fd       	sbrc	r23, 7
    303c:	09 d0       	rcall	.+18     	; 0x3050 <__divmodhi4_neg2>
    303e:	0e 94 4e 18 	call	0x309c	; 0x309c <__udivmodhi4>
    3042:	07 fc       	sbrc	r0, 7
    3044:	05 d0       	rcall	.+10     	; 0x3050 <__divmodhi4_neg2>
    3046:	3e f4       	brtc	.+14     	; 0x3056 <__divmodhi4_exit>

00003048 <__divmodhi4_neg1>:
    3048:	90 95       	com	r25
    304a:	81 95       	neg	r24
    304c:	9f 4f       	sbci	r25, 0xFF	; 255
    304e:	08 95       	ret

00003050 <__divmodhi4_neg2>:
    3050:	70 95       	com	r23
    3052:	61 95       	neg	r22
    3054:	7f 4f       	sbci	r23, 0xFF	; 255

00003056 <__divmodhi4_exit>:
    3056:	08 95       	ret

00003058 <__udivmodsi4>:
    3058:	a1 e2       	ldi	r26, 0x21	; 33
    305a:	1a 2e       	mov	r1, r26
    305c:	aa 1b       	sub	r26, r26
    305e:	bb 1b       	sub	r27, r27
    3060:	fd 01       	movw	r30, r26
    3062:	0d c0       	rjmp	.+26     	; 0x307e <__udivmodsi4_ep>

00003064 <__udivmodsi4_loop>:
    3064:	aa 1f       	adc	r26, r26
    3066:	bb 1f       	adc	r27, r27
    3068:	ee 1f       	adc	r30, r30
    306a:	ff 1f       	adc	r31, r31
    306c:	a2 17       	cp	r26, r18
    306e:	b3 07       	cpc	r27, r19
    3070:	e4 07       	cpc	r30, r20
    3072:	f5 07       	cpc	r31, r21
    3074:	20 f0       	brcs	.+8      	; 0x307e <__udivmodsi4_ep>
    3076:	a2 1b       	sub	r26, r18
    3078:	b3 0b       	sbc	r27, r19
    307a:	e4 0b       	sbc	r30, r20
    307c:	f5 0b       	sbc	r31, r21

0000307e <__udivmodsi4_ep>:
    307e:	66 1f       	adc	r22, r22
    3080:	77 1f       	adc	r23, r23
    3082:	88 1f       	adc	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	1a 94       	dec	r1
    3088:	69 f7       	brne	.-38     	; 0x3064 <__udivmodsi4_loop>
    308a:	60 95       	com	r22
    308c:	70 95       	com	r23
    308e:	80 95       	com	r24
    3090:	90 95       	com	r25
    3092:	9b 01       	movw	r18, r22
    3094:	ac 01       	movw	r20, r24
    3096:	bd 01       	movw	r22, r26
    3098:	cf 01       	movw	r24, r30
    309a:	08 95       	ret

0000309c <__udivmodhi4>:
    309c:	aa 1b       	sub	r26, r26
    309e:	bb 1b       	sub	r27, r27
    30a0:	51 e1       	ldi	r21, 0x11	; 17
    30a2:	07 c0       	rjmp	.+14     	; 0x30b2 <__udivmodhi4_ep>

000030a4 <__udivmodhi4_loop>:
    30a4:	aa 1f       	adc	r26, r26
    30a6:	bb 1f       	adc	r27, r27
    30a8:	a6 17       	cp	r26, r22
    30aa:	b7 07       	cpc	r27, r23
    30ac:	10 f0       	brcs	.+4      	; 0x30b2 <__udivmodhi4_ep>
    30ae:	a6 1b       	sub	r26, r22
    30b0:	b7 0b       	sbc	r27, r23

000030b2 <__udivmodhi4_ep>:
    30b2:	88 1f       	adc	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	5a 95       	dec	r21
    30b8:	a9 f7       	brne	.-22     	; 0x30a4 <__udivmodhi4_loop>
    30ba:	80 95       	com	r24
    30bc:	90 95       	com	r25
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	08 95       	ret

000030c4 <__tablejump2__>:
    30c4:	ee 0f       	add	r30, r30
    30c6:	ff 1f       	adc	r31, r31
    30c8:	05 90       	lpm	r0, Z+
    30ca:	f4 91       	lpm	r31, Z
    30cc:	e0 2d       	mov	r30, r0
    30ce:	09 94       	ijmp

000030d0 <malloc>:
    30d0:	cf 93       	push	r28
    30d2:	df 93       	push	r29
    30d4:	82 30       	cpi	r24, 0x02	; 2
    30d6:	91 05       	cpc	r25, r1
    30d8:	10 f4       	brcc	.+4      	; 0x30de <malloc+0xe>
    30da:	82 e0       	ldi	r24, 0x02	; 2
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	e0 91 70 04 	lds	r30, 0x0470	; 0x800470 <__flp>
    30e2:	f0 91 71 04 	lds	r31, 0x0471	; 0x800471 <__flp+0x1>
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	c0 e0       	ldi	r28, 0x00	; 0
    30ec:	d0 e0       	ldi	r29, 0x00	; 0
    30ee:	30 97       	sbiw	r30, 0x00	; 0
    30f0:	11 f1       	breq	.+68     	; 0x3136 <malloc+0x66>
    30f2:	40 81       	ld	r20, Z
    30f4:	51 81       	ldd	r21, Z+1	; 0x01
    30f6:	48 17       	cp	r20, r24
    30f8:	59 07       	cpc	r21, r25
    30fa:	c0 f0       	brcs	.+48     	; 0x312c <malloc+0x5c>
    30fc:	48 17       	cp	r20, r24
    30fe:	59 07       	cpc	r21, r25
    3100:	61 f4       	brne	.+24     	; 0x311a <malloc+0x4a>
    3102:	82 81       	ldd	r24, Z+2	; 0x02
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	20 97       	sbiw	r28, 0x00	; 0
    3108:	19 f0       	breq	.+6      	; 0x3110 <malloc+0x40>
    310a:	9b 83       	std	Y+3, r25	; 0x03
    310c:	8a 83       	std	Y+2, r24	; 0x02
    310e:	2b c0       	rjmp	.+86     	; 0x3166 <malloc+0x96>
    3110:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <__flp+0x1>
    3114:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__flp>
    3118:	26 c0       	rjmp	.+76     	; 0x3166 <malloc+0x96>
    311a:	21 15       	cp	r18, r1
    311c:	31 05       	cpc	r19, r1
    311e:	19 f0       	breq	.+6      	; 0x3126 <malloc+0x56>
    3120:	42 17       	cp	r20, r18
    3122:	53 07       	cpc	r21, r19
    3124:	18 f4       	brcc	.+6      	; 0x312c <malloc+0x5c>
    3126:	9a 01       	movw	r18, r20
    3128:	be 01       	movw	r22, r28
    312a:	df 01       	movw	r26, r30
    312c:	ef 01       	movw	r28, r30
    312e:	02 80       	ldd	r0, Z+2	; 0x02
    3130:	f3 81       	ldd	r31, Z+3	; 0x03
    3132:	e0 2d       	mov	r30, r0
    3134:	dc cf       	rjmp	.-72     	; 0x30ee <malloc+0x1e>
    3136:	21 15       	cp	r18, r1
    3138:	31 05       	cpc	r19, r1
    313a:	09 f1       	breq	.+66     	; 0x317e <malloc+0xae>
    313c:	28 1b       	sub	r18, r24
    313e:	39 0b       	sbc	r19, r25
    3140:	24 30       	cpi	r18, 0x04	; 4
    3142:	31 05       	cpc	r19, r1
    3144:	90 f4       	brcc	.+36     	; 0x316a <malloc+0x9a>
    3146:	12 96       	adiw	r26, 0x02	; 2
    3148:	8d 91       	ld	r24, X+
    314a:	9c 91       	ld	r25, X
    314c:	13 97       	sbiw	r26, 0x03	; 3
    314e:	61 15       	cp	r22, r1
    3150:	71 05       	cpc	r23, r1
    3152:	21 f0       	breq	.+8      	; 0x315c <malloc+0x8c>
    3154:	fb 01       	movw	r30, r22
    3156:	93 83       	std	Z+3, r25	; 0x03
    3158:	82 83       	std	Z+2, r24	; 0x02
    315a:	04 c0       	rjmp	.+8      	; 0x3164 <malloc+0x94>
    315c:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <__flp+0x1>
    3160:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__flp>
    3164:	fd 01       	movw	r30, r26
    3166:	32 96       	adiw	r30, 0x02	; 2
    3168:	44 c0       	rjmp	.+136    	; 0x31f2 <malloc+0x122>
    316a:	fd 01       	movw	r30, r26
    316c:	e2 0f       	add	r30, r18
    316e:	f3 1f       	adc	r31, r19
    3170:	81 93       	st	Z+, r24
    3172:	91 93       	st	Z+, r25
    3174:	22 50       	subi	r18, 0x02	; 2
    3176:	31 09       	sbc	r19, r1
    3178:	2d 93       	st	X+, r18
    317a:	3c 93       	st	X, r19
    317c:	3a c0       	rjmp	.+116    	; 0x31f2 <malloc+0x122>
    317e:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <__brkval>
    3182:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <__brkval+0x1>
    3186:	23 2b       	or	r18, r19
    3188:	41 f4       	brne	.+16     	; 0x319a <malloc+0xca>
    318a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    318e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3192:	30 93 6f 04 	sts	0x046F, r19	; 0x80046f <__brkval+0x1>
    3196:	20 93 6e 04 	sts	0x046E, r18	; 0x80046e <__brkval>
    319a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    319e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    31a2:	21 15       	cp	r18, r1
    31a4:	31 05       	cpc	r19, r1
    31a6:	41 f4       	brne	.+16     	; 0x31b8 <malloc+0xe8>
    31a8:	2d b7       	in	r18, 0x3d	; 61
    31aa:	3e b7       	in	r19, 0x3e	; 62
    31ac:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    31b0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    31b4:	24 1b       	sub	r18, r20
    31b6:	35 0b       	sbc	r19, r21
    31b8:	e0 91 6e 04 	lds	r30, 0x046E	; 0x80046e <__brkval>
    31bc:	f0 91 6f 04 	lds	r31, 0x046F	; 0x80046f <__brkval+0x1>
    31c0:	e2 17       	cp	r30, r18
    31c2:	f3 07       	cpc	r31, r19
    31c4:	a0 f4       	brcc	.+40     	; 0x31ee <malloc+0x11e>
    31c6:	2e 1b       	sub	r18, r30
    31c8:	3f 0b       	sbc	r19, r31
    31ca:	28 17       	cp	r18, r24
    31cc:	39 07       	cpc	r19, r25
    31ce:	78 f0       	brcs	.+30     	; 0x31ee <malloc+0x11e>
    31d0:	ac 01       	movw	r20, r24
    31d2:	4e 5f       	subi	r20, 0xFE	; 254
    31d4:	5f 4f       	sbci	r21, 0xFF	; 255
    31d6:	24 17       	cp	r18, r20
    31d8:	35 07       	cpc	r19, r21
    31da:	48 f0       	brcs	.+18     	; 0x31ee <malloc+0x11e>
    31dc:	4e 0f       	add	r20, r30
    31de:	5f 1f       	adc	r21, r31
    31e0:	50 93 6f 04 	sts	0x046F, r21	; 0x80046f <__brkval+0x1>
    31e4:	40 93 6e 04 	sts	0x046E, r20	; 0x80046e <__brkval>
    31e8:	81 93       	st	Z+, r24
    31ea:	91 93       	st	Z+, r25
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <malloc+0x122>
    31ee:	e0 e0       	ldi	r30, 0x00	; 0
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	cf 01       	movw	r24, r30
    31f4:	df 91       	pop	r29
    31f6:	cf 91       	pop	r28
    31f8:	08 95       	ret

000031fa <free>:
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	09 f4       	brne	.+2      	; 0x3208 <free+0xe>
    3206:	8c c0       	rjmp	.+280    	; 0x3320 <free+0x126>
    3208:	fc 01       	movw	r30, r24
    320a:	32 97       	sbiw	r30, 0x02	; 2
    320c:	13 82       	std	Z+3, r1	; 0x03
    320e:	12 82       	std	Z+2, r1	; 0x02
    3210:	00 91 70 04 	lds	r16, 0x0470	; 0x800470 <__flp>
    3214:	10 91 71 04 	lds	r17, 0x0471	; 0x800471 <__flp+0x1>
    3218:	01 15       	cp	r16, r1
    321a:	11 05       	cpc	r17, r1
    321c:	81 f4       	brne	.+32     	; 0x323e <free+0x44>
    321e:	20 81       	ld	r18, Z
    3220:	31 81       	ldd	r19, Z+1	; 0x01
    3222:	82 0f       	add	r24, r18
    3224:	93 1f       	adc	r25, r19
    3226:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <__brkval>
    322a:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <__brkval+0x1>
    322e:	28 17       	cp	r18, r24
    3230:	39 07       	cpc	r19, r25
    3232:	79 f5       	brne	.+94     	; 0x3292 <free+0x98>
    3234:	f0 93 6f 04 	sts	0x046F, r31	; 0x80046f <__brkval+0x1>
    3238:	e0 93 6e 04 	sts	0x046E, r30	; 0x80046e <__brkval>
    323c:	71 c0       	rjmp	.+226    	; 0x3320 <free+0x126>
    323e:	d8 01       	movw	r26, r16
    3240:	40 e0       	ldi	r20, 0x00	; 0
    3242:	50 e0       	ldi	r21, 0x00	; 0
    3244:	ae 17       	cp	r26, r30
    3246:	bf 07       	cpc	r27, r31
    3248:	50 f4       	brcc	.+20     	; 0x325e <free+0x64>
    324a:	12 96       	adiw	r26, 0x02	; 2
    324c:	2d 91       	ld	r18, X+
    324e:	3c 91       	ld	r19, X
    3250:	13 97       	sbiw	r26, 0x03	; 3
    3252:	ad 01       	movw	r20, r26
    3254:	21 15       	cp	r18, r1
    3256:	31 05       	cpc	r19, r1
    3258:	09 f1       	breq	.+66     	; 0x329c <free+0xa2>
    325a:	d9 01       	movw	r26, r18
    325c:	f3 cf       	rjmp	.-26     	; 0x3244 <free+0x4a>
    325e:	9d 01       	movw	r18, r26
    3260:	da 01       	movw	r26, r20
    3262:	33 83       	std	Z+3, r19	; 0x03
    3264:	22 83       	std	Z+2, r18	; 0x02
    3266:	60 81       	ld	r22, Z
    3268:	71 81       	ldd	r23, Z+1	; 0x01
    326a:	86 0f       	add	r24, r22
    326c:	97 1f       	adc	r25, r23
    326e:	82 17       	cp	r24, r18
    3270:	93 07       	cpc	r25, r19
    3272:	69 f4       	brne	.+26     	; 0x328e <free+0x94>
    3274:	ec 01       	movw	r28, r24
    3276:	28 81       	ld	r18, Y
    3278:	39 81       	ldd	r19, Y+1	; 0x01
    327a:	26 0f       	add	r18, r22
    327c:	37 1f       	adc	r19, r23
    327e:	2e 5f       	subi	r18, 0xFE	; 254
    3280:	3f 4f       	sbci	r19, 0xFF	; 255
    3282:	31 83       	std	Z+1, r19	; 0x01
    3284:	20 83       	st	Z, r18
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	9b 81       	ldd	r25, Y+3	; 0x03
    328a:	93 83       	std	Z+3, r25	; 0x03
    328c:	82 83       	std	Z+2, r24	; 0x02
    328e:	45 2b       	or	r20, r21
    3290:	29 f4       	brne	.+10     	; 0x329c <free+0xa2>
    3292:	f0 93 71 04 	sts	0x0471, r31	; 0x800471 <__flp+0x1>
    3296:	e0 93 70 04 	sts	0x0470, r30	; 0x800470 <__flp>
    329a:	42 c0       	rjmp	.+132    	; 0x3320 <free+0x126>
    329c:	13 96       	adiw	r26, 0x03	; 3
    329e:	fc 93       	st	X, r31
    32a0:	ee 93       	st	-X, r30
    32a2:	12 97       	sbiw	r26, 0x02	; 2
    32a4:	ed 01       	movw	r28, r26
    32a6:	49 91       	ld	r20, Y+
    32a8:	59 91       	ld	r21, Y+
    32aa:	9e 01       	movw	r18, r28
    32ac:	24 0f       	add	r18, r20
    32ae:	35 1f       	adc	r19, r21
    32b0:	e2 17       	cp	r30, r18
    32b2:	f3 07       	cpc	r31, r19
    32b4:	71 f4       	brne	.+28     	; 0x32d2 <free+0xd8>
    32b6:	80 81       	ld	r24, Z
    32b8:	91 81       	ldd	r25, Z+1	; 0x01
    32ba:	84 0f       	add	r24, r20
    32bc:	95 1f       	adc	r25, r21
    32be:	02 96       	adiw	r24, 0x02	; 2
    32c0:	11 96       	adiw	r26, 0x01	; 1
    32c2:	9c 93       	st	X, r25
    32c4:	8e 93       	st	-X, r24
    32c6:	82 81       	ldd	r24, Z+2	; 0x02
    32c8:	93 81       	ldd	r25, Z+3	; 0x03
    32ca:	13 96       	adiw	r26, 0x03	; 3
    32cc:	9c 93       	st	X, r25
    32ce:	8e 93       	st	-X, r24
    32d0:	12 97       	sbiw	r26, 0x02	; 2
    32d2:	e0 e0       	ldi	r30, 0x00	; 0
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	d8 01       	movw	r26, r16
    32d8:	12 96       	adiw	r26, 0x02	; 2
    32da:	8d 91       	ld	r24, X+
    32dc:	9c 91       	ld	r25, X
    32de:	13 97       	sbiw	r26, 0x03	; 3
    32e0:	00 97       	sbiw	r24, 0x00	; 0
    32e2:	19 f0       	breq	.+6      	; 0x32ea <free+0xf0>
    32e4:	f8 01       	movw	r30, r16
    32e6:	8c 01       	movw	r16, r24
    32e8:	f6 cf       	rjmp	.-20     	; 0x32d6 <free+0xdc>
    32ea:	8d 91       	ld	r24, X+
    32ec:	9c 91       	ld	r25, X
    32ee:	98 01       	movw	r18, r16
    32f0:	2e 5f       	subi	r18, 0xFE	; 254
    32f2:	3f 4f       	sbci	r19, 0xFF	; 255
    32f4:	82 0f       	add	r24, r18
    32f6:	93 1f       	adc	r25, r19
    32f8:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <__brkval>
    32fc:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <__brkval+0x1>
    3300:	28 17       	cp	r18, r24
    3302:	39 07       	cpc	r19, r25
    3304:	69 f4       	brne	.+26     	; 0x3320 <free+0x126>
    3306:	30 97       	sbiw	r30, 0x00	; 0
    3308:	29 f4       	brne	.+10     	; 0x3314 <free+0x11a>
    330a:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <__flp+0x1>
    330e:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <__flp>
    3312:	02 c0       	rjmp	.+4      	; 0x3318 <free+0x11e>
    3314:	13 82       	std	Z+3, r1	; 0x03
    3316:	12 82       	std	Z+2, r1	; 0x02
    3318:	10 93 6f 04 	sts	0x046F, r17	; 0x80046f <__brkval+0x1>
    331c:	00 93 6e 04 	sts	0x046E, r16	; 0x80046e <__brkval>
    3320:	df 91       	pop	r29
    3322:	cf 91       	pop	r28
    3324:	1f 91       	pop	r17
    3326:	0f 91       	pop	r16
    3328:	08 95       	ret

0000332a <realloc>:
    332a:	a0 e0       	ldi	r26, 0x00	; 0
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	eb e9       	ldi	r30, 0x9B	; 155
    3330:	f9 e1       	ldi	r31, 0x19	; 25
    3332:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <__prologue_saves__+0x8>
    3336:	ec 01       	movw	r28, r24
    3338:	00 97       	sbiw	r24, 0x00	; 0
    333a:	21 f4       	brne	.+8      	; 0x3344 <realloc+0x1a>
    333c:	cb 01       	movw	r24, r22
    333e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <malloc>
    3342:	b8 c0       	rjmp	.+368    	; 0x34b4 <realloc+0x18a>
    3344:	fc 01       	movw	r30, r24
    3346:	e6 0f       	add	r30, r22
    3348:	f7 1f       	adc	r31, r23
    334a:	9c 01       	movw	r18, r24
    334c:	22 50       	subi	r18, 0x02	; 2
    334e:	31 09       	sbc	r19, r1
    3350:	e2 17       	cp	r30, r18
    3352:	f3 07       	cpc	r31, r19
    3354:	08 f4       	brcc	.+2      	; 0x3358 <realloc+0x2e>
    3356:	ac c0       	rjmp	.+344    	; 0x34b0 <realloc+0x186>
    3358:	d9 01       	movw	r26, r18
    335a:	0d 91       	ld	r16, X+
    335c:	1c 91       	ld	r17, X
    335e:	11 97       	sbiw	r26, 0x01	; 1
    3360:	06 17       	cp	r16, r22
    3362:	17 07       	cpc	r17, r23
    3364:	b0 f0       	brcs	.+44     	; 0x3392 <realloc+0x68>
    3366:	05 30       	cpi	r16, 0x05	; 5
    3368:	11 05       	cpc	r17, r1
    336a:	08 f4       	brcc	.+2      	; 0x336e <realloc+0x44>
    336c:	9f c0       	rjmp	.+318    	; 0x34ac <realloc+0x182>
    336e:	c8 01       	movw	r24, r16
    3370:	04 97       	sbiw	r24, 0x04	; 4
    3372:	86 17       	cp	r24, r22
    3374:	97 07       	cpc	r25, r23
    3376:	08 f4       	brcc	.+2      	; 0x337a <realloc+0x50>
    3378:	99 c0       	rjmp	.+306    	; 0x34ac <realloc+0x182>
    337a:	02 50       	subi	r16, 0x02	; 2
    337c:	11 09       	sbc	r17, r1
    337e:	06 1b       	sub	r16, r22
    3380:	17 0b       	sbc	r17, r23
    3382:	01 93       	st	Z+, r16
    3384:	11 93       	st	Z+, r17
    3386:	6d 93       	st	X+, r22
    3388:	7c 93       	st	X, r23
    338a:	cf 01       	movw	r24, r30
    338c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <free>
    3390:	8d c0       	rjmp	.+282    	; 0x34ac <realloc+0x182>
    3392:	5b 01       	movw	r10, r22
    3394:	a0 1a       	sub	r10, r16
    3396:	b1 0a       	sbc	r11, r17
    3398:	4c 01       	movw	r8, r24
    339a:	80 0e       	add	r8, r16
    339c:	91 1e       	adc	r9, r17
    339e:	a0 91 70 04 	lds	r26, 0x0470	; 0x800470 <__flp>
    33a2:	b0 91 71 04 	lds	r27, 0x0471	; 0x800471 <__flp+0x1>
    33a6:	40 e0       	ldi	r20, 0x00	; 0
    33a8:	50 e0       	ldi	r21, 0x00	; 0
    33aa:	e1 2c       	mov	r14, r1
    33ac:	f1 2c       	mov	r15, r1
    33ae:	10 97       	sbiw	r26, 0x00	; 0
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <realloc+0x8a>
    33b2:	4a c0       	rjmp	.+148    	; 0x3448 <realloc+0x11e>
    33b4:	a8 15       	cp	r26, r8
    33b6:	b9 05       	cpc	r27, r9
    33b8:	d1 f5       	brne	.+116    	; 0x342e <realloc+0x104>
    33ba:	6d 90       	ld	r6, X+
    33bc:	7c 90       	ld	r7, X
    33be:	11 97       	sbiw	r26, 0x01	; 1
    33c0:	63 01       	movw	r12, r6
    33c2:	82 e0       	ldi	r24, 0x02	; 2
    33c4:	c8 0e       	add	r12, r24
    33c6:	d1 1c       	adc	r13, r1
    33c8:	ca 14       	cp	r12, r10
    33ca:	db 04       	cpc	r13, r11
    33cc:	80 f1       	brcs	.+96     	; 0x342e <realloc+0x104>
    33ce:	a3 01       	movw	r20, r6
    33d0:	4a 19       	sub	r20, r10
    33d2:	5b 09       	sbc	r21, r11
    33d4:	6a 01       	movw	r12, r20
    33d6:	82 e0       	ldi	r24, 0x02	; 2
    33d8:	c8 0e       	add	r12, r24
    33da:	d1 1c       	adc	r13, r1
    33dc:	12 96       	adiw	r26, 0x02	; 2
    33de:	bc 90       	ld	r11, X
    33e0:	12 97       	sbiw	r26, 0x02	; 2
    33e2:	13 96       	adiw	r26, 0x03	; 3
    33e4:	ac 91       	ld	r26, X
    33e6:	b5 e0       	ldi	r27, 0x05	; 5
    33e8:	cb 16       	cp	r12, r27
    33ea:	d1 04       	cpc	r13, r1
    33ec:	40 f0       	brcs	.+16     	; 0x33fe <realloc+0xd4>
    33ee:	b2 82       	std	Z+2, r11	; 0x02
    33f0:	a3 83       	std	Z+3, r26	; 0x03
    33f2:	51 83       	std	Z+1, r21	; 0x01
    33f4:	40 83       	st	Z, r20
    33f6:	d9 01       	movw	r26, r18
    33f8:	6d 93       	st	X+, r22
    33fa:	7c 93       	st	X, r23
    33fc:	0a c0       	rjmp	.+20     	; 0x3412 <realloc+0xe8>
    33fe:	0e 5f       	subi	r16, 0xFE	; 254
    3400:	1f 4f       	sbci	r17, 0xFF	; 255
    3402:	c3 01       	movw	r24, r6
    3404:	80 0f       	add	r24, r16
    3406:	91 1f       	adc	r25, r17
    3408:	f9 01       	movw	r30, r18
    340a:	91 83       	std	Z+1, r25	; 0x01
    340c:	80 83       	st	Z, r24
    340e:	eb 2d       	mov	r30, r11
    3410:	fa 2f       	mov	r31, r26
    3412:	e1 14       	cp	r14, r1
    3414:	f1 04       	cpc	r15, r1
    3416:	31 f0       	breq	.+12     	; 0x3424 <realloc+0xfa>
    3418:	d7 01       	movw	r26, r14
    341a:	13 96       	adiw	r26, 0x03	; 3
    341c:	fc 93       	st	X, r31
    341e:	ee 93       	st	-X, r30
    3420:	12 97       	sbiw	r26, 0x02	; 2
    3422:	44 c0       	rjmp	.+136    	; 0x34ac <realloc+0x182>
    3424:	f0 93 71 04 	sts	0x0471, r31	; 0x800471 <__flp+0x1>
    3428:	e0 93 70 04 	sts	0x0470, r30	; 0x800470 <__flp>
    342c:	3f c0       	rjmp	.+126    	; 0x34ac <realloc+0x182>
    342e:	8d 91       	ld	r24, X+
    3430:	9c 91       	ld	r25, X
    3432:	11 97       	sbiw	r26, 0x01	; 1
    3434:	48 17       	cp	r20, r24
    3436:	59 07       	cpc	r21, r25
    3438:	08 f4       	brcc	.+2      	; 0x343c <realloc+0x112>
    343a:	ac 01       	movw	r20, r24
    343c:	7d 01       	movw	r14, r26
    343e:	12 96       	adiw	r26, 0x02	; 2
    3440:	0d 90       	ld	r0, X+
    3442:	bc 91       	ld	r27, X
    3444:	a0 2d       	mov	r26, r0
    3446:	b3 cf       	rjmp	.-154    	; 0x33ae <realloc+0x84>
    3448:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <__brkval>
    344c:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <__brkval+0x1>
    3450:	88 15       	cp	r24, r8
    3452:	99 05       	cpc	r25, r9
    3454:	e1 f4       	brne	.+56     	; 0x348e <realloc+0x164>
    3456:	46 17       	cp	r20, r22
    3458:	57 07       	cpc	r21, r23
    345a:	c8 f4       	brcc	.+50     	; 0x348e <realloc+0x164>
    345c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3460:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	41 f4       	brne	.+16     	; 0x3478 <realloc+0x14e>
    3468:	8d b7       	in	r24, 0x3d	; 61
    346a:	9e b7       	in	r25, 0x3e	; 62
    346c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3470:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3474:	84 1b       	sub	r24, r20
    3476:	95 0b       	sbc	r25, r21
    3478:	e8 17       	cp	r30, r24
    347a:	f9 07       	cpc	r31, r25
    347c:	c8 f4       	brcc	.+50     	; 0x34b0 <realloc+0x186>
    347e:	f0 93 6f 04 	sts	0x046F, r31	; 0x80046f <__brkval+0x1>
    3482:	e0 93 6e 04 	sts	0x046E, r30	; 0x80046e <__brkval>
    3486:	f9 01       	movw	r30, r18
    3488:	71 83       	std	Z+1, r23	; 0x01
    348a:	60 83       	st	Z, r22
    348c:	0f c0       	rjmp	.+30     	; 0x34ac <realloc+0x182>
    348e:	cb 01       	movw	r24, r22
    3490:	0e 94 68 18 	call	0x30d0	; 0x30d0 <malloc>
    3494:	7c 01       	movw	r14, r24
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	59 f0       	breq	.+22     	; 0x34b0 <realloc+0x186>
    349a:	a8 01       	movw	r20, r16
    349c:	be 01       	movw	r22, r28
    349e:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <memcpy>
    34a2:	ce 01       	movw	r24, r28
    34a4:	0e 94 fd 18 	call	0x31fa	; 0x31fa <free>
    34a8:	c7 01       	movw	r24, r14
    34aa:	04 c0       	rjmp	.+8      	; 0x34b4 <realloc+0x18a>
    34ac:	ce 01       	movw	r24, r28
    34ae:	02 c0       	rjmp	.+4      	; 0x34b4 <realloc+0x18a>
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
    34b8:	ee e0       	ldi	r30, 0x0E	; 14
    34ba:	0c 94 5a 1c 	jmp	0x38b4	; 0x38b4 <__epilogue_restores__+0x8>

000034be <atof>:
    34be:	66 27       	eor	r22, r22
    34c0:	77 27       	eor	r23, r23
    34c2:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <strtod>

000034c6 <isspace>:
    34c6:	91 11       	cpse	r25, r1
    34c8:	0c 94 14 1c 	jmp	0x3828	; 0x3828 <__ctype_isfalse>
    34cc:	80 32       	cpi	r24, 0x20	; 32
    34ce:	19 f0       	breq	.+6      	; 0x34d6 <isspace+0x10>
    34d0:	89 50       	subi	r24, 0x09	; 9
    34d2:	85 50       	subi	r24, 0x05	; 5
    34d4:	c8 f7       	brcc	.-14     	; 0x34c8 <isspace+0x2>
    34d6:	08 95       	ret

000034d8 <strtok>:
    34d8:	46 e2       	ldi	r20, 0x26	; 38
    34da:	52 e0       	ldi	r21, 0x02	; 2
    34dc:	0e 94 90 1a 	call	0x3520	; 0x3520 <strtok_r>
    34e0:	08 95       	ret

000034e2 <memcpy>:
    34e2:	fb 01       	movw	r30, r22
    34e4:	dc 01       	movw	r26, r24
    34e6:	02 c0       	rjmp	.+4      	; 0x34ec <memcpy+0xa>
    34e8:	01 90       	ld	r0, Z+
    34ea:	0d 92       	st	X+, r0
    34ec:	41 50       	subi	r20, 0x01	; 1
    34ee:	50 40       	sbci	r21, 0x00	; 0
    34f0:	d8 f7       	brcc	.-10     	; 0x34e8 <memcpy+0x6>
    34f2:	08 95       	ret

000034f4 <strcpy>:
    34f4:	fb 01       	movw	r30, r22
    34f6:	dc 01       	movw	r26, r24
    34f8:	01 90       	ld	r0, Z+
    34fa:	0d 92       	st	X+, r0
    34fc:	00 20       	and	r0, r0
    34fe:	e1 f7       	brne	.-8      	; 0x34f8 <strcpy+0x4>
    3500:	08 95       	ret

00003502 <strncpy>:
    3502:	fb 01       	movw	r30, r22
    3504:	dc 01       	movw	r26, r24
    3506:	41 50       	subi	r20, 0x01	; 1
    3508:	50 40       	sbci	r21, 0x00	; 0
    350a:	48 f0       	brcs	.+18     	; 0x351e <strncpy+0x1c>
    350c:	01 90       	ld	r0, Z+
    350e:	0d 92       	st	X+, r0
    3510:	00 20       	and	r0, r0
    3512:	c9 f7       	brne	.-14     	; 0x3506 <strncpy+0x4>
    3514:	01 c0       	rjmp	.+2      	; 0x3518 <strncpy+0x16>
    3516:	1d 92       	st	X+, r1
    3518:	41 50       	subi	r20, 0x01	; 1
    351a:	50 40       	sbci	r21, 0x00	; 0
    351c:	e0 f7       	brcc	.-8      	; 0x3516 <strncpy+0x14>
    351e:	08 95       	ret

00003520 <strtok_r>:
    3520:	fa 01       	movw	r30, r20
    3522:	a1 91       	ld	r26, Z+
    3524:	b0 81       	ld	r27, Z
    3526:	00 97       	sbiw	r24, 0x00	; 0
    3528:	19 f4       	brne	.+6      	; 0x3530 <strtok_r+0x10>
    352a:	10 97       	sbiw	r26, 0x00	; 0
    352c:	e1 f0       	breq	.+56     	; 0x3566 <strtok_r+0x46>
    352e:	cd 01       	movw	r24, r26
    3530:	dc 01       	movw	r26, r24
    3532:	cd 01       	movw	r24, r26
    3534:	0d 90       	ld	r0, X+
    3536:	00 20       	and	r0, r0
    3538:	11 f4       	brne	.+4      	; 0x353e <strtok_r+0x1e>
    353a:	c0 01       	movw	r24, r0
    353c:	13 c0       	rjmp	.+38     	; 0x3564 <strtok_r+0x44>
    353e:	fb 01       	movw	r30, r22
    3540:	21 91       	ld	r18, Z+
    3542:	22 23       	and	r18, r18
    3544:	19 f0       	breq	.+6      	; 0x354c <strtok_r+0x2c>
    3546:	20 15       	cp	r18, r0
    3548:	d9 f7       	brne	.-10     	; 0x3540 <strtok_r+0x20>
    354a:	f3 cf       	rjmp	.-26     	; 0x3532 <strtok_r+0x12>
    354c:	fb 01       	movw	r30, r22
    354e:	21 91       	ld	r18, Z+
    3550:	20 15       	cp	r18, r0
    3552:	19 f4       	brne	.+6      	; 0x355a <strtok_r+0x3a>
    3554:	1e 92       	st	-X, r1
    3556:	11 96       	adiw	r26, 0x01	; 1
    3558:	06 c0       	rjmp	.+12     	; 0x3566 <strtok_r+0x46>
    355a:	22 23       	and	r18, r18
    355c:	c1 f7       	brne	.-16     	; 0x354e <strtok_r+0x2e>
    355e:	0d 90       	ld	r0, X+
    3560:	00 20       	and	r0, r0
    3562:	a1 f7       	brne	.-24     	; 0x354c <strtok_r+0x2c>
    3564:	d0 01       	movw	r26, r0
    3566:	fa 01       	movw	r30, r20
    3568:	a1 93       	st	Z+, r26
    356a:	b0 83       	st	Z, r27
    356c:	08 95       	ret

0000356e <strtod>:
    356e:	a0 e0       	ldi	r26, 0x00	; 0
    3570:	b0 e0       	ldi	r27, 0x00	; 0
    3572:	ed eb       	ldi	r30, 0xBD	; 189
    3574:	fa e1       	ldi	r31, 0x1A	; 26
    3576:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <__prologue_saves__+0x8>
    357a:	ec 01       	movw	r28, r24
    357c:	7b 01       	movw	r14, r22
    357e:	61 15       	cp	r22, r1
    3580:	71 05       	cpc	r23, r1
    3582:	19 f0       	breq	.+6      	; 0x358a <strtod+0x1c>
    3584:	db 01       	movw	r26, r22
    3586:	8d 93       	st	X+, r24
    3588:	9c 93       	st	X, r25
    358a:	8e 01       	movw	r16, r28
    358c:	0f 5f       	subi	r16, 0xFF	; 255
    358e:	1f 4f       	sbci	r17, 0xFF	; 255
    3590:	78 80       	ld	r7, Y
    3592:	87 2d       	mov	r24, r7
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <isspace>
    359a:	89 2b       	or	r24, r25
    359c:	11 f0       	breq	.+4      	; 0x35a2 <strtod+0x34>
    359e:	e8 01       	movw	r28, r16
    35a0:	f4 cf       	rjmp	.-24     	; 0x358a <strtod+0x1c>
    35a2:	bd e2       	ldi	r27, 0x2D	; 45
    35a4:	7b 12       	cpse	r7, r27
    35a6:	05 c0       	rjmp	.+10     	; 0x35b2 <strtod+0x44>
    35a8:	0f 5f       	subi	r16, 0xFF	; 255
    35aa:	1f 4f       	sbci	r17, 0xFF	; 255
    35ac:	79 80       	ldd	r7, Y+1	; 0x01
    35ae:	c1 e0       	ldi	r28, 0x01	; 1
    35b0:	08 c0       	rjmp	.+16     	; 0x35c2 <strtod+0x54>
    35b2:	eb e2       	ldi	r30, 0x2B	; 43
    35b4:	7e 12       	cpse	r7, r30
    35b6:	04 c0       	rjmp	.+8      	; 0x35c0 <strtod+0x52>
    35b8:	8e 01       	movw	r16, r28
    35ba:	0e 5f       	subi	r16, 0xFE	; 254
    35bc:	1f 4f       	sbci	r17, 0xFF	; 255
    35be:	79 80       	ldd	r7, Y+1	; 0x01
    35c0:	c0 e0       	ldi	r28, 0x00	; 0
    35c2:	68 01       	movw	r12, r16
    35c4:	f1 e0       	ldi	r31, 0x01	; 1
    35c6:	cf 1a       	sub	r12, r31
    35c8:	d1 08       	sbc	r13, r1
    35ca:	43 e0       	ldi	r20, 0x03	; 3
    35cc:	50 e0       	ldi	r21, 0x00	; 0
    35ce:	6e e9       	ldi	r22, 0x9E	; 158
    35d0:	70 e0       	ldi	r23, 0x00	; 0
    35d2:	c6 01       	movw	r24, r12
    35d4:	0e 94 17 1c 	call	0x382e	; 0x382e <strncasecmp_P>
    35d8:	89 2b       	or	r24, r25
    35da:	f1 f4       	brne	.+60     	; 0x3618 <strtod+0xaa>
    35dc:	68 01       	movw	r12, r16
    35de:	22 e0       	ldi	r18, 0x02	; 2
    35e0:	c2 0e       	add	r12, r18
    35e2:	d1 1c       	adc	r13, r1
    35e4:	45 e0       	ldi	r20, 0x05	; 5
    35e6:	50 e0       	ldi	r21, 0x00	; 0
    35e8:	69 e9       	ldi	r22, 0x99	; 153
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	c6 01       	movw	r24, r12
    35ee:	0e 94 17 1c 	call	0x382e	; 0x382e <strncasecmp_P>
    35f2:	89 2b       	or	r24, r25
    35f4:	21 f4       	brne	.+8      	; 0x35fe <strtod+0x90>
    35f6:	68 01       	movw	r12, r16
    35f8:	87 e0       	ldi	r24, 0x07	; 7
    35fa:	c8 0e       	add	r12, r24
    35fc:	d1 1c       	adc	r13, r1
    35fe:	e1 14       	cp	r14, r1
    3600:	f1 04       	cpc	r15, r1
    3602:	19 f0       	breq	.+6      	; 0x360a <strtod+0x9c>
    3604:	d7 01       	movw	r26, r14
    3606:	cd 92       	st	X+, r12
    3608:	dc 92       	st	X, r13
    360a:	c1 11       	cpse	r28, r1
    360c:	ff c0       	rjmp	.+510    	; 0x380c <strtod+0x29e>
    360e:	60 e0       	ldi	r22, 0x00	; 0
    3610:	70 e0       	ldi	r23, 0x00	; 0
    3612:	80 e8       	ldi	r24, 0x80	; 128
    3614:	9f e7       	ldi	r25, 0x7F	; 127
    3616:	03 c1       	rjmp	.+518    	; 0x381e <strtod+0x2b0>
    3618:	43 e0       	ldi	r20, 0x03	; 3
    361a:	50 e0       	ldi	r21, 0x00	; 0
    361c:	66 e9       	ldi	r22, 0x96	; 150
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	c6 01       	movw	r24, r12
    3622:	0e 94 17 1c 	call	0x382e	; 0x382e <strncasecmp_P>
    3626:	89 2b       	or	r24, r25
    3628:	51 f4       	brne	.+20     	; 0x363e <strtod+0xd0>
    362a:	e1 14       	cp	r14, r1
    362c:	f1 04       	cpc	r15, r1
    362e:	09 f4       	brne	.+2      	; 0x3632 <strtod+0xc4>
    3630:	f2 c0       	rjmp	.+484    	; 0x3816 <strtod+0x2a8>
    3632:	0e 5f       	subi	r16, 0xFE	; 254
    3634:	1f 4f       	sbci	r17, 0xFF	; 255
    3636:	f7 01       	movw	r30, r14
    3638:	11 83       	std	Z+1, r17	; 0x01
    363a:	00 83       	st	Z, r16
    363c:	ec c0       	rjmp	.+472    	; 0x3816 <strtod+0x2a8>
    363e:	68 01       	movw	r12, r16
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	cb 01       	movw	r24, r22
    3646:	00 e0       	ldi	r16, 0x00	; 0
    3648:	10 e0       	ldi	r17, 0x00	; 0
    364a:	f6 01       	movw	r30, r12
    364c:	d0 ed       	ldi	r29, 0xD0	; 208
    364e:	d7 0d       	add	r29, r7
    3650:	da 30       	cpi	r29, 0x0A	; 10
    3652:	58 f5       	brcc	.+86     	; 0x36aa <strtod+0x13c>
    3654:	2c 2f       	mov	r18, r28
    3656:	22 60       	ori	r18, 0x02	; 2
    3658:	62 2e       	mov	r6, r18
    365a:	2c 2f       	mov	r18, r28
    365c:	28 70       	andi	r18, 0x08	; 8
    365e:	c2 ff       	sbrs	r28, 2
    3660:	05 c0       	rjmp	.+10     	; 0x366c <strtod+0xfe>
    3662:	21 11       	cpse	r18, r1
    3664:	28 c0       	rjmp	.+80     	; 0x36b6 <strtod+0x148>
    3666:	0f 5f       	subi	r16, 0xFF	; 255
    3668:	1f 4f       	sbci	r17, 0xFF	; 255
    366a:	25 c0       	rjmp	.+74     	; 0x36b6 <strtod+0x148>
    366c:	22 23       	and	r18, r18
    366e:	11 f0       	breq	.+4      	; 0x3674 <strtod+0x106>
    3670:	01 50       	subi	r16, 0x01	; 1
    3672:	11 09       	sbc	r17, r1
    3674:	a5 e0       	ldi	r26, 0x05	; 5
    3676:	b0 e0       	ldi	r27, 0x00	; 0
    3678:	9b 01       	movw	r18, r22
    367a:	ac 01       	movw	r20, r24
    367c:	0e 94 2f 1c 	call	0x385e	; 0x385e <__muluhisi3>
    3680:	4b 01       	movw	r8, r22
    3682:	5c 01       	movw	r10, r24
    3684:	88 0c       	add	r8, r8
    3686:	99 1c       	adc	r9, r9
    3688:	aa 1c       	adc	r10, r10
    368a:	bb 1c       	adc	r11, r11
    368c:	c5 01       	movw	r24, r10
    368e:	b4 01       	movw	r22, r8
    3690:	6d 0f       	add	r22, r29
    3692:	71 1d       	adc	r23, r1
    3694:	81 1d       	adc	r24, r1
    3696:	91 1d       	adc	r25, r1
    3698:	68 39       	cpi	r22, 0x98	; 152
    369a:	a9 e9       	ldi	r26, 0x99	; 153
    369c:	7a 07       	cpc	r23, r26
    369e:	8a 07       	cpc	r24, r26
    36a0:	a9 e1       	ldi	r26, 0x19	; 25
    36a2:	9a 07       	cpc	r25, r26
    36a4:	40 f0       	brcs	.+16     	; 0x36b6 <strtod+0x148>
    36a6:	c6 60       	ori	r28, 0x06	; 6
    36a8:	05 c0       	rjmp	.+10     	; 0x36b4 <strtod+0x146>
    36aa:	de 3f       	cpi	r29, 0xFE	; 254
    36ac:	51 f4       	brne	.+20     	; 0x36c2 <strtod+0x154>
    36ae:	c3 fd       	sbrc	r28, 3
    36b0:	44 c0       	rjmp	.+136    	; 0x373a <strtod+0x1cc>
    36b2:	c8 60       	ori	r28, 0x08	; 8
    36b4:	6c 2e       	mov	r6, r28
    36b6:	bf ef       	ldi	r27, 0xFF	; 255
    36b8:	cb 1a       	sub	r12, r27
    36ba:	db 0a       	sbc	r13, r27
    36bc:	70 80       	ld	r7, Z
    36be:	c6 2d       	mov	r28, r6
    36c0:	c4 cf       	rjmp	.-120    	; 0x364a <strtod+0xdc>
    36c2:	2d 2f       	mov	r18, r29
    36c4:	2f 7d       	andi	r18, 0xDF	; 223
    36c6:	25 31       	cpi	r18, 0x15	; 21
    36c8:	c1 f5       	brne	.+112    	; 0x373a <strtod+0x1cc>
    36ca:	40 81       	ld	r20, Z
    36cc:	4d 32       	cpi	r20, 0x2D	; 45
    36ce:	11 f4       	brne	.+4      	; 0x36d4 <strtod+0x166>
    36d0:	c0 61       	ori	r28, 0x10	; 16
    36d2:	06 c0       	rjmp	.+12     	; 0x36e0 <strtod+0x172>
    36d4:	4b 32       	cpi	r20, 0x2B	; 43
    36d6:	21 f0       	breq	.+8      	; 0x36e0 <strtod+0x172>
    36d8:	31 96       	adiw	r30, 0x01	; 1
    36da:	21 e0       	ldi	r18, 0x01	; 1
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	06 c0       	rjmp	.+12     	; 0x36ec <strtod+0x17e>
    36e0:	32 96       	adiw	r30, 0x02	; 2
    36e2:	d6 01       	movw	r26, r12
    36e4:	11 96       	adiw	r26, 0x01	; 1
    36e6:	4c 91       	ld	r20, X
    36e8:	22 e0       	ldi	r18, 0x02	; 2
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	a0 ed       	ldi	r26, 0xD0	; 208
    36ee:	a4 0f       	add	r26, r20
    36f0:	aa 30       	cpi	r26, 0x0A	; 10
    36f2:	18 f0       	brcs	.+6      	; 0x36fa <strtod+0x18c>
    36f4:	e2 1b       	sub	r30, r18
    36f6:	f3 0b       	sbc	r31, r19
    36f8:	20 c0       	rjmp	.+64     	; 0x373a <strtod+0x1cc>
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	50 e0       	ldi	r21, 0x00	; 0
    36fe:	40 38       	cpi	r20, 0x80	; 128
    3700:	bc e0       	ldi	r27, 0x0C	; 12
    3702:	5b 07       	cpc	r21, r27
    3704:	5c f4       	brge	.+22     	; 0x371c <strtod+0x1ae>
    3706:	9a 01       	movw	r18, r20
    3708:	22 0f       	add	r18, r18
    370a:	33 1f       	adc	r19, r19
    370c:	22 0f       	add	r18, r18
    370e:	33 1f       	adc	r19, r19
    3710:	42 0f       	add	r20, r18
    3712:	53 1f       	adc	r21, r19
    3714:	44 0f       	add	r20, r20
    3716:	55 1f       	adc	r21, r21
    3718:	4a 0f       	add	r20, r26
    371a:	51 1d       	adc	r21, r1
    371c:	31 96       	adiw	r30, 0x01	; 1
    371e:	df 01       	movw	r26, r30
    3720:	11 97       	sbiw	r26, 0x01	; 1
    3722:	2c 91       	ld	r18, X
    3724:	a0 ed       	ldi	r26, 0xD0	; 208
    3726:	a2 0f       	add	r26, r18
    3728:	aa 30       	cpi	r26, 0x0A	; 10
    372a:	48 f3       	brcs	.-46     	; 0x36fe <strtod+0x190>
    372c:	c4 ff       	sbrs	r28, 4
    372e:	03 c0       	rjmp	.+6      	; 0x3736 <strtod+0x1c8>
    3730:	51 95       	neg	r21
    3732:	41 95       	neg	r20
    3734:	51 09       	sbc	r21, r1
    3736:	04 0f       	add	r16, r20
    3738:	15 1f       	adc	r17, r21
    373a:	c1 ff       	sbrs	r28, 1
    373c:	07 c0       	rjmp	.+14     	; 0x374c <strtod+0x1de>
    373e:	e1 14       	cp	r14, r1
    3740:	f1 04       	cpc	r15, r1
    3742:	21 f0       	breq	.+8      	; 0x374c <strtod+0x1de>
    3744:	31 97       	sbiw	r30, 0x01	; 1
    3746:	d7 01       	movw	r26, r14
    3748:	ed 93       	st	X+, r30
    374a:	fc 93       	st	X, r31
    374c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__floatunsisf>
    3750:	c3 70       	andi	r28, 0x03	; 3
    3752:	c3 30       	cpi	r28, 0x03	; 3
    3754:	19 f0       	breq	.+6      	; 0x375c <strtod+0x1ee>
    3756:	6b 01       	movw	r12, r22
    3758:	7c 01       	movw	r14, r24
    375a:	06 c0       	rjmp	.+12     	; 0x3768 <strtod+0x1fa>
    375c:	6b 01       	movw	r12, r22
    375e:	7c 01       	movw	r14, r24
    3760:	f7 fa       	bst	r15, 7
    3762:	f0 94       	com	r15
    3764:	f7 f8       	bld	r15, 7
    3766:	f0 94       	com	r15
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	a9 01       	movw	r20, r18
    376e:	c7 01       	movw	r24, r14
    3770:	b6 01       	movw	r22, r12
    3772:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
    3776:	88 23       	and	r24, r24
    3778:	09 f4       	brne	.+2      	; 0x377c <strtod+0x20e>
    377a:	45 c0       	rjmp	.+138    	; 0x3806 <strtod+0x298>
    377c:	17 ff       	sbrs	r17, 7
    377e:	06 c0       	rjmp	.+12     	; 0x378c <strtod+0x21e>
    3780:	11 95       	neg	r17
    3782:	01 95       	neg	r16
    3784:	11 09       	sbc	r17, r1
    3786:	c5 eb       	ldi	r28, 0xB5	; 181
    3788:	d0 e0       	ldi	r29, 0x00	; 0
    378a:	02 c0       	rjmp	.+4      	; 0x3790 <strtod+0x222>
    378c:	cd ec       	ldi	r28, 0xCD	; 205
    378e:	d0 e0       	ldi	r29, 0x00	; 0
    3790:	5e 01       	movw	r10, r28
    3792:	b8 e1       	ldi	r27, 0x18	; 24
    3794:	ab 1a       	sub	r10, r27
    3796:	b1 08       	sbc	r11, r1
    3798:	46 01       	movw	r8, r12
    379a:	be 2d       	mov	r27, r14
    379c:	af 2d       	mov	r26, r15
    379e:	90 e2       	ldi	r25, 0x20	; 32
    37a0:	e9 2e       	mov	r14, r25
    37a2:	f1 2c       	mov	r15, r1
    37a4:	0e 15       	cp	r16, r14
    37a6:	1f 05       	cpc	r17, r15
    37a8:	84 f0       	brlt	.+32     	; 0x37ca <strtod+0x25c>
    37aa:	fe 01       	movw	r30, r28
    37ac:	25 91       	lpm	r18, Z+
    37ae:	35 91       	lpm	r19, Z+
    37b0:	45 91       	lpm	r20, Z+
    37b2:	54 91       	lpm	r21, Z
    37b4:	b4 01       	movw	r22, r8
    37b6:	8b 2f       	mov	r24, r27
    37b8:	9a 2f       	mov	r25, r26
    37ba:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__mulsf3>
    37be:	4b 01       	movw	r8, r22
    37c0:	b8 2f       	mov	r27, r24
    37c2:	a9 2f       	mov	r26, r25
    37c4:	0e 19       	sub	r16, r14
    37c6:	1f 09       	sbc	r17, r15
    37c8:	ed cf       	rjmp	.-38     	; 0x37a4 <strtod+0x236>
    37ca:	24 97       	sbiw	r28, 0x04	; 4
    37cc:	f5 94       	asr	r15
    37ce:	e7 94       	ror	r14
    37d0:	ca 15       	cp	r28, r10
    37d2:	db 05       	cpc	r29, r11
    37d4:	39 f7       	brne	.-50     	; 0x37a4 <strtod+0x236>
    37d6:	64 01       	movw	r12, r8
    37d8:	eb 2e       	mov	r14, r27
    37da:	fa 2e       	mov	r15, r26
    37dc:	8e 2d       	mov	r24, r14
    37de:	88 0f       	add	r24, r24
    37e0:	8f 2d       	mov	r24, r15
    37e2:	88 1f       	adc	r24, r24
    37e4:	8f 3f       	cpi	r24, 0xFF	; 255
    37e6:	49 f0       	breq	.+18     	; 0x37fa <strtod+0x28c>
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	a9 01       	movw	r20, r18
    37ee:	c7 01       	movw	r24, r14
    37f0:	b6 01       	movw	r22, r12
    37f2:	0e 94 4f 09 	call	0x129e	; 0x129e <__cmpsf2>
    37f6:	81 11       	cpse	r24, r1
    37f8:	06 c0       	rjmp	.+12     	; 0x3806 <strtod+0x298>
    37fa:	82 e2       	ldi	r24, 0x22	; 34
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <errno+0x1>
    3802:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <errno>
    3806:	c7 01       	movw	r24, r14
    3808:	b6 01       	movw	r22, r12
    380a:	09 c0       	rjmp	.+18     	; 0x381e <strtod+0x2b0>
    380c:	60 e0       	ldi	r22, 0x00	; 0
    380e:	70 e0       	ldi	r23, 0x00	; 0
    3810:	80 e8       	ldi	r24, 0x80	; 128
    3812:	9f ef       	ldi	r25, 0xFF	; 255
    3814:	04 c0       	rjmp	.+8      	; 0x381e <strtod+0x2b0>
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	80 ec       	ldi	r24, 0xC0	; 192
    381c:	9f e7       	ldi	r25, 0x7F	; 127
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	ee e0       	ldi	r30, 0x0E	; 14
    3824:	0c 94 5a 1c 	jmp	0x38b4	; 0x38b4 <__epilogue_restores__+0x8>

00003828 <__ctype_isfalse>:
    3828:	99 27       	eor	r25, r25
    382a:	88 27       	eor	r24, r24

0000382c <__ctype_istrue>:
    382c:	08 95       	ret

0000382e <strncasecmp_P>:
    382e:	fb 01       	movw	r30, r22
    3830:	dc 01       	movw	r26, r24
    3832:	41 50       	subi	r20, 0x01	; 1
    3834:	50 40       	sbci	r21, 0x00	; 0
    3836:	88 f0       	brcs	.+34     	; 0x385a <strncasecmp_P+0x2c>
    3838:	8d 91       	ld	r24, X+
    383a:	81 34       	cpi	r24, 0x41	; 65
    383c:	1c f0       	brlt	.+6      	; 0x3844 <strncasecmp_P+0x16>
    383e:	8b 35       	cpi	r24, 0x5B	; 91
    3840:	0c f4       	brge	.+2      	; 0x3844 <strncasecmp_P+0x16>
    3842:	80 5e       	subi	r24, 0xE0	; 224
    3844:	65 91       	lpm	r22, Z+
    3846:	61 34       	cpi	r22, 0x41	; 65
    3848:	1c f0       	brlt	.+6      	; 0x3850 <strncasecmp_P+0x22>
    384a:	6b 35       	cpi	r22, 0x5B	; 91
    384c:	0c f4       	brge	.+2      	; 0x3850 <strncasecmp_P+0x22>
    384e:	60 5e       	subi	r22, 0xE0	; 224
    3850:	86 1b       	sub	r24, r22
    3852:	61 11       	cpse	r22, r1
    3854:	71 f3       	breq	.-36     	; 0x3832 <strncasecmp_P+0x4>
    3856:	99 0b       	sbc	r25, r25
    3858:	08 95       	ret
    385a:	88 1b       	sub	r24, r24
    385c:	fc cf       	rjmp	.-8      	; 0x3856 <strncasecmp_P+0x28>

0000385e <__muluhisi3>:
    385e:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <__umulhisi3>
    3862:	a5 9f       	mul	r26, r21
    3864:	90 0d       	add	r25, r0
    3866:	b4 9f       	mul	r27, r20
    3868:	90 0d       	add	r25, r0
    386a:	a4 9f       	mul	r26, r20
    386c:	80 0d       	add	r24, r0
    386e:	91 1d       	adc	r25, r1
    3870:	11 24       	eor	r1, r1
    3872:	08 95       	ret

00003874 <__prologue_saves__>:
    3874:	2f 92       	push	r2
    3876:	3f 92       	push	r3
    3878:	4f 92       	push	r4
    387a:	5f 92       	push	r5
    387c:	6f 92       	push	r6
    387e:	7f 92       	push	r7
    3880:	8f 92       	push	r8
    3882:	9f 92       	push	r9
    3884:	af 92       	push	r10
    3886:	bf 92       	push	r11
    3888:	cf 92       	push	r12
    388a:	df 92       	push	r13
    388c:	ef 92       	push	r14
    388e:	ff 92       	push	r15
    3890:	0f 93       	push	r16
    3892:	1f 93       	push	r17
    3894:	cf 93       	push	r28
    3896:	df 93       	push	r29
    3898:	cd b7       	in	r28, 0x3d	; 61
    389a:	de b7       	in	r29, 0x3e	; 62
    389c:	ca 1b       	sub	r28, r26
    389e:	db 0b       	sbc	r29, r27
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	cd bf       	out	0x3d, r28	; 61
    38aa:	09 94       	ijmp

000038ac <__epilogue_restores__>:
    38ac:	2a 88       	ldd	r2, Y+18	; 0x12
    38ae:	39 88       	ldd	r3, Y+17	; 0x11
    38b0:	48 88       	ldd	r4, Y+16	; 0x10
    38b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    38b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    38b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    38b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    38ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    38bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    38be:	b9 84       	ldd	r11, Y+9	; 0x09
    38c0:	c8 84       	ldd	r12, Y+8	; 0x08
    38c2:	df 80       	ldd	r13, Y+7	; 0x07
    38c4:	ee 80       	ldd	r14, Y+6	; 0x06
    38c6:	fd 80       	ldd	r15, Y+5	; 0x05
    38c8:	0c 81       	ldd	r16, Y+4	; 0x04
    38ca:	1b 81       	ldd	r17, Y+3	; 0x03
    38cc:	aa 81       	ldd	r26, Y+2	; 0x02
    38ce:	b9 81       	ldd	r27, Y+1	; 0x01
    38d0:	ce 0f       	add	r28, r30
    38d2:	d1 1d       	adc	r29, r1
    38d4:	0f b6       	in	r0, 0x3f	; 63
    38d6:	f8 94       	cli
    38d8:	de bf       	out	0x3e, r29	; 62
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	cd bf       	out	0x3d, r28	; 61
    38de:	ed 01       	movw	r28, r26
    38e0:	08 95       	ret

000038e2 <__umulhisi3>:
    38e2:	a2 9f       	mul	r26, r18
    38e4:	b0 01       	movw	r22, r0
    38e6:	b3 9f       	mul	r27, r19
    38e8:	c0 01       	movw	r24, r0
    38ea:	a3 9f       	mul	r26, r19
    38ec:	70 0d       	add	r23, r0
    38ee:	81 1d       	adc	r24, r1
    38f0:	11 24       	eor	r1, r1
    38f2:	91 1d       	adc	r25, r1
    38f4:	b2 9f       	mul	r27, r18
    38f6:	70 0d       	add	r23, r0
    38f8:	81 1d       	adc	r24, r1
    38fa:	11 24       	eor	r1, r1
    38fc:	91 1d       	adc	r25, r1
    38fe:	08 95       	ret

00003900 <__do_global_dtors>:
    3900:	10 e0       	ldi	r17, 0x00	; 0
    3902:	c4 e9       	ldi	r28, 0x94	; 148
    3904:	d0 e0       	ldi	r29, 0x00	; 0
    3906:	04 c0       	rjmp	.+8      	; 0x3910 <__do_global_dtors+0x10>
    3908:	fe 01       	movw	r30, r28
    390a:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__tablejump2__>
    390e:	21 96       	adiw	r28, 0x01	; 1
    3910:	c5 39       	cpi	r28, 0x95	; 149
    3912:	d1 07       	cpc	r29, r17
    3914:	c9 f7       	brne	.-14     	; 0x3908 <__do_global_dtors+0x8>
    3916:	f8 94       	cli

00003918 <__stop_program>:
    3918:	ff cf       	rjmp	.-2      	; 0x3918 <__stop_program>
