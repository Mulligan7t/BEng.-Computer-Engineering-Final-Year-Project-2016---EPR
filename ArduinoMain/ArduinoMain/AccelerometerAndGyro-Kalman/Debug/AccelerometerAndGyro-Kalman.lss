
AccelerometerAndGyro-Kalman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00003a10  00003aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024e  00800226  00800226  00003bca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003bca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000878  00000000  00000000  00003c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012b8a  00000000  00000000  000044e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d37  00000000  00000000  0001706a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000044d3  00000000  00000000  00019da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001af4  00000000  00000000  0001e274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003342  00000000  00000000  0001fd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000091a5  00000000  00000000  000230aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  0002c24f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__dtors_end>
       4:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
       8:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
       c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      10:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      14:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      18:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      1c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      20:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      24:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      28:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      2c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      30:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      34:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      38:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      3c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      40:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__vector_16>
      44:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      48:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__vector_18>
      4c:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__vector_19>
      50:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      54:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      58:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      5c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      60:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__vector_24>
      64:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	4e 41       	sbci	r20, 0x1E	; 30
      98:	4e 49       	Address 0x00000098 is out of bounds.
.word	0xffff	; ????

00000099 <pstr_inity>:
      99:	49 4e 49 54 59                                      INITY

0000009e <pstr_inf>:
      9e:	49 4e 46                                            INF

000000a1 <pwr_m10>:
      a1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      b1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000b9 <pwr_p10>:
      b9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      c9:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000d1 <digital_pin_to_timer_PGM>:
      d1:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      e1:	00 00 00 00                                         ....

000000e5 <digital_pin_to_bit_mask_PGM>:
      e5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      f5:	04 08 10 20                                         ... 

000000f9 <digital_pin_to_port_PGM>:
      f9:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     109:	03 03 03 03                                         ....

0000010d <port_to_output_PGM>:
     10d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000117 <port_to_mode_PGM>:
     117:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000122 <__ctors_start>:
     122:	f2 01       	movw	r30, r4
     124:	89 0d       	add	r24, r9
     126:	75 16       	cp	r7, r21

00000128 <__ctors_end>:
     128:	0e 02       	muls	r16, r30

0000012a <__dtors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d8 e0       	ldi	r29, 0x08	; 8
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61

00000136 <__do_copy_data>:
     136:	12 e0       	ldi	r17, 0x02	; 2
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	e0 e1       	ldi	r30, 0x10	; 16
     13e:	fa e3       	ldi	r31, 0x3A	; 58
     140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x10>
     142:	05 90       	lpm	r0, Z+
     144:	0d 92       	st	X+, r0
     146:	a6 32       	cpi	r26, 0x26	; 38
     148:	b1 07       	cpc	r27, r17
     14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0xc>

0000014c <__do_clear_bss>:
     14c:	24 e0       	ldi	r18, 0x04	; 4
     14e:	a6 e2       	ldi	r26, 0x26	; 38
     150:	b2 e0       	ldi	r27, 0x02	; 2
     152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
     154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
     156:	a4 37       	cpi	r26, 0x74	; 116
     158:	b2 07       	cpc	r27, r18
     15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>

0000015c <__do_global_ctors>:
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	c4 e9       	ldi	r28, 0x94	; 148
     160:	d0 e0       	ldi	r29, 0x00	; 0
     162:	04 c0       	rjmp	.+8      	; 0x16c <__do_global_ctors+0x10>
     164:	21 97       	sbiw	r28, 0x01	; 1
     166:	fe 01       	movw	r30, r28
     168:	0e 94 dd 18 	call	0x31ba	; 0x31ba <__tablejump2__>
     16c:	c1 39       	cpi	r28, 0x91	; 145
     16e:	d1 07       	cpc	r29, r17
     170:	c9 f7       	brne	.-14     	; 0x164 <__do_global_ctors+0x8>
     172:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <main>
     176:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__do_global_dtors>

0000017a <__bad_interrupt>:
     17a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017e <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
	Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" uT");
	Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" uT");
	Serial.println("------------------------------------");
	Serial.println("");
	delay(500);
}
     17e:	08 95       	ret

00000180 <_ZN7TwoWire5writeEi>:
     180:	dc 01       	movw	r26, r24
     182:	ed 91       	ld	r30, X+
     184:	fc 91       	ld	r31, X
     186:	01 90       	ld	r0, Z+
     188:	f0 81       	ld	r31, Z
     18a:	e0 2d       	mov	r30, r0
     18c:	09 94       	ijmp

0000018e <_Z10MotorsInitv>:
	//A0 = 23
	//A1 = 24
	//A2 = 25
	//D12 = 12

	pinMode(dir1PinLF, OUTPUT);
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <dir1PinLF>
     194:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>
	pinMode(dir2PinLF, OUTPUT);
     198:	61 e0       	ldi	r22, 0x01	; 1
     19a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <dir2PinLF>
     19e:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>
	pinMode(speedPinLF, OUTPUT);
     1a2:	61 e0       	ldi	r22, 0x01	; 1
     1a4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <speedPinLF>
     1a8:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>

	pinMode(dir1PinRF, OUTPUT);
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <dir1PinRF>
     1b2:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>
	pinMode(dir2PinRF, OUTPUT);
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <dir2PinRF>
     1bc:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>
	pinMode(speedPinRF, OUTPUT);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <speedPinRF>
     1c6:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>

	pinMode(dir1PinLB, OUTPUT);
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <dir1PinLB>
     1d0:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>
	pinMode(dir2PinLB, OUTPUT);
     1d4:	61 e0       	ldi	r22, 0x01	; 1
     1d6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dir2PinLB>
     1da:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>
	pinMode(speedPinLB, OUTPUT);
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <speedPinLB>
     1e4:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>

	pinMode(dir1PinRB, OUTPUT);
     1e8:	61 e0       	ldi	r22, 0x01	; 1
     1ea:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dir1PinRB>
     1ee:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>
	pinMode(dir2PinRB, OUTPUT);
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <dir2PinRB>
     1f8:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>
	pinMode(speedPinRB, OUTPUT);
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <speedPinRB>
     202:	0c 94 26 11 	jmp	0x224c	; 0x224c <pinMode>

00000206 <_Z8wheeldiri>:
	Wire.endTransmission(); //end transmission
}



void wheeldir (int wheelnum) {
     206:	cf 92       	push	r12
     208:	df 92       	push	r13
     20a:	ef 92       	push	r14
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	ec 01       	movw	r28, r24
	if (speedFromPC[wheelnum]>0)
     218:	8c 01       	movw	r16, r24
     21a:	00 0f       	add	r16, r16
     21c:	11 1f       	adc	r17, r17
     21e:	00 0f       	add	r16, r16
     220:	11 1f       	adc	r17, r17
     222:	f8 01       	movw	r30, r16
     224:	e6 5b       	subi	r30, 0xB6	; 182
     226:	fd 4f       	sbci	r31, 0xFD	; 253
     228:	c0 80       	ld	r12, Z
     22a:	d1 80       	ldd	r13, Z+1	; 0x01
     22c:	e2 80       	ldd	r14, Z+2	; 0x02
     22e:	f3 80       	ldd	r15, Z+3	; 0x03
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	a9 01       	movw	r20, r18
     236:	c7 01       	movw	r24, r14
     238:	b6 01       	movw	r22, r12
     23a:	0e 94 23 0b 	call	0x1646	; 0x1646 <__gesf2>
     23e:	cc 0f       	add	r28, r28
     240:	dd 1f       	adc	r29, r29
     242:	18 16       	cp	r1, r24
     244:	4c f4       	brge	.+18     	; 0x258 <_Z8wheeldiri+0x52>
	{
		digitalWrite(dir1[wheelnum],HIGH);
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	fe 01       	movw	r30, r28
     24a:	e2 5f       	subi	r30, 0xF2	; 242
     24c:	fe 4f       	sbci	r31, 0xFE	; 254
     24e:	80 81       	ld	r24, Z
     250:	0e 94 62 11 	call	0x22c4	; 0x22c4 <digitalWrite>
		digitalWrite(dir2[wheelnum],LOW);
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	13 c0       	rjmp	.+38     	; 0x27e <_Z8wheeldiri+0x78>
	}else if (speedFromPC[wheelnum]<0)
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	a9 01       	movw	r20, r18
     25e:	c7 01       	movw	r24, r14
     260:	b6 01       	movw	r22, r12
     262:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
     266:	87 ff       	sbrs	r24, 7
     268:	02 c0       	rjmp	.+4      	; 0x26e <_Z8wheeldiri+0x68>
	{
		digitalWrite(dir1[wheelnum],LOW);
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	01 c0       	rjmp	.+2      	; 0x270 <_Z8wheeldiri+0x6a>
		digitalWrite(dir2[wheelnum],HIGH);
	} 
	else
	{
		digitalWrite(dir1[wheelnum],HIGH);
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	fe 01       	movw	r30, r28
     272:	e2 5f       	subi	r30, 0xF2	; 242
     274:	fe 4f       	sbci	r31, 0xFE	; 254
     276:	80 81       	ld	r24, Z
     278:	0e 94 62 11 	call	0x22c4	; 0x22c4 <digitalWrite>
		digitalWrite(dir2[wheelnum],HIGH);
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	fe 01       	movw	r30, r28
     280:	ea 5f       	subi	r30, 0xFA	; 250
     282:	fe 4f       	sbci	r31, 0xFE	; 254
     284:	80 81       	ld	r24, Z
     286:	0e 94 62 11 	call	0x22c4	; 0x22c4 <digitalWrite>
	}
	analogWrite(speedPin[wheelnum], int(abs(speedFromPC[wheelnum])));
     28a:	f8 01       	movw	r30, r16
     28c:	e6 5b       	subi	r30, 0xB6	; 182
     28e:	fd 4f       	sbci	r31, 0xFD	; 253
     290:	c0 80       	ld	r12, Z
     292:	d1 80       	ldd	r13, Z+1	; 0x01
     294:	e2 80       	ldd	r14, Z+2	; 0x02
     296:	f3 80       	ldd	r15, Z+3	; 0x03
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	a9 01       	movw	r20, r18
     29e:	c7 01       	movw	r24, r14
     2a0:	b6 01       	movw	r22, r12
     2a2:	0e 94 23 0b 	call	0x1646	; 0x1646 <__gesf2>
     2a6:	18 16       	cp	r1, r24
     2a8:	1c f4       	brge	.+6      	; 0x2b0 <_Z8wheeldiri+0xaa>
     2aa:	c7 01       	movw	r24, r14
     2ac:	b6 01       	movw	r22, r12
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <_Z8wheeldiri+0xb0>
     2b0:	c7 01       	movw	r24, r14
     2b2:	b6 01       	movw	r22, r12
     2b4:	90 58       	subi	r25, 0x80	; 128
     2b6:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fixsfsi>
     2ba:	ca 5e       	subi	r28, 0xEA	; 234
     2bc:	de 4f       	sbci	r29, 0xFE	; 254
     2be:	88 81       	ld	r24, Y

}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
	else
	{
		digitalWrite(dir1[wheelnum],HIGH);
		digitalWrite(dir2[wheelnum],HIGH);
	}
	analogWrite(speedPin[wheelnum], int(abs(speedFromPC[wheelnum])));
     2d0:	0c 94 9e 10 	jmp	0x213c	; 0x213c <analogWrite>

000002d4 <_Z9parseDatav>:
		newData = false;
	}
}


void parseData() {
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
	// split the data into its parts
	char * strtokIndx; // this is used by strtok() as an index
	
	strtokIndx = strtok(receivedChars," ");      // get the first part - the string
     2d8:	68 e7       	ldi	r22, 0x78	; 120
     2da:	71 e0       	ldi	r23, 0x01	; 1
     2dc:	89 e2       	ldi	r24, 0x29	; 41
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <strtok>
	speedFromPC[0] = atof(strtokIndx);     // convert this part to an float
     2e4:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <atof>
     2e8:	ca e4       	ldi	r28, 0x4A	; 74
     2ea:	d2 e0       	ldi	r29, 0x02	; 2
     2ec:	68 83       	st	Y, r22
     2ee:	79 83       	std	Y+1, r23	; 0x01
     2f0:	8a 83       	std	Y+2, r24	; 0x02
     2f2:	9b 83       	std	Y+3, r25	; 0x03
	
	strtokIndx = strtok(NULL, " "); // this continues where the previous call left off
     2f4:	68 e7       	ldi	r22, 0x78	; 120
     2f6:	71 e0       	ldi	r23, 0x01	; 1
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <strtok>
	speedFromPC[1] = atof(strtokIndx);     // convert this part to an float
     300:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <atof>
     304:	6c 83       	std	Y+4, r22	; 0x04
     306:	7d 83       	std	Y+5, r23	; 0x05
     308:	8e 83       	std	Y+6, r24	; 0x06
     30a:	9f 83       	std	Y+7, r25	; 0x07
	
	strtokIndx = strtok(NULL, " ");
     30c:	68 e7       	ldi	r22, 0x78	; 120
     30e:	71 e0       	ldi	r23, 0x01	; 1
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <strtok>
	speedFromPC[2] = atof(strtokIndx);     // convert this part to a float
     318:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <atof>
     31c:	68 87       	std	Y+8, r22	; 0x08
     31e:	79 87       	std	Y+9, r23	; 0x09
     320:	8a 87       	std	Y+10, r24	; 0x0a
     322:	9b 87       	std	Y+11, r25	; 0x0b

	strtokIndx = strtok(NULL, " ");
     324:	68 e7       	ldi	r22, 0x78	; 120
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <strtok>
	speedFromPC[3] = atof(strtokIndx);     // convert this part to a float
     330:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <atof>
     334:	6c 87       	std	Y+12, r22	; 0x0c
     336:	7d 87       	std	Y+13, r23	; 0x0d
     338:	8e 87       	std	Y+14, r24	; 0x0e
     33a:	9f 87       	std	Y+15, r25	; 0x0f

}
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <_Z14showParsedDatav>:


void showParsedData() {
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
	Serial.print("LF ");
     346:	69 ec       	ldi	r22, 0xC9	; 201
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	88 e0       	ldi	r24, 0x08	; 8
     34c:	93 e0       	ldi	r25, 0x03	; 3
     34e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>
	Serial.print(speedFromPC[0]);
     352:	ca e4       	ldi	r28, 0x4A	; 74
     354:	d2 e0       	ldi	r29, 0x02	; 2
     356:	48 81       	ld	r20, Y
     358:	59 81       	ldd	r21, Y+1	; 0x01
     35a:	6a 81       	ldd	r22, Y+2	; 0x02
     35c:	7b 81       	ldd	r23, Y+3	; 0x03
     35e:	22 e0       	ldi	r18, 0x02	; 2
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	88 e0       	ldi	r24, 0x08	; 8
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
	Serial.print(" RF ");
     36a:	6d ec       	ldi	r22, 0xCD	; 205
     36c:	71 e0       	ldi	r23, 0x01	; 1
     36e:	88 e0       	ldi	r24, 0x08	; 8
     370:	93 e0       	ldi	r25, 0x03	; 3
     372:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>
	Serial.print(speedFromPC[1]);
     376:	4c 81       	ldd	r20, Y+4	; 0x04
     378:	5d 81       	ldd	r21, Y+5	; 0x05
     37a:	6e 81       	ldd	r22, Y+6	; 0x06
     37c:	7f 81       	ldd	r23, Y+7	; 0x07
     37e:	22 e0       	ldi	r18, 0x02	; 2
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	88 e0       	ldi	r24, 0x08	; 8
     384:	93 e0       	ldi	r25, 0x03	; 3
     386:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
	Serial.print(" LB ");
     38a:	62 ed       	ldi	r22, 0xD2	; 210
     38c:	71 e0       	ldi	r23, 0x01	; 1
     38e:	88 e0       	ldi	r24, 0x08	; 8
     390:	93 e0       	ldi	r25, 0x03	; 3
     392:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>
	Serial.print(speedFromPC[2]);
     396:	48 85       	ldd	r20, Y+8	; 0x08
     398:	59 85       	ldd	r21, Y+9	; 0x09
     39a:	6a 85       	ldd	r22, Y+10	; 0x0a
     39c:	7b 85       	ldd	r23, Y+11	; 0x0b
     39e:	22 e0       	ldi	r18, 0x02	; 2
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	88 e0       	ldi	r24, 0x08	; 8
     3a4:	93 e0       	ldi	r25, 0x03	; 3
     3a6:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
	Serial.print(" RB ");
     3aa:	67 ed       	ldi	r22, 0xD7	; 215
     3ac:	71 e0       	ldi	r23, 0x01	; 1
     3ae:	88 e0       	ldi	r24, 0x08	; 8
     3b0:	93 e0       	ldi	r25, 0x03	; 3
     3b2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>
	Serial.println(speedFromPC[3]);
     3b6:	4c 85       	ldd	r20, Y+12	; 0x0c
     3b8:	5d 85       	ldd	r21, Y+13	; 0x0d
     3ba:	6e 85       	ldd	r22, Y+14	; 0x0e
     3bc:	7f 85       	ldd	r23, Y+15	; 0x0f
     3be:	22 e0       	ldi	r18, 0x02	; 2
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	88 e0       	ldi	r24, 0x08	; 8
     3c4:	93 e0       	ldi	r25, 0x03	; 3
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
	Serial.print(" RF ");
	Serial.print(speedFromPC[1]);
	Serial.print(" LB ");
	Serial.print(speedFromPC[2]);
	Serial.print(" RB ");
	Serial.println(speedFromPC[3]);
     3ca:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <_ZN5Print7printlnEdi>

000003ce <_Z11showNewDatav>:
		}
	}
}

void showNewData() {
	if (newData == true) {
     3ce:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <newData>
     3d2:	88 23       	and	r24, r24
     3d4:	31 f0       	breq	.+12     	; 0x3e2 <_Z11showNewDatav+0x14>
		parseData();
     3d6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z9parseDatav>
		showParsedData();
     3da:	0e 94 a1 01 	call	0x342	; 0x342 <_Z14showParsedDatav>
		newData = false;
     3de:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <newData>
     3e2:	08 95       	ret

000003e4 <_GLOBAL__sub_I_mag>:
//End of Auto generated function prototypes by Atmel Studio



/* Assign a unique ID to this sensor at the same time */
Adafruit_HMC5883_Unified mag = Adafruit_HMC5883_Unified(12345);
     3e4:	49 e3       	ldi	r20, 0x39	; 57
     3e6:	50 e3       	ldi	r21, 0x30	; 48
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	80 ef       	ldi	r24, 0xF0	; 240
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN24Adafruit_HMC5883_UnifiedC1El>
int g_offy = 20;
int g_offz = 93;
int truetemp;
uint32_t timer;

Kalman kalmanX; // Create the Kalman instances
     3f4:	82 ec       	ldi	r24, 0xC2	; 194
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZN6KalmanC1Ev>
Kalman kalmanY;
     3fc:	8a e9       	ldi	r24, 0x9A	; 154
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZN6KalmanC1Ev>
double kalAngleX, kalAngleY; // Calculated angle using a Kalman filter
float headingDegrees;

int d = 100;
int speedall = 255;
String inputString = "";         // a string to hold incoming data
     404:	61 ef       	ldi	r22, 0xF1	; 241
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	80 e6       	ldi	r24, 0x60	; 96
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	0e 94 00 12 	call	0x2400	; 0x2400 <_ZN6StringC1EPKc>
boolean stringComplete = false;  // whether the string is complete
String newlinechar = "\n\r";
     410:	6c ed       	ldi	r22, 0xDC	; 220
     412:	71 e0       	ldi	r23, 0x01	; 1
     414:	8a e5       	ldi	r24, 0x5A	; 90
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	0c 94 00 12 	jmp	0x2400	; 0x2400 <_ZN6StringC1EPKc>

0000041c <_GLOBAL__sub_D_mag>:
     41c:	8a e5       	ldi	r24, 0x5A	; 90
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	0e 94 92 11 	call	0x2324	; 0x2324 <_ZN6StringD1Ev>
double kalAngleX, kalAngleY; // Calculated angle using a Kalman filter
float headingDegrees;

int d = 100;
int speedall = 255;
String inputString = "";         // a string to hold incoming data
     424:	80 e6       	ldi	r24, 0x60	; 96
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	0c 94 92 11 	jmp	0x2324	; 0x2324 <_ZN6StringD1Ev>

0000042c <_Z17AccelerometerInitv>:
	pinMode(dir2PinRB, OUTPUT);
	pinMode(speedPinRB, OUTPUT);
}

void AccelerometerInit()
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
	Wire.beginTransmission(0x40); // address of the accelerometer
     430:	60 e4       	ldi	r22, 0x40	; 64
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	8e ea       	ldi	r24, 0xAE	; 174
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN7TwoWire17beginTransmissionEi>
	// reset the accelerometer
	Wire.write(0x10);
     43c:	60 e1       	ldi	r22, 0x10	; 16
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	8e ea       	ldi	r24, 0xAE	; 174
     442:	93 e0       	ldi	r25, 0x03	; 3
     444:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.write(0xB6);
     448:	66 eb       	ldi	r22, 0xB6	; 182
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	8e ea       	ldi	r24, 0xAE	; 174
     44e:	93 e0       	ldi	r25, 0x03	; 3
     450:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     454:	8e ea       	ldi	r24, 0xAE	; 174
     456:	93 e0       	ldi	r25, 0x03	; 3
     458:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>
	delay(10);
     45c:	6a e0       	ldi	r22, 0x0A	; 10
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 27 10 	call	0x204e	; 0x204e <delay>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     468:	60 e4       	ldi	r22, 0x40	; 64
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	8e ea       	ldi	r24, 0xAE	; 174
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN7TwoWire17beginTransmissionEi>
	// low pass filter, range settings
	Wire.write(0x0D);
     474:	6d e0       	ldi	r22, 0x0D	; 13
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	8e ea       	ldi	r24, 0xAE	; 174
     47a:	93 e0       	ldi	r25, 0x03	; 3
     47c:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.write(0x10);
     480:	60 e1       	ldi	r22, 0x10	; 16
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	8e ea       	ldi	r24, 0xAE	; 174
     486:	93 e0       	ldi	r25, 0x03	; 3
     488:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     48c:	8e ea       	ldi	r24, 0xAE	; 174
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     494:	60 e4       	ldi	r22, 0x40	; 64
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	8e ea       	ldi	r24, 0xAE	; 174
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x20); // read from here
     4a0:	60 e2       	ldi	r22, 0x20	; 32
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	8e ea       	ldi	r24, 0xAE	; 174
     4a6:	93 e0       	ldi	r25, 0x03	; 3
     4a8:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     4ac:	8e ea       	ldi	r24, 0xAE	; 174
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 1);
     4b4:	41 e0       	ldi	r20, 0x01	; 1
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	60 e4       	ldi	r22, 0x40	; 64
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	8e ea       	ldi	r24, 0xAE	; 174
     4be:	93 e0       	ldi	r25, 0x03	; 3
     4c0:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN7TwoWire11requestFromEii>
	byte data = Wire.read();
     4c4:	8e ea       	ldi	r24, 0xAE	; 174
     4c6:	93 e0       	ldi	r25, 0x03	; 3
     4c8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
     4cc:	ec 01       	movw	r28, r24

	Wire.beginTransmission(0x40); // address of the accelerometer
     4ce:	60 e4       	ldi	r22, 0x40	; 64
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	8e ea       	ldi	r24, 0xAE	; 174
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x20);
     4da:	60 e2       	ldi	r22, 0x20	; 32
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	8e ea       	ldi	r24, 0xAE	; 174
     4e0:	93 e0       	ldi	r25, 0x03	; 3
     4e2:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	//	Wire.write(data & 0x0F); // low pass filter to 10 Hz
	Wire.write(data & 0x0F); // low pass filter to 10 Hz
     4e6:	be 01       	movw	r22, r28
     4e8:	6f 70       	andi	r22, 0x0F	; 15
     4ea:	77 27       	eor	r23, r23
     4ec:	8e ea       	ldi	r24, 0xAE	; 174
     4ee:	93 e0       	ldi	r25, 0x03	; 3
     4f0:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     4f4:	8e ea       	ldi	r24, 0xAE	; 174
     4f6:	93 e0       	ldi	r25, 0x03	; 3
     4f8:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     4fc:	60 e4       	ldi	r22, 0x40	; 64
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	8e ea       	ldi	r24, 0xAE	; 174
     502:	93 e0       	ldi	r25, 0x03	; 3
     504:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x35); // read from here
     508:	65 e3       	ldi	r22, 0x35	; 53
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	8e ea       	ldi	r24, 0xAE	; 174
     50e:	93 e0       	ldi	r25, 0x03	; 3
     510:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     514:	8e ea       	ldi	r24, 0xAE	; 174
     516:	93 e0       	ldi	r25, 0x03	; 3
     518:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 1);
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	60 e4       	ldi	r22, 0x40	; 64
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	8e ea       	ldi	r24, 0xAE	; 174
     526:	93 e0       	ldi	r25, 0x03	; 3
     528:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     52c:	8e ea       	ldi	r24, 0xAE	; 174
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
     534:	ec 01       	movw	r28, r24
	Wire.beginTransmission(0x40); // address of the accelerometer
     536:	60 e4       	ldi	r22, 0x40	; 64
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	8e ea       	ldi	r24, 0xAE	; 174
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x35);
     542:	65 e3       	ldi	r22, 0x35	; 53
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	8e ea       	ldi	r24, 0xAE	; 174
     548:	93 e0       	ldi	r25, 0x03	; 3
     54a:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.write((data & 0xF1) | 0x04); // range +/- 2g
     54e:	be 01       	movw	r22, r28
     550:	61 7f       	andi	r22, 0xF1	; 241
     552:	77 27       	eor	r23, r23
     554:	64 60       	ori	r22, 0x04	; 4
     556:	8e ea       	ldi	r24, 0xAE	; 174
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     55e:	8e ea       	ldi	r24, 0xAE	; 174
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(0x40); // address of the accelerometer
     566:	60 e4       	ldi	r22, 0x40	; 64
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	8e ea       	ldi	r24, 0xAE	; 174
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x30);
     572:	60 e3       	ldi	r22, 0x30	; 48
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	8e ea       	ldi	r24, 0xAE	; 174
     578:	93 e0       	ldi	r25, 0x03	; 3
     57a:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	//Wire.write(0x); //
	Wire.endTransmission();
     57e:	8e ea       	ldi	r24, 0xAE	; 174
     580:	93 e0       	ldi	r25, 0x03	; 3

	//Serial.println(data, BIN);

}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
	Wire.endTransmission();

	Wire.beginTransmission(0x40); // address of the accelerometer
	Wire.write(0x30);
	//Wire.write(0x); //
	Wire.endTransmission();
     586:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>

0000058a <_Z17AccelerometerReadv>:
	//Serial.println(data, BIN);

}

void AccelerometerRead()
{
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
	Wire.beginTransmission(0x40); // address of the accelerometer
     58e:	60 e4       	ldi	r22, 0x40	; 64
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	8e ea       	ldi	r24, 0xAE	; 174
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x02); // set read pointer to data
     59a:	62 e0       	ldi	r22, 0x02	; 2
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	8e ea       	ldi	r24, 0xAE	; 174
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     5a6:	8e ea       	ldi	r24, 0xAE	; 174
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 6);
     5ae:	46 e0       	ldi	r20, 0x06	; 6
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	60 e4       	ldi	r22, 0x40	; 64
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	8e ea       	ldi	r24, 0xAE	; 174
     5b8:	93 e0       	ldi	r25, 0x03	; 3
     5ba:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN7TwoWire11requestFromEii>
	
	// read in the 3 axis data, each one is 16 bits
	// print the data to terminal
	
	short data = Wire.read();
     5be:	8e ea       	ldi	r24, 0xAE	; 174
     5c0:	93 e0       	ldi	r25, 0x03	; 3
     5c2:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
     5c6:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     5c8:	8e ea       	ldi	r24, 0xAE	; 174
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	78 2f       	mov	r23, r24
     5d6:	6c 0f       	add	r22, r28
     5d8:	7d 1f       	adc	r23, r29
	accX = data;
     5da:	07 2e       	mov	r0, r23
     5dc:	00 0c       	add	r0, r0
     5de:	88 0b       	sbc	r24, r24
     5e0:	99 0b       	sbc	r25, r25
     5e2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__floatsisf>
     5e6:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <accX>
     5ea:	70 93 97 02 	sts	0x0297, r23	; 0x800297 <accX+0x1>
     5ee:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <accX+0x2>
     5f2:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <accX+0x3>
	data = Wire.read();
     5f6:	8e ea       	ldi	r24, 0xAE	; 174
     5f8:	93 e0       	ldi	r25, 0x03	; 3
     5fa:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
     5fe:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     600:	8e ea       	ldi	r24, 0xAE	; 174
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	78 2f       	mov	r23, r24
     60e:	6c 0f       	add	r22, r28
     610:	7d 1f       	adc	r23, r29
	accY = data;
     612:	07 2e       	mov	r0, r23
     614:	00 0c       	add	r0, r0
     616:	88 0b       	sbc	r24, r24
     618:	99 0b       	sbc	r25, r25
     61a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__floatsisf>
     61e:	60 93 92 02 	sts	0x0292, r22	; 0x800292 <accY>
     622:	70 93 93 02 	sts	0x0293, r23	; 0x800293 <accY+0x1>
     626:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <accY+0x2>
     62a:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <accY+0x3>
	data = Wire.read();
     62e:	8e ea       	ldi	r24, 0xAE	; 174
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
     636:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     638:	8e ea       	ldi	r24, 0xAE	; 174
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	78 2f       	mov	r23, r24
     646:	6c 0f       	add	r22, r28
     648:	7d 1f       	adc	r23, r29
	accZ = data;
     64a:	07 2e       	mov	r0, r23
     64c:	00 0c       	add	r0, r0
     64e:	88 0b       	sbc	r24, r24
     650:	99 0b       	sbc	r25, r25
     652:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__floatsisf>
     656:	60 93 8e 02 	sts	0x028E, r22	; 0x80028e <accZ>
     65a:	70 93 8f 02 	sts	0x028F, r23	; 0x80028f <accZ+0x1>
     65e:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <accZ+0x2>
     662:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <accZ+0x3>
	Serial.print(" , Z = ");
	Serial.print(accZ);
	Serial.println();
	#endif

}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <_Z7writeToihh>:

	
}

//Writes val to address register on ACC
void writeTo(int DEVICE, byte address, byte val) {
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	1f 92       	push	r1
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	16 2f       	mov	r17, r22
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     67a:	bc 01       	movw	r22, r24
     67c:	8e ea       	ldi	r24, 0xAE	; 174
     67e:	93 e0       	ldi	r25, 0x03	; 3
     680:	49 83       	std	Y+1, r20	; 0x01
     682:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);        // send register address
     686:	61 2f       	mov	r22, r17
     688:	8e ea       	ldi	r24, 0xAE	; 174
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN7TwoWire5writeEh>
	Wire.write(val);        // send value to write
     690:	49 81       	ldd	r20, Y+1	; 0x01
     692:	64 2f       	mov	r22, r20
     694:	8e ea       	ldi	r24, 0xAE	; 174
     696:	93 e0       	ldi	r25, 0x03	; 3
     698:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN7TwoWire5writeEh>
	Wire.endTransmission(); //end transmission
     69c:	8e ea       	ldi	r24, 0xAE	; 174
     69e:	93 e0       	ldi	r25, 0x03	; 3
}
     6a0:	0f 90       	pop	r0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
//Writes val to address register on ACC
void writeTo(int DEVICE, byte address, byte val) {
	Wire.beginTransmission(DEVICE); //start transmission to ACC
	Wire.write(address);        // send register address
	Wire.write(val);        // send value to write
	Wire.endTransmission(); //end transmission
     6a8:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>

000006ac <_Z8GyroInitv>:
	* sample rate to = 125Hz
	* parameter to +/- 2000 degrees/sec
	* low pass filter = 5Hz
	* no interrupt
	******************************************/
	writeTo(GYRO, G_PWR_MGM, 0x00);
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	6e e3       	ldi	r22, 0x3E	; 62
     6b0:	88 e6       	ldi	r24, 0x68	; 104
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 36 03 	call	0x66c	; 0x66c <_Z7writeToihh>
	writeTo(GYRO, G_SMPLRT_DIV, 0x07); // EB, 50, 80, 7F, DE, 23, 20, FF
     6b8:	47 e0       	ldi	r20, 0x07	; 7
     6ba:	65 e1       	ldi	r22, 0x15	; 21
     6bc:	88 e6       	ldi	r24, 0x68	; 104
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 36 03 	call	0x66c	; 0x66c <_Z7writeToihh>
	writeTo(GYRO, G_DLPF_FS, 0x1E); // +/- 2000 dgrs/sec, 1KHz, 1E, 19
     6c4:	4e e1       	ldi	r20, 0x1E	; 30
     6c6:	66 e1       	ldi	r22, 0x16	; 22
     6c8:	88 e6       	ldi	r24, 0x68	; 104
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 36 03 	call	0x66c	; 0x66c <_Z7writeToihh>
	writeTo(GYRO, G_INT_CFG, 0x00);
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	67 e1       	ldi	r22, 0x17	; 23
     6d4:	88 e6       	ldi	r24, 0x68	; 104
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0c 94 36 03 	jmp	0x66c	; 0x66c <_Z7writeToihh>

000006dc <setup>:

//initializes the gyroscope
void setup()
{
	#if 1
	newlinechar = "\n";
     6dc:	60 ef       	ldi	r22, 0xF0	; 240
     6de:	71 e0       	ldi	r23, 0x01	; 1
     6e0:	8a e5       	ldi	r24, 0x5A	; 90
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN6StringaSEPKc>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     6e8:	26 e0       	ldi	r18, 0x06	; 6
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	52 ec       	ldi	r21, 0xC2	; 194
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	88 e0       	ldi	r24, 0x08	; 8
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	0e 94 c2 0c 	call	0x1984	; 0x1984 <_ZN14HardwareSerial5beginEmh>
	#endif

		
	Serial.begin(115200);
	Wire.begin();
     6fa:	8e ea       	ldi	r24, 0xAE	; 174
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_ZN7TwoWire5beginEv>

	MotorsInit();
     702:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z10MotorsInitv>
	AccelerometerInit();
     706:	0e 94 16 02 	call	0x42c	; 0x42c <_Z17AccelerometerInitv>
	GyroInit();
     70a:	0e 94 56 03 	call	0x6ac	; 0x6ac <_Z8GyroInitv>
	inputString.reserve(200); // reserve 200 bytes for the inputString:
     70e:	68 ec       	ldi	r22, 0xC8	; 200
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	80 e6       	ldi	r24, 0x60	; 96
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN6String7reserveEj>

	//Serial.println("start");
	timer = micros();
     71a:	0e 94 02 10 	call	0x2004	; 0x2004 <micros>
     71e:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <timer>
     722:	70 93 eb 02 	sts	0x02EB, r23	; 0x8002eb <timer+0x1>
     726:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <timer+0x2>
     72a:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <timer+0x3>
     72e:	08 95       	ret

00000730 <_Z8readFromihiPh>:
	Wire.write(val);        // send value to write
	Wire.endTransmission(); //end transmission
}

//reads num bytes starting from address register on ACC in to buff array
void readFrom(int DEVICE, byte address, int num, byte buff[]) {
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	00 d0       	rcall	.+0      	; 0x73e <_Z8readFromihiPh+0xe>
     73e:	00 d0       	rcall	.+0      	; 0x740 <_Z8readFromihiPh+0x10>
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	7c 01       	movw	r14, r24
     746:	16 2f       	mov	r17, r22
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     748:	bc 01       	movw	r22, r24
     74a:	8e ea       	ldi	r24, 0xAE	; 174
     74c:	93 e0       	ldi	r25, 0x03	; 3
     74e:	2b 83       	std	Y+3, r18	; 0x03
     750:	3c 83       	std	Y+4, r19	; 0x04
     752:	49 83       	std	Y+1, r20	; 0x01
     754:	5a 83       	std	Y+2, r21	; 0x02
     756:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);        //sends address to read from
     75a:	61 2f       	mov	r22, r17
     75c:	8e ea       	ldi	r24, 0xAE	; 174
     75e:	93 e0       	ldi	r25, 0x03	; 3
     760:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN7TwoWire5writeEh>
	Wire.endTransmission(); //end transmission
     764:	8e ea       	ldi	r24, 0xAE	; 174
     766:	93 e0       	ldi	r25, 0x03	; 3
     768:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     76c:	b7 01       	movw	r22, r14
     76e:	8e ea       	ldi	r24, 0xAE	; 174
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <_ZN7TwoWire17beginTransmissionEi>
	Wire.requestFrom(DEVICE, num);    // request 6 bytes from ACC
     776:	49 81       	ldd	r20, Y+1	; 0x01
     778:	5a 81       	ldd	r21, Y+2	; 0x02
     77a:	b7 01       	movw	r22, r14
     77c:	8e ea       	ldi	r24, 0xAE	; 174
     77e:	93 e0       	ldi	r25, 0x03	; 3
     780:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN7TwoWire11requestFromEii>
     784:	2b 81       	ldd	r18, Y+3	; 0x03
     786:	02 2f       	mov	r16, r18
     788:	3c 81       	ldd	r19, Y+4	; 0x04
     78a:	13 2f       	mov	r17, r19
	
	int i = 0;
	while(Wire.available())    //ACC may send less than requested (abnormal)
     78c:	8e ea       	ldi	r24, 0xAE	; 174
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZN7TwoWire9availableEv>
     794:	89 2b       	or	r24, r25
     796:	41 f0       	breq	.+16     	; 0x7a8 <_Z8readFromihiPh+0x78>
	{
		buff[i] = Wire.read(); // receive a byte
     798:	8e ea       	ldi	r24, 0xAE	; 174
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
     7a0:	f8 01       	movw	r30, r16
     7a2:	81 93       	st	Z+, r24
     7a4:	8f 01       	movw	r16, r30
     7a6:	f2 cf       	rjmp	.-28     	; 0x78c <_Z8readFromihiPh+0x5c>
		i++;
	}
	Wire.endTransmission(); //end transmission
     7a8:	8e ea       	ldi	r24, 0xAE	; 174
     7aa:	93 e0       	ldi	r25, 0x03	; 3
}
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
	while(Wire.available())    //ACC may send less than requested (abnormal)
	{
		buff[i] = Wire.read(); // receive a byte
		i++;
	}
	Wire.endTransmission(); //end transmission
     7c0:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>

000007c4 <_Z16getGyroscopeDataPi>:
	writeTo(GYRO, G_DLPF_FS, 0x1E); // +/- 2000 dgrs/sec, 1KHz, 1E, 19
	writeTo(GYRO, G_INT_CFG, 0x00);
}

void getGyroscopeData(int * result)
{
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	28 97       	sbiw	r28, 0x08	; 8
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	8c 01       	movw	r16, r24
	z axis MSB = 21, z axis LSB = 22
	*************************************/
	int regAddress = 0x1B;
	int temp, x, y, z;
	byte buff[G_TO_READ];
	readFrom(GYRO, regAddress, G_TO_READ, buff); //read the gyro data from the ITG3200
     7de:	9e 01       	movw	r18, r28
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	48 e0       	ldi	r20, 0x08	; 8
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	6b e1       	ldi	r22, 0x1B	; 27
     7ea:	88 e6       	ldi	r24, 0x68	; 104
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 98 03 	call	0x730	; 0x730 <_Z8readFromihiPh>
	result[0] = ((buff[2] << 8) | buff[3]) + g_offx;
     7f2:	8b 81       	ldd	r24, Y+3	; 0x03
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	98 2f       	mov	r25, r24
     7f8:	88 27       	eor	r24, r24
     7fa:	2c 81       	ldd	r18, Y+4	; 0x04
     7fc:	82 2b       	or	r24, r18
     7fe:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <g_offx>
     802:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <g_offx+0x1>
     806:	82 0f       	add	r24, r18
     808:	93 1f       	adc	r25, r19
     80a:	f8 01       	movw	r30, r16
     80c:	91 83       	std	Z+1, r25	; 0x01
     80e:	80 83       	st	Z, r24
	result[1] = ((buff[4] << 8) | buff[5]) + g_offy;
     810:	8d 81       	ldd	r24, Y+5	; 0x05
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	98 2f       	mov	r25, r24
     816:	88 27       	eor	r24, r24
     818:	2e 81       	ldd	r18, Y+6	; 0x06
     81a:	82 2b       	or	r24, r18
     81c:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <g_offy>
     820:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <g_offy+0x1>
     824:	82 0f       	add	r24, r18
     826:	93 1f       	adc	r25, r19
     828:	93 83       	std	Z+3, r25	; 0x03
     82a:	82 83       	std	Z+2, r24	; 0x02
	result[2] = ((buff[6] << 8) | buff[7]) + g_offz;
     82c:	2f 81       	ldd	r18, Y+7	; 0x07
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	32 2f       	mov	r19, r18
     832:	22 27       	eor	r18, r18
     834:	88 85       	ldd	r24, Y+8	; 0x08
     836:	28 2b       	or	r18, r24
     838:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_offz>
     83c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <g_offz+0x1>
     840:	28 0f       	add	r18, r24
     842:	39 1f       	adc	r19, r25
     844:	35 83       	std	Z+5, r19	; 0x05
     846:	24 83       	std	Z+4, r18	; 0x04
	result[3] = (buff[0] << 8) | buff[1]; // temperature
     848:	29 81       	ldd	r18, Y+1	; 0x01
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	32 2f       	mov	r19, r18
     84e:	22 27       	eor	r18, r18
     850:	8a 81       	ldd	r24, Y+2	; 0x02
     852:	28 2b       	or	r18, r24
     854:	37 83       	std	Z+7, r19	; 0x07
     856:	26 83       	std	Z+6, r18	; 0x06
}
     858:	28 96       	adiw	r28, 0x08	; 8
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	f8 94       	cli
     85e:	de bf       	out	0x3e, r29	; 62
     860:	0f be       	out	0x3f, r0	; 63
     862:	cd bf       	out	0x3d, r28	; 61
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	08 95       	ret

0000086e <_Z8GyroReadv>:

void GyroRead (){
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	28 97       	sbiw	r28, 0x08	; 8
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
	byte addr;
	int gyro[4];
	getGyroscopeData(gyro);
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_Z16getGyroscopeDataPi>
	gyroX = gyro[0] / 14.375; //convert to degrees per second
     88a:	69 81       	ldd	r22, Y+1	; 0x01
     88c:	7a 81       	ldd	r23, Y+2	; 0x02
     88e:	07 2e       	mov	r0, r23
     890:	00 0c       	add	r0, r0
     892:	88 0b       	sbc	r24, r24
     894:	99 0b       	sbc	r25, r25
     896:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__floatsisf>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	46 e6       	ldi	r20, 0x66	; 102
     8a0:	51 e4       	ldi	r21, 0x41	; 65
     8a2:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     8a6:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <gyroX>
     8aa:	70 93 8b 02 	sts	0x028B, r23	; 0x80028b <gyroX+0x1>
     8ae:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <gyroX+0x2>
     8b2:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <gyroX+0x3>
	gyroY = gyro[1] / 14.375;
     8b6:	6b 81       	ldd	r22, Y+3	; 0x03
     8b8:	7c 81       	ldd	r23, Y+4	; 0x04
     8ba:	07 2e       	mov	r0, r23
     8bc:	00 0c       	add	r0, r0
     8be:	88 0b       	sbc	r24, r24
     8c0:	99 0b       	sbc	r25, r25
     8c2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__floatsisf>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	46 e6       	ldi	r20, 0x66	; 102
     8cc:	51 e4       	ldi	r21, 0x41	; 65
     8ce:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     8d2:	60 93 86 02 	sts	0x0286, r22	; 0x800286 <gyroY>
     8d6:	70 93 87 02 	sts	0x0287, r23	; 0x800287 <gyroY+0x1>
     8da:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <gyroY+0x2>
     8de:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <gyroY+0x3>
	gyroZ = gyro[2] / 14.375;
     8e2:	6d 81       	ldd	r22, Y+5	; 0x05
     8e4:	7e 81       	ldd	r23, Y+6	; 0x06
     8e6:	07 2e       	mov	r0, r23
     8e8:	00 0c       	add	r0, r0
     8ea:	88 0b       	sbc	r24, r24
     8ec:	99 0b       	sbc	r25, r25
     8ee:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__floatsisf>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	46 e6       	ldi	r20, 0x66	; 102
     8f8:	51 e4       	ldi	r21, 0x41	; 65
     8fa:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     8fe:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <gyroZ>
     902:	70 93 83 02 	sts	0x0283, r23	; 0x800283 <gyroZ+0x1>
     906:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <gyroZ+0x2>
     90a:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <gyroZ+0x3>
	truetemp = 35+ ((double) (gyro[3] + 13200)) / 280; // temperature
     90e:	6f 81       	ldd	r22, Y+7	; 0x07
     910:	78 85       	ldd	r23, Y+8	; 0x08
     912:	60 57       	subi	r22, 0x70	; 112
     914:	7c 4c       	sbci	r23, 0xCC	; 204
     916:	07 2e       	mov	r0, r23
     918:	00 0c       	add	r0, r0
     91a:	88 0b       	sbc	r24, r24
     91c:	99 0b       	sbc	r25, r25
     91e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__floatsisf>
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	4c e8       	ldi	r20, 0x8C	; 140
     928:	53 e4       	ldi	r21, 0x43	; 67
     92a:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	4c e0       	ldi	r20, 0x0C	; 12
     934:	52 e4       	ldi	r21, 0x42	; 66
     936:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     93a:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fixsfsi>
     93e:	70 93 ef 02 	sts	0x02EF, r23	; 0x8002ef <truetemp+0x1>
     942:	60 93 ee 02 	sts	0x02EE, r22	; 0x8002ee <truetemp>
	Serial.println("C");
	//delay(500);
	#endif

	
}
     946:	28 96       	adiw	r28, 0x08	; 8
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <_Z10sensorloopi>:
	Serial.print(" RB ");
	Serial.println(speedFromPC[3]);
}

void sensorloop(int printout)
{
     958:	2f 92       	push	r2
     95a:	3f 92       	push	r3
     95c:	4f 92       	push	r4
     95e:	5f 92       	push	r5
     960:	6f 92       	push	r6
     962:	7f 92       	push	r7
     964:	8f 92       	push	r8
     966:	9f 92       	push	r9
     968:	af 92       	push	r10
     96a:	bf 92       	push	r11
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	e8 97       	sbiw	r28, 0x38	; 56
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	1c 01       	movw	r2, r24
	
	AccelerometerRead();
     98e:	0e 94 c5 02 	call	0x58a	; 0x58a <_Z17AccelerometerReadv>
	GyroRead();
     992:	0e 94 37 04 	call	0x86e	; 0x86e <_Z8GyroReadv>
	
	double dt = (double)(micros() - timer) / 1000000; // Calculate delta time
     996:	0e 94 02 10 	call	0x2004	; 0x2004 <micros>
     99a:	c0 90 ea 02 	lds	r12, 0x02EA	; 0x8002ea <timer>
     99e:	d0 90 eb 02 	lds	r13, 0x02EB	; 0x8002eb <timer+0x1>
     9a2:	e0 90 ec 02 	lds	r14, 0x02EC	; 0x8002ec <timer+0x2>
     9a6:	f0 90 ed 02 	lds	r15, 0x02ED	; 0x8002ed <timer+0x3>
     9aa:	6c 19       	sub	r22, r12
     9ac:	7d 09       	sbc	r23, r13
     9ae:	8e 09       	sbc	r24, r14
     9b0:	9f 09       	sbc	r25, r15
     9b2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__floatunsisf>
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	34 e2       	ldi	r19, 0x24	; 36
     9ba:	44 e7       	ldi	r20, 0x74	; 116
     9bc:	59 e4       	ldi	r21, 0x49	; 73
     9be:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     9c2:	69 a7       	std	Y+41, r22	; 0x29
     9c4:	7a a7       	std	Y+42, r23	; 0x2a
     9c6:	8b a7       	std	Y+43, r24	; 0x2b
     9c8:	9c a7       	std	Y+44, r25	; 0x2c
	timer = micros();
     9ca:	0e 94 02 10 	call	0x2004	; 0x2004 <micros>
     9ce:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <timer>
     9d2:	70 93 eb 02 	sts	0x02EB, r23	; 0x8002eb <timer+0x1>
     9d6:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <timer+0x2>
     9da:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <timer+0x3>

	// Source: http://www.freescale.com/files/sensors/doc/app_note/AN3461.pdf eq. 25 and eq. 26
	// atan2 outputs the value of -π to π (radians) - see http://en.wikipedia.org/wiki/Atan2
	// It is then converted from radians to degrees
	#ifdef RESTRICT_PITCH // Eq. 25 and 26
	double roll  = atan2(accY, accZ) * RAD_TO_DEG;
     9de:	c0 90 8e 02 	lds	r12, 0x028E	; 0x80028e <accZ>
     9e2:	d0 90 8f 02 	lds	r13, 0x028F	; 0x80028f <accZ+0x1>
     9e6:	e0 90 90 02 	lds	r14, 0x0290	; 0x800290 <accZ+0x2>
     9ea:	f0 90 91 02 	lds	r15, 0x0291	; 0x800291 <accZ+0x3>
     9ee:	80 90 92 02 	lds	r8, 0x0292	; 0x800292 <accY>
     9f2:	90 90 93 02 	lds	r9, 0x0293	; 0x800293 <accY+0x1>
     9f6:	a0 90 94 02 	lds	r10, 0x0294	; 0x800294 <accY+0x2>
     9fa:	b0 90 95 02 	lds	r11, 0x0295	; 0x800295 <accY+0x3>
     9fe:	a7 01       	movw	r20, r14
     a00:	96 01       	movw	r18, r12
     a02:	c5 01       	movw	r24, r10
     a04:	b4 01       	movw	r22, r8
     a06:	0e 94 3e 09 	call	0x127c	; 0x127c <atan2>
     a0a:	21 ee       	ldi	r18, 0xE1	; 225
     a0c:	3e e2       	ldi	r19, 0x2E	; 46
     a0e:	45 e6       	ldi	r20, 0x65	; 101
     a10:	52 e4       	ldi	r21, 0x42	; 66
     a12:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     a16:	2b 01       	movw	r4, r22
     a18:	3c 01       	movw	r6, r24
	double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
     a1a:	a5 01       	movw	r20, r10
     a1c:	94 01       	movw	r18, r8
     a1e:	c5 01       	movw	r24, r10
     a20:	b4 01       	movw	r22, r8
     a22:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     a26:	4b 01       	movw	r8, r22
     a28:	5c 01       	movw	r10, r24
     a2a:	a7 01       	movw	r20, r14
     a2c:	96 01       	movw	r18, r12
     a2e:	c7 01       	movw	r24, r14
     a30:	b6 01       	movw	r22, r12
     a32:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     a36:	9b 01       	movw	r18, r22
     a38:	ac 01       	movw	r20, r24
     a3a:	c5 01       	movw	r24, r10
     a3c:	b4 01       	movw	r22, r8
     a3e:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     a42:	0e 94 a3 0b 	call	0x1746	; 0x1746 <sqrt>
     a46:	9b 01       	movw	r18, r22
     a48:	ac 01       	movw	r20, r24
     a4a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <accX>
     a4e:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <accX+0x1>
     a52:	a0 91 98 02 	lds	r26, 0x0298	; 0x800298 <accX+0x2>
     a56:	b0 91 99 02 	lds	r27, 0x0299	; 0x800299 <accX+0x3>
     a5a:	bc 01       	movw	r22, r24
     a5c:	cd 01       	movw	r24, r26
     a5e:	90 58       	subi	r25, 0x80	; 128
     a60:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     a64:	0e 94 6e 09 	call	0x12dc	; 0x12dc <atan>
     a68:	21 ee       	ldi	r18, 0xE1	; 225
     a6a:	3e e2       	ldi	r19, 0x2E	; 46
     a6c:	45 e6       	ldi	r20, 0x65	; 101
     a6e:	52 e4       	ldi	r21, 0x42	; 66
     a70:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     a74:	69 ab       	std	Y+49, r22	; 0x31
     a76:	7a ab       	std	Y+50, r23	; 0x32
     a78:	8b ab       	std	Y+51, r24	; 0x33
     a7a:	9c ab       	std	Y+52, r25	; 0x34
	#else // Eq. 28 and 29
	double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
	double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
	#endif

	double gyroXrate = gyroX / 131.0; // Convert to deg/s
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	43 e0       	ldi	r20, 0x03	; 3
     a82:	53 e4       	ldi	r21, 0x43	; 67
     a84:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <gyroX>
     a88:	70 91 8b 02 	lds	r23, 0x028B	; 0x80028b <gyroX+0x1>
     a8c:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <gyroX+0x2>
     a90:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <gyroX+0x3>
     a94:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     a98:	6d a3       	std	Y+37, r22	; 0x25
     a9a:	7e a3       	std	Y+38, r23	; 0x26
     a9c:	8f a3       	std	Y+39, r24	; 0x27
     a9e:	98 a7       	std	Y+40, r25	; 0x28
	double gyroYrate = gyroY / 131.0; // Convert to deg/s
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	43 e0       	ldi	r20, 0x03	; 3
     aa6:	53 e4       	ldi	r21, 0x43	; 67
     aa8:	60 91 86 02 	lds	r22, 0x0286	; 0x800286 <gyroY>
     aac:	70 91 87 02 	lds	r23, 0x0287	; 0x800287 <gyroY+0x1>
     ab0:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <gyroY+0x2>
     ab4:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <gyroY+0x3>
     ab8:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     abc:	4b 01       	movw	r8, r22
     abe:	5c 01       	movw	r10, r24

	#ifdef RESTRICT_PITCH
	// This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees
	if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90)) {
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	44 eb       	ldi	r20, 0xB4	; 180
     ac6:	52 ec       	ldi	r21, 0xC2	; 194
     ac8:	c3 01       	movw	r24, r6
     aca:	b2 01       	movw	r22, r4
     acc:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
     ad0:	87 ff       	sbrs	r24, 7
     ad2:	10 c0       	rjmp	.+32     	; 0xaf4 <_Z10sensorloopi+0x19c>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	44 eb       	ldi	r20, 0xB4	; 180
     ada:	52 e4       	ldi	r21, 0x42	; 66
     adc:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <kalAngleX>
     ae0:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <kalAngleX+0x1>
     ae4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <kalAngleX+0x2>
     ae8:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <kalAngleX+0x3>
     aec:	0e 94 23 0b 	call	0x1646	; 0x1646 <__gesf2>
     af0:	18 16       	cp	r1, r24
     af2:	d4 f0       	brlt	.+52     	; 0xb28 <_Z10sensorloopi+0x1d0>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	44 eb       	ldi	r20, 0xB4	; 180
     afa:	52 e4       	ldi	r21, 0x42	; 66
     afc:	c3 01       	movw	r24, r6
     afe:	b2 01       	movw	r22, r4
     b00:	0e 94 23 0b 	call	0x1646	; 0x1646 <__gesf2>
     b04:	18 16       	cp	r1, r24
     b06:	7c f5       	brge	.+94     	; 0xb66 <_Z10sensorloopi+0x20e>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	44 eb       	ldi	r20, 0xB4	; 180
     b0e:	52 ec       	ldi	r21, 0xC2	; 194
     b10:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <kalAngleX>
     b14:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <kalAngleX+0x1>
     b18:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <kalAngleX+0x2>
     b1c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <kalAngleX+0x3>
     b20:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
     b24:	87 ff       	sbrs	r24, 7
     b26:	1f c0       	rjmp	.+62     	; 0xb66 <_Z10sensorloopi+0x20e>
		kalmanX.setAngle(roll);
     b28:	b3 01       	movw	r22, r6
     b2a:	a2 01       	movw	r20, r4
     b2c:	82 ec       	ldi	r24, 0xC2	; 194
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <_ZN6Kalman8setAngleEf>
		compAngleX = roll;
     b34:	40 92 76 02 	sts	0x0276, r4	; 0x800276 <compAngleX>
     b38:	50 92 77 02 	sts	0x0277, r5	; 0x800277 <compAngleX+0x1>
     b3c:	60 92 78 02 	sts	0x0278, r6	; 0x800278 <compAngleX+0x2>
     b40:	70 92 79 02 	sts	0x0279, r7	; 0x800279 <compAngleX+0x3>
		kalAngleX = roll;
     b44:	40 92 6e 02 	sts	0x026E, r4	; 0x80026e <kalAngleX>
     b48:	50 92 6f 02 	sts	0x026F, r5	; 0x80026f <kalAngleX+0x1>
     b4c:	60 92 70 02 	sts	0x0270, r6	; 0x800270 <kalAngleX+0x2>
     b50:	70 92 71 02 	sts	0x0271, r7	; 0x800271 <kalAngleX+0x3>
		gyroXangle = roll;
     b54:	40 92 7e 02 	sts	0x027E, r4	; 0x80027e <gyroXangle>
     b58:	50 92 7f 02 	sts	0x027F, r5	; 0x80027f <gyroXangle+0x1>
     b5c:	60 92 80 02 	sts	0x0280, r6	; 0x800280 <gyroXangle+0x2>
     b60:	70 92 81 02 	sts	0x0281, r7	; 0x800281 <gyroXangle+0x3>
     b64:	16 c0       	rjmp	.+44     	; 0xb92 <_Z10sensorloopi+0x23a>
	} else
	kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
     b66:	c9 a4       	ldd	r12, Y+41	; 0x29
     b68:	da a4       	ldd	r13, Y+42	; 0x2a
     b6a:	eb a4       	ldd	r14, Y+43	; 0x2b
     b6c:	fc a4       	ldd	r15, Y+44	; 0x2c
     b6e:	0d a1       	ldd	r16, Y+37	; 0x25
     b70:	1e a1       	ldd	r17, Y+38	; 0x26
     b72:	2f a1       	ldd	r18, Y+39	; 0x27
     b74:	38 a5       	ldd	r19, Y+40	; 0x28
     b76:	b3 01       	movw	r22, r6
     b78:	a2 01       	movw	r20, r4
     b7a:	82 ec       	ldi	r24, 0xC2	; 194
     b7c:	92 e0       	ldi	r25, 0x02	; 2
     b7e:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN6Kalman8getAngleEfff>
     b82:	60 93 6e 02 	sts	0x026E, r22	; 0x80026e <kalAngleX>
     b86:	70 93 6f 02 	sts	0x026F, r23	; 0x80026f <kalAngleX+0x1>
     b8a:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <kalAngleX+0x2>
     b8e:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <kalAngleX+0x3>

	if (abs(kalAngleX) > 90)
     b92:	c0 90 6e 02 	lds	r12, 0x026E	; 0x80026e <kalAngleX>
     b96:	d0 90 6f 02 	lds	r13, 0x026F	; 0x80026f <kalAngleX+0x1>
     b9a:	e0 90 70 02 	lds	r14, 0x0270	; 0x800270 <kalAngleX+0x2>
     b9e:	f0 90 71 02 	lds	r15, 0x0271	; 0x800271 <kalAngleX+0x3>
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	a9 01       	movw	r20, r18
     ba8:	c7 01       	movw	r24, r14
     baa:	b6 01       	movw	r22, r12
     bac:	0e 94 23 0b 	call	0x1646	; 0x1646 <__gesf2>
     bb0:	18 16       	cp	r1, r24
     bb2:	5c f4       	brge	.+22     	; 0xbca <_Z10sensorloopi+0x272>
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	44 eb       	ldi	r20, 0xB4	; 180
     bba:	52 e4       	ldi	r21, 0x42	; 66
     bbc:	c7 01       	movw	r24, r14
     bbe:	b6 01       	movw	r22, r12
     bc0:	0e 94 23 0b 	call	0x1646	; 0x1646 <__gesf2>
     bc4:	18 16       	cp	r1, r24
     bc6:	5c f0       	brlt	.+22     	; 0xbde <_Z10sensorloopi+0x286>
     bc8:	0e c0       	rjmp	.+28     	; 0xbe6 <_Z10sensorloopi+0x28e>
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	44 eb       	ldi	r20, 0xB4	; 180
     bd0:	52 ec       	ldi	r21, 0xC2	; 194
     bd2:	c7 01       	movw	r24, r14
     bd4:	b6 01       	movw	r22, r12
     bd6:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
     bda:	87 ff       	sbrs	r24, 7
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <_Z10sensorloopi+0x28e>
	gyroYrate = -gyroYrate; // Invert rate, so it fits the restriced accelerometer reading
     bde:	b7 fa       	bst	r11, 7
     be0:	b0 94       	com	r11
     be2:	b7 f8       	bld	r11, 7
     be4:	b0 94       	com	r11
	kalAngleY = kalmanY.getAngle(pitch, gyroYrate, dt);
     be6:	c9 a4       	ldd	r12, Y+41	; 0x29
     be8:	da a4       	ldd	r13, Y+42	; 0x2a
     bea:	eb a4       	ldd	r14, Y+43	; 0x2b
     bec:	fc a4       	ldd	r15, Y+44	; 0x2c
     bee:	95 01       	movw	r18, r10
     bf0:	84 01       	movw	r16, r8
     bf2:	49 a9       	ldd	r20, Y+49	; 0x31
     bf4:	5a a9       	ldd	r21, Y+50	; 0x32
     bf6:	6b a9       	ldd	r22, Y+51	; 0x33
     bf8:	7c a9       	ldd	r23, Y+52	; 0x34
     bfa:	8a e9       	ldi	r24, 0x9A	; 154
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 bf 13 	call	0x277e	; 0x277e <_ZN6Kalman8getAngleEfff>
     c02:	6d ab       	std	Y+53, r22	; 0x35
     c04:	7e ab       	std	Y+54, r23	; 0x36
     c06:	8f ab       	std	Y+55, r24	; 0x37
     c08:	98 af       	std	Y+56, r25	; 0x38
     c0a:	60 93 6a 02 	sts	0x026A, r22	; 0x80026a <kalAngleY>
     c0e:	70 93 6b 02 	sts	0x026B, r23	; 0x80026b <kalAngleY+0x1>
     c12:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <kalAngleY+0x2>
     c16:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <kalAngleY+0x3>
	if (abs(kalAngleY) > 90)
	gyroXrate = -gyroXrate; // Invert rate, so it fits the restriced accelerometer reading
	kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
	#endif

	gyroXangle += gyroXrate * dt; // Calculate gyro angle without any filter
     c1a:	29 a5       	ldd	r18, Y+41	; 0x29
     c1c:	3a a5       	ldd	r19, Y+42	; 0x2a
     c1e:	4b a5       	ldd	r20, Y+43	; 0x2b
     c20:	5c a5       	ldd	r21, Y+44	; 0x2c
     c22:	6d a1       	ldd	r22, Y+37	; 0x25
     c24:	7e a1       	ldd	r23, Y+38	; 0x26
     c26:	8f a1       	ldd	r24, Y+39	; 0x27
     c28:	98 a5       	ldd	r25, Y+40	; 0x28
     c2a:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     c2e:	6d a7       	std	Y+45, r22	; 0x2d
     c30:	7e a7       	std	Y+46, r23	; 0x2e
     c32:	8f a7       	std	Y+47, r24	; 0x2f
     c34:	98 ab       	std	Y+48, r25	; 0x30
     c36:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <gyroXangle>
     c3a:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <gyroXangle+0x1>
     c3e:	40 91 80 02 	lds	r20, 0x0280	; 0x800280 <gyroXangle+0x2>
     c42:	50 91 81 02 	lds	r21, 0x0281	; 0x800281 <gyroXangle+0x3>
     c46:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     c4a:	6d a3       	std	Y+37, r22	; 0x25
     c4c:	7e a3       	std	Y+38, r23	; 0x26
     c4e:	8f a3       	std	Y+39, r24	; 0x27
     c50:	98 a7       	std	Y+40, r25	; 0x28
     c52:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <gyroXangle>
     c56:	70 93 7f 02 	sts	0x027F, r23	; 0x80027f <gyroXangle+0x1>
     c5a:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <gyroXangle+0x2>
     c5e:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <gyroXangle+0x3>
	gyroYangle += gyroYrate * dt;
     c62:	29 a5       	ldd	r18, Y+41	; 0x29
     c64:	3a a5       	ldd	r19, Y+42	; 0x2a
     c66:	4b a5       	ldd	r20, Y+43	; 0x2b
     c68:	5c a5       	ldd	r21, Y+44	; 0x2c
     c6a:	c5 01       	movw	r24, r10
     c6c:	b4 01       	movw	r22, r8
     c6e:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     c72:	6b 01       	movw	r12, r22
     c74:	7c 01       	movw	r14, r24
     c76:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <gyroYangle>
     c7a:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <gyroYangle+0x1>
     c7e:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <gyroYangle+0x2>
     c82:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <gyroYangle+0x3>
     c86:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     c8a:	4b 01       	movw	r8, r22
     c8c:	5c 01       	movw	r10, r24
     c8e:	60 93 7a 02 	sts	0x027A, r22	; 0x80027a <gyroYangle>
     c92:	70 93 7b 02 	sts	0x027B, r23	; 0x80027b <gyroYangle+0x1>
     c96:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <gyroYangle+0x2>
     c9a:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <gyroYangle+0x3>
	//gyroXangle += kalmanX.getRate() * dt; // Calculate gyro angle using the unbiased rate
	//gyroYangle += kalmanY.getRate() * dt;

	compAngleX = 0.93 * (compAngleX + gyroXrate * dt) + 0.07 * roll; // Calculate the angle using a Complimentary filter
     c9e:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <compAngleX>
     ca2:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <compAngleX+0x1>
     ca6:	40 91 78 02 	lds	r20, 0x0278	; 0x800278 <compAngleX+0x2>
     caa:	50 91 79 02 	lds	r21, 0x0279	; 0x800279 <compAngleX+0x3>
     cae:	6d a5       	ldd	r22, Y+45	; 0x2d
     cb0:	7e a5       	ldd	r23, Y+46	; 0x2e
     cb2:	8f a5       	ldd	r24, Y+47	; 0x2f
     cb4:	98 a9       	ldd	r25, Y+48	; 0x30
     cb6:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     cba:	2b e7       	ldi	r18, 0x7B	; 123
     cbc:	34 e1       	ldi	r19, 0x14	; 20
     cbe:	4e e6       	ldi	r20, 0x6E	; 110
     cc0:	5f e3       	ldi	r21, 0x3F	; 63
     cc2:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     cc6:	6d a7       	std	Y+45, r22	; 0x2d
     cc8:	7e a7       	std	Y+46, r23	; 0x2e
     cca:	8f a7       	std	Y+47, r24	; 0x2f
     ccc:	98 ab       	std	Y+48, r25	; 0x30
     cce:	29 e2       	ldi	r18, 0x29	; 41
     cd0:	3c e5       	ldi	r19, 0x5C	; 92
     cd2:	4f e8       	ldi	r20, 0x8F	; 143
     cd4:	5d e3       	ldi	r21, 0x3D	; 61
     cd6:	c3 01       	movw	r24, r6
     cd8:	b2 01       	movw	r22, r4
     cda:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     cde:	9b 01       	movw	r18, r22
     ce0:	ac 01       	movw	r20, r24
     ce2:	6d a5       	ldd	r22, Y+45	; 0x2d
     ce4:	7e a5       	ldd	r23, Y+46	; 0x2e
     ce6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ce8:	98 a9       	ldd	r25, Y+48	; 0x30
     cea:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     cee:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <compAngleX>
     cf2:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <compAngleX+0x1>
     cf6:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <compAngleX+0x2>
     cfa:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <compAngleX+0x3>
	compAngleY = 0.93 * (compAngleY + gyroYrate * dt) + 0.07 * pitch;
     cfe:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <compAngleY>
     d02:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <compAngleY+0x1>
     d06:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <compAngleY+0x2>
     d0a:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <compAngleY+0x3>
     d0e:	c7 01       	movw	r24, r14
     d10:	b6 01       	movw	r22, r12
     d12:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     d16:	2b e7       	ldi	r18, 0x7B	; 123
     d18:	34 e1       	ldi	r19, 0x14	; 20
     d1a:	4e e6       	ldi	r20, 0x6E	; 110
     d1c:	5f e3       	ldi	r21, 0x3F	; 63
     d1e:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     d22:	6b 01       	movw	r12, r22
     d24:	7c 01       	movw	r14, r24
     d26:	29 e2       	ldi	r18, 0x29	; 41
     d28:	3c e5       	ldi	r19, 0x5C	; 92
     d2a:	4f e8       	ldi	r20, 0x8F	; 143
     d2c:	5d e3       	ldi	r21, 0x3D	; 61
     d2e:	69 a9       	ldd	r22, Y+49	; 0x31
     d30:	7a a9       	ldd	r23, Y+50	; 0x32
     d32:	8b a9       	ldd	r24, Y+51	; 0x33
     d34:	9c a9       	ldd	r25, Y+52	; 0x34
     d36:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     d3a:	9b 01       	movw	r18, r22
     d3c:	ac 01       	movw	r20, r24
     d3e:	c7 01       	movw	r24, r14
     d40:	b6 01       	movw	r22, r12
     d42:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     d46:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <compAngleY>
     d4a:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <compAngleY+0x1>
     d4e:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <compAngleY+0x2>
     d52:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <compAngleY+0x3>

	// Reset the gyro angle when it has drifted too much
	if (gyroXangle < -180 || gyroXangle > 180)
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	44 e3       	ldi	r20, 0x34	; 52
     d5c:	53 ec       	ldi	r21, 0xC3	; 195
     d5e:	6d a1       	ldd	r22, Y+37	; 0x25
     d60:	7e a1       	ldd	r23, Y+38	; 0x26
     d62:	8f a1       	ldd	r24, Y+39	; 0x27
     d64:	98 a5       	ldd	r25, Y+40	; 0x28
     d66:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
     d6a:	87 fd       	sbrc	r24, 7
     d6c:	0c c0       	rjmp	.+24     	; 0xd86 <_Z10sensorloopi+0x42e>
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	44 e3       	ldi	r20, 0x34	; 52
     d74:	53 e4       	ldi	r21, 0x43	; 67
     d76:	6d a1       	ldd	r22, Y+37	; 0x25
     d78:	7e a1       	ldd	r23, Y+38	; 0x26
     d7a:	8f a1       	ldd	r24, Y+39	; 0x27
     d7c:	98 a5       	ldd	r25, Y+40	; 0x28
     d7e:	0e 94 23 0b 	call	0x1646	; 0x1646 <__gesf2>
     d82:	18 16       	cp	r1, r24
     d84:	84 f4       	brge	.+32     	; 0xda6 <_Z10sensorloopi+0x44e>
	gyroXangle = kalAngleX;
     d86:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <kalAngleX>
     d8a:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <kalAngleX+0x1>
     d8e:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <kalAngleX+0x2>
     d92:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <kalAngleX+0x3>
     d96:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <gyroXangle>
     d9a:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <gyroXangle+0x1>
     d9e:	a0 93 80 02 	sts	0x0280, r26	; 0x800280 <gyroXangle+0x2>
     da2:	b0 93 81 02 	sts	0x0281, r27	; 0x800281 <gyroXangle+0x3>
	if (gyroYangle < -180 || gyroYangle > 180)
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	44 e3       	ldi	r20, 0x34	; 52
     dac:	53 ec       	ldi	r21, 0xC3	; 195
     dae:	c5 01       	movw	r24, r10
     db0:	b4 01       	movw	r22, r8
     db2:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
     db6:	87 fd       	sbrc	r24, 7
     db8:	0a c0       	rjmp	.+20     	; 0xdce <_Z10sensorloopi+0x476>
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	44 e3       	ldi	r20, 0x34	; 52
     dc0:	53 e4       	ldi	r21, 0x43	; 67
     dc2:	c5 01       	movw	r24, r10
     dc4:	b4 01       	movw	r22, r8
     dc6:	0e 94 23 0b 	call	0x1646	; 0x1646 <__gesf2>
     dca:	18 16       	cp	r1, r24
     dcc:	64 f4       	brge	.+24     	; 0xde6 <_Z10sensorloopi+0x48e>
	gyroYangle = kalAngleY;
     dce:	8d a9       	ldd	r24, Y+53	; 0x35
     dd0:	9e a9       	ldd	r25, Y+54	; 0x36
     dd2:	af a9       	ldd	r26, Y+55	; 0x37
     dd4:	b8 ad       	ldd	r27, Y+56	; 0x38
     dd6:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <gyroYangle>
     dda:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <gyroYangle+0x1>
     dde:	a0 93 7c 02 	sts	0x027C, r26	; 0x80027c <gyroYangle+0x2>
     de2:	b0 93 7d 02 	sts	0x027D, r27	; 0x80027d <gyroYangle+0x3>



	/* Get a new sensor event */
	sensors_event_t event;
	mag.getEvent(&event);
     de6:	be 01       	movw	r22, r28
     de8:	6f 5f       	subi	r22, 0xFF	; 255
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	80 ef       	ldi	r24, 0xF0	; 240
     dee:	92 e0       	ldi	r25, 0x02	; 2
     df0:	0e 94 0e 13 	call	0x261c	; 0x261c <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t>
	

	// Hold the module so that Z is pointing 'up' and you can measure the heading with x&y
	// Calculate heading when the magnetometer is level, then correct for signs of axis.
	float heading = atan2(event.magnetic.y, event.magnetic.x);
     df4:	2d 89       	ldd	r18, Y+21	; 0x15
     df6:	3e 89       	ldd	r19, Y+22	; 0x16
     df8:	4f 89       	ldd	r20, Y+23	; 0x17
     dfa:	58 8d       	ldd	r21, Y+24	; 0x18
     dfc:	69 8d       	ldd	r22, Y+25	; 0x19
     dfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e04:	0e 94 3e 09 	call	0x127c	; 0x127c <atan2>
	// Once you have your heading, you must then add your 'Declination Angle', which is the 'Error' of the magnetic field in your location.
	// Find yours here: http://www.magnetic-declination.com/
	// Mine is: -13* 2' W, which is ~13 Degrees, or (which we need) 0.22 radians
	// If you cannot find your Declination, comment out these two lines, your compass will be slightly off.
	float declinationAngle = 0.22;
	heading += declinationAngle;
     e08:	2e ea       	ldi	r18, 0xAE	; 174
     e0a:	37 e4       	ldi	r19, 0x47	; 71
     e0c:	41 e6       	ldi	r20, 0x61	; 97
     e0e:	5e e3       	ldi	r21, 0x3E	; 62
     e10:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     e14:	6b 01       	movw	r12, r22
     e16:	7c 01       	movw	r14, r24
	
	// Correct for when signs are reversed.
	if(heading < 0)
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	a9 01       	movw	r20, r18
     e1e:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
     e22:	87 ff       	sbrs	r24, 7
     e24:	0a c0       	rjmp	.+20     	; 0xe3a <_Z10sensorloopi+0x4e2>
	heading += 2*PI;
     e26:	2b ed       	ldi	r18, 0xDB	; 219
     e28:	3f e0       	ldi	r19, 0x0F	; 15
     e2a:	49 ec       	ldi	r20, 0xC9	; 201
     e2c:	50 e4       	ldi	r21, 0x40	; 64
     e2e:	c7 01       	movw	r24, r14
     e30:	b6 01       	movw	r22, r12
     e32:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
     e36:	6b 01       	movw	r12, r22
     e38:	7c 01       	movw	r14, r24
	
	// Check for wrap due to addition of declination.
	if(heading > 2*PI)
     e3a:	2b ed       	ldi	r18, 0xDB	; 219
     e3c:	3f e0       	ldi	r19, 0x0F	; 15
     e3e:	49 ec       	ldi	r20, 0xC9	; 201
     e40:	50 e4       	ldi	r21, 0x40	; 64
     e42:	c7 01       	movw	r24, r14
     e44:	b6 01       	movw	r22, r12
     e46:	0e 94 23 0b 	call	0x1646	; 0x1646 <__gesf2>
     e4a:	18 16       	cp	r1, r24
     e4c:	54 f4       	brge	.+20     	; 0xe62 <_Z10sensorloopi+0x50a>
	heading -= 2*PI;
     e4e:	2b ed       	ldi	r18, 0xDB	; 219
     e50:	3f e0       	ldi	r19, 0x0F	; 15
     e52:	49 ec       	ldi	r20, 0xC9	; 201
     e54:	50 e4       	ldi	r21, 0x40	; 64
     e56:	c7 01       	movw	r24, r14
     e58:	b6 01       	movw	r22, r12
     e5a:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
     e5e:	6b 01       	movw	r12, r22
     e60:	7c 01       	movw	r14, r24
	
	// Convert radians to degrees for readability.
	headingDegrees = heading * 180/M_PI;
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	44 e3       	ldi	r20, 0x34	; 52
     e68:	53 e4       	ldi	r21, 0x43	; 67
     e6a:	c7 01       	movw	r24, r14
     e6c:	b6 01       	movw	r22, r12
     e6e:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     e72:	2b ed       	ldi	r18, 0xDB	; 219
     e74:	3f e0       	ldi	r19, 0x0F	; 15
     e76:	49 e4       	ldi	r20, 0x49	; 73
     e78:	50 e4       	ldi	r21, 0x40	; 64
     e7a:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     e7e:	60 93 66 02 	sts	0x0266, r22	; 0x800266 <headingDegrees>
     e82:	70 93 67 02 	sts	0x0267, r23	; 0x800267 <headingDegrees+0x1>
     e86:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <headingDegrees+0x2>
     e8a:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <headingDegrees+0x3>
	
	#endif
	
	/* Print Data */
	
	if (printout)
     e8e:	23 28       	or	r2, r3
     e90:	09 f4       	brne	.+2      	; 0xe94 <_Z10sensorloopi+0x53c>
     e92:	e6 c0       	rjmp	.+460    	; 0x1060 <_Z10sensorloopi+0x708>
	{
	Serial.print(accX/16384*9.80665); Serial.print(" ");
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e8       	ldi	r20, 0x80	; 128
     e9a:	58 e3       	ldi	r21, 0x38	; 56
     e9c:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <accX>
     ea0:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <accX+0x1>
     ea4:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <accX+0x2>
     ea8:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <accX+0x3>
     eac:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     eb0:	2a e0       	ldi	r18, 0x0A	; 10
     eb2:	38 ee       	ldi	r19, 0xE8	; 232
     eb4:	4c e1       	ldi	r20, 0x1C	; 28
     eb6:	51 e4       	ldi	r21, 0x41	; 65
     eb8:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     ebc:	ab 01       	movw	r20, r22
     ebe:	bc 01       	movw	r22, r24
     ec0:	22 e0       	ldi	r18, 0x02	; 2
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	88 e0       	ldi	r24, 0x08	; 8
     ec6:	93 e0       	ldi	r25, 0x03	; 3
     ec8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
     ecc:	68 e7       	ldi	r22, 0x78	; 120
     ece:	71 e0       	ldi	r23, 0x01	; 1
     ed0:	88 e0       	ldi	r24, 0x08	; 8
     ed2:	93 e0       	ldi	r25, 0x03	; 3
     ed4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>
	Serial.print(accY/16384*9.80665); Serial.print(" ");
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e8       	ldi	r20, 0x80	; 128
     ede:	58 e3       	ldi	r21, 0x38	; 56
     ee0:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <accY>
     ee4:	70 91 93 02 	lds	r23, 0x0293	; 0x800293 <accY+0x1>
     ee8:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <accY+0x2>
     eec:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <accY+0x3>
     ef0:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     ef4:	2a e0       	ldi	r18, 0x0A	; 10
     ef6:	38 ee       	ldi	r19, 0xE8	; 232
     ef8:	4c e1       	ldi	r20, 0x1C	; 28
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     f00:	ab 01       	movw	r20, r22
     f02:	bc 01       	movw	r22, r24
     f04:	22 e0       	ldi	r18, 0x02	; 2
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	88 e0       	ldi	r24, 0x08	; 8
     f0a:	93 e0       	ldi	r25, 0x03	; 3
     f0c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
     f10:	68 e7       	ldi	r22, 0x78	; 120
     f12:	71 e0       	ldi	r23, 0x01	; 1
     f14:	88 e0       	ldi	r24, 0x08	; 8
     f16:	93 e0       	ldi	r25, 0x03	; 3
     f18:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>
	Serial.print(accZ/16384*9.80665); Serial.print(" ");
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	58 e3       	ldi	r21, 0x38	; 56
     f24:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <accZ>
     f28:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <accZ+0x1>
     f2c:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <accZ+0x2>
     f30:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <accZ+0x3>
     f34:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     f38:	2a e0       	ldi	r18, 0x0A	; 10
     f3a:	38 ee       	ldi	r19, 0xE8	; 232
     f3c:	4c e1       	ldi	r20, 0x1C	; 28
     f3e:	51 e4       	ldi	r21, 0x41	; 65
     f40:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
     f44:	ab 01       	movw	r20, r22
     f46:	bc 01       	movw	r22, r24
     f48:	22 e0       	ldi	r18, 0x02	; 2
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	88 e0       	ldi	r24, 0x08	; 8
     f4e:	93 e0       	ldi	r25, 0x03	; 3
     f50:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
     f54:	68 e7       	ldi	r22, 0x78	; 120
     f56:	71 e0       	ldi	r23, 0x01	; 1
     f58:	88 e0       	ldi	r24, 0x08	; 8
     f5a:	93 e0       	ldi	r25, 0x03	; 3
     f5c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>

	Serial.print(gyroX); Serial.print(" ");
     f60:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <gyroX>
     f64:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <gyroX+0x1>
     f68:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <gyroX+0x2>
     f6c:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <gyroX+0x3>
     f70:	22 e0       	ldi	r18, 0x02	; 2
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	88 e0       	ldi	r24, 0x08	; 8
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
     f7c:	68 e7       	ldi	r22, 0x78	; 120
     f7e:	71 e0       	ldi	r23, 0x01	; 1
     f80:	88 e0       	ldi	r24, 0x08	; 8
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>
	Serial.print(gyroY); Serial.print(" ");
     f88:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <gyroY>
     f8c:	50 91 87 02 	lds	r21, 0x0287	; 0x800287 <gyroY+0x1>
     f90:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <gyroY+0x2>
     f94:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <gyroY+0x3>
     f98:	22 e0       	ldi	r18, 0x02	; 2
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	88 e0       	ldi	r24, 0x08	; 8
     f9e:	93 e0       	ldi	r25, 0x03	; 3
     fa0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
     fa4:	68 e7       	ldi	r22, 0x78	; 120
     fa6:	71 e0       	ldi	r23, 0x01	; 1
     fa8:	88 e0       	ldi	r24, 0x08	; 8
     faa:	93 e0       	ldi	r25, 0x03	; 3
     fac:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>
	Serial.print(gyroZ); Serial.print(" ");
     fb0:	40 91 82 02 	lds	r20, 0x0282	; 0x800282 <gyroZ>
     fb4:	50 91 83 02 	lds	r21, 0x0283	; 0x800283 <gyroZ+0x1>
     fb8:	60 91 84 02 	lds	r22, 0x0284	; 0x800284 <gyroZ+0x2>
     fbc:	70 91 85 02 	lds	r23, 0x0285	; 0x800285 <gyroZ+0x3>
     fc0:	22 e0       	ldi	r18, 0x02	; 2
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	88 e0       	ldi	r24, 0x08	; 8
     fc6:	93 e0       	ldi	r25, 0x03	; 3
     fc8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
     fcc:	68 e7       	ldi	r22, 0x78	; 120
     fce:	71 e0       	ldi	r23, 0x01	; 1
     fd0:	88 e0       	ldi	r24, 0x08	; 8
     fd2:	93 e0       	ldi	r25, 0x03	; 3
     fd4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>

	Serial.print(event.magnetic.x); Serial.print(" ");
     fd8:	4d 89       	ldd	r20, Y+21	; 0x15
     fda:	5e 89       	ldd	r21, Y+22	; 0x16
     fdc:	6f 89       	ldd	r22, Y+23	; 0x17
     fde:	78 8d       	ldd	r23, Y+24	; 0x18
     fe0:	22 e0       	ldi	r18, 0x02	; 2
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	88 e0       	ldi	r24, 0x08	; 8
     fe6:	93 e0       	ldi	r25, 0x03	; 3
     fe8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
     fec:	68 e7       	ldi	r22, 0x78	; 120
     fee:	71 e0       	ldi	r23, 0x01	; 1
     ff0:	88 e0       	ldi	r24, 0x08	; 8
     ff2:	93 e0       	ldi	r25, 0x03	; 3
     ff4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>
	Serial.print(event.magnetic.y); Serial.print(" ");
     ff8:	49 8d       	ldd	r20, Y+25	; 0x19
     ffa:	5a 8d       	ldd	r21, Y+26	; 0x1a
     ffc:	6b 8d       	ldd	r22, Y+27	; 0x1b
     ffe:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1000:	22 e0       	ldi	r18, 0x02	; 2
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	88 e0       	ldi	r24, 0x08	; 8
    1006:	93 e0       	ldi	r25, 0x03	; 3
    1008:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
    100c:	68 e7       	ldi	r22, 0x78	; 120
    100e:	71 e0       	ldi	r23, 0x01	; 1
    1010:	88 e0       	ldi	r24, 0x08	; 8
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>
	Serial.print(headingDegrees); Serial.print(" ");
    1018:	40 91 66 02 	lds	r20, 0x0266	; 0x800266 <headingDegrees>
    101c:	50 91 67 02 	lds	r21, 0x0267	; 0x800267 <headingDegrees+0x1>
    1020:	60 91 68 02 	lds	r22, 0x0268	; 0x800268 <headingDegrees+0x2>
    1024:	70 91 69 02 	lds	r23, 0x0269	; 0x800269 <headingDegrees+0x3>
    1028:	22 e0       	ldi	r18, 0x02	; 2
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	88 e0       	ldi	r24, 0x08	; 8
    102e:	93 e0       	ldi	r25, 0x03	; 3
    1030:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
    1034:	68 e7       	ldi	r22, 0x78	; 120
    1036:	71 e0       	ldi	r23, 0x01	; 1
    1038:	88 e0       	ldi	r24, 0x08	; 8
    103a:	93 e0       	ldi	r25, 0x03	; 3
    103c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN5Print5printEPKc>
	
	Serial.print(dt);
    1040:	22 e0       	ldi	r18, 0x02	; 2
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	49 a5       	ldd	r20, Y+41	; 0x29
    1046:	5a a5       	ldd	r21, Y+42	; 0x2a
    1048:	6b a5       	ldd	r22, Y+43	; 0x2b
    104a:	7c a5       	ldd	r23, Y+44	; 0x2c
    104c:	88 e0       	ldi	r24, 0x08	; 8
    104e:	93 e0       	ldi	r25, 0x03	; 3
    1050:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5printEdi>
	Serial.print(newlinechar);
    1054:	6a e5       	ldi	r22, 0x5A	; 90
    1056:	72 e0       	ldi	r23, 0x02	; 2
    1058:	88 e0       	ldi	r24, 0x08	; 8
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <_ZN5Print5printERK6String>
	Serial.print(" ");
	Serial.print(headingDegrees);
	Serial.println();
	#endif
	
	delay(d); // slow down output
    1060:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <d>
    1064:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <d+0x1>
    1068:	07 2e       	mov	r0, r23
    106a:	00 0c       	add	r0, r0
    106c:	88 0b       	sbc	r24, r24
    106e:	99 0b       	sbc	r25, r25
    1070:	0e 94 27 10 	call	0x204e	; 0x204e <delay>
}
    1074:	e8 96       	adiw	r28, 0x38	; 56
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	df 90       	pop	r13
    108e:	cf 90       	pop	r12
    1090:	bf 90       	pop	r11
    1092:	af 90       	pop	r10
    1094:	9f 90       	pop	r9
    1096:	8f 90       	pop	r8
    1098:	7f 90       	pop	r7
    109a:	6f 90       	pop	r6
    109c:	5f 90       	pop	r5
    109e:	4f 90       	pop	r4
    10a0:	3f 90       	pop	r3
    10a2:	2f 90       	pop	r2
    10a4:	08 95       	ret

000010a6 <_Z11delaysensori>:

void delaysensor(int t){
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	8c 01       	movw	r16, r24
	for (int x = 0; x < t/d; x++)
    10b0:	c0 e0       	ldi	r28, 0x00	; 0
    10b2:	d0 e0       	ldi	r29, 0x00	; 0
    10b4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <d>
    10b8:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <d+0x1>
    10bc:	c8 01       	movw	r24, r16
    10be:	0e 94 93 18 	call	0x3126	; 0x3126 <__divmodhi4>
    10c2:	c6 17       	cp	r28, r22
    10c4:	d7 07       	cpc	r29, r23
    10c6:	34 f4       	brge	.+12     	; 0x10d4 <_Z11delaysensori+0x2e>
	{
		sensorloop(1);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 ac 04 	call	0x958	; 0x958 <_Z10sensorloopi>
	
	delay(d); // slow down output
}

void delaysensor(int t){
	for (int x = 0; x < t/d; x++)
    10d0:	21 96       	adiw	r28, 0x01	; 1
    10d2:	f0 cf       	rjmp	.-32     	; 0x10b4 <_Z11delaysensori+0xe>
	{
		sensorloop(1);
	}
}
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	08 95       	ret

000010de <_Z17recvWithEndMarkerv>:
	analogWrite(speedPin[wheelnum], int(abs(speedFromPC[wheelnum])));

}


void recvWithEndMarker() {
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
			}
		}
		else {
			receivedChars[ndx] = '\0'; // terminate the string
			ndx = 0;
			newData = true;
    10e2:	c1 e0       	ldi	r28, 0x01	; 1

		if (rc != endMarker) {
			receivedChars[ndx] = rc;
			ndx++;
			if (ndx >= numChars) {
				ndx = numChars - 1;
    10e4:	df e1       	ldi	r29, 0x1F	; 31
	static byte ndx = 0;
	char endMarker = '\r';
	char rc;
	
	// if (Serial.available() > 0) {
	while (Serial.available() > 0 && newData == false) {
    10e6:	88 e0       	ldi	r24, 0x08	; 8
    10e8:	93 e0       	ldi	r25, 0x03	; 3
    10ea:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN14HardwareSerial9availableEv>
    10ee:	18 16       	cp	r1, r24
    10f0:	19 06       	cpc	r1, r25
    10f2:	1c f5       	brge	.+70     	; 0x113a <_Z17recvWithEndMarkerv+0x5c>
    10f4:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <newData>
    10f8:	81 11       	cpse	r24, r1
    10fa:	1f c0       	rjmp	.+62     	; 0x113a <_Z17recvWithEndMarkerv+0x5c>
		rc = Serial.read();
    10fc:	88 e0       	ldi	r24, 0x08	; 8
    10fe:	93 e0       	ldi	r25, 0x03	; 3
    1100:	0e 94 16 0c 	call	0x182c	; 0x182c <_ZN14HardwareSerial4readEv>
    1104:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <_ZZ17recvWithEndMarkervE3ndx>

		if (rc != endMarker) {
    1108:	8d 30       	cpi	r24, 0x0D	; 13
    110a:	71 f0       	breq	.+28     	; 0x1128 <_Z17recvWithEndMarkerv+0x4a>
			receivedChars[ndx] = rc;
    110c:	ae 2f       	mov	r26, r30
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	a7 5d       	subi	r26, 0xD7	; 215
    1112:	bd 4f       	sbci	r27, 0xFD	; 253
    1114:	8c 93       	st	X, r24
			ndx++;
    1116:	ef 5f       	subi	r30, 0xFF	; 255
			if (ndx >= numChars) {
    1118:	e0 32       	cpi	r30, 0x20	; 32
    111a:	18 f4       	brcc	.+6      	; 0x1122 <_Z17recvWithEndMarkerv+0x44>
	while (Serial.available() > 0 && newData == false) {
		rc = Serial.read();

		if (rc != endMarker) {
			receivedChars[ndx] = rc;
			ndx++;
    111c:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <_ZZ17recvWithEndMarkervE3ndx>
    1120:	e2 cf       	rjmp	.-60     	; 0x10e6 <_Z17recvWithEndMarkerv+0x8>
			if (ndx >= numChars) {
				ndx = numChars - 1;
    1122:	d0 93 28 02 	sts	0x0228, r29	; 0x800228 <_ZZ17recvWithEndMarkervE3ndx>
    1126:	df cf       	rjmp	.-66     	; 0x10e6 <_Z17recvWithEndMarkerv+0x8>
			}
		}
		else {
			receivedChars[ndx] = '\0'; // terminate the string
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	e7 5d       	subi	r30, 0xD7	; 215
    112c:	fd 4f       	sbci	r31, 0xFD	; 253
    112e:	10 82       	st	Z, r1
			ndx = 0;
    1130:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <_ZZ17recvWithEndMarkervE3ndx>
			newData = true;
    1134:	c0 93 49 02 	sts	0x0249, r28	; 0x800249 <newData>
    1138:	d6 cf       	rjmp	.-84     	; 0x10e6 <_Z17recvWithEndMarkerv+0x8>
		}
	}
}
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret

00001140 <loop>:
		sensorloop(1);
	}
}

void loop() {
	delaysensor(100);
    1140:	84 e6       	ldi	r24, 0x64	; 100
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 53 08 	call	0x10a6	; 0x10a6 <_Z11delaysensori>
	d = 100;
    1148:	84 e6       	ldi	r24, 0x64	; 100
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <d+0x1>
    1150:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <d>
	recvWithEndMarker();
    1154:	0e 94 6f 08 	call	0x10de	; 0x10de <_Z17recvWithEndMarkerv>
	showNewData();
    1158:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z11showNewDatav>
	
	for (int x = 0; x < 4; x++)
	{
		wheeldir(x);
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 03 01 	call	0x206	; 0x206 <_Z8wheeldiri>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 03 01 	call	0x206	; 0x206 <_Z8wheeldiri>
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 03 01 	call	0x206	; 0x206 <_Z8wheeldiri>
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0c 94 03 01 	jmp	0x206	; 0x206 <_Z8wheeldiri>

0000117c <__subsf3>:
    117c:	50 58       	subi	r21, 0x80	; 128

0000117e <__addsf3>:
    117e:	bb 27       	eor	r27, r27
    1180:	aa 27       	eor	r26, r26
    1182:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__addsf3x>
    1186:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__fp_round>
    118a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__fp_pscA>
    118e:	38 f0       	brcs	.+14     	; 0x119e <__addsf3+0x20>
    1190:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__fp_pscB>
    1194:	20 f0       	brcs	.+8      	; 0x119e <__addsf3+0x20>
    1196:	39 f4       	brne	.+14     	; 0x11a6 <__addsf3+0x28>
    1198:	9f 3f       	cpi	r25, 0xFF	; 255
    119a:	19 f4       	brne	.+6      	; 0x11a2 <__addsf3+0x24>
    119c:	26 f4       	brtc	.+8      	; 0x11a6 <__addsf3+0x28>
    119e:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_nan>
    11a2:	0e f4       	brtc	.+2      	; 0x11a6 <__addsf3+0x28>
    11a4:	e0 95       	com	r30
    11a6:	e7 fb       	bst	r30, 7
    11a8:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__fp_inf>

000011ac <__addsf3x>:
    11ac:	e9 2f       	mov	r30, r25
    11ae:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__fp_split3>
    11b2:	58 f3       	brcs	.-42     	; 0x118a <__addsf3+0xc>
    11b4:	ba 17       	cp	r27, r26
    11b6:	62 07       	cpc	r22, r18
    11b8:	73 07       	cpc	r23, r19
    11ba:	84 07       	cpc	r24, r20
    11bc:	95 07       	cpc	r25, r21
    11be:	20 f0       	brcs	.+8      	; 0x11c8 <__addsf3x+0x1c>
    11c0:	79 f4       	brne	.+30     	; 0x11e0 <__addsf3x+0x34>
    11c2:	a6 f5       	brtc	.+104    	; 0x122c <__addsf3x+0x80>
    11c4:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_zero>
    11c8:	0e f4       	brtc	.+2      	; 0x11cc <__addsf3x+0x20>
    11ca:	e0 95       	com	r30
    11cc:	0b 2e       	mov	r0, r27
    11ce:	ba 2f       	mov	r27, r26
    11d0:	a0 2d       	mov	r26, r0
    11d2:	0b 01       	movw	r0, r22
    11d4:	b9 01       	movw	r22, r18
    11d6:	90 01       	movw	r18, r0
    11d8:	0c 01       	movw	r0, r24
    11da:	ca 01       	movw	r24, r20
    11dc:	a0 01       	movw	r20, r0
    11de:	11 24       	eor	r1, r1
    11e0:	ff 27       	eor	r31, r31
    11e2:	59 1b       	sub	r21, r25
    11e4:	99 f0       	breq	.+38     	; 0x120c <__addsf3x+0x60>
    11e6:	59 3f       	cpi	r21, 0xF9	; 249
    11e8:	50 f4       	brcc	.+20     	; 0x11fe <__addsf3x+0x52>
    11ea:	50 3e       	cpi	r21, 0xE0	; 224
    11ec:	68 f1       	brcs	.+90     	; 0x1248 <__addsf3x+0x9c>
    11ee:	1a 16       	cp	r1, r26
    11f0:	f0 40       	sbci	r31, 0x00	; 0
    11f2:	a2 2f       	mov	r26, r18
    11f4:	23 2f       	mov	r18, r19
    11f6:	34 2f       	mov	r19, r20
    11f8:	44 27       	eor	r20, r20
    11fa:	58 5f       	subi	r21, 0xF8	; 248
    11fc:	f3 cf       	rjmp	.-26     	; 0x11e4 <__addsf3x+0x38>
    11fe:	46 95       	lsr	r20
    1200:	37 95       	ror	r19
    1202:	27 95       	ror	r18
    1204:	a7 95       	ror	r26
    1206:	f0 40       	sbci	r31, 0x00	; 0
    1208:	53 95       	inc	r21
    120a:	c9 f7       	brne	.-14     	; 0x11fe <__addsf3x+0x52>
    120c:	7e f4       	brtc	.+30     	; 0x122c <__addsf3x+0x80>
    120e:	1f 16       	cp	r1, r31
    1210:	ba 0b       	sbc	r27, r26
    1212:	62 0b       	sbc	r22, r18
    1214:	73 0b       	sbc	r23, r19
    1216:	84 0b       	sbc	r24, r20
    1218:	ba f0       	brmi	.+46     	; 0x1248 <__addsf3x+0x9c>
    121a:	91 50       	subi	r25, 0x01	; 1
    121c:	a1 f0       	breq	.+40     	; 0x1246 <__addsf3x+0x9a>
    121e:	ff 0f       	add	r31, r31
    1220:	bb 1f       	adc	r27, r27
    1222:	66 1f       	adc	r22, r22
    1224:	77 1f       	adc	r23, r23
    1226:	88 1f       	adc	r24, r24
    1228:	c2 f7       	brpl	.-16     	; 0x121a <__addsf3x+0x6e>
    122a:	0e c0       	rjmp	.+28     	; 0x1248 <__addsf3x+0x9c>
    122c:	ba 0f       	add	r27, r26
    122e:	62 1f       	adc	r22, r18
    1230:	73 1f       	adc	r23, r19
    1232:	84 1f       	adc	r24, r20
    1234:	48 f4       	brcc	.+18     	; 0x1248 <__addsf3x+0x9c>
    1236:	87 95       	ror	r24
    1238:	77 95       	ror	r23
    123a:	67 95       	ror	r22
    123c:	b7 95       	ror	r27
    123e:	f7 95       	ror	r31
    1240:	9e 3f       	cpi	r25, 0xFE	; 254
    1242:	08 f0       	brcs	.+2      	; 0x1246 <__addsf3x+0x9a>
    1244:	b0 cf       	rjmp	.-160    	; 0x11a6 <__addsf3+0x28>
    1246:	93 95       	inc	r25
    1248:	88 0f       	add	r24, r24
    124a:	08 f0       	brcs	.+2      	; 0x124e <__addsf3x+0xa2>
    124c:	99 27       	eor	r25, r25
    124e:	ee 0f       	add	r30, r30
    1250:	97 95       	ror	r25
    1252:	87 95       	ror	r24
    1254:	08 95       	ret
    1256:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__fp_pscA>
    125a:	60 f0       	brcs	.+24     	; 0x1274 <__addsf3x+0xc8>
    125c:	80 e8       	ldi	r24, 0x80	; 128
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	09 f4       	brne	.+2      	; 0x1264 <__addsf3x+0xb8>
    1262:	9e ef       	ldi	r25, 0xFE	; 254
    1264:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__fp_pscB>
    1268:	28 f0       	brcs	.+10     	; 0x1274 <__addsf3x+0xc8>
    126a:	40 e8       	ldi	r20, 0x80	; 128
    126c:	51 e0       	ldi	r21, 0x01	; 1
    126e:	71 f4       	brne	.+28     	; 0x128c <atan2+0x10>
    1270:	5e ef       	ldi	r21, 0xFE	; 254
    1272:	0c c0       	rjmp	.+24     	; 0x128c <atan2+0x10>
    1274:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_nan>
    1278:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_zero>

0000127c <atan2>:
    127c:	e9 2f       	mov	r30, r25
    127e:	e0 78       	andi	r30, 0x80	; 128
    1280:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__fp_split3>
    1284:	40 f3       	brcs	.-48     	; 0x1256 <__addsf3x+0xaa>
    1286:	09 2e       	mov	r0, r25
    1288:	05 2a       	or	r0, r21
    128a:	b1 f3       	breq	.-20     	; 0x1278 <__addsf3x+0xcc>
    128c:	26 17       	cp	r18, r22
    128e:	37 07       	cpc	r19, r23
    1290:	48 07       	cpc	r20, r24
    1292:	59 07       	cpc	r21, r25
    1294:	38 f0       	brcs	.+14     	; 0x12a4 <atan2+0x28>
    1296:	0e 2e       	mov	r0, r30
    1298:	07 f8       	bld	r0, 7
    129a:	e0 25       	eor	r30, r0
    129c:	69 f0       	breq	.+26     	; 0x12b8 <atan2+0x3c>
    129e:	e0 25       	eor	r30, r0
    12a0:	e0 64       	ori	r30, 0x40	; 64
    12a2:	0a c0       	rjmp	.+20     	; 0x12b8 <atan2+0x3c>
    12a4:	ef 63       	ori	r30, 0x3F	; 63
    12a6:	07 f8       	bld	r0, 7
    12a8:	00 94       	com	r0
    12aa:	07 fa       	bst	r0, 7
    12ac:	db 01       	movw	r26, r22
    12ae:	b9 01       	movw	r22, r18
    12b0:	9d 01       	movw	r18, r26
    12b2:	dc 01       	movw	r26, r24
    12b4:	ca 01       	movw	r24, r20
    12b6:	ad 01       	movw	r20, r26
    12b8:	ef 93       	push	r30
    12ba:	0e 94 b9 09 	call	0x1372	; 0x1372 <__divsf3_pse>
    12be:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_round>
    12c2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <atan>
    12c6:	5f 91       	pop	r21
    12c8:	55 23       	and	r21, r21
    12ca:	39 f0       	breq	.+14     	; 0x12da <atan2+0x5e>
    12cc:	2b ed       	ldi	r18, 0xDB	; 219
    12ce:	3f e0       	ldi	r19, 0x0F	; 15
    12d0:	49 e4       	ldi	r20, 0x49	; 73
    12d2:	50 fd       	sbrc	r21, 0
    12d4:	49 ec       	ldi	r20, 0xC9	; 201
    12d6:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__addsf3>
    12da:	08 95       	ret

000012dc <atan>:
    12dc:	df 93       	push	r29
    12de:	dd 27       	eor	r29, r29
    12e0:	b9 2f       	mov	r27, r25
    12e2:	bf 77       	andi	r27, 0x7F	; 127
    12e4:	40 e8       	ldi	r20, 0x80	; 128
    12e6:	5f e3       	ldi	r21, 0x3F	; 63
    12e8:	16 16       	cp	r1, r22
    12ea:	17 06       	cpc	r1, r23
    12ec:	48 07       	cpc	r20, r24
    12ee:	5b 07       	cpc	r21, r27
    12f0:	18 f4       	brcc	.+6      	; 0x12f8 <atan+0x1c>
    12f2:	d9 2f       	mov	r29, r25
    12f4:	0e 94 28 0b 	call	0x1650	; 0x1650 <inverse>
    12f8:	9f 93       	push	r25
    12fa:	8f 93       	push	r24
    12fc:	7f 93       	push	r23
    12fe:	6f 93       	push	r22
    1300:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <square>
    1304:	e8 e6       	ldi	r30, 0x68	; 104
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_powser>
    130c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_round>
    1310:	2f 91       	pop	r18
    1312:	3f 91       	pop	r19
    1314:	4f 91       	pop	r20
    1316:	5f 91       	pop	r21
    1318:	0e 94 43 0b 	call	0x1686	; 0x1686 <__mulsf3x>
    131c:	dd 23       	and	r29, r29
    131e:	51 f0       	breq	.+20     	; 0x1334 <atan+0x58>
    1320:	90 58       	subi	r25, 0x80	; 128
    1322:	a2 ea       	ldi	r26, 0xA2	; 162
    1324:	2a ed       	ldi	r18, 0xDA	; 218
    1326:	3f e0       	ldi	r19, 0x0F	; 15
    1328:	49 ec       	ldi	r20, 0xC9	; 201
    132a:	5f e3       	ldi	r21, 0x3F	; 63
    132c:	d0 78       	andi	r29, 0x80	; 128
    132e:	5d 27       	eor	r21, r29
    1330:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__addsf3x>
    1334:	df 91       	pop	r29
    1336:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__fp_round>

0000133a <__cmpsf2>:
    133a:	0e 94 87 0a 	call	0x150e	; 0x150e <__fp_cmp>
    133e:	08 f4       	brcc	.+2      	; 0x1342 <__cmpsf2+0x8>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	08 95       	ret

00001344 <__divsf3>:
    1344:	0e 94 b6 09 	call	0x136c	; 0x136c <__divsf3x>
    1348:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__fp_round>
    134c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__fp_pscB>
    1350:	58 f0       	brcs	.+22     	; 0x1368 <__divsf3+0x24>
    1352:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__fp_pscA>
    1356:	40 f0       	brcs	.+16     	; 0x1368 <__divsf3+0x24>
    1358:	29 f4       	brne	.+10     	; 0x1364 <__divsf3+0x20>
    135a:	5f 3f       	cpi	r21, 0xFF	; 255
    135c:	29 f0       	breq	.+10     	; 0x1368 <__divsf3+0x24>
    135e:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__fp_inf>
    1362:	51 11       	cpse	r21, r1
    1364:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_szero>
    1368:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_nan>

0000136c <__divsf3x>:
    136c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__fp_split3>
    1370:	68 f3       	brcs	.-38     	; 0x134c <__divsf3+0x8>

00001372 <__divsf3_pse>:
    1372:	99 23       	and	r25, r25
    1374:	b1 f3       	breq	.-20     	; 0x1362 <__divsf3+0x1e>
    1376:	55 23       	and	r21, r21
    1378:	91 f3       	breq	.-28     	; 0x135e <__divsf3+0x1a>
    137a:	95 1b       	sub	r25, r21
    137c:	55 0b       	sbc	r21, r21
    137e:	bb 27       	eor	r27, r27
    1380:	aa 27       	eor	r26, r26
    1382:	62 17       	cp	r22, r18
    1384:	73 07       	cpc	r23, r19
    1386:	84 07       	cpc	r24, r20
    1388:	38 f0       	brcs	.+14     	; 0x1398 <__divsf3_pse+0x26>
    138a:	9f 5f       	subi	r25, 0xFF	; 255
    138c:	5f 4f       	sbci	r21, 0xFF	; 255
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	44 1f       	adc	r20, r20
    1394:	aa 1f       	adc	r26, r26
    1396:	a9 f3       	breq	.-22     	; 0x1382 <__divsf3_pse+0x10>
    1398:	35 d0       	rcall	.+106    	; 0x1404 <__divsf3_pse+0x92>
    139a:	0e 2e       	mov	r0, r30
    139c:	3a f0       	brmi	.+14     	; 0x13ac <__divsf3_pse+0x3a>
    139e:	e0 e8       	ldi	r30, 0x80	; 128
    13a0:	32 d0       	rcall	.+100    	; 0x1406 <__divsf3_pse+0x94>
    13a2:	91 50       	subi	r25, 0x01	; 1
    13a4:	50 40       	sbci	r21, 0x00	; 0
    13a6:	e6 95       	lsr	r30
    13a8:	00 1c       	adc	r0, r0
    13aa:	ca f7       	brpl	.-14     	; 0x139e <__divsf3_pse+0x2c>
    13ac:	2b d0       	rcall	.+86     	; 0x1404 <__divsf3_pse+0x92>
    13ae:	fe 2f       	mov	r31, r30
    13b0:	29 d0       	rcall	.+82     	; 0x1404 <__divsf3_pse+0x92>
    13b2:	66 0f       	add	r22, r22
    13b4:	77 1f       	adc	r23, r23
    13b6:	88 1f       	adc	r24, r24
    13b8:	bb 1f       	adc	r27, r27
    13ba:	26 17       	cp	r18, r22
    13bc:	37 07       	cpc	r19, r23
    13be:	48 07       	cpc	r20, r24
    13c0:	ab 07       	cpc	r26, r27
    13c2:	b0 e8       	ldi	r27, 0x80	; 128
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <__divsf3_pse+0x56>
    13c6:	bb 0b       	sbc	r27, r27
    13c8:	80 2d       	mov	r24, r0
    13ca:	bf 01       	movw	r22, r30
    13cc:	ff 27       	eor	r31, r31
    13ce:	93 58       	subi	r25, 0x83	; 131
    13d0:	5f 4f       	sbci	r21, 0xFF	; 255
    13d2:	3a f0       	brmi	.+14     	; 0x13e2 <__divsf3_pse+0x70>
    13d4:	9e 3f       	cpi	r25, 0xFE	; 254
    13d6:	51 05       	cpc	r21, r1
    13d8:	78 f0       	brcs	.+30     	; 0x13f8 <__divsf3_pse+0x86>
    13da:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__fp_inf>
    13de:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_szero>
    13e2:	5f 3f       	cpi	r21, 0xFF	; 255
    13e4:	e4 f3       	brlt	.-8      	; 0x13de <__divsf3_pse+0x6c>
    13e6:	98 3e       	cpi	r25, 0xE8	; 232
    13e8:	d4 f3       	brlt	.-12     	; 0x13de <__divsf3_pse+0x6c>
    13ea:	86 95       	lsr	r24
    13ec:	77 95       	ror	r23
    13ee:	67 95       	ror	r22
    13f0:	b7 95       	ror	r27
    13f2:	f7 95       	ror	r31
    13f4:	9f 5f       	subi	r25, 0xFF	; 255
    13f6:	c9 f7       	brne	.-14     	; 0x13ea <__divsf3_pse+0x78>
    13f8:	88 0f       	add	r24, r24
    13fa:	91 1d       	adc	r25, r1
    13fc:	96 95       	lsr	r25
    13fe:	87 95       	ror	r24
    1400:	97 f9       	bld	r25, 7
    1402:	08 95       	ret
    1404:	e1 e0       	ldi	r30, 0x01	; 1
    1406:	66 0f       	add	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	bb 1f       	adc	r27, r27
    140e:	62 17       	cp	r22, r18
    1410:	73 07       	cpc	r23, r19
    1412:	84 07       	cpc	r24, r20
    1414:	ba 07       	cpc	r27, r26
    1416:	20 f0       	brcs	.+8      	; 0x1420 <__divsf3_pse+0xae>
    1418:	62 1b       	sub	r22, r18
    141a:	73 0b       	sbc	r23, r19
    141c:	84 0b       	sbc	r24, r20
    141e:	ba 0b       	sbc	r27, r26
    1420:	ee 1f       	adc	r30, r30
    1422:	88 f7       	brcc	.-30     	; 0x1406 <__divsf3_pse+0x94>
    1424:	e0 95       	com	r30
    1426:	08 95       	ret

00001428 <__fixsfsi>:
    1428:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__fixunssfsi>
    142c:	68 94       	set
    142e:	b1 11       	cpse	r27, r1
    1430:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_szero>
    1434:	08 95       	ret

00001436 <__fixunssfsi>:
    1436:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fp_splitA>
    143a:	88 f0       	brcs	.+34     	; 0x145e <__fixunssfsi+0x28>
    143c:	9f 57       	subi	r25, 0x7F	; 127
    143e:	98 f0       	brcs	.+38     	; 0x1466 <__fixunssfsi+0x30>
    1440:	b9 2f       	mov	r27, r25
    1442:	99 27       	eor	r25, r25
    1444:	b7 51       	subi	r27, 0x17	; 23
    1446:	b0 f0       	brcs	.+44     	; 0x1474 <__fixunssfsi+0x3e>
    1448:	e1 f0       	breq	.+56     	; 0x1482 <__fixunssfsi+0x4c>
    144a:	66 0f       	add	r22, r22
    144c:	77 1f       	adc	r23, r23
    144e:	88 1f       	adc	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	1a f0       	brmi	.+6      	; 0x145a <__fixunssfsi+0x24>
    1454:	ba 95       	dec	r27
    1456:	c9 f7       	brne	.-14     	; 0x144a <__fixunssfsi+0x14>
    1458:	14 c0       	rjmp	.+40     	; 0x1482 <__fixunssfsi+0x4c>
    145a:	b1 30       	cpi	r27, 0x01	; 1
    145c:	91 f0       	breq	.+36     	; 0x1482 <__fixunssfsi+0x4c>
    145e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__fp_zero>
    1462:	b1 e0       	ldi	r27, 0x01	; 1
    1464:	08 95       	ret
    1466:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_zero>
    146a:	67 2f       	mov	r22, r23
    146c:	78 2f       	mov	r23, r24
    146e:	88 27       	eor	r24, r24
    1470:	b8 5f       	subi	r27, 0xF8	; 248
    1472:	39 f0       	breq	.+14     	; 0x1482 <__fixunssfsi+0x4c>
    1474:	b9 3f       	cpi	r27, 0xF9	; 249
    1476:	cc f3       	brlt	.-14     	; 0x146a <__fixunssfsi+0x34>
    1478:	86 95       	lsr	r24
    147a:	77 95       	ror	r23
    147c:	67 95       	ror	r22
    147e:	b3 95       	inc	r27
    1480:	d9 f7       	brne	.-10     	; 0x1478 <__fixunssfsi+0x42>
    1482:	3e f4       	brtc	.+14     	; 0x1492 <__fixunssfsi+0x5c>
    1484:	90 95       	com	r25
    1486:	80 95       	com	r24
    1488:	70 95       	com	r23
    148a:	61 95       	neg	r22
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8f 4f       	sbci	r24, 0xFF	; 255
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	08 95       	ret

00001494 <__floatunsisf>:
    1494:	e8 94       	clt
    1496:	09 c0       	rjmp	.+18     	; 0x14aa <__floatsisf+0x12>

00001498 <__floatsisf>:
    1498:	97 fb       	bst	r25, 7
    149a:	3e f4       	brtc	.+14     	; 0x14aa <__floatsisf+0x12>
    149c:	90 95       	com	r25
    149e:	80 95       	com	r24
    14a0:	70 95       	com	r23
    14a2:	61 95       	neg	r22
    14a4:	7f 4f       	sbci	r23, 0xFF	; 255
    14a6:	8f 4f       	sbci	r24, 0xFF	; 255
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	99 23       	and	r25, r25
    14ac:	a9 f0       	breq	.+42     	; 0x14d8 <__floatsisf+0x40>
    14ae:	f9 2f       	mov	r31, r25
    14b0:	96 e9       	ldi	r25, 0x96	; 150
    14b2:	bb 27       	eor	r27, r27
    14b4:	93 95       	inc	r25
    14b6:	f6 95       	lsr	r31
    14b8:	87 95       	ror	r24
    14ba:	77 95       	ror	r23
    14bc:	67 95       	ror	r22
    14be:	b7 95       	ror	r27
    14c0:	f1 11       	cpse	r31, r1
    14c2:	f8 cf       	rjmp	.-16     	; 0x14b4 <__floatsisf+0x1c>
    14c4:	fa f4       	brpl	.+62     	; 0x1504 <__floatsisf+0x6c>
    14c6:	bb 0f       	add	r27, r27
    14c8:	11 f4       	brne	.+4      	; 0x14ce <__floatsisf+0x36>
    14ca:	60 ff       	sbrs	r22, 0
    14cc:	1b c0       	rjmp	.+54     	; 0x1504 <__floatsisf+0x6c>
    14ce:	6f 5f       	subi	r22, 0xFF	; 255
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	8f 4f       	sbci	r24, 0xFF	; 255
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	16 c0       	rjmp	.+44     	; 0x1504 <__floatsisf+0x6c>
    14d8:	88 23       	and	r24, r24
    14da:	11 f0       	breq	.+4      	; 0x14e0 <__floatsisf+0x48>
    14dc:	96 e9       	ldi	r25, 0x96	; 150
    14de:	11 c0       	rjmp	.+34     	; 0x1502 <__floatsisf+0x6a>
    14e0:	77 23       	and	r23, r23
    14e2:	21 f0       	breq	.+8      	; 0x14ec <__floatsisf+0x54>
    14e4:	9e e8       	ldi	r25, 0x8E	; 142
    14e6:	87 2f       	mov	r24, r23
    14e8:	76 2f       	mov	r23, r22
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <__floatsisf+0x5e>
    14ec:	66 23       	and	r22, r22
    14ee:	71 f0       	breq	.+28     	; 0x150c <__floatsisf+0x74>
    14f0:	96 e8       	ldi	r25, 0x86	; 134
    14f2:	86 2f       	mov	r24, r22
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	2a f0       	brmi	.+10     	; 0x1504 <__floatsisf+0x6c>
    14fa:	9a 95       	dec	r25
    14fc:	66 0f       	add	r22, r22
    14fe:	77 1f       	adc	r23, r23
    1500:	88 1f       	adc	r24, r24
    1502:	da f7       	brpl	.-10     	; 0x14fa <__floatsisf+0x62>
    1504:	88 0f       	add	r24, r24
    1506:	96 95       	lsr	r25
    1508:	87 95       	ror	r24
    150a:	97 f9       	bld	r25, 7
    150c:	08 95       	ret

0000150e <__fp_cmp>:
    150e:	99 0f       	add	r25, r25
    1510:	00 08       	sbc	r0, r0
    1512:	55 0f       	add	r21, r21
    1514:	aa 0b       	sbc	r26, r26
    1516:	e0 e8       	ldi	r30, 0x80	; 128
    1518:	fe ef       	ldi	r31, 0xFE	; 254
    151a:	16 16       	cp	r1, r22
    151c:	17 06       	cpc	r1, r23
    151e:	e8 07       	cpc	r30, r24
    1520:	f9 07       	cpc	r31, r25
    1522:	c0 f0       	brcs	.+48     	; 0x1554 <__fp_cmp+0x46>
    1524:	12 16       	cp	r1, r18
    1526:	13 06       	cpc	r1, r19
    1528:	e4 07       	cpc	r30, r20
    152a:	f5 07       	cpc	r31, r21
    152c:	98 f0       	brcs	.+38     	; 0x1554 <__fp_cmp+0x46>
    152e:	62 1b       	sub	r22, r18
    1530:	73 0b       	sbc	r23, r19
    1532:	84 0b       	sbc	r24, r20
    1534:	95 0b       	sbc	r25, r21
    1536:	39 f4       	brne	.+14     	; 0x1546 <__fp_cmp+0x38>
    1538:	0a 26       	eor	r0, r26
    153a:	61 f0       	breq	.+24     	; 0x1554 <__fp_cmp+0x46>
    153c:	23 2b       	or	r18, r19
    153e:	24 2b       	or	r18, r20
    1540:	25 2b       	or	r18, r21
    1542:	21 f4       	brne	.+8      	; 0x154c <__fp_cmp+0x3e>
    1544:	08 95       	ret
    1546:	0a 26       	eor	r0, r26
    1548:	09 f4       	brne	.+2      	; 0x154c <__fp_cmp+0x3e>
    154a:	a1 40       	sbci	r26, 0x01	; 1
    154c:	a6 95       	lsr	r26
    154e:	8f ef       	ldi	r24, 0xFF	; 255
    1550:	81 1d       	adc	r24, r1
    1552:	81 1d       	adc	r24, r1
    1554:	08 95       	ret

00001556 <__fp_inf>:
    1556:	97 f9       	bld	r25, 7
    1558:	9f 67       	ori	r25, 0x7F	; 127
    155a:	80 e8       	ldi	r24, 0x80	; 128
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	08 95       	ret

00001562 <__fp_nan>:
    1562:	9f ef       	ldi	r25, 0xFF	; 255
    1564:	80 ec       	ldi	r24, 0xC0	; 192
    1566:	08 95       	ret

00001568 <__fp_powser>:
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	1f 93       	push	r17
    156e:	0f 93       	push	r16
    1570:	ff 92       	push	r15
    1572:	ef 92       	push	r14
    1574:	df 92       	push	r13
    1576:	7b 01       	movw	r14, r22
    1578:	8c 01       	movw	r16, r24
    157a:	68 94       	set
    157c:	06 c0       	rjmp	.+12     	; 0x158a <__fp_powser+0x22>
    157e:	da 2e       	mov	r13, r26
    1580:	ef 01       	movw	r28, r30
    1582:	0e 94 43 0b 	call	0x1686	; 0x1686 <__mulsf3x>
    1586:	fe 01       	movw	r30, r28
    1588:	e8 94       	clt
    158a:	a5 91       	lpm	r26, Z+
    158c:	25 91       	lpm	r18, Z+
    158e:	35 91       	lpm	r19, Z+
    1590:	45 91       	lpm	r20, Z+
    1592:	55 91       	lpm	r21, Z+
    1594:	a6 f3       	brts	.-24     	; 0x157e <__fp_powser+0x16>
    1596:	ef 01       	movw	r28, r30
    1598:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__addsf3x>
    159c:	fe 01       	movw	r30, r28
    159e:	97 01       	movw	r18, r14
    15a0:	a8 01       	movw	r20, r16
    15a2:	da 94       	dec	r13
    15a4:	69 f7       	brne	.-38     	; 0x1580 <__fp_powser+0x18>
    15a6:	df 90       	pop	r13
    15a8:	ef 90       	pop	r14
    15aa:	ff 90       	pop	r15
    15ac:	0f 91       	pop	r16
    15ae:	1f 91       	pop	r17
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <__fp_pscA>:
    15b6:	00 24       	eor	r0, r0
    15b8:	0a 94       	dec	r0
    15ba:	16 16       	cp	r1, r22
    15bc:	17 06       	cpc	r1, r23
    15be:	18 06       	cpc	r1, r24
    15c0:	09 06       	cpc	r0, r25
    15c2:	08 95       	ret

000015c4 <__fp_pscB>:
    15c4:	00 24       	eor	r0, r0
    15c6:	0a 94       	dec	r0
    15c8:	12 16       	cp	r1, r18
    15ca:	13 06       	cpc	r1, r19
    15cc:	14 06       	cpc	r1, r20
    15ce:	05 06       	cpc	r0, r21
    15d0:	08 95       	ret

000015d2 <__fp_round>:
    15d2:	09 2e       	mov	r0, r25
    15d4:	03 94       	inc	r0
    15d6:	00 0c       	add	r0, r0
    15d8:	11 f4       	brne	.+4      	; 0x15de <__fp_round+0xc>
    15da:	88 23       	and	r24, r24
    15dc:	52 f0       	brmi	.+20     	; 0x15f2 <__fp_round+0x20>
    15de:	bb 0f       	add	r27, r27
    15e0:	40 f4       	brcc	.+16     	; 0x15f2 <__fp_round+0x20>
    15e2:	bf 2b       	or	r27, r31
    15e4:	11 f4       	brne	.+4      	; 0x15ea <__fp_round+0x18>
    15e6:	60 ff       	sbrs	r22, 0
    15e8:	04 c0       	rjmp	.+8      	; 0x15f2 <__fp_round+0x20>
    15ea:	6f 5f       	subi	r22, 0xFF	; 255
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	8f 4f       	sbci	r24, 0xFF	; 255
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	08 95       	ret

000015f4 <__fp_split3>:
    15f4:	57 fd       	sbrc	r21, 7
    15f6:	90 58       	subi	r25, 0x80	; 128
    15f8:	44 0f       	add	r20, r20
    15fa:	55 1f       	adc	r21, r21
    15fc:	59 f0       	breq	.+22     	; 0x1614 <__fp_splitA+0x10>
    15fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1600:	71 f0       	breq	.+28     	; 0x161e <__fp_splitA+0x1a>
    1602:	47 95       	ror	r20

00001604 <__fp_splitA>:
    1604:	88 0f       	add	r24, r24
    1606:	97 fb       	bst	r25, 7
    1608:	99 1f       	adc	r25, r25
    160a:	61 f0       	breq	.+24     	; 0x1624 <__fp_splitA+0x20>
    160c:	9f 3f       	cpi	r25, 0xFF	; 255
    160e:	79 f0       	breq	.+30     	; 0x162e <__fp_splitA+0x2a>
    1610:	87 95       	ror	r24
    1612:	08 95       	ret
    1614:	12 16       	cp	r1, r18
    1616:	13 06       	cpc	r1, r19
    1618:	14 06       	cpc	r1, r20
    161a:	55 1f       	adc	r21, r21
    161c:	f2 cf       	rjmp	.-28     	; 0x1602 <__fp_split3+0xe>
    161e:	46 95       	lsr	r20
    1620:	f1 df       	rcall	.-30     	; 0x1604 <__fp_splitA>
    1622:	08 c0       	rjmp	.+16     	; 0x1634 <__fp_splitA+0x30>
    1624:	16 16       	cp	r1, r22
    1626:	17 06       	cpc	r1, r23
    1628:	18 06       	cpc	r1, r24
    162a:	99 1f       	adc	r25, r25
    162c:	f1 cf       	rjmp	.-30     	; 0x1610 <__fp_splitA+0xc>
    162e:	86 95       	lsr	r24
    1630:	71 05       	cpc	r23, r1
    1632:	61 05       	cpc	r22, r1
    1634:	08 94       	sec
    1636:	08 95       	ret

00001638 <__fp_zero>:
    1638:	e8 94       	clt

0000163a <__fp_szero>:
    163a:	bb 27       	eor	r27, r27
    163c:	66 27       	eor	r22, r22
    163e:	77 27       	eor	r23, r23
    1640:	cb 01       	movw	r24, r22
    1642:	97 f9       	bld	r25, 7
    1644:	08 95       	ret

00001646 <__gesf2>:
    1646:	0e 94 87 0a 	call	0x150e	; 0x150e <__fp_cmp>
    164a:	08 f4       	brcc	.+2      	; 0x164e <__gesf2+0x8>
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	08 95       	ret

00001650 <inverse>:
    1650:	9b 01       	movw	r18, r22
    1652:	ac 01       	movw	r20, r24
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	80 e8       	ldi	r24, 0x80	; 128
    165a:	9f e3       	ldi	r25, 0x3F	; 63
    165c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__divsf3>

00001660 <__mulsf3>:
    1660:	0e 94 43 0b 	call	0x1686	; 0x1686 <__mulsf3x>
    1664:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__fp_round>
    1668:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__fp_pscA>
    166c:	38 f0       	brcs	.+14     	; 0x167c <__mulsf3+0x1c>
    166e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__fp_pscB>
    1672:	20 f0       	brcs	.+8      	; 0x167c <__mulsf3+0x1c>
    1674:	95 23       	and	r25, r21
    1676:	11 f0       	breq	.+4      	; 0x167c <__mulsf3+0x1c>
    1678:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__fp_inf>
    167c:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_nan>
    1680:	11 24       	eor	r1, r1
    1682:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_szero>

00001686 <__mulsf3x>:
    1686:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <__fp_split3>
    168a:	70 f3       	brcs	.-36     	; 0x1668 <__mulsf3+0x8>

0000168c <__mulsf3_pse>:
    168c:	95 9f       	mul	r25, r21
    168e:	c1 f3       	breq	.-16     	; 0x1680 <__mulsf3+0x20>
    1690:	95 0f       	add	r25, r21
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	55 1f       	adc	r21, r21
    1696:	62 9f       	mul	r22, r18
    1698:	f0 01       	movw	r30, r0
    169a:	72 9f       	mul	r23, r18
    169c:	bb 27       	eor	r27, r27
    169e:	f0 0d       	add	r31, r0
    16a0:	b1 1d       	adc	r27, r1
    16a2:	63 9f       	mul	r22, r19
    16a4:	aa 27       	eor	r26, r26
    16a6:	f0 0d       	add	r31, r0
    16a8:	b1 1d       	adc	r27, r1
    16aa:	aa 1f       	adc	r26, r26
    16ac:	64 9f       	mul	r22, r20
    16ae:	66 27       	eor	r22, r22
    16b0:	b0 0d       	add	r27, r0
    16b2:	a1 1d       	adc	r26, r1
    16b4:	66 1f       	adc	r22, r22
    16b6:	82 9f       	mul	r24, r18
    16b8:	22 27       	eor	r18, r18
    16ba:	b0 0d       	add	r27, r0
    16bc:	a1 1d       	adc	r26, r1
    16be:	62 1f       	adc	r22, r18
    16c0:	73 9f       	mul	r23, r19
    16c2:	b0 0d       	add	r27, r0
    16c4:	a1 1d       	adc	r26, r1
    16c6:	62 1f       	adc	r22, r18
    16c8:	83 9f       	mul	r24, r19
    16ca:	a0 0d       	add	r26, r0
    16cc:	61 1d       	adc	r22, r1
    16ce:	22 1f       	adc	r18, r18
    16d0:	74 9f       	mul	r23, r20
    16d2:	33 27       	eor	r19, r19
    16d4:	a0 0d       	add	r26, r0
    16d6:	61 1d       	adc	r22, r1
    16d8:	23 1f       	adc	r18, r19
    16da:	84 9f       	mul	r24, r20
    16dc:	60 0d       	add	r22, r0
    16de:	21 1d       	adc	r18, r1
    16e0:	82 2f       	mov	r24, r18
    16e2:	76 2f       	mov	r23, r22
    16e4:	6a 2f       	mov	r22, r26
    16e6:	11 24       	eor	r1, r1
    16e8:	9f 57       	subi	r25, 0x7F	; 127
    16ea:	50 40       	sbci	r21, 0x00	; 0
    16ec:	9a f0       	brmi	.+38     	; 0x1714 <__mulsf3_pse+0x88>
    16ee:	f1 f0       	breq	.+60     	; 0x172c <__mulsf3_pse+0xa0>
    16f0:	88 23       	and	r24, r24
    16f2:	4a f0       	brmi	.+18     	; 0x1706 <__mulsf3_pse+0x7a>
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	bb 1f       	adc	r27, r27
    16fa:	66 1f       	adc	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	88 1f       	adc	r24, r24
    1700:	91 50       	subi	r25, 0x01	; 1
    1702:	50 40       	sbci	r21, 0x00	; 0
    1704:	a9 f7       	brne	.-22     	; 0x16f0 <__mulsf3_pse+0x64>
    1706:	9e 3f       	cpi	r25, 0xFE	; 254
    1708:	51 05       	cpc	r21, r1
    170a:	80 f0       	brcs	.+32     	; 0x172c <__mulsf3_pse+0xa0>
    170c:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__fp_inf>
    1710:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_szero>
    1714:	5f 3f       	cpi	r21, 0xFF	; 255
    1716:	e4 f3       	brlt	.-8      	; 0x1710 <__mulsf3_pse+0x84>
    1718:	98 3e       	cpi	r25, 0xE8	; 232
    171a:	d4 f3       	brlt	.-12     	; 0x1710 <__mulsf3_pse+0x84>
    171c:	86 95       	lsr	r24
    171e:	77 95       	ror	r23
    1720:	67 95       	ror	r22
    1722:	b7 95       	ror	r27
    1724:	f7 95       	ror	r31
    1726:	e7 95       	ror	r30
    1728:	9f 5f       	subi	r25, 0xFF	; 255
    172a:	c1 f7       	brne	.-16     	; 0x171c <__mulsf3_pse+0x90>
    172c:	fe 2b       	or	r31, r30
    172e:	88 0f       	add	r24, r24
    1730:	91 1d       	adc	r25, r1
    1732:	96 95       	lsr	r25
    1734:	87 95       	ror	r24
    1736:	97 f9       	bld	r25, 7
    1738:	08 95       	ret
    173a:	19 f4       	brne	.+6      	; 0x1742 <__mulsf3_pse+0xb6>
    173c:	16 f4       	brtc	.+4      	; 0x1742 <__mulsf3_pse+0xb6>
    173e:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_nan>
    1742:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_mpack>

00001746 <sqrt>:
    1746:	0e 94 02 0b 	call	0x1604	; 0x1604 <__fp_splitA>
    174a:	b8 f3       	brcs	.-18     	; 0x173a <__mulsf3_pse+0xae>
    174c:	99 23       	and	r25, r25
    174e:	c9 f3       	breq	.-14     	; 0x1742 <__mulsf3_pse+0xb6>
    1750:	b6 f3       	brts	.-20     	; 0x173e <__mulsf3_pse+0xb2>
    1752:	9f 57       	subi	r25, 0x7F	; 127
    1754:	55 0b       	sbc	r21, r21
    1756:	87 ff       	sbrs	r24, 7
    1758:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <__fp_norm2>
    175c:	00 24       	eor	r0, r0
    175e:	a0 e6       	ldi	r26, 0x60	; 96
    1760:	40 ea       	ldi	r20, 0xA0	; 160
    1762:	90 01       	movw	r18, r0
    1764:	80 58       	subi	r24, 0x80	; 128
    1766:	56 95       	lsr	r21
    1768:	97 95       	ror	r25
    176a:	28 f4       	brcc	.+10     	; 0x1776 <sqrt+0x30>
    176c:	80 5c       	subi	r24, 0xC0	; 192
    176e:	66 0f       	add	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	88 1f       	adc	r24, r24
    1774:	20 f0       	brcs	.+8      	; 0x177e <sqrt+0x38>
    1776:	26 17       	cp	r18, r22
    1778:	37 07       	cpc	r19, r23
    177a:	48 07       	cpc	r20, r24
    177c:	30 f4       	brcc	.+12     	; 0x178a <sqrt+0x44>
    177e:	62 1b       	sub	r22, r18
    1780:	73 0b       	sbc	r23, r19
    1782:	84 0b       	sbc	r24, r20
    1784:	20 29       	or	r18, r0
    1786:	31 29       	or	r19, r1
    1788:	4a 2b       	or	r20, r26
    178a:	a6 95       	lsr	r26
    178c:	17 94       	ror	r1
    178e:	07 94       	ror	r0
    1790:	20 25       	eor	r18, r0
    1792:	31 25       	eor	r19, r1
    1794:	4a 27       	eor	r20, r26
    1796:	58 f7       	brcc	.-42     	; 0x176e <sqrt+0x28>
    1798:	66 0f       	add	r22, r22
    179a:	77 1f       	adc	r23, r23
    179c:	88 1f       	adc	r24, r24
    179e:	20 f0       	brcs	.+8      	; 0x17a8 <sqrt+0x62>
    17a0:	26 17       	cp	r18, r22
    17a2:	37 07       	cpc	r19, r23
    17a4:	48 07       	cpc	r20, r24
    17a6:	30 f4       	brcc	.+12     	; 0x17b4 <sqrt+0x6e>
    17a8:	62 0b       	sbc	r22, r18
    17aa:	73 0b       	sbc	r23, r19
    17ac:	84 0b       	sbc	r24, r20
    17ae:	20 0d       	add	r18, r0
    17b0:	31 1d       	adc	r19, r1
    17b2:	41 1d       	adc	r20, r1
    17b4:	a0 95       	com	r26
    17b6:	81 f7       	brne	.-32     	; 0x1798 <sqrt+0x52>
    17b8:	b9 01       	movw	r22, r18
    17ba:	84 2f       	mov	r24, r20
    17bc:	91 58       	subi	r25, 0x81	; 129
    17be:	88 0f       	add	r24, r24
    17c0:	96 95       	lsr	r25
    17c2:	87 95       	ror	r24
    17c4:	08 95       	ret

000017c6 <square>:
    17c6:	9b 01       	movw	r18, r22
    17c8:	ac 01       	movw	r20, r24
    17ca:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__mulsf3>

000017ce <__fp_mpack>:
    17ce:	9f 3f       	cpi	r25, 0xFF	; 255
    17d0:	31 f0       	breq	.+12     	; 0x17de <__fp_mpack_finite+0xc>

000017d2 <__fp_mpack_finite>:
    17d2:	91 50       	subi	r25, 0x01	; 1
    17d4:	20 f4       	brcc	.+8      	; 0x17de <__fp_mpack_finite+0xc>
    17d6:	87 95       	ror	r24
    17d8:	77 95       	ror	r23
    17da:	67 95       	ror	r22
    17dc:	b7 95       	ror	r27
    17de:	88 0f       	add	r24, r24
    17e0:	91 1d       	adc	r25, r1
    17e2:	96 95       	lsr	r25
    17e4:	87 95       	ror	r24
    17e6:	97 f9       	bld	r25, 7
    17e8:	08 95       	ret

000017ea <__fp_norm2>:
    17ea:	91 50       	subi	r25, 0x01	; 1
    17ec:	50 40       	sbci	r21, 0x00	; 0
    17ee:	66 0f       	add	r22, r22
    17f0:	77 1f       	adc	r23, r23
    17f2:	88 1f       	adc	r24, r24
    17f4:	d2 f7       	brpl	.-12     	; 0x17ea <__fp_norm2>
    17f6:	08 95       	ret

000017f8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    17f8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    17fa:	91 8d       	ldd	r25, Z+25	; 0x19
    17fc:	22 8d       	ldd	r18, Z+26	; 0x1a
    17fe:	89 2f       	mov	r24, r25
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	80 5c       	subi	r24, 0xC0	; 192
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	82 1b       	sub	r24, r18
    1808:	91 09       	sbc	r25, r1
}
    180a:	8f 73       	andi	r24, 0x3F	; 63
    180c:	99 27       	eor	r25, r25
    180e:	08 95       	ret

00001810 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1810:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1812:	91 8d       	ldd	r25, Z+25	; 0x19
    1814:	82 8d       	ldd	r24, Z+26	; 0x1a
    1816:	98 17       	cp	r25, r24
    1818:	31 f0       	breq	.+12     	; 0x1826 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    181a:	82 8d       	ldd	r24, Z+26	; 0x1a
    181c:	e8 0f       	add	r30, r24
    181e:	f1 1d       	adc	r31, r1
    1820:	85 8d       	ldd	r24, Z+29	; 0x1d
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    182a:	08 95       	ret

0000182c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    182c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    182e:	91 8d       	ldd	r25, Z+25	; 0x19
    1830:	82 8d       	ldd	r24, Z+26	; 0x1a
    1832:	98 17       	cp	r25, r24
    1834:	61 f0       	breq	.+24     	; 0x184e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1836:	82 8d       	ldd	r24, Z+26	; 0x1a
    1838:	df 01       	movw	r26, r30
    183a:	a8 0f       	add	r26, r24
    183c:	b1 1d       	adc	r27, r1
    183e:	5d 96       	adiw	r26, 0x1d	; 29
    1840:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1842:	92 8d       	ldd	r25, Z+26	; 0x1a
    1844:	9f 5f       	subi	r25, 0xFF	; 255
    1846:	9f 73       	andi	r25, 0x3F	; 63
    1848:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    184e:	8f ef       	ldi	r24, 0xFF	; 255
    1850:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1852:	08 95       	ret

00001854 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1854:	8f e7       	ldi	r24, 0x7F	; 127
    1856:	9d e0       	ldi	r25, 0x0D	; 13
    1858:	89 2b       	or	r24, r25
    185a:	49 f0       	breq	.+18     	; 0x186e <_Z14serialEventRunv+0x1a>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	89 2b       	or	r24, r25
    1862:	29 f0       	breq	.+10     	; 0x186e <_Z14serialEventRunv+0x1a>
    1864:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_Z17Serial0_availablev>
    1868:	81 11       	cpse	r24, r1
    186a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    186e:	08 95       	ret

00001870 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1870:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1872:	84 8d       	ldd	r24, Z+28	; 0x1c
    1874:	df 01       	movw	r26, r30
    1876:	a8 0f       	add	r26, r24
    1878:	b1 1d       	adc	r27, r1
    187a:	a3 5a       	subi	r26, 0xA3	; 163
    187c:	bf 4f       	sbci	r27, 0xFF	; 255
    187e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1880:	84 8d       	ldd	r24, Z+28	; 0x1c
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	8f 73       	andi	r24, 0x3F	; 63
    1888:	99 27       	eor	r25, r25
    188a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    188c:	a6 89       	ldd	r26, Z+22	; 0x16
    188e:	b7 89       	ldd	r27, Z+23	; 0x17
    1890:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    1892:	a0 89       	ldd	r26, Z+16	; 0x10
    1894:	b1 89       	ldd	r27, Z+17	; 0x11
    1896:	8c 91       	ld	r24, X
    1898:	80 64       	ori	r24, 0x40	; 64
    189a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    189c:	93 8d       	ldd	r25, Z+27	; 0x1b
    189e:	84 8d       	ldd	r24, Z+28	; 0x1c
    18a0:	98 13       	cpse	r25, r24
    18a2:	06 c0       	rjmp	.+12     	; 0x18b0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    18a4:	02 88       	ldd	r0, Z+18	; 0x12
    18a6:	f3 89       	ldd	r31, Z+19	; 0x13
    18a8:	e0 2d       	mov	r30, r0
    18aa:	80 81       	ld	r24, Z
    18ac:	8f 7d       	andi	r24, 0xDF	; 223
    18ae:	80 83       	st	Z, r24
    18b0:	08 95       	ret

000018b2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    18b8:	88 8d       	ldd	r24, Y+24	; 0x18
    18ba:	88 23       	and	r24, r24
    18bc:	c9 f0       	breq	.+50     	; 0x18f0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    18be:	ea 89       	ldd	r30, Y+18	; 0x12
    18c0:	fb 89       	ldd	r31, Y+19	; 0x13
    18c2:	80 81       	ld	r24, Z
    18c4:	85 fd       	sbrc	r24, 5
    18c6:	05 c0       	rjmp	.+10     	; 0x18d2 <_ZN14HardwareSerial5flushEv+0x20>
    18c8:	a8 89       	ldd	r26, Y+16	; 0x10
    18ca:	b9 89       	ldd	r27, Y+17	; 0x11
    18cc:	8c 91       	ld	r24, X
    18ce:	86 fd       	sbrc	r24, 6
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	07 fc       	sbrc	r0, 7
    18d6:	f5 cf       	rjmp	.-22     	; 0x18c2 <_ZN14HardwareSerial5flushEv+0x10>
    18d8:	80 81       	ld	r24, Z
    18da:	85 ff       	sbrs	r24, 5
    18dc:	f2 cf       	rjmp	.-28     	; 0x18c2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    18de:	a8 89       	ldd	r26, Y+16	; 0x10
    18e0:	b9 89       	ldd	r27, Y+17	; 0x11
    18e2:	8c 91       	ld	r24, X
    18e4:	85 ff       	sbrs	r24, 5
    18e6:	ed cf       	rjmp	.-38     	; 0x18c2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    18e8:	ce 01       	movw	r24, r28
    18ea:	0e 94 38 0c 	call	0x1870	; 0x1870 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    18ee:	e7 cf       	rjmp	.-50     	; 0x18be <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	ec 01       	movw	r28, r24
  _written = true;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1908:	9b 8d       	ldd	r25, Y+27	; 0x1b
    190a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    190c:	98 13       	cpse	r25, r24
    190e:	05 c0       	rjmp	.+10     	; 0x191a <_ZN14HardwareSerial5writeEh+0x24>
    1910:	e8 89       	ldd	r30, Y+16	; 0x10
    1912:	f9 89       	ldd	r31, Y+17	; 0x11
    1914:	80 81       	ld	r24, Z
    1916:	85 fd       	sbrc	r24, 5
    1918:	24 c0       	rjmp	.+72     	; 0x1962 <_ZN14HardwareSerial5writeEh+0x6c>
    191a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    191c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    191e:	10 e0       	ldi	r17, 0x00	; 0
    1920:	0f 5f       	subi	r16, 0xFF	; 255
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	0f 73       	andi	r16, 0x3F	; 63
    1926:	11 27       	eor	r17, r17
    1928:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    192a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    192c:	e8 12       	cpse	r14, r24
    192e:	0c c0       	rjmp	.+24     	; 0x1948 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	07 fc       	sbrc	r0, 7
    1934:	fa cf       	rjmp	.-12     	; 0x192a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1936:	e8 89       	ldd	r30, Y+16	; 0x10
    1938:	f9 89       	ldd	r31, Y+17	; 0x11
    193a:	80 81       	ld	r24, Z
    193c:	85 ff       	sbrs	r24, 5
    193e:	f5 cf       	rjmp	.-22     	; 0x192a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1940:	ce 01       	movw	r24, r28
    1942:	0e 94 38 0c 	call	0x1870	; 0x1870 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1946:	f1 cf       	rjmp	.-30     	; 0x192a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1948:	8b 8d       	ldd	r24, Y+27	; 0x1b
    194a:	fe 01       	movw	r30, r28
    194c:	e8 0f       	add	r30, r24
    194e:	f1 1d       	adc	r31, r1
    1950:	e3 5a       	subi	r30, 0xA3	; 163
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1956:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1958:	ea 89       	ldd	r30, Y+18	; 0x12
    195a:	fb 89       	ldd	r31, Y+19	; 0x13
    195c:	80 81       	ld	r24, Z
    195e:	80 62       	ori	r24, 0x20	; 32
    1960:	07 c0       	rjmp	.+14     	; 0x1970 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1962:	ee 89       	ldd	r30, Y+22	; 0x16
    1964:	ff 89       	ldd	r31, Y+23	; 0x17
    1966:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1968:	e8 89       	ldd	r30, Y+16	; 0x10
    196a:	f9 89       	ldd	r31, Y+17	; 0x11
    196c:	80 81       	ld	r24, Z
    196e:	80 64       	ori	r24, 0x40	; 64
    1970:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	08 95       	ret

00001984 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	ec 01       	movw	r28, r24
    1994:	6a 01       	movw	r12, r20
    1996:	7b 01       	movw	r14, r22
    1998:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    199a:	e8 89       	ldd	r30, Y+16	; 0x10
    199c:	f9 89       	ldd	r31, Y+17	; 0x11
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    19a2:	41 15       	cp	r20, r1
    19a4:	51 4e       	sbci	r21, 0xE1	; 225
    19a6:	61 05       	cpc	r22, r1
    19a8:	71 05       	cpc	r23, r1
    19aa:	b1 f0       	breq	.+44     	; 0x19d8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	79 e0       	ldi	r23, 0x09	; 9
    19b0:	8d e3       	ldi	r24, 0x3D	; 61
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a7 01       	movw	r20, r14
    19b6:	96 01       	movw	r18, r12
    19b8:	0e 94 a7 18 	call	0x314e	; 0x314e <__udivmodsi4>
    19bc:	da 01       	movw	r26, r20
    19be:	c9 01       	movw	r24, r18
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	a1 09       	sbc	r26, r1
    19c4:	b1 09       	sbc	r27, r1
    19c6:	b6 95       	lsr	r27
    19c8:	a7 95       	ror	r26
    19ca:	97 95       	ror	r25
    19cc:	87 95       	ror	r24
    19ce:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    19d0:	41 15       	cp	r20, r1
    19d2:	80 e1       	ldi	r24, 0x10	; 16
    19d4:	58 07       	cpc	r21, r24
    19d6:	a8 f0       	brcs	.+42     	; 0x1a02 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    19d8:	e8 89       	ldd	r30, Y+16	; 0x10
    19da:	f9 89       	ldd	r31, Y+17	; 0x11
    19dc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    19de:	60 e8       	ldi	r22, 0x80	; 128
    19e0:	74 e8       	ldi	r23, 0x84	; 132
    19e2:	8e e1       	ldi	r24, 0x1E	; 30
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a7 01       	movw	r20, r14
    19e8:	96 01       	movw	r18, r12
    19ea:	0e 94 a7 18 	call	0x314e	; 0x314e <__udivmodsi4>
    19ee:	ba 01       	movw	r22, r20
    19f0:	a9 01       	movw	r20, r18
    19f2:	41 50       	subi	r20, 0x01	; 1
    19f4:	51 09       	sbc	r21, r1
    19f6:	61 09       	sbc	r22, r1
    19f8:	71 09       	sbc	r23, r1
    19fa:	76 95       	lsr	r23
    19fc:	67 95       	ror	r22
    19fe:	57 95       	ror	r21
    1a00:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1a02:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a04:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a06:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    1a08:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a0a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a0c:	40 83       	st	Z, r20

  _written = false;
    1a0e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1a10:	ec 89       	ldd	r30, Y+20	; 0x14
    1a12:	fd 89       	ldd	r31, Y+21	; 0x15
    1a14:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1a16:	ea 89       	ldd	r30, Y+18	; 0x12
    1a18:	fb 89       	ldd	r31, Y+19	; 0x13
    1a1a:	80 81       	ld	r24, Z
    1a1c:	80 61       	ori	r24, 0x10	; 16
    1a1e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1a20:	ea 89       	ldd	r30, Y+18	; 0x12
    1a22:	fb 89       	ldd	r31, Y+19	; 0x13
    1a24:	80 81       	ld	r24, Z
    1a26:	88 60       	ori	r24, 0x08	; 8
    1a28:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1a2a:	ea 89       	ldd	r30, Y+18	; 0x12
    1a2c:	fb 89       	ldd	r31, Y+19	; 0x13
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 68       	ori	r24, 0x80	; 128
    1a32:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1a34:	ea 89       	ldd	r30, Y+18	; 0x12
    1a36:	fb 89       	ldd	r31, Y+19	; 0x13
    1a38:	80 81       	ld	r24, Z
    1a3a:	8f 7d       	andi	r24, 0xDF	; 223
    1a3c:	80 83       	st	Z, r24
}
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	df 90       	pop	r13
    1a4a:	cf 90       	pop	r12
    1a4c:	08 95       	ret

00001a4e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1a4e:	1f 92       	push	r1
    1a50:	0f 92       	push	r0
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	0f 92       	push	r0
    1a56:	11 24       	eor	r1, r1
    1a58:	2f 93       	push	r18
    1a5a:	8f 93       	push	r24
    1a5c:	9f 93       	push	r25
    1a5e:	ef 93       	push	r30
    1a60:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1a62:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <Serial+0x10>
    1a66:	f0 91 19 03 	lds	r31, 0x0319	; 0x800319 <Serial+0x11>
    1a6a:	80 81       	ld	r24, Z
    1a6c:	e0 91 1e 03 	lds	r30, 0x031E	; 0x80031e <Serial+0x16>
    1a70:	f0 91 1f 03 	lds	r31, 0x031F	; 0x80031f <Serial+0x17>
    1a74:	82 fd       	sbrc	r24, 2
    1a76:	12 c0       	rjmp	.+36     	; 0x1a9c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1a78:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1a7a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <Serial+0x19>
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1a82:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <Serial+0x1a>
    1a86:	82 17       	cp	r24, r18
    1a88:	51 f0       	breq	.+20     	; 0x1a9e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1a8a:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <Serial+0x19>
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	e8 5f       	subi	r30, 0xF8	; 248
    1a92:	fc 4f       	sbci	r31, 0xFC	; 252
    1a94:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1a96:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <Serial+0x19>
    1a9a:	01 c0       	rjmp	.+2      	; 0x1a9e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1a9c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1a9e:	ff 91       	pop	r31
    1aa0:	ef 91       	pop	r30
    1aa2:	9f 91       	pop	r25
    1aa4:	8f 91       	pop	r24
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f 90       	pop	r0
    1aae:	1f 90       	pop	r1
    1ab0:	18 95       	reti

00001ab2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1ab2:	1f 92       	push	r1
    1ab4:	0f 92       	push	r0
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	0f 92       	push	r0
    1aba:	11 24       	eor	r1, r1
    1abc:	2f 93       	push	r18
    1abe:	3f 93       	push	r19
    1ac0:	4f 93       	push	r20
    1ac2:	5f 93       	push	r21
    1ac4:	6f 93       	push	r22
    1ac6:	7f 93       	push	r23
    1ac8:	8f 93       	push	r24
    1aca:	9f 93       	push	r25
    1acc:	af 93       	push	r26
    1ace:	bf 93       	push	r27
    1ad0:	ef 93       	push	r30
    1ad2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1ad4:	88 e0       	ldi	r24, 0x08	; 8
    1ad6:	93 e0       	ldi	r25, 0x03	; 3
    1ad8:	0e 94 38 0c 	call	0x1870	; 0x1870 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1adc:	ff 91       	pop	r31
    1ade:	ef 91       	pop	r30
    1ae0:	bf 91       	pop	r27
    1ae2:	af 91       	pop	r26
    1ae4:	9f 91       	pop	r25
    1ae6:	8f 91       	pop	r24
    1ae8:	7f 91       	pop	r23
    1aea:	6f 91       	pop	r22
    1aec:	5f 91       	pop	r21
    1aee:	4f 91       	pop	r20
    1af0:	3f 91       	pop	r19
    1af2:	2f 91       	pop	r18
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	0f 90       	pop	r0
    1afa:	1f 90       	pop	r1
    1afc:	18 95       	reti

00001afe <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1afe:	88 e0       	ldi	r24, 0x08	; 8
    1b00:	93 e0       	ldi	r25, 0x03	; 3
    1b02:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <_ZN14HardwareSerial9availableEv>
    1b06:	21 e0       	ldi	r18, 0x01	; 1
    1b08:	89 2b       	or	r24, r25
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <_Z17Serial0_availablev+0x10>
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
}
    1b0e:	82 2f       	mov	r24, r18
    1b10:	08 95       	ret

00001b12 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1b12:	e8 e0       	ldi	r30, 0x08	; 8
    1b14:	f3 e0       	ldi	r31, 0x03	; 3
    1b16:	13 82       	std	Z+3, r1	; 0x03
    1b18:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1b1a:	88 ee       	ldi	r24, 0xE8	; 232
    1b1c:	93 e0       	ldi	r25, 0x03	; 3
    1b1e:	a0 e0       	ldi	r26, 0x00	; 0
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	84 83       	std	Z+4, r24	; 0x04
    1b24:	95 83       	std	Z+5, r25	; 0x05
    1b26:	a6 83       	std	Z+6, r26	; 0x06
    1b28:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1b2a:	83 ee       	ldi	r24, 0xE3	; 227
    1b2c:	91 e0       	ldi	r25, 0x01	; 1
    1b2e:	91 83       	std	Z+1, r25	; 0x01
    1b30:	80 83       	st	Z, r24
    1b32:	85 ec       	ldi	r24, 0xC5	; 197
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	95 87       	std	Z+13, r25	; 0x0d
    1b38:	84 87       	std	Z+12, r24	; 0x0c
    1b3a:	84 ec       	ldi	r24, 0xC4	; 196
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	97 87       	std	Z+15, r25	; 0x0f
    1b40:	86 87       	std	Z+14, r24	; 0x0e
    1b42:	80 ec       	ldi	r24, 0xC0	; 192
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	91 8b       	std	Z+17, r25	; 0x11
    1b48:	80 8b       	std	Z+16, r24	; 0x10
    1b4a:	81 ec       	ldi	r24, 0xC1	; 193
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	93 8b       	std	Z+19, r25	; 0x13
    1b50:	82 8b       	std	Z+18, r24	; 0x12
    1b52:	82 ec       	ldi	r24, 0xC2	; 194
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	95 8b       	std	Z+21, r25	; 0x15
    1b58:	84 8b       	std	Z+20, r24	; 0x14
    1b5a:	86 ec       	ldi	r24, 0xC6	; 198
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	97 8b       	std	Z+23, r25	; 0x17
    1b60:	86 8b       	std	Z+22, r24	; 0x16
    1b62:	11 8e       	std	Z+25, r1	; 0x19
    1b64:	12 8e       	std	Z+26, r1	; 0x1a
    1b66:	13 8e       	std	Z+27, r1	; 0x1b
    1b68:	14 8e       	std	Z+28, r1	; 0x1c
    1b6a:	08 95       	ret

00001b6c <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    1b6c:	08 95       	ret

00001b6e <main>:

int main(void)
{
	init();
    1b6e:	0e 94 63 10 	call	0x20c6	; 0x20c6 <init>

	initVariant();
    1b72:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1b76:	0e 94 6e 03 	call	0x6dc	; 0x6dc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1b7a:	ca e2       	ldi	r28, 0x2A	; 42
    1b7c:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1b7e:	0e 94 a0 08 	call	0x1140	; 0x1140 <loop>
		if (serialEventRun) serialEventRun();
    1b82:	20 97       	sbiw	r28, 0x00	; 0
    1b84:	e1 f3       	breq	.-8      	; 0x1b7e <main+0x10>
    1b86:	0e 94 2a 0c 	call	0x1854	; 0x1854 <_Z14serialEventRunv>
    1b8a:	f9 cf       	rjmp	.-14     	; 0x1b7e <main+0x10>

00001b8c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	6c 01       	movw	r12, r24
    1b9e:	7a 01       	movw	r14, r20
    1ba0:	8b 01       	movw	r16, r22
    1ba2:	c0 e0       	ldi	r28, 0x00	; 0
    1ba4:	d0 e0       	ldi	r29, 0x00	; 0
    1ba6:	ce 15       	cp	r28, r14
    1ba8:	df 05       	cpc	r29, r15
    1baa:	89 f0       	breq	.+34     	; 0x1bce <_ZN5Print5writeEPKhj+0x42>
    1bac:	d8 01       	movw	r26, r16
    1bae:	6d 91       	ld	r22, X+
    1bb0:	8d 01       	movw	r16, r26
    1bb2:	d6 01       	movw	r26, r12
    1bb4:	ed 91       	ld	r30, X+
    1bb6:	fc 91       	ld	r31, X
    1bb8:	01 90       	ld	r0, Z+
    1bba:	f0 81       	ld	r31, Z
    1bbc:	e0 2d       	mov	r30, r0
    1bbe:	c6 01       	movw	r24, r12
    1bc0:	09 95       	icall
    1bc2:	89 2b       	or	r24, r25
    1bc4:	11 f4       	brne	.+4      	; 0x1bca <_ZN5Print5writeEPKhj+0x3e>
    1bc6:	7e 01       	movw	r14, r28
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <_ZN5Print5writeEPKhj+0x42>
    1bca:	21 96       	adiw	r28, 0x01	; 1
    1bcc:	ec cf       	rjmp	.-40     	; 0x1ba6 <_ZN5Print5writeEPKhj+0x1a>
    1bce:	c7 01       	movw	r24, r14
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	ef 90       	pop	r14
    1bdc:	df 90       	pop	r13
    1bde:	cf 90       	pop	r12
    1be0:	08 95       	ret

00001be2 <_ZN5Print5writeEPKc>:
    1be2:	61 15       	cp	r22, r1
    1be4:	71 05       	cpc	r23, r1
    1be6:	79 f0       	breq	.+30     	; 0x1c06 <_ZN5Print5writeEPKc+0x24>
    1be8:	fb 01       	movw	r30, r22
    1bea:	01 90       	ld	r0, Z+
    1bec:	00 20       	and	r0, r0
    1bee:	e9 f7       	brne	.-6      	; 0x1bea <_ZN5Print5writeEPKc+0x8>
    1bf0:	31 97       	sbiw	r30, 0x01	; 1
    1bf2:	af 01       	movw	r20, r30
    1bf4:	46 1b       	sub	r20, r22
    1bf6:	57 0b       	sbc	r21, r23
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	ed 91       	ld	r30, X+
    1bfc:	fc 91       	ld	r31, X
    1bfe:	02 80       	ldd	r0, Z+2	; 0x02
    1c00:	f3 81       	ldd	r31, Z+3	; 0x03
    1c02:	e0 2d       	mov	r30, r0
    1c04:	09 94       	ijmp
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	08 95       	ret

00001c0c <_ZN5Print5printERK6String>:
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	ed 91       	ld	r30, X+
    1c10:	fc 91       	ld	r31, X
    1c12:	db 01       	movw	r26, r22
    1c14:	14 96       	adiw	r26, 0x04	; 4
    1c16:	4d 91       	ld	r20, X+
    1c18:	5c 91       	ld	r21, X
    1c1a:	15 97       	sbiw	r26, 0x05	; 5
    1c1c:	6d 91       	ld	r22, X+
    1c1e:	7c 91       	ld	r23, X
    1c20:	02 80       	ldd	r0, Z+2	; 0x02
    1c22:	f3 81       	ldd	r31, Z+3	; 0x03
    1c24:	e0 2d       	mov	r30, r0
    1c26:	09 94       	ijmp

00001c28 <_ZN5Print5printEPKc>:
    1c28:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <_ZN5Print5writeEPKc>

00001c2c <_ZN5Print5printEc>:
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	ed 91       	ld	r30, X+
    1c30:	fc 91       	ld	r31, X
    1c32:	01 90       	ld	r0, Z+
    1c34:	f0 81       	ld	r31, Z
    1c36:	e0 2d       	mov	r30, r0
    1c38:	09 94       	ijmp

00001c3a <_ZN5Print7printlnEv>:
    1c3a:	6f ee       	ldi	r22, 0xEF	; 239
    1c3c:	71 e0       	ldi	r23, 0x01	; 1
    1c3e:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <_ZN5Print5writeEPKc>

00001c42 <_ZN5Print11printNumberEmh>:
    1c42:	8f 92       	push	r8
    1c44:	9f 92       	push	r9
    1c46:	af 92       	push	r10
    1c48:	bf 92       	push	r11
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	a1 97       	sbiw	r28, 0x21	; 33
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	7c 01       	movw	r14, r24
    1c6c:	d4 2e       	mov	r13, r20
    1c6e:	c5 2e       	mov	r12, r21
    1c70:	db 01       	movw	r26, r22
    1c72:	19 a2       	std	Y+33, r1	; 0x21
    1c74:	22 30       	cpi	r18, 0x02	; 2
    1c76:	08 f4       	brcc	.+2      	; 0x1c7a <_ZN5Print11printNumberEmh+0x38>
    1c78:	2a e0       	ldi	r18, 0x0A	; 10
    1c7a:	8e 01       	movw	r16, r28
    1c7c:	0f 5d       	subi	r16, 0xDF	; 223
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	82 2e       	mov	r8, r18
    1c82:	91 2c       	mov	r9, r1
    1c84:	a1 2c       	mov	r10, r1
    1c86:	b1 2c       	mov	r11, r1
    1c88:	6d 2d       	mov	r22, r13
    1c8a:	7c 2d       	mov	r23, r12
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	a5 01       	movw	r20, r10
    1c90:	94 01       	movw	r18, r8
    1c92:	0e 94 a7 18 	call	0x314e	; 0x314e <__udivmodsi4>
    1c96:	d2 2e       	mov	r13, r18
    1c98:	c3 2e       	mov	r12, r19
    1c9a:	da 01       	movw	r26, r20
    1c9c:	01 50       	subi	r16, 0x01	; 1
    1c9e:	11 09       	sbc	r17, r1
    1ca0:	6a 30       	cpi	r22, 0x0A	; 10
    1ca2:	71 05       	cpc	r23, r1
    1ca4:	81 05       	cpc	r24, r1
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	10 f4       	brcc	.+4      	; 0x1cae <_ZN5Print11printNumberEmh+0x6c>
    1caa:	60 5d       	subi	r22, 0xD0	; 208
    1cac:	01 c0       	rjmp	.+2      	; 0x1cb0 <_ZN5Print11printNumberEmh+0x6e>
    1cae:	69 5c       	subi	r22, 0xC9	; 201
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	60 83       	st	Z, r22
    1cb4:	23 2b       	or	r18, r19
    1cb6:	24 2b       	or	r18, r20
    1cb8:	25 2b       	or	r18, r21
    1cba:	31 f7       	brne	.-52     	; 0x1c88 <_ZN5Print11printNumberEmh+0x46>
    1cbc:	b8 01       	movw	r22, r16
    1cbe:	c7 01       	movw	r24, r14
    1cc0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_ZN5Print5writeEPKc>
    1cc4:	a1 96       	adiw	r28, 0x21	; 33
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	bf 90       	pop	r11
    1ce2:	af 90       	pop	r10
    1ce4:	9f 90       	pop	r9
    1ce6:	8f 90       	pop	r8
    1ce8:	08 95       	ret

00001cea <_ZN5Print5printEli>:
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	ec 01       	movw	r28, r24
    1cfc:	6a 01       	movw	r12, r20
    1cfe:	7b 01       	movw	r14, r22
    1d00:	21 15       	cp	r18, r1
    1d02:	31 05       	cpc	r19, r1
    1d04:	79 f4       	brne	.+30     	; 0x1d24 <_ZN5Print5printEli+0x3a>
    1d06:	e8 81       	ld	r30, Y
    1d08:	f9 81       	ldd	r31, Y+1	; 0x01
    1d0a:	01 90       	ld	r0, Z+
    1d0c:	f0 81       	ld	r31, Z
    1d0e:	e0 2d       	mov	r30, r0
    1d10:	64 2f       	mov	r22, r20
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	df 90       	pop	r13
    1d20:	cf 90       	pop	r12
    1d22:	09 94       	ijmp
    1d24:	2a 30       	cpi	r18, 0x0A	; 10
    1d26:	31 05       	cpc	r19, r1
    1d28:	e9 f4       	brne	.+58     	; 0x1d64 <_ZN5Print5printEli+0x7a>
    1d2a:	77 ff       	sbrs	r23, 7
    1d2c:	1a c0       	rjmp	.+52     	; 0x1d62 <_ZN5Print5printEli+0x78>
    1d2e:	6d e2       	ldi	r22, 0x2D	; 45
    1d30:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <_ZN5Print5printEc>
    1d34:	8c 01       	movw	r16, r24
    1d36:	44 27       	eor	r20, r20
    1d38:	55 27       	eor	r21, r21
    1d3a:	ba 01       	movw	r22, r20
    1d3c:	4c 19       	sub	r20, r12
    1d3e:	5d 09       	sbc	r21, r13
    1d40:	6e 09       	sbc	r22, r14
    1d42:	7f 09       	sbc	r23, r15
    1d44:	2a e0       	ldi	r18, 0x0A	; 10
    1d46:	ce 01       	movw	r24, r28
    1d48:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_ZN5Print11printNumberEmh>
    1d4c:	80 0f       	add	r24, r16
    1d4e:	91 1f       	adc	r25, r17
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	ff 90       	pop	r15
    1d5a:	ef 90       	pop	r14
    1d5c:	df 90       	pop	r13
    1d5e:	cf 90       	pop	r12
    1d60:	08 95       	ret
    1d62:	2a e0       	ldi	r18, 0x0A	; 10
    1d64:	b7 01       	movw	r22, r14
    1d66:	a6 01       	movw	r20, r12
    1d68:	ce 01       	movw	r24, r28
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	ff 90       	pop	r15
    1d74:	ef 90       	pop	r14
    1d76:	df 90       	pop	r13
    1d78:	cf 90       	pop	r12
    1d7a:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <_ZN5Print11printNumberEmh>

00001d7e <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1d7e:	4f 92       	push	r4
    1d80:	5f 92       	push	r5
    1d82:	6f 92       	push	r6
    1d84:	7f 92       	push	r7
    1d86:	8f 92       	push	r8
    1d88:	9f 92       	push	r9
    1d8a:	af 92       	push	r10
    1d8c:	bf 92       	push	r11
    1d8e:	cf 92       	push	r12
    1d90:	df 92       	push	r13
    1d92:	ef 92       	push	r14
    1d94:	ff 92       	push	r15
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	ec 01       	movw	r28, r24
    1d9c:	6a 01       	movw	r12, r20
    1d9e:	7b 01       	movw	r14, r22
    1da0:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1da2:	9a 01       	movw	r18, r20
    1da4:	ab 01       	movw	r20, r22
    1da6:	c7 01       	movw	r24, r14
    1da8:	b6 01       	movw	r22, r12
    1daa:	0e 94 8e 18 	call	0x311c	; 0x311c <__unordsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	19 f0       	breq	.+6      	; 0x1db8 <_ZN5Print10printFloatEdh+0x3a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1db2:	62 ef       	ldi	r22, 0xF2	; 242
    1db4:	71 e0       	ldi	r23, 0x01	; 1
    1db6:	27 c0       	rjmp	.+78     	; 0x1e06 <_ZN5Print10printFloatEdh+0x88>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1db8:	26 01       	movw	r4, r12
    1dba:	37 01       	movw	r6, r14
    1dbc:	e8 94       	clt
    1dbe:	77 f8       	bld	r7, 7
    1dc0:	2f ef       	ldi	r18, 0xFF	; 255
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	4f e7       	ldi	r20, 0x7F	; 127
    1dc6:	5f e7       	ldi	r21, 0x7F	; 127
    1dc8:	c3 01       	movw	r24, r6
    1dca:	b2 01       	movw	r22, r4
    1dcc:	0e 94 8e 18 	call	0x311c	; 0x311c <__unordsf2>
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	0d c0       	rjmp	.+26     	; 0x1dee <_ZN5Print10printFloatEdh+0x70>
    1dd4:	2f ef       	ldi	r18, 0xFF	; 255
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	5f e7       	ldi	r21, 0x7F	; 127
    1ddc:	c3 01       	movw	r24, r6
    1dde:	b2 01       	movw	r22, r4
    1de0:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	1c f4       	brge	.+6      	; 0x1dee <_ZN5Print10printFloatEdh+0x70>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1de8:	66 ef       	ldi	r22, 0xF6	; 246
    1dea:	71 e0       	ldi	r23, 0x01	; 1
    1dec:	0c c0       	rjmp	.+24     	; 0x1e06 <_ZN5Print10printFloatEdh+0x88>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1dee:	2f ef       	ldi	r18, 0xFF	; 255
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	5f e4       	ldi	r21, 0x4F	; 79
    1df6:	c7 01       	movw	r24, r14
    1df8:	b6 01       	movw	r22, r12
    1dfa:	0e 94 23 0b 	call	0x1646	; 0x1646 <__gesf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	9c f4       	brge	.+38     	; 0x1e28 <_ZN5Print10printFloatEdh+0xaa>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e02:	6a ef       	ldi	r22, 0xFA	; 250
    1e04:	71 e0       	ldi	r23, 0x01	; 1
    1e06:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	df 90       	pop	r13
    1e12:	cf 90       	pop	r12
    1e14:	bf 90       	pop	r11
    1e16:	af 90       	pop	r10
    1e18:	9f 90       	pop	r9
    1e1a:	8f 90       	pop	r8
    1e1c:	7f 90       	pop	r7
    1e1e:	6f 90       	pop	r6
    1e20:	5f 90       	pop	r5
    1e22:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e24:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1e28:	2f ef       	ldi	r18, 0xFF	; 255
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	5f ec       	ldi	r21, 0xCF	; 207
    1e30:	c7 01       	movw	r24, r14
    1e32:	b6 01       	movw	r22, r12
    1e34:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
    1e38:	87 fd       	sbrc	r24, 7
    1e3a:	e3 cf       	rjmp	.-58     	; 0x1e02 <_ZN5Print10printFloatEdh+0x84>
  
  // Handle negative numbers
  if (number < 0.0)
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	a9 01       	movw	r20, r18
    1e42:	c7 01       	movw	r24, r14
    1e44:	b6 01       	movw	r22, r12
    1e46:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
    1e4a:	87 ff       	sbrs	r24, 7
    1e4c:	0a c0       	rjmp	.+20     	; 0x1e62 <_ZN5Print10printFloatEdh+0xe4>
  {
     n += print('-');
    1e4e:	6d e2       	ldi	r22, 0x2D	; 45
    1e50:	ce 01       	movw	r24, r28
    1e52:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <_ZN5Print5printEc>
    1e56:	4c 01       	movw	r8, r24
     number = -number;
    1e58:	f7 fa       	bst	r15, 7
    1e5a:	f0 94       	com	r15
    1e5c:	f7 f8       	bld	r15, 7
    1e5e:	f0 94       	com	r15
    1e60:	02 c0       	rjmp	.+4      	; 0x1e66 <_ZN5Print10printFloatEdh+0xe8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1e62:	81 2c       	mov	r8, r1
    1e64:	91 2c       	mov	r9, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1e66:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1e70:	ab 14       	cp	r10, r11
    1e72:	41 f0       	breq	.+16     	; 0x1e84 <_ZN5Print10printFloatEdh+0x106>
    rounding /= 10.0;
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1e80:	a3 94       	inc	r10
    1e82:	f6 cf       	rjmp	.-20     	; 0x1e70 <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
  
  number += rounding;
    1e84:	9b 01       	movw	r18, r22
    1e86:	ac 01       	movw	r20, r24
    1e88:	c7 01       	movw	r24, r14
    1e8a:	b6 01       	movw	r22, r12
    1e8c:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
    1e90:	2b 01       	movw	r4, r22
    1e92:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1e94:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__fixunssfsi>
    1e98:	6b 01       	movw	r12, r22
    1e9a:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    1e9c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__floatunsisf>
    1ea0:	9b 01       	movw	r18, r22
    1ea2:	ac 01       	movw	r20, r24
    1ea4:	c3 01       	movw	r24, r6
    1ea6:	b2 01       	movw	r22, r4
    1ea8:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    1eac:	2b 01       	movw	r4, r22
    1eae:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1eb0:	2a e0       	ldi	r18, 0x0A	; 10
    1eb2:	b7 01       	movw	r22, r14
    1eb4:	a6 01       	movw	r20, r12
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1ebc:	7c 01       	movw	r14, r24
    1ebe:	e8 0c       	add	r14, r8
    1ec0:	f9 1c       	adc	r15, r9

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1ec2:	bb 20       	and	r11, r11
    1ec4:	39 f0       	breq	.+14     	; 0x1ed4 <_ZN5Print10printFloatEdh+0x156>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1ec6:	6e ef       	ldi	r22, 0xFE	; 254
    1ec8:	71 e0       	ldi	r23, 0x01	; 1
    1eca:	ce 01       	movw	r24, r28
    1ecc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1ed0:	e8 0e       	add	r14, r24
    1ed2:	f9 1e       	adc	r15, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1ed4:	db 2c       	mov	r13, r11
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1ed6:	dd 20       	and	r13, r13
    1ed8:	39 f1       	breq	.+78     	; 0x1f28 <_ZN5Print10printFloatEdh+0x1aa>
  {
    remainder *= 10.0;
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	c3 01       	movw	r24, r6
    1ee4:	b2 01       	movw	r22, r4
    1ee6:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    1eea:	2b 01       	movw	r4, r22
    1eec:	3c 01       	movw	r6, r24
    int toPrint = int(remainder);
    1eee:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1ef2:	4b 01       	movw	r8, r22
    1ef4:	77 0f       	add	r23, r23
    1ef6:	aa 08       	sbc	r10, r10
    1ef8:	bb 08       	sbc	r11, r11
    1efa:	2a e0       	ldi	r18, 0x0A	; 10
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	b5 01       	movw	r22, r10
    1f00:	a4 01       	movw	r20, r8
    1f02:	ce 01       	movw	r24, r28
    1f04:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1f08:	e8 0e       	add	r14, r24
    1f0a:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    1f0c:	c5 01       	movw	r24, r10
    1f0e:	b4 01       	movw	r22, r8
    1f10:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__floatsisf>
    1f14:	9b 01       	movw	r18, r22
    1f16:	ac 01       	movw	r20, r24
    1f18:	c3 01       	movw	r24, r6
    1f1a:	b2 01       	movw	r22, r4
    1f1c:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    1f20:	2b 01       	movw	r4, r22
    1f22:	3c 01       	movw	r6, r24
    1f24:	da 94       	dec	r13
    1f26:	d7 cf       	rjmp	.-82     	; 0x1ed6 <_ZN5Print10printFloatEdh+0x158>
  } 
  
  return n;
}
    1f28:	c7 01       	movw	r24, r14
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	ff 90       	pop	r15
    1f30:	ef 90       	pop	r14
    1f32:	df 90       	pop	r13
    1f34:	cf 90       	pop	r12
    1f36:	bf 90       	pop	r11
    1f38:	af 90       	pop	r10
    1f3a:	9f 90       	pop	r9
    1f3c:	8f 90       	pop	r8
    1f3e:	7f 90       	pop	r7
    1f40:	6f 90       	pop	r6
    1f42:	5f 90       	pop	r5
    1f44:	4f 90       	pop	r4
    1f46:	08 95       	ret

00001f48 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1f48:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <_ZN5Print10printFloatEdh>

00001f4c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1f56:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_ZN5Print10printFloatEdh>
    1f5a:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN5Print7printlnEv>
  return n;
}
    1f62:	80 0f       	add	r24, r16
    1f64:	91 1f       	adc	r25, r17
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	08 95       	ret

00001f70 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1f70:	1f 92       	push	r1
    1f72:	0f 92       	push	r0
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	0f 92       	push	r0
    1f78:	11 24       	eor	r1, r1
    1f7a:	2f 93       	push	r18
    1f7c:	3f 93       	push	r19
    1f7e:	8f 93       	push	r24
    1f80:	9f 93       	push	r25
    1f82:	af 93       	push	r26
    1f84:	bf 93       	push	r27
    1f86:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer0_millis>
    1f8a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer0_millis+0x1>
    1f8e:	a0 91 a8 03 	lds	r26, 0x03A8	; 0x8003a8 <timer0_millis+0x2>
    1f92:	b0 91 a9 03 	lds	r27, 0x03A9	; 0x8003a9 <timer0_millis+0x3>
    1f96:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <timer0_fract>
    1f9a:	23 e0       	ldi	r18, 0x03	; 3
    1f9c:	23 0f       	add	r18, r19
    1f9e:	2d 37       	cpi	r18, 0x7D	; 125
    1fa0:	20 f4       	brcc	.+8      	; 0x1faa <__vector_16+0x3a>
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	a1 1d       	adc	r26, r1
    1fa6:	b1 1d       	adc	r27, r1
    1fa8:	05 c0       	rjmp	.+10     	; 0x1fb4 <__vector_16+0x44>
    1faa:	26 e8       	ldi	r18, 0x86	; 134
    1fac:	23 0f       	add	r18, r19
    1fae:	02 96       	adiw	r24, 0x02	; 2
    1fb0:	a1 1d       	adc	r26, r1
    1fb2:	b1 1d       	adc	r27, r1
    1fb4:	20 93 a5 03 	sts	0x03A5, r18	; 0x8003a5 <timer0_fract>
    1fb8:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <timer0_millis>
    1fbc:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <timer0_millis+0x1>
    1fc0:	a0 93 a8 03 	sts	0x03A8, r26	; 0x8003a8 <timer0_millis+0x2>
    1fc4:	b0 93 a9 03 	sts	0x03A9, r27	; 0x8003a9 <timer0_millis+0x3>
    1fc8:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <timer0_overflow_count>
    1fcc:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <timer0_overflow_count+0x1>
    1fd0:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <timer0_overflow_count+0x2>
    1fd4:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <timer0_overflow_count+0x3>
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	a1 1d       	adc	r26, r1
    1fdc:	b1 1d       	adc	r27, r1
    1fde:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <timer0_overflow_count>
    1fe2:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <timer0_overflow_count+0x1>
    1fe6:	a0 93 ac 03 	sts	0x03AC, r26	; 0x8003ac <timer0_overflow_count+0x2>
    1fea:	b0 93 ad 03 	sts	0x03AD, r27	; 0x8003ad <timer0_overflow_count+0x3>
    1fee:	bf 91       	pop	r27
    1ff0:	af 91       	pop	r26
    1ff2:	9f 91       	pop	r25
    1ff4:	8f 91       	pop	r24
    1ff6:	3f 91       	pop	r19
    1ff8:	2f 91       	pop	r18
    1ffa:	0f 90       	pop	r0
    1ffc:	0f be       	out	0x3f, r0	; 63
    1ffe:	0f 90       	pop	r0
    2000:	1f 90       	pop	r1
    2002:	18 95       	reti

00002004 <micros>:
    2004:	3f b7       	in	r19, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <timer0_overflow_count>
    200c:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <timer0_overflow_count+0x1>
    2010:	a0 91 ac 03 	lds	r26, 0x03AC	; 0x8003ac <timer0_overflow_count+0x2>
    2014:	b0 91 ad 03 	lds	r27, 0x03AD	; 0x8003ad <timer0_overflow_count+0x3>
    2018:	26 b5       	in	r18, 0x26	; 38
    201a:	a8 9b       	sbis	0x15, 0	; 21
    201c:	05 c0       	rjmp	.+10     	; 0x2028 <micros+0x24>
    201e:	2f 3f       	cpi	r18, 0xFF	; 255
    2020:	19 f0       	breq	.+6      	; 0x2028 <micros+0x24>
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	a1 1d       	adc	r26, r1
    2026:	b1 1d       	adc	r27, r1
    2028:	3f bf       	out	0x3f, r19	; 63
    202a:	ba 2f       	mov	r27, r26
    202c:	a9 2f       	mov	r26, r25
    202e:	98 2f       	mov	r25, r24
    2030:	88 27       	eor	r24, r24
    2032:	82 0f       	add	r24, r18
    2034:	91 1d       	adc	r25, r1
    2036:	a1 1d       	adc	r26, r1
    2038:	b1 1d       	adc	r27, r1
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	42 e0       	ldi	r20, 0x02	; 2
    2040:	66 0f       	add	r22, r22
    2042:	77 1f       	adc	r23, r23
    2044:	88 1f       	adc	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	4a 95       	dec	r20
    204a:	d1 f7       	brne	.-12     	; 0x2040 <micros+0x3c>
    204c:	08 95       	ret

0000204e <delay>:
    204e:	8f 92       	push	r8
    2050:	9f 92       	push	r9
    2052:	af 92       	push	r10
    2054:	bf 92       	push	r11
    2056:	cf 92       	push	r12
    2058:	df 92       	push	r13
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	6b 01       	movw	r12, r22
    2060:	7c 01       	movw	r14, r24
    2062:	0e 94 02 10 	call	0x2004	; 0x2004 <micros>
    2066:	4b 01       	movw	r8, r22
    2068:	5c 01       	movw	r10, r24
    206a:	c1 14       	cp	r12, r1
    206c:	d1 04       	cpc	r13, r1
    206e:	e1 04       	cpc	r14, r1
    2070:	f1 04       	cpc	r15, r1
    2072:	01 f1       	breq	.+64     	; 0x20b4 <delay+0x66>
    2074:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <yield>
    2078:	0e 94 02 10 	call	0x2004	; 0x2004 <micros>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	88 19       	sub	r24, r8
    2082:	99 09       	sbc	r25, r9
    2084:	aa 09       	sbc	r26, r10
    2086:	bb 09       	sbc	r27, r11
    2088:	88 3e       	cpi	r24, 0xE8	; 232
    208a:	93 40       	sbci	r25, 0x03	; 3
    208c:	a1 05       	cpc	r26, r1
    208e:	b1 05       	cpc	r27, r1
    2090:	60 f3       	brcs	.-40     	; 0x206a <delay+0x1c>
    2092:	21 e0       	ldi	r18, 0x01	; 1
    2094:	c2 1a       	sub	r12, r18
    2096:	d1 08       	sbc	r13, r1
    2098:	e1 08       	sbc	r14, r1
    209a:	f1 08       	sbc	r15, r1
    209c:	88 ee       	ldi	r24, 0xE8	; 232
    209e:	88 0e       	add	r8, r24
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	98 1e       	adc	r9, r24
    20a4:	a1 1c       	adc	r10, r1
    20a6:	b1 1c       	adc	r11, r1
    20a8:	c1 14       	cp	r12, r1
    20aa:	d1 04       	cpc	r13, r1
    20ac:	e1 04       	cpc	r14, r1
    20ae:	f1 04       	cpc	r15, r1
    20b0:	19 f7       	brne	.-58     	; 0x2078 <delay+0x2a>
    20b2:	db cf       	rjmp	.-74     	; 0x206a <delay+0x1c>
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	df 90       	pop	r13
    20ba:	cf 90       	pop	r12
    20bc:	bf 90       	pop	r11
    20be:	af 90       	pop	r10
    20c0:	9f 90       	pop	r9
    20c2:	8f 90       	pop	r8
    20c4:	08 95       	ret

000020c6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    20c6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    20c8:	84 b5       	in	r24, 0x24	; 36
    20ca:	82 60       	ori	r24, 0x02	; 2
    20cc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    20ce:	84 b5       	in	r24, 0x24	; 36
    20d0:	81 60       	ori	r24, 0x01	; 1
    20d2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    20d4:	85 b5       	in	r24, 0x25	; 37
    20d6:	82 60       	ori	r24, 0x02	; 2
    20d8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    20da:	85 b5       	in	r24, 0x25	; 37
    20dc:	81 60       	ori	r24, 0x01	; 1
    20de:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    20e0:	ee e6       	ldi	r30, 0x6E	; 110
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	81 60       	ori	r24, 0x01	; 1
    20e8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    20ea:	e1 e8       	ldi	r30, 0x81	; 129
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    20f0:	80 81       	ld	r24, Z
    20f2:	82 60       	ori	r24, 0x02	; 2
    20f4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    20f6:	80 81       	ld	r24, Z
    20f8:	81 60       	ori	r24, 0x01	; 1
    20fa:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    20fc:	e0 e8       	ldi	r30, 0x80	; 128
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	81 60       	ori	r24, 0x01	; 1
    2104:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2106:	e1 eb       	ldi	r30, 0xB1	; 177
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	84 60       	ori	r24, 0x04	; 4
    210e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2110:	e0 eb       	ldi	r30, 0xB0	; 176
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	81 60       	ori	r24, 0x01	; 1
    2118:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    211a:	ea e7       	ldi	r30, 0x7A	; 122
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	84 60       	ori	r24, 0x04	; 4
    2122:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2124:	80 81       	ld	r24, Z
    2126:	82 60       	ori	r24, 0x02	; 2
    2128:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    212a:	80 81       	ld	r24, Z
    212c:	81 60       	ori	r24, 0x01	; 1
    212e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2130:	80 81       	ld	r24, Z
    2132:	80 68       	ori	r24, 0x80	; 128
    2134:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2136:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    213a:	08 95       	ret

0000213c <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    213c:	1f 93       	push	r17
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	18 2f       	mov	r17, r24
    2144:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2146:	61 e0       	ldi	r22, 0x01	; 1
    2148:	0e 94 26 11 	call	0x224c	; 0x224c <pinMode>
	if (val == 0)
    214c:	20 97       	sbiw	r28, 0x00	; 0
    214e:	11 f4       	brne	.+4      	; 0x2154 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	04 c0       	rjmp	.+8      	; 0x215c <analogWrite+0x20>
	}
	else if (val == 255)
    2154:	cf 3f       	cpi	r28, 0xFF	; 255
    2156:	d1 05       	cpc	r29, r1
    2158:	39 f4       	brne	.+14     	; 0x2168 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    215a:	61 e0       	ldi	r22, 0x01	; 1
    215c:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    2164:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2168:	e1 2f       	mov	r30, r17
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	ef 52       	subi	r30, 0x2F	; 47
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	e4 91       	lpm	r30, Z
    2172:	e3 30       	cpi	r30, 0x03	; 3
    2174:	f9 f0       	breq	.+62     	; 0x21b4 <analogWrite+0x78>
    2176:	48 f4       	brcc	.+18     	; 0x218a <analogWrite+0x4e>
    2178:	e1 30       	cpi	r30, 0x01	; 1
    217a:	b9 f0       	breq	.+46     	; 0x21aa <analogWrite+0x6e>
    217c:	e2 30       	cpi	r30, 0x02	; 2
    217e:	a1 f5       	brne	.+104    	; 0x21e8 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2180:	84 b5       	in	r24, 0x24	; 36
    2182:	80 62       	ori	r24, 0x20	; 32
    2184:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2186:	c8 bd       	out	0x28, r28	; 40
				break;
    2188:	34 c0       	rjmp	.+104    	; 0x21f2 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    218a:	e7 30       	cpi	r30, 0x07	; 7
    218c:	e9 f0       	breq	.+58     	; 0x21c8 <analogWrite+0x8c>
    218e:	e8 30       	cpi	r30, 0x08	; 8
    2190:	19 f1       	breq	.+70     	; 0x21d8 <analogWrite+0x9c>
    2192:	e4 30       	cpi	r30, 0x04	; 4
    2194:	49 f5       	brne	.+82     	; 0x21e8 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2196:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    219a:	80 62       	ori	r24, 0x20	; 32
    219c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    21a0:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    21a4:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    21a8:	24 c0       	rjmp	.+72     	; 0x21f2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    21aa:	84 b5       	in	r24, 0x24	; 36
    21ac:	80 68       	ori	r24, 0x80	; 128
    21ae:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    21b0:	c7 bd       	out	0x27, r28	; 39
				break;
    21b2:	1f c0       	rjmp	.+62     	; 0x21f2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    21b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    21b8:	80 68       	ori	r24, 0x80	; 128
    21ba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    21be:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    21c2:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    21c6:	15 c0       	rjmp	.+42     	; 0x21f2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    21c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    21cc:	80 68       	ori	r24, 0x80	; 128
    21ce:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    21d2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    21d6:	0d c0       	rjmp	.+26     	; 0x21f2 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    21d8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    21dc:	80 62       	ori	r24, 0x20	; 32
    21de:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    21e2:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    21e6:	05 c0       	rjmp	.+10     	; 0x21f2 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    21e8:	c0 38       	cpi	r28, 0x80	; 128
    21ea:	d1 05       	cpc	r29, r1
    21ec:	0c f0       	brlt	.+2      	; 0x21f0 <analogWrite+0xb4>
    21ee:	b5 cf       	rjmp	.-150    	; 0x215a <analogWrite+0x1e>
    21f0:	af cf       	rjmp	.-162    	; 0x2150 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	08 95       	ret

000021fa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    21fa:	83 30       	cpi	r24, 0x03	; 3
    21fc:	81 f0       	breq	.+32     	; 0x221e <turnOffPWM+0x24>
    21fe:	28 f4       	brcc	.+10     	; 0x220a <turnOffPWM+0x10>
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	99 f0       	breq	.+38     	; 0x222a <turnOffPWM+0x30>
    2204:	82 30       	cpi	r24, 0x02	; 2
    2206:	a1 f0       	breq	.+40     	; 0x2230 <turnOffPWM+0x36>
    2208:	08 95       	ret
    220a:	87 30       	cpi	r24, 0x07	; 7
    220c:	a9 f0       	breq	.+42     	; 0x2238 <turnOffPWM+0x3e>
    220e:	88 30       	cpi	r24, 0x08	; 8
    2210:	b9 f0       	breq	.+46     	; 0x2240 <turnOffPWM+0x46>
    2212:	84 30       	cpi	r24, 0x04	; 4
    2214:	d1 f4       	brne	.+52     	; 0x224a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2216:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    221a:	8f 7d       	andi	r24, 0xDF	; 223
    221c:	03 c0       	rjmp	.+6      	; 0x2224 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    221e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2222:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2224:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2228:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    222a:	84 b5       	in	r24, 0x24	; 36
    222c:	8f 77       	andi	r24, 0x7F	; 127
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2230:	84 b5       	in	r24, 0x24	; 36
    2232:	8f 7d       	andi	r24, 0xDF	; 223
    2234:	84 bd       	out	0x24, r24	; 36
    2236:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2238:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    223c:	8f 77       	andi	r24, 0x7F	; 127
    223e:	03 c0       	rjmp	.+6      	; 0x2246 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2240:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2244:	8f 7d       	andi	r24, 0xDF	; 223
    2246:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    224a:	08 95       	ret

0000224c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	fc 01       	movw	r30, r24
    2254:	eb 51       	subi	r30, 0x1B	; 27
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    225a:	fc 01       	movw	r30, r24
    225c:	e7 50       	subi	r30, 0x07	; 7
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2262:	88 23       	and	r24, r24
    2264:	61 f1       	breq	.+88     	; 0x22be <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	fc 01       	movw	r30, r24
    226e:	e9 5e       	subi	r30, 0xE9	; 233
    2270:	fe 4f       	sbci	r31, 0xFE	; 254
    2272:	c5 91       	lpm	r28, Z+
    2274:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2276:	fc 01       	movw	r30, r24
    2278:	e3 5f       	subi	r30, 0xF3	; 243
    227a:	fe 4f       	sbci	r31, 0xFE	; 254
    227c:	a5 91       	lpm	r26, Z+
    227e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2280:	61 11       	cpse	r22, r1
    2282:	09 c0       	rjmp	.+18     	; 0x2296 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2284:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2286:	f8 94       	cli
		*reg &= ~bit;
    2288:	88 81       	ld	r24, Y
    228a:	20 95       	com	r18
    228c:	82 23       	and	r24, r18
    228e:	88 83       	st	Y, r24
		*out &= ~bit;
    2290:	ec 91       	ld	r30, X
    2292:	2e 23       	and	r18, r30
    2294:	0b c0       	rjmp	.+22     	; 0x22ac <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2296:	62 30       	cpi	r22, 0x02	; 2
    2298:	61 f4       	brne	.+24     	; 0x22b2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    229a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    229c:	f8 94       	cli
		*reg &= ~bit;
    229e:	38 81       	ld	r19, Y
    22a0:	82 2f       	mov	r24, r18
    22a2:	80 95       	com	r24
    22a4:	83 23       	and	r24, r19
    22a6:	88 83       	st	Y, r24
		*out |= bit;
    22a8:	ec 91       	ld	r30, X
    22aa:	2e 2b       	or	r18, r30
    22ac:	2c 93       	st	X, r18
		SREG = oldSREG;
    22ae:	9f bf       	out	0x3f, r25	; 63
    22b0:	06 c0       	rjmp	.+12     	; 0x22be <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    22b2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    22b4:	f8 94       	cli
		*reg |= bit;
    22b6:	e8 81       	ld	r30, Y
    22b8:	2e 2b       	or	r18, r30
    22ba:	28 83       	st	Y, r18
		SREG = oldSREG;
    22bc:	8f bf       	out	0x3f, r24	; 63
	}
}
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	08 95       	ret

000022c4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    22c4:	1f 93       	push	r17
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	f9 01       	movw	r30, r18
    22d0:	ef 52       	subi	r30, 0x2F	; 47
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    22d6:	f9 01       	movw	r30, r18
    22d8:	eb 51       	subi	r30, 0x1B	; 27
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    22de:	f9 01       	movw	r30, r18
    22e0:	e7 50       	subi	r30, 0x07	; 7
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    22e6:	cc 23       	and	r28, r28
    22e8:	c9 f0       	breq	.+50     	; 0x231c <digitalWrite+0x58>
    22ea:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    22ec:	81 11       	cpse	r24, r1
    22ee:	0e 94 fd 10 	call	0x21fa	; 0x21fa <turnOffPWM>

	out = portOutputRegister(port);
    22f2:	ec 2f       	mov	r30, r28
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	ee 0f       	add	r30, r30
    22f8:	ff 1f       	adc	r31, r31
    22fa:	e3 5f       	subi	r30, 0xF3	; 243
    22fc:	fe 4f       	sbci	r31, 0xFE	; 254
    22fe:	a5 91       	lpm	r26, Z+
    2300:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2302:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2304:	f8 94       	cli

	if (val == LOW) {
    2306:	11 11       	cpse	r17, r1
    2308:	05 c0       	rjmp	.+10     	; 0x2314 <digitalWrite+0x50>
		*out &= ~bit;
    230a:	9c 91       	ld	r25, X
    230c:	ed 2f       	mov	r30, r29
    230e:	e0 95       	com	r30
    2310:	e9 23       	and	r30, r25
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <digitalWrite+0x54>
	} else {
		*out |= bit;
    2314:	ec 91       	ld	r30, X
    2316:	ed 2b       	or	r30, r29
    2318:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    231a:	8f bf       	out	0x3f, r24	; 63
}
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	1f 91       	pop	r17
    2322:	08 95       	ret

00002324 <_ZN6StringD1Ev>:

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
	return *this;
}
    2324:	fc 01       	movw	r30, r24
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <free>

0000232e <_ZN6String10invalidateEv>:
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	ec 01       	movw	r28, r24
    2334:	88 81       	ld	r24, Y
    2336:	99 81       	ldd	r25, Y+1	; 0x01
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	11 f0       	breq	.+4      	; 0x2340 <_ZN6String10invalidateEv+0x12>
    233c:	0e 94 78 19 	call	0x32f0	; 0x32f0 <free>
    2340:	19 82       	std	Y+1, r1	; 0x01
    2342:	18 82       	st	Y, r1
    2344:	1d 82       	std	Y+5, r1	; 0x05
    2346:	1c 82       	std	Y+4, r1	; 0x04
    2348:	1b 82       	std	Y+3, r1	; 0x03
    234a:	1a 82       	std	Y+2, r1	; 0x02
    234c:	df 91       	pop	r29
    234e:	cf 91       	pop	r28
    2350:	08 95       	ret

00002352 <_ZN6String12changeBufferEj>:
    2352:	0f 93       	push	r16
    2354:	1f 93       	push	r17
    2356:	cf 93       	push	r28
    2358:	df 93       	push	r29
    235a:	ec 01       	movw	r28, r24
    235c:	8b 01       	movw	r16, r22
    235e:	6f 5f       	subi	r22, 0xFF	; 255
    2360:	7f 4f       	sbci	r23, 0xFF	; 255
    2362:	88 81       	ld	r24, Y
    2364:	99 81       	ldd	r25, Y+1	; 0x01
    2366:	0e 94 10 1a 	call	0x3420	; 0x3420 <realloc>
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	31 f0       	breq	.+12     	; 0x237a <_ZN6String12changeBufferEj+0x28>
    236e:	99 83       	std	Y+1, r25	; 0x01
    2370:	88 83       	st	Y, r24
    2372:	1b 83       	std	Y+3, r17	; 0x03
    2374:	0a 83       	std	Y+2, r16	; 0x02
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	01 c0       	rjmp	.+2      	; 0x237c <_ZN6String12changeBufferEj+0x2a>
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	08 95       	ret

00002386 <_ZN6String7reserveEj>:
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	ec 01       	movw	r28, r24
    238c:	88 81       	ld	r24, Y
    238e:	99 81       	ldd	r25, Y+1	; 0x01
    2390:	89 2b       	or	r24, r25
    2392:	29 f0       	breq	.+10     	; 0x239e <_ZN6String7reserveEj+0x18>
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	9b 81       	ldd	r25, Y+3	; 0x03
    2398:	86 17       	cp	r24, r22
    239a:	97 07       	cpc	r25, r23
    239c:	60 f4       	brcc	.+24     	; 0x23b6 <_ZN6String7reserveEj+0x30>
    239e:	ce 01       	movw	r24, r28
    23a0:	0e 94 a9 11 	call	0x2352	; 0x2352 <_ZN6String12changeBufferEj>
    23a4:	88 23       	and	r24, r24
    23a6:	41 f0       	breq	.+16     	; 0x23b8 <_ZN6String7reserveEj+0x32>
    23a8:	8c 81       	ldd	r24, Y+4	; 0x04
    23aa:	9d 81       	ldd	r25, Y+5	; 0x05
    23ac:	89 2b       	or	r24, r25
    23ae:	19 f4       	brne	.+6      	; 0x23b6 <_ZN6String7reserveEj+0x30>
    23b0:	e8 81       	ld	r30, Y
    23b2:	f9 81       	ldd	r31, Y+1	; 0x01
    23b4:	10 82       	st	Z, r1
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	08 95       	ret

000023be <_ZN6String4copyEPKcj>:
    23be:	ef 92       	push	r14
    23c0:	ff 92       	push	r15
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	ec 01       	movw	r28, r24
    23cc:	7b 01       	movw	r14, r22
    23ce:	8a 01       	movw	r16, r20
    23d0:	ba 01       	movw	r22, r20
    23d2:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN6String7reserveEj>
    23d6:	81 11       	cpse	r24, r1
    23d8:	04 c0       	rjmp	.+8      	; 0x23e2 <_ZN6String4copyEPKcj+0x24>
    23da:	ce 01       	movw	r24, r28
    23dc:	0e 94 97 11 	call	0x232e	; 0x232e <_ZN6String10invalidateEv>
    23e0:	07 c0       	rjmp	.+14     	; 0x23f0 <_ZN6String4copyEPKcj+0x32>
    23e2:	1d 83       	std	Y+5, r17	; 0x05
    23e4:	0c 83       	std	Y+4, r16	; 0x04
    23e6:	b7 01       	movw	r22, r14
    23e8:	88 81       	ld	r24, Y
    23ea:	99 81       	ldd	r25, Y+1	; 0x01
    23ec:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <strcpy>
    23f0:	ce 01       	movw	r24, r28
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	ff 90       	pop	r15
    23fc:	ef 90       	pop	r14
    23fe:	08 95       	ret

00002400 <_ZN6StringC1EPKc>:
    2400:	fc 01       	movw	r30, r24
    2402:	11 82       	std	Z+1, r1	; 0x01
    2404:	10 82       	st	Z, r1
    2406:	13 82       	std	Z+3, r1	; 0x03
    2408:	12 82       	std	Z+2, r1	; 0x02
    240a:	15 82       	std	Z+5, r1	; 0x05
    240c:	14 82       	std	Z+4, r1	; 0x04
    240e:	61 15       	cp	r22, r1
    2410:	71 05       	cpc	r23, r1
    2412:	51 f0       	breq	.+20     	; 0x2428 <_ZN6StringC1EPKc+0x28>
    2414:	fb 01       	movw	r30, r22
    2416:	01 90       	ld	r0, Z+
    2418:	00 20       	and	r0, r0
    241a:	e9 f7       	brne	.-6      	; 0x2416 <_ZN6StringC1EPKc+0x16>
    241c:	31 97       	sbiw	r30, 0x01	; 1
    241e:	af 01       	movw	r20, r30
    2420:	46 1b       	sub	r20, r22
    2422:	57 0b       	sbc	r21, r23
    2424:	0c 94 df 11 	jmp	0x23be	; 0x23be <_ZN6String4copyEPKcj>
    2428:	08 95       	ret

0000242a <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	ec 01       	movw	r28, r24
	if (cstr) copy(cstr, strlen(cstr));
    2430:	61 15       	cp	r22, r1
    2432:	71 05       	cpc	r23, r1
    2434:	59 f0       	breq	.+22     	; 0x244c <_ZN6StringaSEPKc+0x22>
    2436:	fb 01       	movw	r30, r22
    2438:	01 90       	ld	r0, Z+
    243a:	00 20       	and	r0, r0
    243c:	e9 f7       	brne	.-6      	; 0x2438 <_ZN6StringaSEPKc+0xe>
    243e:	31 97       	sbiw	r30, 0x01	; 1
    2440:	af 01       	movw	r20, r30
    2442:	46 1b       	sub	r20, r22
    2444:	57 0b       	sbc	r21, r23
    2446:	0e 94 df 11 	call	0x23be	; 0x23be <_ZN6String4copyEPKcj>
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <_ZN6StringaSEPKc+0x26>
	else invalidate();
    244c:	0e 94 97 11 	call	0x232e	; 0x232e <_ZN6String10invalidateEv>
	
	return *this;
}
    2450:	ce 01       	movw	r24, r28
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <_ZN24Adafruit_HMC5883_UnifiedD1Ev>:
    value = Wire.receive();
  #endif  
  Wire.endTransmission();

  return value;
}
    2458:	08 95       	ret

0000245a <_ZN24Adafruit_HMC5883_Unified9getSensorEP8sensor_t>:
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	8c 01       	movw	r16, r24
    2464:	eb 01       	movw	r28, r22
    2466:	88 e2       	ldi	r24, 0x28	; 40
    2468:	fb 01       	movw	r30, r22
    246a:	11 92       	st	Z+, r1
    246c:	8a 95       	dec	r24
    246e:	e9 f7       	brne	.-6      	; 0x246a <_ZN24Adafruit_HMC5883_Unified9getSensorEP8sensor_t+0x10>
    2470:	4b e0       	ldi	r20, 0x0B	; 11
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	60 e0       	ldi	r22, 0x00	; 0
    2476:	72 e0       	ldi	r23, 0x02	; 2
    2478:	ce 01       	movw	r24, r28
    247a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <strncpy>
    247e:	1b 86       	std	Y+11, r1	; 0x0b
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a0 e0       	ldi	r26, 0x00	; 0
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	8c 87       	std	Y+12, r24	; 0x0c
    248a:	9d 87       	std	Y+13, r25	; 0x0d
    248c:	ae 87       	std	Y+14, r26	; 0x0e
    248e:	bf 87       	std	Y+15, r27	; 0x0f
    2490:	f8 01       	movw	r30, r16
    2492:	84 89       	ldd	r24, Z+20	; 0x14
    2494:	95 89       	ldd	r25, Z+21	; 0x15
    2496:	a6 89       	ldd	r26, Z+22	; 0x16
    2498:	b7 89       	ldd	r27, Z+23	; 0x17
    249a:	88 8b       	std	Y+16, r24	; 0x10
    249c:	99 8b       	std	Y+17, r25	; 0x11
    249e:	aa 8b       	std	Y+18, r26	; 0x12
    24a0:	bb 8b       	std	Y+19, r27	; 0x13
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	a0 e0       	ldi	r26, 0x00	; 0
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	8c 8b       	std	Y+20, r24	; 0x14
    24ac:	9d 8b       	std	Y+21, r25	; 0x15
    24ae:	ae 8b       	std	Y+22, r26	; 0x16
    24b0:	bf 8b       	std	Y+23, r27	; 0x17
    24b2:	1c a2       	std	Y+36, r1	; 0x24
    24b4:	1d a2       	std	Y+37, r1	; 0x25
    24b6:	1e a2       	std	Y+38, r1	; 0x26
    24b8:	1f a2       	std	Y+39, r1	; 0x27
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	a8 e4       	ldi	r26, 0x48	; 72
    24c0:	b4 e4       	ldi	r27, 0x44	; 68
    24c2:	88 8f       	std	Y+24, r24	; 0x18
    24c4:	99 8f       	std	Y+25, r25	; 0x19
    24c6:	aa 8f       	std	Y+26, r26	; 0x1a
    24c8:	bb 8f       	std	Y+27, r27	; 0x1b
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	a8 e4       	ldi	r26, 0x48	; 72
    24d0:	b4 ec       	ldi	r27, 0xC4	; 196
    24d2:	8c 8f       	std	Y+28, r24	; 0x1c
    24d4:	9d 8f       	std	Y+29, r25	; 0x1d
    24d6:	ae 8f       	std	Y+30, r26	; 0x1e
    24d8:	bf 8f       	std	Y+31, r27	; 0x1f
    24da:	8d ec       	ldi	r24, 0xCD	; 205
    24dc:	9c ec       	ldi	r25, 0xCC	; 204
    24de:	ac e4       	ldi	r26, 0x4C	; 76
    24e0:	be e3       	ldi	r27, 0x3E	; 62
    24e2:	88 a3       	std	Y+32, r24	; 0x20
    24e4:	99 a3       	std	Y+33, r25	; 0x21
    24e6:	aa a3       	std	Y+34, r26	; 0x22
    24e8:	bb a3       	std	Y+35, r27	; 0x23
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	08 95       	ret

000024f4 <_ZN24Adafruit_HMC5883_UnifiedD0Ev>:
    24f4:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <_ZdlPv>

000024f8 <_ZN24Adafruit_HMC5883_UnifiedC1El>:
    24f8:	2c e0       	ldi	r18, 0x0C	; 12
    24fa:	32 e0       	ldi	r19, 0x02	; 2
    24fc:	fc 01       	movw	r30, r24
    24fe:	31 83       	std	Z+1, r19	; 0x01
    2500:	20 83       	st	Z, r18
    2502:	44 8b       	std	Z+20, r20	; 0x14
    2504:	55 8b       	std	Z+21, r21	; 0x15
    2506:	66 8b       	std	Z+22, r22	; 0x16
    2508:	77 8b       	std	Z+23, r23	; 0x17
    250a:	08 95       	ret

0000250c <_ZN24Adafruit_HMC5883_Unified4readEv>:
/*!
    @brief  Reads the raw data from the sensor
*/
/**************************************************************************/
void Adafruit_HMC5883_Unified::read()
{
    250c:	6f 92       	push	r6
    250e:	7f 92       	push	r7
    2510:	8f 92       	push	r8
    2512:	9f 92       	push	r9
    2514:	af 92       	push	r10
    2516:	bf 92       	push	r11
    2518:	cf 92       	push	r12
    251a:	df 92       	push	r13
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	8c 01       	movw	r16, r24
  // Read the magnetometer
  Wire.beginTransmission((byte)HMC5883_ADDRESS_MAG);
    252a:	6e e1       	ldi	r22, 0x1E	; 30
    252c:	8e ea       	ldi	r24, 0xAE	; 174
    252e:	93 e0       	ldi	r25, 0x03	; 3
    2530:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN7TwoWire17beginTransmissionEh>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2534:	63 e0       	ldi	r22, 0x03	; 3
    2536:	8e ea       	ldi	r24, 0xAE	; 174
    2538:	93 e0       	ldi	r25, 0x03	; 3
    253a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN7TwoWire5writeEh>
  #if ARDUINO >= 100
    Wire.write(HMC5883_REGISTER_MAG_OUT_X_H_M);
  #else
    Wire.send(HMC5883_REGISTER_MAG_OUT_X_H_M);
  #endif
  Wire.endTransmission();
    253e:	8e ea       	ldi	r24, 0xAE	; 174
    2540:	93 e0       	ldi	r25, 0x03	; 3
    2542:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)HMC5883_ADDRESS_MAG, (byte)6);
    2546:	46 e0       	ldi	r20, 0x06	; 6
    2548:	6e e1       	ldi	r22, 0x1E	; 30
    254a:	8e ea       	ldi	r24, 0xAE	; 174
    254c:	93 e0       	ldi	r25, 0x03	; 3
    254e:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <_ZN7TwoWire11requestFromEhh>
  
  // Wait around until enough data is available
  while (Wire.available() < 6);
    2552:	8e ea       	ldi	r24, 0xAE	; 174
    2554:	93 e0       	ldi	r25, 0x03	; 3
    2556:	0e 94 44 15 	call	0x2a88	; 0x2a88 <_ZN7TwoWire9availableEv>
    255a:	06 97       	sbiw	r24, 0x06	; 6
    255c:	d4 f3       	brlt	.-12     	; 0x2552 <_ZN24Adafruit_HMC5883_Unified4readEv+0x46>

  // Note high before low (different than accel)  
  #if ARDUINO >= 100
    uint8_t xhi = Wire.read();
    255e:	8e ea       	ldi	r24, 0xAE	; 174
    2560:	93 e0       	ldi	r25, 0x03	; 3
    2562:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
    2566:	68 2e       	mov	r6, r24
    uint8_t xlo = Wire.read();
    2568:	8e ea       	ldi	r24, 0xAE	; 174
    256a:	93 e0       	ldi	r25, 0x03	; 3
    256c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
    2570:	78 2e       	mov	r7, r24
    uint8_t zhi = Wire.read();
    2572:	8e ea       	ldi	r24, 0xAE	; 174
    2574:	93 e0       	ldi	r25, 0x03	; 3
    2576:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
    257a:	a8 2e       	mov	r10, r24
    uint8_t zlo = Wire.read();
    257c:	8e ea       	ldi	r24, 0xAE	; 174
    257e:	93 e0       	ldi	r25, 0x03	; 3
    2580:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
    2584:	b8 2e       	mov	r11, r24
    uint8_t yhi = Wire.read();
    2586:	8e ea       	ldi	r24, 0xAE	; 174
    2588:	93 e0       	ldi	r25, 0x03	; 3
    258a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
    258e:	88 2e       	mov	r8, r24
    uint8_t ylo = Wire.read();
    2590:	8e ea       	ldi	r24, 0xAE	; 174
    2592:	93 e0       	ldi	r25, 0x03	; 3
    2594:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN7TwoWire4readEv>
    2598:	98 2e       	mov	r9, r24
    uint8_t yhi = Wire.receive();
    uint8_t ylo = Wire.receive();
  #endif
  
  // Shift values to create properly formed integer (low byte first)
  _magData.x = (int16_t)(xlo | ((int16_t)xhi << 8));
    259a:	d6 2c       	mov	r13, r6
    259c:	c1 2c       	mov	r12, r1
    259e:	b6 01       	movw	r22, r12
    25a0:	67 29       	or	r22, r7
    25a2:	07 2e       	mov	r0, r23
    25a4:	00 0c       	add	r0, r0
    25a6:	88 0b       	sbc	r24, r24
    25a8:	99 0b       	sbc	r25, r25
    25aa:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__floatsisf>
    25ae:	f8 01       	movw	r30, r16
    25b0:	64 83       	std	Z+4, r22	; 0x04
    25b2:	75 83       	std	Z+5, r23	; 0x05
    25b4:	86 83       	std	Z+6, r24	; 0x06
    25b6:	97 83       	std	Z+7, r25	; 0x07
  _magData.y = (int16_t)(ylo | ((int16_t)yhi << 8));
    25b8:	f8 2c       	mov	r15, r8
    25ba:	e1 2c       	mov	r14, r1
    25bc:	b7 01       	movw	r22, r14
    25be:	69 29       	or	r22, r9
    25c0:	07 2e       	mov	r0, r23
    25c2:	00 0c       	add	r0, r0
    25c4:	88 0b       	sbc	r24, r24
    25c6:	99 0b       	sbc	r25, r25
    25c8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__floatsisf>
    25cc:	f8 01       	movw	r30, r16
    25ce:	60 87       	std	Z+8, r22	; 0x08
    25d0:	71 87       	std	Z+9, r23	; 0x09
    25d2:	82 87       	std	Z+10, r24	; 0x0a
    25d4:	93 87       	std	Z+11, r25	; 0x0b
  _magData.z = (int16_t)(zlo | ((int16_t)zhi << 8));
    25d6:	da 2d       	mov	r29, r10
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	cf 2f       	mov	r28, r31
    25dc:	be 01       	movw	r22, r28
    25de:	6b 29       	or	r22, r11
    25e0:	07 2e       	mov	r0, r23
    25e2:	00 0c       	add	r0, r0
    25e4:	88 0b       	sbc	r24, r24
    25e6:	99 0b       	sbc	r25, r25
    25e8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__floatsisf>
    25ec:	f8 01       	movw	r30, r16
    25ee:	64 87       	std	Z+12, r22	; 0x0c
    25f0:	75 87       	std	Z+13, r23	; 0x0d
    25f2:	86 87       	std	Z+14, r24	; 0x0e
    25f4:	97 87       	std	Z+15, r25	; 0x0f
  
  // ToDo: Calculate orientation
  _magData.orientation = 0.0;
    25f6:	10 8a       	std	Z+16, r1	; 0x10
    25f8:	11 8a       	std	Z+17, r1	; 0x11
    25fa:	12 8a       	std	Z+18, r1	; 0x12
    25fc:	13 8a       	std	Z+19, r1	; 0x13
}
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	1f 91       	pop	r17
    2604:	0f 91       	pop	r16
    2606:	ff 90       	pop	r15
    2608:	ef 90       	pop	r14
    260a:	df 90       	pop	r13
    260c:	cf 90       	pop	r12
    260e:	bf 90       	pop	r11
    2610:	af 90       	pop	r10
    2612:	9f 90       	pop	r9
    2614:	8f 90       	pop	r8
    2616:	7f 90       	pop	r7
    2618:	6f 90       	pop	r6
    261a:	08 95       	ret

0000261c <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t>:
/**************************************************************************/
/*! 
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_HMC5883_Unified::getEvent(sensors_event_t *event) {
    261c:	cf 92       	push	r12
    261e:	df 92       	push	r13
    2620:	ef 92       	push	r14
    2622:	ff 92       	push	r15
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	8c 01       	movw	r16, r24
    262e:	eb 01       	movw	r28, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
    2630:	84 e2       	ldi	r24, 0x24	; 36
    2632:	fb 01       	movw	r30, r22
    2634:	11 92       	st	Z+, r1
    2636:	8a 95       	dec	r24
    2638:	e9 f7       	brne	.-6      	; 0x2634 <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t+0x18>

  /* Read new data */
  read();
    263a:	c8 01       	movw	r24, r16
    263c:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN24Adafruit_HMC5883_Unified4readEv>
  
  event->version   = sizeof(sensors_event_t);
    2640:	84 e2       	ldi	r24, 0x24	; 36
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a0 e0       	ldi	r26, 0x00	; 0
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	88 83       	st	Y, r24
    264a:	99 83       	std	Y+1, r25	; 0x01
    264c:	aa 83       	std	Y+2, r26	; 0x02
    264e:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _sensorID;
    2650:	f8 01       	movw	r30, r16
    2652:	84 89       	ldd	r24, Z+20	; 0x14
    2654:	95 89       	ldd	r25, Z+21	; 0x15
    2656:	a6 89       	ldd	r26, Z+22	; 0x16
    2658:	b7 89       	ldd	r27, Z+23	; 0x17
    265a:	8c 83       	std	Y+4, r24	; 0x04
    265c:	9d 83       	std	Y+5, r25	; 0x05
    265e:	ae 83       	std	Y+6, r26	; 0x06
    2660:	bf 83       	std	Y+7, r27	; 0x07
  event->type      = SENSOR_TYPE_MAGNETIC_FIELD;
    2662:	82 e0       	ldi	r24, 0x02	; 2
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	a0 e0       	ldi	r26, 0x00	; 0
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	88 87       	std	Y+8, r24	; 0x08
    266c:	99 87       	std	Y+9, r25	; 0x09
    266e:	aa 87       	std	Y+10, r26	; 0x0a
    2670:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = 0;
    2672:	18 8a       	std	Y+16, r1	; 0x10
    2674:	19 8a       	std	Y+17, r1	; 0x11
    2676:	1a 8a       	std	Y+18, r1	; 0x12
    2678:	1b 8a       	std	Y+19, r1	; 0x13
  event->magnetic.x = _magData.x / _hmc5883_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA;
    267a:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <_ZL21_hmc5883_Gauss_LSB_XY>
    267e:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <_ZL21_hmc5883_Gauss_LSB_XY+0x1>
    2682:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <_ZL21_hmc5883_Gauss_LSB_XY+0x2>
    2686:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <_ZL21_hmc5883_Gauss_LSB_XY+0x3>
    268a:	a7 01       	movw	r20, r14
    268c:	96 01       	movw	r18, r12
    268e:	64 81       	ldd	r22, Z+4	; 0x04
    2690:	75 81       	ldd	r23, Z+5	; 0x05
    2692:	86 81       	ldd	r24, Z+6	; 0x06
    2694:	97 81       	ldd	r25, Z+7	; 0x07
    2696:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	48 ec       	ldi	r20, 0xC8	; 200
    26a0:	52 e4       	ldi	r21, 0x42	; 66
    26a2:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    26a6:	6c 8b       	std	Y+20, r22	; 0x14
    26a8:	7d 8b       	std	Y+21, r23	; 0x15
    26aa:	8e 8b       	std	Y+22, r24	; 0x16
    26ac:	9f 8b       	std	Y+23, r25	; 0x17
  event->magnetic.y = _magData.y / _hmc5883_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA;
    26ae:	a7 01       	movw	r20, r14
    26b0:	96 01       	movw	r18, r12
    26b2:	f8 01       	movw	r30, r16
    26b4:	60 85       	ldd	r22, Z+8	; 0x08
    26b6:	71 85       	ldd	r23, Z+9	; 0x09
    26b8:	82 85       	ldd	r24, Z+10	; 0x0a
    26ba:	93 85       	ldd	r25, Z+11	; 0x0b
    26bc:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	48 ec       	ldi	r20, 0xC8	; 200
    26c6:	52 e4       	ldi	r21, 0x42	; 66
    26c8:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    26cc:	68 8f       	std	Y+24, r22	; 0x18
    26ce:	79 8f       	std	Y+25, r23	; 0x19
    26d0:	8a 8f       	std	Y+26, r24	; 0x1a
    26d2:	9b 8f       	std	Y+27, r25	; 0x1b
  event->magnetic.z = _magData.z / _hmc5883_Gauss_LSB_Z * SENSORS_GAUSS_TO_MICROTESLA;
    26d4:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <_ZL20_hmc5883_Gauss_LSB_Z>
    26d8:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <_ZL20_hmc5883_Gauss_LSB_Z+0x1>
    26dc:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <_ZL20_hmc5883_Gauss_LSB_Z+0x2>
    26e0:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <_ZL20_hmc5883_Gauss_LSB_Z+0x3>
    26e4:	f8 01       	movw	r30, r16
    26e6:	64 85       	ldd	r22, Z+12	; 0x0c
    26e8:	75 85       	ldd	r23, Z+13	; 0x0d
    26ea:	86 85       	ldd	r24, Z+14	; 0x0e
    26ec:	97 85       	ldd	r25, Z+15	; 0x0f
    26ee:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	48 ec       	ldi	r20, 0xC8	; 200
    26f8:	52 e4       	ldi	r21, 0x42	; 66
    26fa:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    26fe:	6c 8f       	std	Y+28, r22	; 0x1c
    2700:	7d 8f       	std	Y+29, r23	; 0x1d
    2702:	8e 8f       	std	Y+30, r24	; 0x1e
    2704:	9f 8f       	std	Y+31, r25	; 0x1f
  
  return true;
}
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ff 90       	pop	r15
    2712:	ef 90       	pop	r14
    2714:	df 90       	pop	r13
    2716:	cf 90       	pop	r12
    2718:	08 95       	ret

0000271a <_ZN6KalmanC1Ev>:
 e-mail   :  kristianl@tkjelectronics.com
 */

#include "Kalman.h"

Kalman::Kalman() {
    271a:	fc 01       	movw	r30, r24
    /* We will set the variables like so, these can also be tuned by the user */
    Q_angle = 0.001f;
    271c:	8f e6       	ldi	r24, 0x6F	; 111
    271e:	92 e1       	ldi	r25, 0x12	; 18
    2720:	a3 e8       	ldi	r26, 0x83	; 131
    2722:	ba e3       	ldi	r27, 0x3A	; 58
    2724:	80 83       	st	Z, r24
    2726:	91 83       	std	Z+1, r25	; 0x01
    2728:	a2 83       	std	Z+2, r26	; 0x02
    272a:	b3 83       	std	Z+3, r27	; 0x03
    Q_bias = 0.003f;
    272c:	86 ea       	ldi	r24, 0xA6	; 166
    272e:	9b e9       	ldi	r25, 0x9B	; 155
    2730:	a4 e4       	ldi	r26, 0x44	; 68
    2732:	bb e3       	ldi	r27, 0x3B	; 59
    2734:	84 83       	std	Z+4, r24	; 0x04
    2736:	95 83       	std	Z+5, r25	; 0x05
    2738:	a6 83       	std	Z+6, r26	; 0x06
    273a:	b7 83       	std	Z+7, r27	; 0x07
    R_measure = 0.03f;
    273c:	8f e8       	ldi	r24, 0x8F	; 143
    273e:	92 ec       	ldi	r25, 0xC2	; 194
    2740:	a5 ef       	ldi	r26, 0xF5	; 245
    2742:	bc e3       	ldi	r27, 0x3C	; 60
    2744:	80 87       	std	Z+8, r24	; 0x08
    2746:	91 87       	std	Z+9, r25	; 0x09
    2748:	a2 87       	std	Z+10, r26	; 0x0a
    274a:	b3 87       	std	Z+11, r27	; 0x0b

    angle = 0.0f; // Reset the angle
    274c:	14 86       	std	Z+12, r1	; 0x0c
    274e:	15 86       	std	Z+13, r1	; 0x0d
    2750:	16 86       	std	Z+14, r1	; 0x0e
    2752:	17 86       	std	Z+15, r1	; 0x0f
    bias = 0.0f; // Reset bias
    2754:	10 8a       	std	Z+16, r1	; 0x10
    2756:	11 8a       	std	Z+17, r1	; 0x11
    2758:	12 8a       	std	Z+18, r1	; 0x12
    275a:	13 8a       	std	Z+19, r1	; 0x13

    P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
    275c:	10 8e       	std	Z+24, r1	; 0x18
    275e:	11 8e       	std	Z+25, r1	; 0x19
    2760:	12 8e       	std	Z+26, r1	; 0x1a
    2762:	13 8e       	std	Z+27, r1	; 0x1b
    P[0][1] = 0.0f;
    2764:	14 8e       	std	Z+28, r1	; 0x1c
    2766:	15 8e       	std	Z+29, r1	; 0x1d
    2768:	16 8e       	std	Z+30, r1	; 0x1e
    276a:	17 8e       	std	Z+31, r1	; 0x1f
    P[1][0] = 0.0f;
    276c:	10 a2       	std	Z+32, r1	; 0x20
    276e:	11 a2       	std	Z+33, r1	; 0x21
    2770:	12 a2       	std	Z+34, r1	; 0x22
    2772:	13 a2       	std	Z+35, r1	; 0x23
    P[1][1] = 0.0f;
    2774:	14 a2       	std	Z+36, r1	; 0x24
    2776:	15 a2       	std	Z+37, r1	; 0x25
    2778:	16 a2       	std	Z+38, r1	; 0x26
    277a:	17 a2       	std	Z+39, r1	; 0x27
    277c:	08 95       	ret

0000277e <_ZN6Kalman8getAngleEfff>:
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float Kalman::getAngle(float newAngle, float newRate, float dt) {
    277e:	2f 92       	push	r2
    2780:	3f 92       	push	r3
    2782:	4f 92       	push	r4
    2784:	5f 92       	push	r5
    2786:	6f 92       	push	r6
    2788:	7f 92       	push	r7
    278a:	8f 92       	push	r8
    278c:	9f 92       	push	r9
    278e:	af 92       	push	r10
    2790:	bf 92       	push	r11
    2792:	cf 92       	push	r12
    2794:	df 92       	push	r13
    2796:	ef 92       	push	r14
    2798:	ff 92       	push	r15
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	6c 97       	sbiw	r28, 0x1c	; 28
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	1c 01       	movw	r2, r24
    27b4:	4d 8b       	std	Y+21, r20	; 0x15
    27b6:	5e 8b       	std	Y+22, r21	; 0x16
    27b8:	6f 8b       	std	Y+23, r22	; 0x17
    27ba:	78 8f       	std	Y+24, r23	; 0x18
    27bc:	c9 01       	movw	r24, r18
    27be:	b8 01       	movw	r22, r16
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
    27c0:	d1 01       	movw	r26, r2
    27c2:	50 96       	adiw	r26, 0x10	; 16
    27c4:	2d 91       	ld	r18, X+
    27c6:	3d 91       	ld	r19, X+
    27c8:	4d 91       	ld	r20, X+
    27ca:	5c 91       	ld	r21, X
    27cc:	53 97       	sbiw	r26, 0x13	; 19
    27ce:	29 8b       	std	Y+17, r18	; 0x11
    27d0:	3a 8b       	std	Y+18, r19	; 0x12
    27d2:	4b 8b       	std	Y+19, r20	; 0x13
    27d4:	5c 8b       	std	Y+20, r21	; 0x14
    27d6:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    27da:	9b 01       	movw	r18, r22
    27dc:	ac 01       	movw	r20, r24
    27de:	f1 01       	movw	r30, r2
    27e0:	64 8b       	std	Z+20, r22	; 0x14
    27e2:	75 8b       	std	Z+21, r23	; 0x15
    27e4:	86 8b       	std	Z+22, r24	; 0x16
    27e6:	97 8b       	std	Z+23, r25	; 0x17
    angle += dt * rate;
    27e8:	c7 01       	movw	r24, r14
    27ea:	b6 01       	movw	r22, r12
    27ec:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    27f0:	d1 01       	movw	r26, r2
    27f2:	1c 96       	adiw	r26, 0x0c	; 12
    27f4:	2d 91       	ld	r18, X+
    27f6:	3d 91       	ld	r19, X+
    27f8:	4d 91       	ld	r20, X+
    27fa:	5c 91       	ld	r21, X
    27fc:	1f 97       	sbiw	r26, 0x0f	; 15
    27fe:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
    2802:	6d 87       	std	Y+13, r22	; 0x0d
    2804:	7e 87       	std	Y+14, r23	; 0x0e
    2806:	8f 87       	std	Y+15, r24	; 0x0f
    2808:	98 8b       	std	Y+16, r25	; 0x10

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
    280a:	d1 01       	movw	r26, r2
    280c:	94 96       	adiw	r26, 0x24	; 36
    280e:	2d 91       	ld	r18, X+
    2810:	3d 91       	ld	r19, X+
    2812:	4d 91       	ld	r20, X+
    2814:	5c 91       	ld	r21, X
    2816:	97 97       	sbiw	r26, 0x27	; 39
    2818:	2d 83       	std	Y+5, r18	; 0x05
    281a:	3e 83       	std	Y+6, r19	; 0x06
    281c:	4f 83       	std	Y+7, r20	; 0x07
    281e:	58 87       	std	Y+8, r21	; 0x08
    2820:	c7 01       	movw	r24, r14
    2822:	b6 01       	movw	r22, r12
    2824:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    2828:	4b 01       	movw	r8, r22
    282a:	5c 01       	movw	r10, r24
    282c:	f1 01       	movw	r30, r2
    282e:	44 8c       	ldd	r4, Z+28	; 0x1c
    2830:	55 8c       	ldd	r5, Z+29	; 0x1d
    2832:	66 8c       	ldd	r6, Z+30	; 0x1e
    2834:	77 8c       	ldd	r7, Z+31	; 0x1f
    2836:	20 a1       	ldd	r18, Z+32	; 0x20
    2838:	31 a1       	ldd	r19, Z+33	; 0x21
    283a:	42 a1       	ldd	r20, Z+34	; 0x22
    283c:	53 a1       	ldd	r21, Z+35	; 0x23
    283e:	29 87       	std	Y+9, r18	; 0x09
    2840:	3a 87       	std	Y+10, r19	; 0x0a
    2842:	4b 87       	std	Y+11, r20	; 0x0b
    2844:	5c 87       	std	Y+12, r21	; 0x0c
    2846:	a3 01       	movw	r20, r6
    2848:	92 01       	movw	r18, r4
    284a:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    284e:	29 85       	ldd	r18, Y+9	; 0x09
    2850:	3a 85       	ldd	r19, Y+10	; 0x0a
    2852:	4b 85       	ldd	r20, Y+11	; 0x0b
    2854:	5c 85       	ldd	r21, Y+12	; 0x0c
    2856:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    285a:	f1 01       	movw	r30, r2
    285c:	20 81       	ld	r18, Z
    285e:	31 81       	ldd	r19, Z+1	; 0x01
    2860:	42 81       	ldd	r20, Z+2	; 0x02
    2862:	53 81       	ldd	r21, Z+3	; 0x03
    2864:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
    2868:	9b 01       	movw	r18, r22
    286a:	ac 01       	movw	r20, r24
    286c:	c7 01       	movw	r24, r14
    286e:	b6 01       	movw	r22, r12
    2870:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    2874:	d1 01       	movw	r26, r2
    2876:	58 96       	adiw	r26, 0x18	; 24
    2878:	2d 91       	ld	r18, X+
    287a:	3d 91       	ld	r19, X+
    287c:	4d 91       	ld	r20, X+
    287e:	5c 91       	ld	r21, X
    2880:	5b 97       	sbiw	r26, 0x1b	; 27
    2882:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
    2886:	69 83       	std	Y+1, r22	; 0x01
    2888:	7a 83       	std	Y+2, r23	; 0x02
    288a:	8b 83       	std	Y+3, r24	; 0x03
    288c:	9c 83       	std	Y+4, r25	; 0x04
    P[0][1] -= dt * P[1][1];
    288e:	a5 01       	movw	r20, r10
    2890:	94 01       	movw	r18, r8
    2892:	c3 01       	movw	r24, r6
    2894:	b2 01       	movw	r22, r4
    2896:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    289a:	2b 01       	movw	r4, r22
    289c:	3c 01       	movw	r6, r24
    P[1][0] -= dt * P[1][1];
    289e:	a5 01       	movw	r20, r10
    28a0:	94 01       	movw	r18, r8
    28a2:	69 85       	ldd	r22, Y+9	; 0x09
    28a4:	7a 85       	ldd	r23, Y+10	; 0x0a
    28a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    28a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    28aa:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    28ae:	69 87       	std	Y+9, r22	; 0x09
    28b0:	7a 87       	std	Y+10, r23	; 0x0a
    28b2:	8b 87       	std	Y+11, r24	; 0x0b
    28b4:	9c 87       	std	Y+12, r25	; 0x0c
    P[1][1] += Q_bias * dt;
    28b6:	f1 01       	movw	r30, r2
    28b8:	24 81       	ldd	r18, Z+4	; 0x04
    28ba:	35 81       	ldd	r19, Z+5	; 0x05
    28bc:	46 81       	ldd	r20, Z+6	; 0x06
    28be:	57 81       	ldd	r21, Z+7	; 0x07
    28c0:	c7 01       	movw	r24, r14
    28c2:	b6 01       	movw	r22, r12
    28c4:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    28c8:	9b 01       	movw	r18, r22
    28ca:	ac 01       	movw	r20, r24
    28cc:	6d 81       	ldd	r22, Y+5	; 0x05
    28ce:	7e 81       	ldd	r23, Y+6	; 0x06
    28d0:	8f 81       	ldd	r24, Y+7	; 0x07
    28d2:	98 85       	ldd	r25, Y+8	; 0x08
    28d4:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
    28d8:	69 8f       	std	Y+25, r22	; 0x19
    28da:	7a 8f       	std	Y+26, r23	; 0x1a
    28dc:	8b 8f       	std	Y+27, r24	; 0x1b
    28de:	9c 8f       	std	Y+28, r25	; 0x1c

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = P[0][0] + R_measure; // Estimate error
    28e0:	d1 01       	movw	r26, r2
    28e2:	18 96       	adiw	r26, 0x08	; 8
    28e4:	2d 91       	ld	r18, X+
    28e6:	3d 91       	ld	r19, X+
    28e8:	4d 91       	ld	r20, X+
    28ea:	5c 91       	ld	r21, X
    28ec:	1b 97       	sbiw	r26, 0x0b	; 11
    28ee:	69 81       	ldd	r22, Y+1	; 0x01
    28f0:	7a 81       	ldd	r23, Y+2	; 0x02
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	9c 81       	ldd	r25, Y+4	; 0x04
    28f6:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
    28fa:	6b 01       	movw	r12, r22
    28fc:	7c 01       	movw	r14, r24
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
    28fe:	9b 01       	movw	r18, r22
    2900:	ac 01       	movw	r20, r24
    2902:	69 81       	ldd	r22, Y+1	; 0x01
    2904:	7a 81       	ldd	r23, Y+2	; 0x02
    2906:	8b 81       	ldd	r24, Y+3	; 0x03
    2908:	9c 81       	ldd	r25, Y+4	; 0x04
    290a:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
    290e:	4b 01       	movw	r8, r22
    2910:	5c 01       	movw	r10, r24
    K[1] = P[1][0] / S;
    2912:	a7 01       	movw	r20, r14
    2914:	96 01       	movw	r18, r12
    2916:	69 85       	ldd	r22, Y+9	; 0x09
    2918:	7a 85       	ldd	r23, Y+10	; 0x0a
    291a:	8b 85       	ldd	r24, Y+11	; 0x0b
    291c:	9c 85       	ldd	r25, Y+12	; 0x0c
    291e:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
    2922:	6b 01       	movw	r12, r22
    2924:	7c 01       	movw	r14, r24

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
    2926:	2d 85       	ldd	r18, Y+13	; 0x0d
    2928:	3e 85       	ldd	r19, Y+14	; 0x0e
    292a:	4f 85       	ldd	r20, Y+15	; 0x0f
    292c:	58 89       	ldd	r21, Y+16	; 0x10
    292e:	6d 89       	ldd	r22, Y+21	; 0x15
    2930:	7e 89       	ldd	r23, Y+22	; 0x16
    2932:	8f 89       	ldd	r24, Y+23	; 0x17
    2934:	98 8d       	ldd	r25, Y+24	; 0x18
    2936:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    293a:	6d 83       	std	Y+5, r22	; 0x05
    293c:	7e 83       	std	Y+6, r23	; 0x06
    293e:	8f 83       	std	Y+7, r24	; 0x07
    2940:	98 87       	std	Y+8, r25	; 0x08
    /* Step 6 */
    angle += K[0] * y;
    2942:	9b 01       	movw	r18, r22
    2944:	ac 01       	movw	r20, r24
    2946:	c5 01       	movw	r24, r10
    2948:	b4 01       	movw	r22, r8
    294a:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    294e:	9b 01       	movw	r18, r22
    2950:	ac 01       	movw	r20, r24
    2952:	6d 85       	ldd	r22, Y+13	; 0x0d
    2954:	7e 85       	ldd	r23, Y+14	; 0x0e
    2956:	8f 85       	ldd	r24, Y+15	; 0x0f
    2958:	98 89       	ldd	r25, Y+16	; 0x10
    295a:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
    295e:	6d 87       	std	Y+13, r22	; 0x0d
    2960:	7e 87       	std	Y+14, r23	; 0x0e
    2962:	8f 87       	std	Y+15, r24	; 0x0f
    2964:	98 8b       	std	Y+16, r25	; 0x10
    2966:	f1 01       	movw	r30, r2
    2968:	64 87       	std	Z+12, r22	; 0x0c
    296a:	75 87       	std	Z+13, r23	; 0x0d
    296c:	86 87       	std	Z+14, r24	; 0x0e
    296e:	97 87       	std	Z+15, r25	; 0x0f
    bias += K[1] * y;
    2970:	2d 81       	ldd	r18, Y+5	; 0x05
    2972:	3e 81       	ldd	r19, Y+6	; 0x06
    2974:	4f 81       	ldd	r20, Y+7	; 0x07
    2976:	58 85       	ldd	r21, Y+8	; 0x08
    2978:	c7 01       	movw	r24, r14
    297a:	b6 01       	movw	r22, r12
    297c:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    2980:	9b 01       	movw	r18, r22
    2982:	ac 01       	movw	r20, r24
    2984:	69 89       	ldd	r22, Y+17	; 0x11
    2986:	7a 89       	ldd	r23, Y+18	; 0x12
    2988:	8b 89       	ldd	r24, Y+19	; 0x13
    298a:	9c 89       	ldd	r25, Y+20	; 0x14
    298c:	0e 94 bf 08 	call	0x117e	; 0x117e <__addsf3>
    2990:	d1 01       	movw	r26, r2
    2992:	50 96       	adiw	r26, 0x10	; 16
    2994:	6d 93       	st	X+, r22
    2996:	7d 93       	st	X+, r23
    2998:	8d 93       	st	X+, r24
    299a:	9c 93       	st	X, r25
    299c:	53 97       	sbiw	r26, 0x13	; 19
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
    299e:	29 81       	ldd	r18, Y+1	; 0x01
    29a0:	3a 81       	ldd	r19, Y+2	; 0x02
    29a2:	4b 81       	ldd	r20, Y+3	; 0x03
    29a4:	5c 81       	ldd	r21, Y+4	; 0x04
    29a6:	c5 01       	movw	r24, r10
    29a8:	b4 01       	movw	r22, r8
    29aa:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    29ae:	9b 01       	movw	r18, r22
    29b0:	ac 01       	movw	r20, r24
    29b2:	69 81       	ldd	r22, Y+1	; 0x01
    29b4:	7a 81       	ldd	r23, Y+2	; 0x02
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    29be:	f1 01       	movw	r30, r2
    29c0:	60 8f       	std	Z+24, r22	; 0x18
    29c2:	71 8f       	std	Z+25, r23	; 0x19
    29c4:	82 8f       	std	Z+26, r24	; 0x1a
    29c6:	93 8f       	std	Z+27, r25	; 0x1b
    P[0][1] -= K[0] * P01_temp;
    29c8:	a3 01       	movw	r20, r6
    29ca:	92 01       	movw	r18, r4
    29cc:	c5 01       	movw	r24, r10
    29ce:	b4 01       	movw	r22, r8
    29d0:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    29d4:	9b 01       	movw	r18, r22
    29d6:	ac 01       	movw	r20, r24
    29d8:	c3 01       	movw	r24, r6
    29da:	b2 01       	movw	r22, r4
    29dc:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    29e0:	d1 01       	movw	r26, r2
    29e2:	5c 96       	adiw	r26, 0x1c	; 28
    29e4:	6d 93       	st	X+, r22
    29e6:	7d 93       	st	X+, r23
    29e8:	8d 93       	st	X+, r24
    29ea:	9c 93       	st	X, r25
    29ec:	5f 97       	sbiw	r26, 0x1f	; 31
    P[1][0] -= K[1] * P00_temp;
    29ee:	29 81       	ldd	r18, Y+1	; 0x01
    29f0:	3a 81       	ldd	r19, Y+2	; 0x02
    29f2:	4b 81       	ldd	r20, Y+3	; 0x03
    29f4:	5c 81       	ldd	r21, Y+4	; 0x04
    29f6:	c7 01       	movw	r24, r14
    29f8:	b6 01       	movw	r22, r12
    29fa:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    29fe:	9b 01       	movw	r18, r22
    2a00:	ac 01       	movw	r20, r24
    2a02:	69 85       	ldd	r22, Y+9	; 0x09
    2a04:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a06:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a08:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a0a:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    2a0e:	f1 01       	movw	r30, r2
    2a10:	60 a3       	std	Z+32, r22	; 0x20
    2a12:	71 a3       	std	Z+33, r23	; 0x21
    2a14:	82 a3       	std	Z+34, r24	; 0x22
    2a16:	93 a3       	std	Z+35, r25	; 0x23
    P[1][1] -= K[1] * P01_temp;
    2a18:	a3 01       	movw	r20, r6
    2a1a:	92 01       	movw	r18, r4
    2a1c:	c7 01       	movw	r24, r14
    2a1e:	b6 01       	movw	r22, r12
    2a20:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    2a24:	9b 01       	movw	r18, r22
    2a26:	ac 01       	movw	r20, r24
    2a28:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a30:	0e 94 be 08 	call	0x117c	; 0x117c <__subsf3>
    2a34:	d1 01       	movw	r26, r2
    2a36:	94 96       	adiw	r26, 0x24	; 36
    2a38:	6d 93       	st	X+, r22
    2a3a:	7d 93       	st	X+, r23
    2a3c:	8d 93       	st	X+, r24
    2a3e:	9c 93       	st	X, r25
    2a40:	97 97       	sbiw	r26, 0x27	; 39

    return angle;
};
    2a42:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a44:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a48:	98 89       	ldd	r25, Y+16	; 0x10
    2a4a:	6c 96       	adiw	r28, 0x1c	; 28
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	1f 91       	pop	r17
    2a5c:	0f 91       	pop	r16
    2a5e:	ff 90       	pop	r15
    2a60:	ef 90       	pop	r14
    2a62:	df 90       	pop	r13
    2a64:	cf 90       	pop	r12
    2a66:	bf 90       	pop	r11
    2a68:	af 90       	pop	r10
    2a6a:	9f 90       	pop	r9
    2a6c:	8f 90       	pop	r8
    2a6e:	7f 90       	pop	r7
    2a70:	6f 90       	pop	r6
    2a72:	5f 90       	pop	r5
    2a74:	4f 90       	pop	r4
    2a76:	3f 90       	pop	r3
    2a78:	2f 90       	pop	r2
    2a7a:	08 95       	ret

00002a7c <_ZN6Kalman8setAngleEf>:

void Kalman::setAngle(float angle) { this->angle = angle; }; // Used to set angle, this should be set as the starting angle
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	44 87       	std	Z+12, r20	; 0x0c
    2a80:	55 87       	std	Z+13, r21	; 0x0d
    2a82:	66 87       	std	Z+14, r22	; 0x0e
    2a84:	77 87       	std	Z+15, r23	; 0x0f
    2a86:	08 95       	ret

00002a88 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2a88:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <_ZN7TwoWire14rxBufferLengthE>
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	20 91 df 03 	lds	r18, 0x03DF	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    2a92:	82 1b       	sub	r24, r18
    2a94:	91 09       	sbc	r25, r1
    2a96:	08 95       	ret

00002a98 <_ZN7TwoWire4readEv>:
    2a98:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    2a9c:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <_ZN7TwoWire14rxBufferLengthE>
    2aa0:	98 17       	cp	r25, r24
    2aa2:	50 f4       	brcc	.+20     	; 0x2ab8 <_ZN7TwoWire4readEv+0x20>
    2aa4:	e9 2f       	mov	r30, r25
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	e0 52       	subi	r30, 0x20	; 32
    2aaa:	fc 4f       	sbci	r31, 0xFC	; 252
    2aac:	20 81       	ld	r18, Z
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	9f 5f       	subi	r25, 0xFF	; 255
    2ab2:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <_ZN7TwoWire4readEv+0x24>
    2ab8:	2f ef       	ldi	r18, 0xFF	; 255
    2aba:	3f ef       	ldi	r19, 0xFF	; 255
    2abc:	c9 01       	movw	r24, r18
    2abe:	08 95       	ret

00002ac0 <_ZN7TwoWire4peekEv>:
    2ac0:	e0 91 df 03 	lds	r30, 0x03DF	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    2ac4:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <_ZN7TwoWire14rxBufferLengthE>
    2ac8:	e8 17       	cp	r30, r24
    2aca:	30 f4       	brcc	.+12     	; 0x2ad8 <_ZN7TwoWire4peekEv+0x18>
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	e0 52       	subi	r30, 0x20	; 32
    2ad0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ad2:	80 81       	ld	r24, Z
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	08 95       	ret
    2ad8:	8f ef       	ldi	r24, 0xFF	; 255
    2ada:	9f ef       	ldi	r25, 0xFF	; 255
    2adc:	08 95       	ret

00002ade <_ZN7TwoWire5flushEv>:
    2ade:	08 95       	ret

00002ae0 <_ZN7TwoWire5writeEPKhj>:
    2ae0:	cf 92       	push	r12
    2ae2:	df 92       	push	r13
    2ae4:	ef 92       	push	r14
    2ae6:	ff 92       	push	r15
    2ae8:	0f 93       	push	r16
    2aea:	1f 93       	push	r17
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	7c 01       	movw	r14, r24
    2af2:	26 2f       	mov	r18, r22
    2af4:	97 2f       	mov	r25, r23
    2af6:	8a 01       	movw	r16, r20
    2af8:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <_ZN7TwoWire12transmittingE>
    2afc:	88 23       	and	r24, r24
    2afe:	91 f0       	breq	.+36     	; 0x2b24 <_ZN7TwoWire5writeEPKhj+0x44>
    2b00:	c6 2f       	mov	r28, r22
    2b02:	d7 2f       	mov	r29, r23
    2b04:	6e 01       	movw	r12, r28
    2b06:	c4 0e       	add	r12, r20
    2b08:	d5 1e       	adc	r13, r21
    2b0a:	cc 15       	cp	r28, r12
    2b0c:	dd 05       	cpc	r29, r13
    2b0e:	71 f0       	breq	.+28     	; 0x2b2c <_ZN7TwoWire5writeEPKhj+0x4c>
    2b10:	69 91       	ld	r22, Y+
    2b12:	d7 01       	movw	r26, r14
    2b14:	ed 91       	ld	r30, X+
    2b16:	fc 91       	ld	r31, X
    2b18:	01 90       	ld	r0, Z+
    2b1a:	f0 81       	ld	r31, Z
    2b1c:	e0 2d       	mov	r30, r0
    2b1e:	c7 01       	movw	r24, r14
    2b20:	09 95       	icall
    2b22:	f3 cf       	rjmp	.-26     	; 0x2b0a <_ZN7TwoWire5writeEPKhj+0x2a>
    2b24:	64 2f       	mov	r22, r20
    2b26:	82 2f       	mov	r24, r18
    2b28:	0e 94 38 17 	call	0x2e70	; 0x2e70 <twi_transmit>
    2b2c:	c8 01       	movw	r24, r16
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	df 90       	pop	r13
    2b3c:	cf 90       	pop	r12
    2b3e:	08 95       	ret

00002b40 <_ZN7TwoWire5writeEh>:
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	1f 92       	push	r1
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	69 83       	std	Y+1, r22	; 0x01
    2b4c:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <_ZN7TwoWire12transmittingE>
    2b50:	22 23       	and	r18, r18
    2b52:	d1 f0       	breq	.+52     	; 0x2b88 <_ZN7TwoWire5writeEh+0x48>
    2b54:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2b58:	20 32       	cpi	r18, 0x20	; 32
    2b5a:	40 f0       	brcs	.+16     	; 0x2b6c <_ZN7TwoWire5writeEh+0x2c>
    2b5c:	21 e0       	ldi	r18, 0x01	; 1
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	fc 01       	movw	r30, r24
    2b62:	33 83       	std	Z+3, r19	; 0x03
    2b64:	22 83       	std	Z+2, r18	; 0x02
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	15 c0       	rjmp	.+42     	; 0x2b96 <_ZN7TwoWire5writeEh+0x56>
    2b6c:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <_ZN7TwoWire13txBufferIndexE>
    2b70:	e8 2f       	mov	r30, r24
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	e3 54       	subi	r30, 0x43	; 67
    2b76:	fc 4f       	sbci	r31, 0xFC	; 252
    2b78:	99 81       	ldd	r25, Y+1	; 0x01
    2b7a:	90 83       	st	Z, r25
    2b7c:	8f 5f       	subi	r24, 0xFF	; 255
    2b7e:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <_ZN7TwoWire13txBufferIndexE>
    2b82:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2b86:	05 c0       	rjmp	.+10     	; 0x2b92 <_ZN7TwoWire5writeEh+0x52>
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	ce 01       	movw	r24, r28
    2b8c:	01 96       	adiw	r24, 0x01	; 1
    2b8e:	0e 94 38 17 	call	0x2e70	; 0x2e70 <twi_transmit>
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	0f 90       	pop	r0
    2b98:	df 91       	pop	r29
    2b9a:	cf 91       	pop	r28
    2b9c:	08 95       	ret

00002b9e <_ZN7TwoWireC1Ev>:
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	13 82       	std	Z+3, r1	; 0x03
    2ba2:	12 82       	std	Z+2, r1	; 0x02
    2ba4:	88 ee       	ldi	r24, 0xE8	; 232
    2ba6:	93 e0       	ldi	r25, 0x03	; 3
    2ba8:	a0 e0       	ldi	r26, 0x00	; 0
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	84 83       	std	Z+4, r24	; 0x04
    2bae:	95 83       	std	Z+5, r25	; 0x05
    2bb0:	a6 83       	std	Z+6, r26	; 0x06
    2bb2:	b7 83       	std	Z+7, r27	; 0x07
    2bb4:	8a e1       	ldi	r24, 0x1A	; 26
    2bb6:	92 e0       	ldi	r25, 0x02	; 2
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
    2bbc:	08 95       	ret

00002bbe <_ZN7TwoWire5beginEv>:
    2bbe:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    2bc2:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <_ZN7TwoWire14rxBufferLengthE>
    2bc6:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <_ZN7TwoWire13txBufferIndexE>
    2bca:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2bce:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <twi_init>

00002bd2 <_ZN7TwoWire17beginTransmissionEh>:
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <_ZN7TwoWire12transmittingE>
    2bd8:	60 93 dd 03 	sts	0x03DD, r22	; 0x8003dd <_ZN7TwoWire9txAddressE>
    2bdc:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <_ZN7TwoWire13txBufferIndexE>
    2be0:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2be4:	08 95       	ret

00002be6 <_ZN7TwoWire17beginTransmissionEi>:
    2be6:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <_ZN7TwoWire17beginTransmissionEh>

00002bea <_ZN7TwoWire15endTransmissionEh>:
    2bea:	0f 93       	push	r16
    2bec:	06 2f       	mov	r16, r22
    2bee:	21 e0       	ldi	r18, 0x01	; 1
    2bf0:	40 91 bb 03 	lds	r20, 0x03BB	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2bf4:	6d eb       	ldi	r22, 0xBD	; 189
    2bf6:	73 e0       	ldi	r23, 0x03	; 3
    2bf8:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZN7TwoWire9txAddressE>
    2bfc:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <twi_writeTo>
    2c00:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <_ZN7TwoWire13txBufferIndexE>
    2c04:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <_ZN7TwoWire14txBufferLengthE>
    2c08:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <_ZN7TwoWire12transmittingE>
    2c0c:	0f 91       	pop	r16
    2c0e:	08 95       	ret

00002c10 <_ZN7TwoWire11requestFromEhhmhh>:
    2c10:	4f 92       	push	r4
    2c12:	5f 92       	push	r5
    2c14:	6f 92       	push	r6
    2c16:	7f 92       	push	r7
    2c18:	af 92       	push	r10
    2c1a:	bf 92       	push	r11
    2c1c:	cf 92       	push	r12
    2c1e:	ef 92       	push	r14
    2c20:	ff 92       	push	r15
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	5c 01       	movw	r10, r24
    2c2c:	f6 2e       	mov	r15, r22
    2c2e:	d4 2f       	mov	r29, r20
    2c30:	28 01       	movw	r4, r16
    2c32:	39 01       	movw	r6, r18
    2c34:	ee 20       	and	r14, r14
    2c36:	21 f1       	breq	.+72     	; 0x2c80 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2c38:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN7TwoWire17beginTransmissionEh>
    2c3c:	ce 2d       	mov	r28, r14
    2c3e:	c4 30       	cpi	r28, 0x04	; 4
    2c40:	08 f0       	brcs	.+2      	; 0x2c44 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2c42:	c3 e0       	ldi	r28, 0x03	; 3
    2c44:	c1 50       	subi	r28, 0x01	; 1
    2c46:	c0 f0       	brcs	.+48     	; 0x2c78 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2c48:	d5 01       	movw	r26, r10
    2c4a:	ed 91       	ld	r30, X+
    2c4c:	fc 91       	ld	r31, X
    2c4e:	b8 e0       	ldi	r27, 0x08	; 8
    2c50:	cb 9f       	mul	r28, r27
    2c52:	c0 01       	movw	r24, r0
    2c54:	11 24       	eor	r1, r1
    2c56:	a3 01       	movw	r20, r6
    2c58:	92 01       	movw	r18, r4
    2c5a:	04 c0       	rjmp	.+8      	; 0x2c64 <_ZN7TwoWire11requestFromEhhmhh+0x54>
    2c5c:	56 95       	lsr	r21
    2c5e:	47 95       	ror	r20
    2c60:	37 95       	ror	r19
    2c62:	27 95       	ror	r18
    2c64:	8a 95       	dec	r24
    2c66:	d2 f7       	brpl	.-12     	; 0x2c5c <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    2c68:	ca 01       	movw	r24, r20
    2c6a:	b9 01       	movw	r22, r18
    2c6c:	01 90       	ld	r0, Z+
    2c6e:	f0 81       	ld	r31, Z
    2c70:	e0 2d       	mov	r30, r0
    2c72:	c5 01       	movw	r24, r10
    2c74:	09 95       	icall
    2c76:	e6 cf       	rjmp	.-52     	; 0x2c44 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2c78:	60 e0       	ldi	r22, 0x00	; 0
    2c7a:	c5 01       	movw	r24, r10
    2c7c:	0e 94 f5 15 	call	0x2bea	; 0x2bea <_ZN7TwoWire15endTransmissionEh>
    2c80:	4d 2f       	mov	r20, r29
    2c82:	d1 32       	cpi	r29, 0x21	; 33
    2c84:	08 f0       	brcs	.+2      	; 0x2c88 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2c86:	40 e2       	ldi	r20, 0x20	; 32
    2c88:	2c 2d       	mov	r18, r12
    2c8a:	60 ee       	ldi	r22, 0xE0	; 224
    2c8c:	73 e0       	ldi	r23, 0x03	; 3
    2c8e:	8f 2d       	mov	r24, r15
    2c90:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <twi_readFrom>
    2c94:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <_ZN7TwoWire13rxBufferIndexE>
    2c98:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <_ZN7TwoWire14rxBufferLengthE>
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	ff 90       	pop	r15
    2ca6:	ef 90       	pop	r14
    2ca8:	cf 90       	pop	r12
    2caa:	bf 90       	pop	r11
    2cac:	af 90       	pop	r10
    2cae:	7f 90       	pop	r7
    2cb0:	6f 90       	pop	r6
    2cb2:	5f 90       	pop	r5
    2cb4:	4f 90       	pop	r4
    2cb6:	08 95       	ret

00002cb8 <_ZN7TwoWire11requestFromEhhh>:
    2cb8:	cf 92       	push	r12
    2cba:	ef 92       	push	r14
    2cbc:	0f 93       	push	r16
    2cbe:	1f 93       	push	r17
    2cc0:	c2 2e       	mov	r12, r18
    2cc2:	e1 2c       	mov	r14, r1
    2cc4:	00 e0       	ldi	r16, 0x00	; 0
    2cc6:	10 e0       	ldi	r17, 0x00	; 0
    2cc8:	98 01       	movw	r18, r16
    2cca:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN7TwoWire11requestFromEhhmhh>
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ef 90       	pop	r14
    2cd4:	cf 90       	pop	r12
    2cd6:	08 95       	ret

00002cd8 <_ZN7TwoWire11requestFromEhh>:
    2cd8:	21 e0       	ldi	r18, 0x01	; 1
    2cda:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <_ZN7TwoWire11requestFromEhhh>

00002cde <_ZN7TwoWire11requestFromEii>:
    2cde:	21 e0       	ldi	r18, 0x01	; 1
    2ce0:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <_ZN7TwoWire11requestFromEhhh>

00002ce4 <_ZN7TwoWire15endTransmissionEv>:
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <_ZN7TwoWire15endTransmissionEh>

00002cea <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2cea:	8e ea       	ldi	r24, 0xAE	; 174
    2cec:	93 e0       	ldi	r25, 0x03	; 3
    2cee:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <_ZN7TwoWireC1Ev>

00002cf2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2cf2:	08 95       	ret

00002cf4 <_ZdlPv>:
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    2cf4:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <free>

00002cf8 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2cf8:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_state>
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <twi_sendStop>
    2d02:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <twi_inRepStart>
    2d06:	61 e0       	ldi	r22, 0x01	; 1
    2d08:	82 e1       	ldi	r24, 0x12	; 18
    2d0a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <digitalWrite>
    2d0e:	61 e0       	ldi	r22, 0x01	; 1
    2d10:	83 e1       	ldi	r24, 0x13	; 19
    2d12:	0e 94 62 11 	call	0x22c4	; 0x22c4 <digitalWrite>
    2d16:	e9 eb       	ldi	r30, 0xB9	; 185
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	8e 7f       	andi	r24, 0xFE	; 254
    2d1e:	80 83       	st	Z, r24
    2d20:	80 81       	ld	r24, Z
    2d22:	8d 7f       	andi	r24, 0xFD	; 253
    2d24:	80 83       	st	Z, r24
    2d26:	88 e4       	ldi	r24, 0x48	; 72
    2d28:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2d2c:	85 e4       	ldi	r24, 0x45	; 69
    2d2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d32:	08 95       	ret

00002d34 <twi_readFrom>:
    2d34:	41 32       	cpi	r20, 0x21	; 33
    2d36:	08 f0       	brcs	.+2      	; 0x2d3a <twi_readFrom+0x6>
    2d38:	43 c0       	rjmp	.+134    	; 0x2dc0 <twi_readFrom+0x8c>
    2d3a:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <twi_state>
    2d3e:	91 11       	cpse	r25, r1
    2d40:	fc cf       	rjmp	.-8      	; 0x2d3a <twi_readFrom+0x6>
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <twi_state>
    2d48:	20 93 6b 04 	sts	0x046B, r18	; 0x80046b <twi_sendStop>
    2d4c:	2f ef       	ldi	r18, 0xFF	; 255
    2d4e:	20 93 00 04 	sts	0x0400, r18	; 0x800400 <twi_error>
    2d52:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_masterBufferIndex>
    2d56:	24 0f       	add	r18, r20
    2d58:	20 93 44 04 	sts	0x0444, r18	; 0x800444 <twi_masterBufferLength>
    2d5c:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <twi_slarw>
    2d60:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <twi_slarw>
    2d64:	88 0f       	add	r24, r24
    2d66:	89 2b       	or	r24, r25
    2d68:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <twi_slarw>
    2d6c:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <twi_inRepStart>
    2d70:	81 30       	cpi	r24, 0x01	; 1
    2d72:	61 f4       	brne	.+24     	; 0x2d8c <twi_readFrom+0x58>
    2d74:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <twi_inRepStart>
    2d78:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_slarw>
    2d7c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d80:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d84:	83 fd       	sbrc	r24, 3
    2d86:	f8 cf       	rjmp	.-16     	; 0x2d78 <twi_readFrom+0x44>
    2d88:	85 ec       	ldi	r24, 0xC5	; 197
    2d8a:	01 c0       	rjmp	.+2      	; 0x2d8e <twi_readFrom+0x5a>
    2d8c:	85 ee       	ldi	r24, 0xE5	; 229
    2d8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d92:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <twi_state>
    2d96:	81 30       	cpi	r24, 0x01	; 1
    2d98:	e1 f3       	breq	.-8      	; 0x2d92 <twi_readFrom+0x5e>
    2d9a:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2d9e:	84 17       	cp	r24, r20
    2da0:	10 f4       	brcc	.+4      	; 0x2da6 <twi_readFrom+0x72>
    2da2:	40 91 45 04 	lds	r20, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2da6:	26 e4       	ldi	r18, 0x46	; 70
    2da8:	34 e0       	ldi	r19, 0x04	; 4
    2daa:	fb 01       	movw	r30, r22
    2dac:	d9 01       	movw	r26, r18
    2dae:	8a 2f       	mov	r24, r26
    2db0:	82 1b       	sub	r24, r18
    2db2:	84 17       	cp	r24, r20
    2db4:	18 f4       	brcc	.+6      	; 0x2dbc <twi_readFrom+0x88>
    2db6:	8d 91       	ld	r24, X+
    2db8:	81 93       	st	Z+, r24
    2dba:	f9 cf       	rjmp	.-14     	; 0x2dae <twi_readFrom+0x7a>
    2dbc:	84 2f       	mov	r24, r20
    2dbe:	08 95       	ret
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	08 95       	ret

00002dc4 <twi_writeTo>:
    2dc4:	0f 93       	push	r16
    2dc6:	41 32       	cpi	r20, 0x21	; 33
    2dc8:	08 f0       	brcs	.+2      	; 0x2dcc <twi_writeTo+0x8>
    2dca:	4a c0       	rjmp	.+148    	; 0x2e60 <twi_writeTo+0x9c>
    2dcc:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <twi_state>
    2dd0:	91 11       	cpse	r25, r1
    2dd2:	fc cf       	rjmp	.-8      	; 0x2dcc <twi_writeTo+0x8>
    2dd4:	32 e0       	ldi	r19, 0x02	; 2
    2dd6:	30 93 6d 04 	sts	0x046D, r19	; 0x80046d <twi_state>
    2dda:	00 93 6b 04 	sts	0x046B, r16	; 0x80046b <twi_sendStop>
    2dde:	3f ef       	ldi	r19, 0xFF	; 255
    2de0:	30 93 00 04 	sts	0x0400, r19	; 0x800400 <twi_error>
    2de4:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <twi_masterBufferIndex>
    2de8:	40 93 44 04 	sts	0x0444, r20	; 0x800444 <twi_masterBufferLength>
    2dec:	fb 01       	movw	r30, r22
    2dee:	66 e4       	ldi	r22, 0x46	; 70
    2df0:	74 e0       	ldi	r23, 0x04	; 4
    2df2:	db 01       	movw	r26, r22
    2df4:	3a 2f       	mov	r19, r26
    2df6:	36 1b       	sub	r19, r22
    2df8:	34 17       	cp	r19, r20
    2dfa:	18 f4       	brcc	.+6      	; 0x2e02 <twi_writeTo+0x3e>
    2dfc:	31 91       	ld	r19, Z+
    2dfe:	3d 93       	st	X+, r19
    2e00:	f9 cf       	rjmp	.-14     	; 0x2df4 <twi_writeTo+0x30>
    2e02:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <twi_slarw>
    2e06:	30 91 6c 04 	lds	r19, 0x046C	; 0x80046c <twi_slarw>
    2e0a:	88 0f       	add	r24, r24
    2e0c:	83 2b       	or	r24, r19
    2e0e:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <twi_slarw>
    2e12:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <twi_inRepStart>
    2e16:	81 30       	cpi	r24, 0x01	; 1
    2e18:	61 f4       	brne	.+24     	; 0x2e32 <twi_writeTo+0x6e>
    2e1a:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <twi_inRepStart>
    2e1e:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_slarw>
    2e22:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2e26:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e2a:	83 fd       	sbrc	r24, 3
    2e2c:	f8 cf       	rjmp	.-16     	; 0x2e1e <twi_writeTo+0x5a>
    2e2e:	85 ec       	ldi	r24, 0xC5	; 197
    2e30:	01 c0       	rjmp	.+2      	; 0x2e34 <twi_writeTo+0x70>
    2e32:	85 ee       	ldi	r24, 0xE5	; 229
    2e34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e38:	22 23       	and	r18, r18
    2e3a:	21 f0       	breq	.+8      	; 0x2e44 <twi_writeTo+0x80>
    2e3c:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <twi_state>
    2e40:	82 30       	cpi	r24, 0x02	; 2
    2e42:	d1 f3       	breq	.-12     	; 0x2e38 <twi_writeTo+0x74>
    2e44:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_error>
    2e48:	8f 3f       	cpi	r24, 0xFF	; 255
    2e4a:	79 f0       	breq	.+30     	; 0x2e6a <twi_writeTo+0xa6>
    2e4c:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_error>
    2e50:	80 32       	cpi	r24, 0x20	; 32
    2e52:	41 f0       	breq	.+16     	; 0x2e64 <twi_writeTo+0xa0>
    2e54:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_error>
    2e58:	80 33       	cpi	r24, 0x30	; 48
    2e5a:	31 f0       	breq	.+12     	; 0x2e68 <twi_writeTo+0xa4>
    2e5c:	94 e0       	ldi	r25, 0x04	; 4
    2e5e:	05 c0       	rjmp	.+10     	; 0x2e6a <twi_writeTo+0xa6>
    2e60:	91 e0       	ldi	r25, 0x01	; 1
    2e62:	03 c0       	rjmp	.+6      	; 0x2e6a <twi_writeTo+0xa6>
    2e64:	92 e0       	ldi	r25, 0x02	; 2
    2e66:	01 c0       	rjmp	.+2      	; 0x2e6a <twi_writeTo+0xa6>
    2e68:	93 e0       	ldi	r25, 0x03	; 3
    2e6a:	89 2f       	mov	r24, r25
    2e6c:	0f 91       	pop	r16
    2e6e:	08 95       	ret

00002e70 <twi_transmit>:
    2e70:	61 32       	cpi	r22, 0x21	; 33
    2e72:	98 f4       	brcc	.+38     	; 0x2e9a <twi_transmit+0x2a>
    2e74:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <twi_state>
    2e78:	24 30       	cpi	r18, 0x04	; 4
    2e7a:	89 f4       	brne	.+34     	; 0x2e9e <twi_transmit+0x2e>
    2e7c:	60 93 22 04 	sts	0x0422, r22	; 0x800422 <twi_txBufferLength>
    2e80:	fc 01       	movw	r30, r24
    2e82:	24 e2       	ldi	r18, 0x24	; 36
    2e84:	34 e0       	ldi	r19, 0x04	; 4
    2e86:	d9 01       	movw	r26, r18
    2e88:	8a 2f       	mov	r24, r26
    2e8a:	82 1b       	sub	r24, r18
    2e8c:	86 17       	cp	r24, r22
    2e8e:	18 f4       	brcc	.+6      	; 0x2e96 <twi_transmit+0x26>
    2e90:	81 91       	ld	r24, Z+
    2e92:	8d 93       	st	X+, r24
    2e94:	f9 cf       	rjmp	.-14     	; 0x2e88 <twi_transmit+0x18>
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	08 95       	ret
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	08 95       	ret
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	08 95       	ret

00002ea2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2ea2:	85 ed       	ldi	r24, 0xD5	; 213
    2ea4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2ea8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2eac:	84 fd       	sbrc	r24, 4
    2eae:	fc cf       	rjmp	.-8      	; 0x2ea8 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2eb0:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_state>
    2eb4:	08 95       	ret

00002eb6 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2eb6:	85 ec       	ldi	r24, 0xC5	; 197
    2eb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2ebc:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_state>
    2ec0:	08 95       	ret

00002ec2 <__vector_24>:
}

ISR(TWI_vect)
{
    2ec2:	1f 92       	push	r1
    2ec4:	0f 92       	push	r0
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	0f 92       	push	r0
    2eca:	11 24       	eor	r1, r1
    2ecc:	2f 93       	push	r18
    2ece:	3f 93       	push	r19
    2ed0:	4f 93       	push	r20
    2ed2:	5f 93       	push	r21
    2ed4:	6f 93       	push	r22
    2ed6:	7f 93       	push	r23
    2ed8:	8f 93       	push	r24
    2eda:	9f 93       	push	r25
    2edc:	af 93       	push	r26
    2ede:	bf 93       	push	r27
    2ee0:	ef 93       	push	r30
    2ee2:	ff 93       	push	r31
  switch(TW_STATUS){
    2ee4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2ee8:	88 7f       	andi	r24, 0xF8	; 248
    2eea:	80 36       	cpi	r24, 0x60	; 96
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <__vector_24+0x2e>
    2eee:	9e c0       	rjmp	.+316    	; 0x302c <__vector_24+0x16a>
    2ef0:	78 f5       	brcc	.+94     	; 0x2f50 <__vector_24+0x8e>
    2ef2:	88 32       	cpi	r24, 0x28	; 40
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <__vector_24+0x36>
    2ef6:	5d c0       	rjmp	.+186    	; 0x2fb2 <__vector_24+0xf0>
    2ef8:	90 f4       	brcc	.+36     	; 0x2f1e <__vector_24+0x5c>
    2efa:	80 31       	cpi	r24, 0x10	; 16
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <__vector_24+0x3e>
    2efe:	56 c0       	rjmp	.+172    	; 0x2fac <__vector_24+0xea>
    2f00:	38 f4       	brcc	.+14     	; 0x2f10 <__vector_24+0x4e>
    2f02:	88 23       	and	r24, r24
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <__vector_24+0x46>
    2f06:	f5 c0       	rjmp	.+490    	; 0x30f2 <__vector_24+0x230>
    2f08:	88 30       	cpi	r24, 0x08	; 8
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <__vector_24+0x4c>
    2f0c:	4f c0       	rjmp	.+158    	; 0x2fac <__vector_24+0xea>
    2f0e:	f5 c0       	rjmp	.+490    	; 0x30fa <__vector_24+0x238>
    2f10:	88 31       	cpi	r24, 0x18	; 24
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <__vector_24+0x54>
    2f14:	4e c0       	rjmp	.+156    	; 0x2fb2 <__vector_24+0xf0>
    2f16:	80 32       	cpi	r24, 0x20	; 32
    2f18:	09 f4       	brne	.+2      	; 0x2f1c <__vector_24+0x5a>
    2f1a:	5f c0       	rjmp	.+190    	; 0x2fda <__vector_24+0x118>
    2f1c:	ee c0       	rjmp	.+476    	; 0x30fa <__vector_24+0x238>
    2f1e:	80 34       	cpi	r24, 0x40	; 64
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <__vector_24+0x62>
    2f22:	6a c0       	rjmp	.+212    	; 0x2ff8 <__vector_24+0x136>
    2f24:	58 f4       	brcc	.+22     	; 0x2f3c <__vector_24+0x7a>
    2f26:	80 33       	cpi	r24, 0x30	; 48
    2f28:	09 f4       	brne	.+2      	; 0x2f2c <__vector_24+0x6a>
    2f2a:	57 c0       	rjmp	.+174    	; 0x2fda <__vector_24+0x118>
    2f2c:	88 33       	cpi	r24, 0x38	; 56
    2f2e:	09 f0       	breq	.+2      	; 0x2f32 <__vector_24+0x70>
    2f30:	e4 c0       	rjmp	.+456    	; 0x30fa <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f32:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <twi_error>
      twi_releaseBus();
    2f36:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <twi_releaseBus>
      break;
    2f3a:	df c0       	rjmp	.+446    	; 0x30fa <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f3c:	80 35       	cpi	r24, 0x50	; 80
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <__vector_24+0x80>
    2f40:	4f c0       	rjmp	.+158    	; 0x2fe0 <__vector_24+0x11e>
    2f42:	88 35       	cpi	r24, 0x58	; 88
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <__vector_24+0x86>
    2f46:	5d c0       	rjmp	.+186    	; 0x3002 <__vector_24+0x140>
    2f48:	88 34       	cpi	r24, 0x48	; 72
    2f4a:	09 f0       	breq	.+2      	; 0x2f4e <__vector_24+0x8c>
    2f4c:	d6 c0       	rjmp	.+428    	; 0x30fa <__vector_24+0x238>
    2f4e:	d3 c0       	rjmp	.+422    	; 0x30f6 <__vector_24+0x234>
    2f50:	88 39       	cpi	r24, 0x98	; 152
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <__vector_24+0x94>
    2f54:	c4 c0       	rjmp	.+392    	; 0x30de <__vector_24+0x21c>
    2f56:	a8 f4       	brcc	.+42     	; 0x2f82 <__vector_24+0xc0>
    2f58:	88 37       	cpi	r24, 0x78	; 120
    2f5a:	09 f4       	brne	.+2      	; 0x2f5e <__vector_24+0x9c>
    2f5c:	67 c0       	rjmp	.+206    	; 0x302c <__vector_24+0x16a>
    2f5e:	38 f4       	brcc	.+14     	; 0x2f6e <__vector_24+0xac>
    2f60:	88 36       	cpi	r24, 0x68	; 104
    2f62:	09 f4       	brne	.+2      	; 0x2f66 <__vector_24+0xa4>
    2f64:	63 c0       	rjmp	.+198    	; 0x302c <__vector_24+0x16a>
    2f66:	80 37       	cpi	r24, 0x70	; 112
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <__vector_24+0xaa>
    2f6a:	60 c0       	rjmp	.+192    	; 0x302c <__vector_24+0x16a>
    2f6c:	c6 c0       	rjmp	.+396    	; 0x30fa <__vector_24+0x238>
    2f6e:	88 38       	cpi	r24, 0x88	; 136
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <__vector_24+0xb2>
    2f72:	b5 c0       	rjmp	.+362    	; 0x30de <__vector_24+0x21c>
    2f74:	80 39       	cpi	r24, 0x90	; 144
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <__vector_24+0xb8>
    2f78:	5f c0       	rjmp	.+190    	; 0x3038 <__vector_24+0x176>
    2f7a:	80 38       	cpi	r24, 0x80	; 128
    2f7c:	09 f0       	breq	.+2      	; 0x2f80 <__vector_24+0xbe>
    2f7e:	bd c0       	rjmp	.+378    	; 0x30fa <__vector_24+0x238>
    2f80:	5b c0       	rjmp	.+182    	; 0x3038 <__vector_24+0x176>
    2f82:	80 3b       	cpi	r24, 0xB0	; 176
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <__vector_24+0xc6>
    2f86:	83 c0       	rjmp	.+262    	; 0x308e <__vector_24+0x1cc>
    2f88:	38 f4       	brcc	.+14     	; 0x2f98 <__vector_24+0xd6>
    2f8a:	80 3a       	cpi	r24, 0xA0	; 160
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <__vector_24+0xce>
    2f8e:	66 c0       	rjmp	.+204    	; 0x305c <__vector_24+0x19a>
    2f90:	88 3a       	cpi	r24, 0xA8	; 168
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <__vector_24+0xd4>
    2f94:	7c c0       	rjmp	.+248    	; 0x308e <__vector_24+0x1cc>
    2f96:	b1 c0       	rjmp	.+354    	; 0x30fa <__vector_24+0x238>
    2f98:	80 3c       	cpi	r24, 0xC0	; 192
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <__vector_24+0xdc>
    2f9c:	a4 c0       	rjmp	.+328    	; 0x30e6 <__vector_24+0x224>
    2f9e:	88 3c       	cpi	r24, 0xC8	; 200
    2fa0:	09 f4       	brne	.+2      	; 0x2fa4 <__vector_24+0xe2>
    2fa2:	a1 c0       	rjmp	.+322    	; 0x30e6 <__vector_24+0x224>
    2fa4:	88 3b       	cpi	r24, 0xB8	; 184
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <__vector_24+0xe8>
    2fa8:	87 c0       	rjmp	.+270    	; 0x30b8 <__vector_24+0x1f6>
    2faa:	a7 c0       	rjmp	.+334    	; 0x30fa <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2fac:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_slarw>
    2fb0:	10 c0       	rjmp	.+32     	; 0x2fd2 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2fb2:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2fb6:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_masterBufferLength>
    2fba:	98 17       	cp	r25, r24
    2fbc:	70 f5       	brcc	.+92     	; 0x301a <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2fbe:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	8e 0f       	add	r24, r30
    2fc6:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_masterBufferIndex>
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	ea 5b       	subi	r30, 0xBA	; 186
    2fce:	fb 4f       	sbci	r31, 0xFB	; 251
    2fd0:	80 81       	ld	r24, Z
    2fd2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2fd6:	85 ec       	ldi	r24, 0xC5	; 197
    2fd8:	83 c0       	rjmp	.+262    	; 0x30e0 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2fda:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <twi_error>
    2fde:	8b c0       	rjmp	.+278    	; 0x30f6 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2fe0:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	8e 0f       	add	r24, r30
    2fe8:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_masterBufferIndex>
    2fec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	ea 5b       	subi	r30, 0xBA	; 186
    2ff4:	fb 4f       	sbci	r31, 0xFB	; 251
    2ff6:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2ff8:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <twi_masterBufferIndex>
    2ffc:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_masterBufferLength>
    3000:	6b c0       	rjmp	.+214    	; 0x30d8 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3002:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <twi_masterBufferIndex>
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	8e 0f       	add	r24, r30
    300a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <twi_masterBufferIndex>
    300e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	ea 5b       	subi	r30, 0xBA	; 186
    3016:	fb 4f       	sbci	r31, 0xFB	; 251
    3018:	80 83       	st	Z, r24
	if (twi_sendStop)
    301a:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <twi_sendStop>
    301e:	81 11       	cpse	r24, r1
    3020:	6a c0       	rjmp	.+212    	; 0x30f6 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3028:	84 ea       	ldi	r24, 0xA4	; 164
    302a:	5e c0       	rjmp	.+188    	; 0x30e8 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    302c:	83 e0       	ldi	r24, 0x03	; 3
    302e:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3032:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <twi_rxBufferIndex>
    3036:	cf cf       	rjmp	.-98     	; 0x2fd6 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3038:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_rxBufferIndex>
    303c:	80 32       	cpi	r24, 0x20	; 32
    303e:	08 f0       	brcs	.+2      	; 0x3042 <__vector_24+0x180>
    3040:	4e c0       	rjmp	.+156    	; 0x30de <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3042:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <twi_rxBufferIndex>
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	8e 0f       	add	r24, r30
    304a:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <twi_rxBufferIndex>
    304e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	ee 5f       	subi	r30, 0xFE	; 254
    3056:	fb 4f       	sbci	r31, 0xFB	; 251
    3058:	80 83       	st	Z, r24
    305a:	bd cf       	rjmp	.-134    	; 0x2fd6 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    305c:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3060:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <twi_rxBufferIndex>
    3064:	80 32       	cpi	r24, 0x20	; 32
    3066:	30 f4       	brcc	.+12     	; 0x3074 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3068:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <twi_rxBufferIndex>
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	ee 5f       	subi	r30, 0xFE	; 254
    3070:	fb 4f       	sbci	r31, 0xFB	; 251
    3072:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3074:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <twi_rxBufferIndex>
    3078:	70 e0       	ldi	r23, 0x00	; 0
    307a:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <twi_onSlaveReceive>
    307e:	f0 91 67 04 	lds	r31, 0x0467	; 0x800467 <twi_onSlaveReceive+0x1>
    3082:	82 e0       	ldi	r24, 0x02	; 2
    3084:	94 e0       	ldi	r25, 0x04	; 4
    3086:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3088:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <twi_rxBufferIndex>
      break;
    308c:	36 c0       	rjmp	.+108    	; 0x30fa <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    308e:	84 e0       	ldi	r24, 0x04	; 4
    3090:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3094:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3098:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    309c:	e0 91 68 04 	lds	r30, 0x0468	; 0x800468 <twi_onSlaveTransmit>
    30a0:	f0 91 69 04 	lds	r31, 0x0469	; 0x800469 <twi_onSlaveTransmit+0x1>
    30a4:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    30a6:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <twi_txBufferLength>
    30aa:	81 11       	cpse	r24, r1
    30ac:	05 c0       	rjmp	.+10     	; 0x30b8 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    30b4:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    30b8:	e0 91 23 04 	lds	r30, 0x0423	; 0x800423 <twi_txBufferIndex>
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	8e 0f       	add	r24, r30
    30c0:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <twi_txBufferIndex>
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	ec 5d       	subi	r30, 0xDC	; 220
    30c8:	fb 4f       	sbci	r31, 0xFB	; 251
    30ca:	80 81       	ld	r24, Z
    30cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    30d0:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <twi_txBufferIndex>
    30d4:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <twi_txBufferLength>
    30d8:	98 17       	cp	r25, r24
    30da:	08 f4       	brcc	.+2      	; 0x30de <__vector_24+0x21c>
    30dc:	7c cf       	rjmp	.-264    	; 0x2fd6 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    30de:	85 e8       	ldi	r24, 0x85	; 133
    30e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    30e4:	0a c0       	rjmp	.+20     	; 0x30fa <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30e6:	85 ec       	ldi	r24, 0xC5	; 197
    30e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    30ec:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_state>
      break;
    30f0:	04 c0       	rjmp	.+8      	; 0x30fa <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    30f2:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <twi_error>
      twi_stop();
    30f6:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <twi_stop>
      break;
  }
}
    30fa:	ff 91       	pop	r31
    30fc:	ef 91       	pop	r30
    30fe:	bf 91       	pop	r27
    3100:	af 91       	pop	r26
    3102:	9f 91       	pop	r25
    3104:	8f 91       	pop	r24
    3106:	7f 91       	pop	r23
    3108:	6f 91       	pop	r22
    310a:	5f 91       	pop	r21
    310c:	4f 91       	pop	r20
    310e:	3f 91       	pop	r19
    3110:	2f 91       	pop	r18
    3112:	0f 90       	pop	r0
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	0f 90       	pop	r0
    3118:	1f 90       	pop	r1
    311a:	18 95       	reti

0000311c <__unordsf2>:
    311c:	0e 94 87 0a 	call	0x150e	; 0x150e <__fp_cmp>
    3120:	88 0b       	sbc	r24, r24
    3122:	99 0b       	sbc	r25, r25
    3124:	08 95       	ret

00003126 <__divmodhi4>:
    3126:	97 fb       	bst	r25, 7
    3128:	07 2e       	mov	r0, r23
    312a:	16 f4       	brtc	.+4      	; 0x3130 <__divmodhi4+0xa>
    312c:	00 94       	com	r0
    312e:	07 d0       	rcall	.+14     	; 0x313e <__divmodhi4_neg1>
    3130:	77 fd       	sbrc	r23, 7
    3132:	09 d0       	rcall	.+18     	; 0x3146 <__divmodhi4_neg2>
    3134:	0e 94 c9 18 	call	0x3192	; 0x3192 <__udivmodhi4>
    3138:	07 fc       	sbrc	r0, 7
    313a:	05 d0       	rcall	.+10     	; 0x3146 <__divmodhi4_neg2>
    313c:	3e f4       	brtc	.+14     	; 0x314c <__divmodhi4_exit>

0000313e <__divmodhi4_neg1>:
    313e:	90 95       	com	r25
    3140:	81 95       	neg	r24
    3142:	9f 4f       	sbci	r25, 0xFF	; 255
    3144:	08 95       	ret

00003146 <__divmodhi4_neg2>:
    3146:	70 95       	com	r23
    3148:	61 95       	neg	r22
    314a:	7f 4f       	sbci	r23, 0xFF	; 255

0000314c <__divmodhi4_exit>:
    314c:	08 95       	ret

0000314e <__udivmodsi4>:
    314e:	a1 e2       	ldi	r26, 0x21	; 33
    3150:	1a 2e       	mov	r1, r26
    3152:	aa 1b       	sub	r26, r26
    3154:	bb 1b       	sub	r27, r27
    3156:	fd 01       	movw	r30, r26
    3158:	0d c0       	rjmp	.+26     	; 0x3174 <__udivmodsi4_ep>

0000315a <__udivmodsi4_loop>:
    315a:	aa 1f       	adc	r26, r26
    315c:	bb 1f       	adc	r27, r27
    315e:	ee 1f       	adc	r30, r30
    3160:	ff 1f       	adc	r31, r31
    3162:	a2 17       	cp	r26, r18
    3164:	b3 07       	cpc	r27, r19
    3166:	e4 07       	cpc	r30, r20
    3168:	f5 07       	cpc	r31, r21
    316a:	20 f0       	brcs	.+8      	; 0x3174 <__udivmodsi4_ep>
    316c:	a2 1b       	sub	r26, r18
    316e:	b3 0b       	sbc	r27, r19
    3170:	e4 0b       	sbc	r30, r20
    3172:	f5 0b       	sbc	r31, r21

00003174 <__udivmodsi4_ep>:
    3174:	66 1f       	adc	r22, r22
    3176:	77 1f       	adc	r23, r23
    3178:	88 1f       	adc	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	1a 94       	dec	r1
    317e:	69 f7       	brne	.-38     	; 0x315a <__udivmodsi4_loop>
    3180:	60 95       	com	r22
    3182:	70 95       	com	r23
    3184:	80 95       	com	r24
    3186:	90 95       	com	r25
    3188:	9b 01       	movw	r18, r22
    318a:	ac 01       	movw	r20, r24
    318c:	bd 01       	movw	r22, r26
    318e:	cf 01       	movw	r24, r30
    3190:	08 95       	ret

00003192 <__udivmodhi4>:
    3192:	aa 1b       	sub	r26, r26
    3194:	bb 1b       	sub	r27, r27
    3196:	51 e1       	ldi	r21, 0x11	; 17
    3198:	07 c0       	rjmp	.+14     	; 0x31a8 <__udivmodhi4_ep>

0000319a <__udivmodhi4_loop>:
    319a:	aa 1f       	adc	r26, r26
    319c:	bb 1f       	adc	r27, r27
    319e:	a6 17       	cp	r26, r22
    31a0:	b7 07       	cpc	r27, r23
    31a2:	10 f0       	brcs	.+4      	; 0x31a8 <__udivmodhi4_ep>
    31a4:	a6 1b       	sub	r26, r22
    31a6:	b7 0b       	sbc	r27, r23

000031a8 <__udivmodhi4_ep>:
    31a8:	88 1f       	adc	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	5a 95       	dec	r21
    31ae:	a9 f7       	brne	.-22     	; 0x319a <__udivmodhi4_loop>
    31b0:	80 95       	com	r24
    31b2:	90 95       	com	r25
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	08 95       	ret

000031ba <__tablejump2__>:
    31ba:	ee 0f       	add	r30, r30
    31bc:	ff 1f       	adc	r31, r31
    31be:	05 90       	lpm	r0, Z+
    31c0:	f4 91       	lpm	r31, Z
    31c2:	e0 2d       	mov	r30, r0
    31c4:	09 94       	ijmp

000031c6 <malloc>:
    31c6:	cf 93       	push	r28
    31c8:	df 93       	push	r29
    31ca:	82 30       	cpi	r24, 0x02	; 2
    31cc:	91 05       	cpc	r25, r1
    31ce:	10 f4       	brcc	.+4      	; 0x31d4 <malloc+0xe>
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	e0 91 70 04 	lds	r30, 0x0470	; 0x800470 <__flp>
    31d8:	f0 91 71 04 	lds	r31, 0x0471	; 0x800471 <__flp+0x1>
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	c0 e0       	ldi	r28, 0x00	; 0
    31e2:	d0 e0       	ldi	r29, 0x00	; 0
    31e4:	30 97       	sbiw	r30, 0x00	; 0
    31e6:	11 f1       	breq	.+68     	; 0x322c <malloc+0x66>
    31e8:	40 81       	ld	r20, Z
    31ea:	51 81       	ldd	r21, Z+1	; 0x01
    31ec:	48 17       	cp	r20, r24
    31ee:	59 07       	cpc	r21, r25
    31f0:	c0 f0       	brcs	.+48     	; 0x3222 <malloc+0x5c>
    31f2:	48 17       	cp	r20, r24
    31f4:	59 07       	cpc	r21, r25
    31f6:	61 f4       	brne	.+24     	; 0x3210 <malloc+0x4a>
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	20 97       	sbiw	r28, 0x00	; 0
    31fe:	19 f0       	breq	.+6      	; 0x3206 <malloc+0x40>
    3200:	9b 83       	std	Y+3, r25	; 0x03
    3202:	8a 83       	std	Y+2, r24	; 0x02
    3204:	2b c0       	rjmp	.+86     	; 0x325c <malloc+0x96>
    3206:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <__flp+0x1>
    320a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__flp>
    320e:	26 c0       	rjmp	.+76     	; 0x325c <malloc+0x96>
    3210:	21 15       	cp	r18, r1
    3212:	31 05       	cpc	r19, r1
    3214:	19 f0       	breq	.+6      	; 0x321c <malloc+0x56>
    3216:	42 17       	cp	r20, r18
    3218:	53 07       	cpc	r21, r19
    321a:	18 f4       	brcc	.+6      	; 0x3222 <malloc+0x5c>
    321c:	9a 01       	movw	r18, r20
    321e:	be 01       	movw	r22, r28
    3220:	df 01       	movw	r26, r30
    3222:	ef 01       	movw	r28, r30
    3224:	02 80       	ldd	r0, Z+2	; 0x02
    3226:	f3 81       	ldd	r31, Z+3	; 0x03
    3228:	e0 2d       	mov	r30, r0
    322a:	dc cf       	rjmp	.-72     	; 0x31e4 <malloc+0x1e>
    322c:	21 15       	cp	r18, r1
    322e:	31 05       	cpc	r19, r1
    3230:	09 f1       	breq	.+66     	; 0x3274 <malloc+0xae>
    3232:	28 1b       	sub	r18, r24
    3234:	39 0b       	sbc	r19, r25
    3236:	24 30       	cpi	r18, 0x04	; 4
    3238:	31 05       	cpc	r19, r1
    323a:	90 f4       	brcc	.+36     	; 0x3260 <malloc+0x9a>
    323c:	12 96       	adiw	r26, 0x02	; 2
    323e:	8d 91       	ld	r24, X+
    3240:	9c 91       	ld	r25, X
    3242:	13 97       	sbiw	r26, 0x03	; 3
    3244:	61 15       	cp	r22, r1
    3246:	71 05       	cpc	r23, r1
    3248:	21 f0       	breq	.+8      	; 0x3252 <malloc+0x8c>
    324a:	fb 01       	movw	r30, r22
    324c:	93 83       	std	Z+3, r25	; 0x03
    324e:	82 83       	std	Z+2, r24	; 0x02
    3250:	04 c0       	rjmp	.+8      	; 0x325a <malloc+0x94>
    3252:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <__flp+0x1>
    3256:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__flp>
    325a:	fd 01       	movw	r30, r26
    325c:	32 96       	adiw	r30, 0x02	; 2
    325e:	44 c0       	rjmp	.+136    	; 0x32e8 <malloc+0x122>
    3260:	fd 01       	movw	r30, r26
    3262:	e2 0f       	add	r30, r18
    3264:	f3 1f       	adc	r31, r19
    3266:	81 93       	st	Z+, r24
    3268:	91 93       	st	Z+, r25
    326a:	22 50       	subi	r18, 0x02	; 2
    326c:	31 09       	sbc	r19, r1
    326e:	2d 93       	st	X+, r18
    3270:	3c 93       	st	X, r19
    3272:	3a c0       	rjmp	.+116    	; 0x32e8 <malloc+0x122>
    3274:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <__brkval>
    3278:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <__brkval+0x1>
    327c:	23 2b       	or	r18, r19
    327e:	41 f4       	brne	.+16     	; 0x3290 <malloc+0xca>
    3280:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3284:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3288:	30 93 6f 04 	sts	0x046F, r19	; 0x80046f <__brkval+0x1>
    328c:	20 93 6e 04 	sts	0x046E, r18	; 0x80046e <__brkval>
    3290:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3294:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3298:	21 15       	cp	r18, r1
    329a:	31 05       	cpc	r19, r1
    329c:	41 f4       	brne	.+16     	; 0x32ae <malloc+0xe8>
    329e:	2d b7       	in	r18, 0x3d	; 61
    32a0:	3e b7       	in	r19, 0x3e	; 62
    32a2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    32a6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    32aa:	24 1b       	sub	r18, r20
    32ac:	35 0b       	sbc	r19, r21
    32ae:	e0 91 6e 04 	lds	r30, 0x046E	; 0x80046e <__brkval>
    32b2:	f0 91 6f 04 	lds	r31, 0x046F	; 0x80046f <__brkval+0x1>
    32b6:	e2 17       	cp	r30, r18
    32b8:	f3 07       	cpc	r31, r19
    32ba:	a0 f4       	brcc	.+40     	; 0x32e4 <malloc+0x11e>
    32bc:	2e 1b       	sub	r18, r30
    32be:	3f 0b       	sbc	r19, r31
    32c0:	28 17       	cp	r18, r24
    32c2:	39 07       	cpc	r19, r25
    32c4:	78 f0       	brcs	.+30     	; 0x32e4 <malloc+0x11e>
    32c6:	ac 01       	movw	r20, r24
    32c8:	4e 5f       	subi	r20, 0xFE	; 254
    32ca:	5f 4f       	sbci	r21, 0xFF	; 255
    32cc:	24 17       	cp	r18, r20
    32ce:	35 07       	cpc	r19, r21
    32d0:	48 f0       	brcs	.+18     	; 0x32e4 <malloc+0x11e>
    32d2:	4e 0f       	add	r20, r30
    32d4:	5f 1f       	adc	r21, r31
    32d6:	50 93 6f 04 	sts	0x046F, r21	; 0x80046f <__brkval+0x1>
    32da:	40 93 6e 04 	sts	0x046E, r20	; 0x80046e <__brkval>
    32de:	81 93       	st	Z+, r24
    32e0:	91 93       	st	Z+, r25
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <malloc+0x122>
    32e4:	e0 e0       	ldi	r30, 0x00	; 0
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	cf 01       	movw	r24, r30
    32ea:	df 91       	pop	r29
    32ec:	cf 91       	pop	r28
    32ee:	08 95       	ret

000032f0 <free>:
    32f0:	0f 93       	push	r16
    32f2:	1f 93       	push	r17
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	09 f4       	brne	.+2      	; 0x32fe <free+0xe>
    32fc:	8c c0       	rjmp	.+280    	; 0x3416 <free+0x126>
    32fe:	fc 01       	movw	r30, r24
    3300:	32 97       	sbiw	r30, 0x02	; 2
    3302:	13 82       	std	Z+3, r1	; 0x03
    3304:	12 82       	std	Z+2, r1	; 0x02
    3306:	00 91 70 04 	lds	r16, 0x0470	; 0x800470 <__flp>
    330a:	10 91 71 04 	lds	r17, 0x0471	; 0x800471 <__flp+0x1>
    330e:	01 15       	cp	r16, r1
    3310:	11 05       	cpc	r17, r1
    3312:	81 f4       	brne	.+32     	; 0x3334 <free+0x44>
    3314:	20 81       	ld	r18, Z
    3316:	31 81       	ldd	r19, Z+1	; 0x01
    3318:	82 0f       	add	r24, r18
    331a:	93 1f       	adc	r25, r19
    331c:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <__brkval>
    3320:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <__brkval+0x1>
    3324:	28 17       	cp	r18, r24
    3326:	39 07       	cpc	r19, r25
    3328:	79 f5       	brne	.+94     	; 0x3388 <free+0x98>
    332a:	f0 93 6f 04 	sts	0x046F, r31	; 0x80046f <__brkval+0x1>
    332e:	e0 93 6e 04 	sts	0x046E, r30	; 0x80046e <__brkval>
    3332:	71 c0       	rjmp	.+226    	; 0x3416 <free+0x126>
    3334:	d8 01       	movw	r26, r16
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	50 e0       	ldi	r21, 0x00	; 0
    333a:	ae 17       	cp	r26, r30
    333c:	bf 07       	cpc	r27, r31
    333e:	50 f4       	brcc	.+20     	; 0x3354 <free+0x64>
    3340:	12 96       	adiw	r26, 0x02	; 2
    3342:	2d 91       	ld	r18, X+
    3344:	3c 91       	ld	r19, X
    3346:	13 97       	sbiw	r26, 0x03	; 3
    3348:	ad 01       	movw	r20, r26
    334a:	21 15       	cp	r18, r1
    334c:	31 05       	cpc	r19, r1
    334e:	09 f1       	breq	.+66     	; 0x3392 <free+0xa2>
    3350:	d9 01       	movw	r26, r18
    3352:	f3 cf       	rjmp	.-26     	; 0x333a <free+0x4a>
    3354:	9d 01       	movw	r18, r26
    3356:	da 01       	movw	r26, r20
    3358:	33 83       	std	Z+3, r19	; 0x03
    335a:	22 83       	std	Z+2, r18	; 0x02
    335c:	60 81       	ld	r22, Z
    335e:	71 81       	ldd	r23, Z+1	; 0x01
    3360:	86 0f       	add	r24, r22
    3362:	97 1f       	adc	r25, r23
    3364:	82 17       	cp	r24, r18
    3366:	93 07       	cpc	r25, r19
    3368:	69 f4       	brne	.+26     	; 0x3384 <free+0x94>
    336a:	ec 01       	movw	r28, r24
    336c:	28 81       	ld	r18, Y
    336e:	39 81       	ldd	r19, Y+1	; 0x01
    3370:	26 0f       	add	r18, r22
    3372:	37 1f       	adc	r19, r23
    3374:	2e 5f       	subi	r18, 0xFE	; 254
    3376:	3f 4f       	sbci	r19, 0xFF	; 255
    3378:	31 83       	std	Z+1, r19	; 0x01
    337a:	20 83       	st	Z, r18
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	9b 81       	ldd	r25, Y+3	; 0x03
    3380:	93 83       	std	Z+3, r25	; 0x03
    3382:	82 83       	std	Z+2, r24	; 0x02
    3384:	45 2b       	or	r20, r21
    3386:	29 f4       	brne	.+10     	; 0x3392 <free+0xa2>
    3388:	f0 93 71 04 	sts	0x0471, r31	; 0x800471 <__flp+0x1>
    338c:	e0 93 70 04 	sts	0x0470, r30	; 0x800470 <__flp>
    3390:	42 c0       	rjmp	.+132    	; 0x3416 <free+0x126>
    3392:	13 96       	adiw	r26, 0x03	; 3
    3394:	fc 93       	st	X, r31
    3396:	ee 93       	st	-X, r30
    3398:	12 97       	sbiw	r26, 0x02	; 2
    339a:	ed 01       	movw	r28, r26
    339c:	49 91       	ld	r20, Y+
    339e:	59 91       	ld	r21, Y+
    33a0:	9e 01       	movw	r18, r28
    33a2:	24 0f       	add	r18, r20
    33a4:	35 1f       	adc	r19, r21
    33a6:	e2 17       	cp	r30, r18
    33a8:	f3 07       	cpc	r31, r19
    33aa:	71 f4       	brne	.+28     	; 0x33c8 <free+0xd8>
    33ac:	80 81       	ld	r24, Z
    33ae:	91 81       	ldd	r25, Z+1	; 0x01
    33b0:	84 0f       	add	r24, r20
    33b2:	95 1f       	adc	r25, r21
    33b4:	02 96       	adiw	r24, 0x02	; 2
    33b6:	11 96       	adiw	r26, 0x01	; 1
    33b8:	9c 93       	st	X, r25
    33ba:	8e 93       	st	-X, r24
    33bc:	82 81       	ldd	r24, Z+2	; 0x02
    33be:	93 81       	ldd	r25, Z+3	; 0x03
    33c0:	13 96       	adiw	r26, 0x03	; 3
    33c2:	9c 93       	st	X, r25
    33c4:	8e 93       	st	-X, r24
    33c6:	12 97       	sbiw	r26, 0x02	; 2
    33c8:	e0 e0       	ldi	r30, 0x00	; 0
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	d8 01       	movw	r26, r16
    33ce:	12 96       	adiw	r26, 0x02	; 2
    33d0:	8d 91       	ld	r24, X+
    33d2:	9c 91       	ld	r25, X
    33d4:	13 97       	sbiw	r26, 0x03	; 3
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	19 f0       	breq	.+6      	; 0x33e0 <free+0xf0>
    33da:	f8 01       	movw	r30, r16
    33dc:	8c 01       	movw	r16, r24
    33de:	f6 cf       	rjmp	.-20     	; 0x33cc <free+0xdc>
    33e0:	8d 91       	ld	r24, X+
    33e2:	9c 91       	ld	r25, X
    33e4:	98 01       	movw	r18, r16
    33e6:	2e 5f       	subi	r18, 0xFE	; 254
    33e8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ea:	82 0f       	add	r24, r18
    33ec:	93 1f       	adc	r25, r19
    33ee:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <__brkval>
    33f2:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <__brkval+0x1>
    33f6:	28 17       	cp	r18, r24
    33f8:	39 07       	cpc	r19, r25
    33fa:	69 f4       	brne	.+26     	; 0x3416 <free+0x126>
    33fc:	30 97       	sbiw	r30, 0x00	; 0
    33fe:	29 f4       	brne	.+10     	; 0x340a <free+0x11a>
    3400:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <__flp+0x1>
    3404:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <__flp>
    3408:	02 c0       	rjmp	.+4      	; 0x340e <free+0x11e>
    340a:	13 82       	std	Z+3, r1	; 0x03
    340c:	12 82       	std	Z+2, r1	; 0x02
    340e:	10 93 6f 04 	sts	0x046F, r17	; 0x80046f <__brkval+0x1>
    3412:	00 93 6e 04 	sts	0x046E, r16	; 0x80046e <__brkval>
    3416:	df 91       	pop	r29
    3418:	cf 91       	pop	r28
    341a:	1f 91       	pop	r17
    341c:	0f 91       	pop	r16
    341e:	08 95       	ret

00003420 <realloc>:
    3420:	a0 e0       	ldi	r26, 0x00	; 0
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	e6 e1       	ldi	r30, 0x16	; 22
    3426:	fa e1       	ldi	r31, 0x1A	; 26
    3428:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__prologue_saves__+0x8>
    342c:	ec 01       	movw	r28, r24
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	21 f4       	brne	.+8      	; 0x343a <realloc+0x1a>
    3432:	cb 01       	movw	r24, r22
    3434:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <malloc>
    3438:	b8 c0       	rjmp	.+368    	; 0x35aa <realloc+0x18a>
    343a:	fc 01       	movw	r30, r24
    343c:	e6 0f       	add	r30, r22
    343e:	f7 1f       	adc	r31, r23
    3440:	9c 01       	movw	r18, r24
    3442:	22 50       	subi	r18, 0x02	; 2
    3444:	31 09       	sbc	r19, r1
    3446:	e2 17       	cp	r30, r18
    3448:	f3 07       	cpc	r31, r19
    344a:	08 f4       	brcc	.+2      	; 0x344e <realloc+0x2e>
    344c:	ac c0       	rjmp	.+344    	; 0x35a6 <realloc+0x186>
    344e:	d9 01       	movw	r26, r18
    3450:	0d 91       	ld	r16, X+
    3452:	1c 91       	ld	r17, X
    3454:	11 97       	sbiw	r26, 0x01	; 1
    3456:	06 17       	cp	r16, r22
    3458:	17 07       	cpc	r17, r23
    345a:	b0 f0       	brcs	.+44     	; 0x3488 <realloc+0x68>
    345c:	05 30       	cpi	r16, 0x05	; 5
    345e:	11 05       	cpc	r17, r1
    3460:	08 f4       	brcc	.+2      	; 0x3464 <realloc+0x44>
    3462:	9f c0       	rjmp	.+318    	; 0x35a2 <realloc+0x182>
    3464:	c8 01       	movw	r24, r16
    3466:	04 97       	sbiw	r24, 0x04	; 4
    3468:	86 17       	cp	r24, r22
    346a:	97 07       	cpc	r25, r23
    346c:	08 f4       	brcc	.+2      	; 0x3470 <realloc+0x50>
    346e:	99 c0       	rjmp	.+306    	; 0x35a2 <realloc+0x182>
    3470:	02 50       	subi	r16, 0x02	; 2
    3472:	11 09       	sbc	r17, r1
    3474:	06 1b       	sub	r16, r22
    3476:	17 0b       	sbc	r17, r23
    3478:	01 93       	st	Z+, r16
    347a:	11 93       	st	Z+, r17
    347c:	6d 93       	st	X+, r22
    347e:	7c 93       	st	X, r23
    3480:	cf 01       	movw	r24, r30
    3482:	0e 94 78 19 	call	0x32f0	; 0x32f0 <free>
    3486:	8d c0       	rjmp	.+282    	; 0x35a2 <realloc+0x182>
    3488:	5b 01       	movw	r10, r22
    348a:	a0 1a       	sub	r10, r16
    348c:	b1 0a       	sbc	r11, r17
    348e:	4c 01       	movw	r8, r24
    3490:	80 0e       	add	r8, r16
    3492:	91 1e       	adc	r9, r17
    3494:	a0 91 70 04 	lds	r26, 0x0470	; 0x800470 <__flp>
    3498:	b0 91 71 04 	lds	r27, 0x0471	; 0x800471 <__flp+0x1>
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	50 e0       	ldi	r21, 0x00	; 0
    34a0:	e1 2c       	mov	r14, r1
    34a2:	f1 2c       	mov	r15, r1
    34a4:	10 97       	sbiw	r26, 0x00	; 0
    34a6:	09 f4       	brne	.+2      	; 0x34aa <realloc+0x8a>
    34a8:	4a c0       	rjmp	.+148    	; 0x353e <realloc+0x11e>
    34aa:	a8 15       	cp	r26, r8
    34ac:	b9 05       	cpc	r27, r9
    34ae:	d1 f5       	brne	.+116    	; 0x3524 <realloc+0x104>
    34b0:	6d 90       	ld	r6, X+
    34b2:	7c 90       	ld	r7, X
    34b4:	11 97       	sbiw	r26, 0x01	; 1
    34b6:	63 01       	movw	r12, r6
    34b8:	82 e0       	ldi	r24, 0x02	; 2
    34ba:	c8 0e       	add	r12, r24
    34bc:	d1 1c       	adc	r13, r1
    34be:	ca 14       	cp	r12, r10
    34c0:	db 04       	cpc	r13, r11
    34c2:	80 f1       	brcs	.+96     	; 0x3524 <realloc+0x104>
    34c4:	a3 01       	movw	r20, r6
    34c6:	4a 19       	sub	r20, r10
    34c8:	5b 09       	sbc	r21, r11
    34ca:	6a 01       	movw	r12, r20
    34cc:	82 e0       	ldi	r24, 0x02	; 2
    34ce:	c8 0e       	add	r12, r24
    34d0:	d1 1c       	adc	r13, r1
    34d2:	12 96       	adiw	r26, 0x02	; 2
    34d4:	bc 90       	ld	r11, X
    34d6:	12 97       	sbiw	r26, 0x02	; 2
    34d8:	13 96       	adiw	r26, 0x03	; 3
    34da:	ac 91       	ld	r26, X
    34dc:	b5 e0       	ldi	r27, 0x05	; 5
    34de:	cb 16       	cp	r12, r27
    34e0:	d1 04       	cpc	r13, r1
    34e2:	40 f0       	brcs	.+16     	; 0x34f4 <realloc+0xd4>
    34e4:	b2 82       	std	Z+2, r11	; 0x02
    34e6:	a3 83       	std	Z+3, r26	; 0x03
    34e8:	51 83       	std	Z+1, r21	; 0x01
    34ea:	40 83       	st	Z, r20
    34ec:	d9 01       	movw	r26, r18
    34ee:	6d 93       	st	X+, r22
    34f0:	7c 93       	st	X, r23
    34f2:	0a c0       	rjmp	.+20     	; 0x3508 <realloc+0xe8>
    34f4:	0e 5f       	subi	r16, 0xFE	; 254
    34f6:	1f 4f       	sbci	r17, 0xFF	; 255
    34f8:	c3 01       	movw	r24, r6
    34fa:	80 0f       	add	r24, r16
    34fc:	91 1f       	adc	r25, r17
    34fe:	f9 01       	movw	r30, r18
    3500:	91 83       	std	Z+1, r25	; 0x01
    3502:	80 83       	st	Z, r24
    3504:	eb 2d       	mov	r30, r11
    3506:	fa 2f       	mov	r31, r26
    3508:	e1 14       	cp	r14, r1
    350a:	f1 04       	cpc	r15, r1
    350c:	31 f0       	breq	.+12     	; 0x351a <realloc+0xfa>
    350e:	d7 01       	movw	r26, r14
    3510:	13 96       	adiw	r26, 0x03	; 3
    3512:	fc 93       	st	X, r31
    3514:	ee 93       	st	-X, r30
    3516:	12 97       	sbiw	r26, 0x02	; 2
    3518:	44 c0       	rjmp	.+136    	; 0x35a2 <realloc+0x182>
    351a:	f0 93 71 04 	sts	0x0471, r31	; 0x800471 <__flp+0x1>
    351e:	e0 93 70 04 	sts	0x0470, r30	; 0x800470 <__flp>
    3522:	3f c0       	rjmp	.+126    	; 0x35a2 <realloc+0x182>
    3524:	8d 91       	ld	r24, X+
    3526:	9c 91       	ld	r25, X
    3528:	11 97       	sbiw	r26, 0x01	; 1
    352a:	48 17       	cp	r20, r24
    352c:	59 07       	cpc	r21, r25
    352e:	08 f4       	brcc	.+2      	; 0x3532 <realloc+0x112>
    3530:	ac 01       	movw	r20, r24
    3532:	7d 01       	movw	r14, r26
    3534:	12 96       	adiw	r26, 0x02	; 2
    3536:	0d 90       	ld	r0, X+
    3538:	bc 91       	ld	r27, X
    353a:	a0 2d       	mov	r26, r0
    353c:	b3 cf       	rjmp	.-154    	; 0x34a4 <realloc+0x84>
    353e:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <__brkval>
    3542:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <__brkval+0x1>
    3546:	88 15       	cp	r24, r8
    3548:	99 05       	cpc	r25, r9
    354a:	e1 f4       	brne	.+56     	; 0x3584 <realloc+0x164>
    354c:	46 17       	cp	r20, r22
    354e:	57 07       	cpc	r21, r23
    3550:	c8 f4       	brcc	.+50     	; 0x3584 <realloc+0x164>
    3552:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3556:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    355a:	00 97       	sbiw	r24, 0x00	; 0
    355c:	41 f4       	brne	.+16     	; 0x356e <realloc+0x14e>
    355e:	8d b7       	in	r24, 0x3d	; 61
    3560:	9e b7       	in	r25, 0x3e	; 62
    3562:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3566:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    356a:	84 1b       	sub	r24, r20
    356c:	95 0b       	sbc	r25, r21
    356e:	e8 17       	cp	r30, r24
    3570:	f9 07       	cpc	r31, r25
    3572:	c8 f4       	brcc	.+50     	; 0x35a6 <realloc+0x186>
    3574:	f0 93 6f 04 	sts	0x046F, r31	; 0x80046f <__brkval+0x1>
    3578:	e0 93 6e 04 	sts	0x046E, r30	; 0x80046e <__brkval>
    357c:	f9 01       	movw	r30, r18
    357e:	71 83       	std	Z+1, r23	; 0x01
    3580:	60 83       	st	Z, r22
    3582:	0f c0       	rjmp	.+30     	; 0x35a2 <realloc+0x182>
    3584:	cb 01       	movw	r24, r22
    3586:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <malloc>
    358a:	7c 01       	movw	r14, r24
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	59 f0       	breq	.+22     	; 0x35a6 <realloc+0x186>
    3590:	a8 01       	movw	r20, r16
    3592:	be 01       	movw	r22, r28
    3594:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <memcpy>
    3598:	ce 01       	movw	r24, r28
    359a:	0e 94 78 19 	call	0x32f0	; 0x32f0 <free>
    359e:	c7 01       	movw	r24, r14
    35a0:	04 c0       	rjmp	.+8      	; 0x35aa <realloc+0x18a>
    35a2:	ce 01       	movw	r24, r28
    35a4:	02 c0       	rjmp	.+4      	; 0x35aa <realloc+0x18a>
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	ee e0       	ldi	r30, 0x0E	; 14
    35b0:	0c 94 d5 1c 	jmp	0x39aa	; 0x39aa <__epilogue_restores__+0x8>

000035b4 <atof>:
    35b4:	66 27       	eor	r22, r22
    35b6:	77 27       	eor	r23, r23
    35b8:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <strtod>

000035bc <isspace>:
    35bc:	91 11       	cpse	r25, r1
    35be:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__ctype_isfalse>
    35c2:	80 32       	cpi	r24, 0x20	; 32
    35c4:	19 f0       	breq	.+6      	; 0x35cc <isspace+0x10>
    35c6:	89 50       	subi	r24, 0x09	; 9
    35c8:	85 50       	subi	r24, 0x05	; 5
    35ca:	c8 f7       	brcc	.-14     	; 0x35be <isspace+0x2>
    35cc:	08 95       	ret

000035ce <strtok>:
    35ce:	46 e2       	ldi	r20, 0x26	; 38
    35d0:	52 e0       	ldi	r21, 0x02	; 2
    35d2:	0e 94 0b 1b 	call	0x3616	; 0x3616 <strtok_r>
    35d6:	08 95       	ret

000035d8 <memcpy>:
    35d8:	fb 01       	movw	r30, r22
    35da:	dc 01       	movw	r26, r24
    35dc:	02 c0       	rjmp	.+4      	; 0x35e2 <memcpy+0xa>
    35de:	01 90       	ld	r0, Z+
    35e0:	0d 92       	st	X+, r0
    35e2:	41 50       	subi	r20, 0x01	; 1
    35e4:	50 40       	sbci	r21, 0x00	; 0
    35e6:	d8 f7       	brcc	.-10     	; 0x35de <memcpy+0x6>
    35e8:	08 95       	ret

000035ea <strcpy>:
    35ea:	fb 01       	movw	r30, r22
    35ec:	dc 01       	movw	r26, r24
    35ee:	01 90       	ld	r0, Z+
    35f0:	0d 92       	st	X+, r0
    35f2:	00 20       	and	r0, r0
    35f4:	e1 f7       	brne	.-8      	; 0x35ee <strcpy+0x4>
    35f6:	08 95       	ret

000035f8 <strncpy>:
    35f8:	fb 01       	movw	r30, r22
    35fa:	dc 01       	movw	r26, r24
    35fc:	41 50       	subi	r20, 0x01	; 1
    35fe:	50 40       	sbci	r21, 0x00	; 0
    3600:	48 f0       	brcs	.+18     	; 0x3614 <strncpy+0x1c>
    3602:	01 90       	ld	r0, Z+
    3604:	0d 92       	st	X+, r0
    3606:	00 20       	and	r0, r0
    3608:	c9 f7       	brne	.-14     	; 0x35fc <strncpy+0x4>
    360a:	01 c0       	rjmp	.+2      	; 0x360e <strncpy+0x16>
    360c:	1d 92       	st	X+, r1
    360e:	41 50       	subi	r20, 0x01	; 1
    3610:	50 40       	sbci	r21, 0x00	; 0
    3612:	e0 f7       	brcc	.-8      	; 0x360c <strncpy+0x14>
    3614:	08 95       	ret

00003616 <strtok_r>:
    3616:	fa 01       	movw	r30, r20
    3618:	a1 91       	ld	r26, Z+
    361a:	b0 81       	ld	r27, Z
    361c:	00 97       	sbiw	r24, 0x00	; 0
    361e:	19 f4       	brne	.+6      	; 0x3626 <strtok_r+0x10>
    3620:	10 97       	sbiw	r26, 0x00	; 0
    3622:	e1 f0       	breq	.+56     	; 0x365c <strtok_r+0x46>
    3624:	cd 01       	movw	r24, r26
    3626:	dc 01       	movw	r26, r24
    3628:	cd 01       	movw	r24, r26
    362a:	0d 90       	ld	r0, X+
    362c:	00 20       	and	r0, r0
    362e:	11 f4       	brne	.+4      	; 0x3634 <strtok_r+0x1e>
    3630:	c0 01       	movw	r24, r0
    3632:	13 c0       	rjmp	.+38     	; 0x365a <strtok_r+0x44>
    3634:	fb 01       	movw	r30, r22
    3636:	21 91       	ld	r18, Z+
    3638:	22 23       	and	r18, r18
    363a:	19 f0       	breq	.+6      	; 0x3642 <strtok_r+0x2c>
    363c:	20 15       	cp	r18, r0
    363e:	d9 f7       	brne	.-10     	; 0x3636 <strtok_r+0x20>
    3640:	f3 cf       	rjmp	.-26     	; 0x3628 <strtok_r+0x12>
    3642:	fb 01       	movw	r30, r22
    3644:	21 91       	ld	r18, Z+
    3646:	20 15       	cp	r18, r0
    3648:	19 f4       	brne	.+6      	; 0x3650 <strtok_r+0x3a>
    364a:	1e 92       	st	-X, r1
    364c:	11 96       	adiw	r26, 0x01	; 1
    364e:	06 c0       	rjmp	.+12     	; 0x365c <strtok_r+0x46>
    3650:	22 23       	and	r18, r18
    3652:	c1 f7       	brne	.-16     	; 0x3644 <strtok_r+0x2e>
    3654:	0d 90       	ld	r0, X+
    3656:	00 20       	and	r0, r0
    3658:	a1 f7       	brne	.-24     	; 0x3642 <strtok_r+0x2c>
    365a:	d0 01       	movw	r26, r0
    365c:	fa 01       	movw	r30, r20
    365e:	a1 93       	st	Z+, r26
    3660:	b0 83       	st	Z, r27
    3662:	08 95       	ret

00003664 <strtod>:
    3664:	a0 e0       	ldi	r26, 0x00	; 0
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	e8 e3       	ldi	r30, 0x38	; 56
    366a:	fb e1       	ldi	r31, 0x1B	; 27
    366c:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__prologue_saves__+0x8>
    3670:	ec 01       	movw	r28, r24
    3672:	7b 01       	movw	r14, r22
    3674:	61 15       	cp	r22, r1
    3676:	71 05       	cpc	r23, r1
    3678:	19 f0       	breq	.+6      	; 0x3680 <strtod+0x1c>
    367a:	db 01       	movw	r26, r22
    367c:	8d 93       	st	X+, r24
    367e:	9c 93       	st	X, r25
    3680:	8e 01       	movw	r16, r28
    3682:	0f 5f       	subi	r16, 0xFF	; 255
    3684:	1f 4f       	sbci	r17, 0xFF	; 255
    3686:	78 80       	ld	r7, Y
    3688:	87 2d       	mov	r24, r7
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	0e 94 de 1a 	call	0x35bc	; 0x35bc <isspace>
    3690:	89 2b       	or	r24, r25
    3692:	11 f0       	breq	.+4      	; 0x3698 <strtod+0x34>
    3694:	e8 01       	movw	r28, r16
    3696:	f4 cf       	rjmp	.-24     	; 0x3680 <strtod+0x1c>
    3698:	bd e2       	ldi	r27, 0x2D	; 45
    369a:	7b 12       	cpse	r7, r27
    369c:	05 c0       	rjmp	.+10     	; 0x36a8 <strtod+0x44>
    369e:	0f 5f       	subi	r16, 0xFF	; 255
    36a0:	1f 4f       	sbci	r17, 0xFF	; 255
    36a2:	79 80       	ldd	r7, Y+1	; 0x01
    36a4:	c1 e0       	ldi	r28, 0x01	; 1
    36a6:	08 c0       	rjmp	.+16     	; 0x36b8 <strtod+0x54>
    36a8:	eb e2       	ldi	r30, 0x2B	; 43
    36aa:	7e 12       	cpse	r7, r30
    36ac:	04 c0       	rjmp	.+8      	; 0x36b6 <strtod+0x52>
    36ae:	8e 01       	movw	r16, r28
    36b0:	0e 5f       	subi	r16, 0xFE	; 254
    36b2:	1f 4f       	sbci	r17, 0xFF	; 255
    36b4:	79 80       	ldd	r7, Y+1	; 0x01
    36b6:	c0 e0       	ldi	r28, 0x00	; 0
    36b8:	68 01       	movw	r12, r16
    36ba:	f1 e0       	ldi	r31, 0x01	; 1
    36bc:	cf 1a       	sub	r12, r31
    36be:	d1 08       	sbc	r13, r1
    36c0:	43 e0       	ldi	r20, 0x03	; 3
    36c2:	50 e0       	ldi	r21, 0x00	; 0
    36c4:	6e e9       	ldi	r22, 0x9E	; 158
    36c6:	70 e0       	ldi	r23, 0x00	; 0
    36c8:	c6 01       	movw	r24, r12
    36ca:	0e 94 92 1c 	call	0x3924	; 0x3924 <strncasecmp_P>
    36ce:	89 2b       	or	r24, r25
    36d0:	f1 f4       	brne	.+60     	; 0x370e <strtod+0xaa>
    36d2:	68 01       	movw	r12, r16
    36d4:	22 e0       	ldi	r18, 0x02	; 2
    36d6:	c2 0e       	add	r12, r18
    36d8:	d1 1c       	adc	r13, r1
    36da:	45 e0       	ldi	r20, 0x05	; 5
    36dc:	50 e0       	ldi	r21, 0x00	; 0
    36de:	69 e9       	ldi	r22, 0x99	; 153
    36e0:	70 e0       	ldi	r23, 0x00	; 0
    36e2:	c6 01       	movw	r24, r12
    36e4:	0e 94 92 1c 	call	0x3924	; 0x3924 <strncasecmp_P>
    36e8:	89 2b       	or	r24, r25
    36ea:	21 f4       	brne	.+8      	; 0x36f4 <strtod+0x90>
    36ec:	68 01       	movw	r12, r16
    36ee:	87 e0       	ldi	r24, 0x07	; 7
    36f0:	c8 0e       	add	r12, r24
    36f2:	d1 1c       	adc	r13, r1
    36f4:	e1 14       	cp	r14, r1
    36f6:	f1 04       	cpc	r15, r1
    36f8:	19 f0       	breq	.+6      	; 0x3700 <strtod+0x9c>
    36fa:	d7 01       	movw	r26, r14
    36fc:	cd 92       	st	X+, r12
    36fe:	dc 92       	st	X, r13
    3700:	c1 11       	cpse	r28, r1
    3702:	ff c0       	rjmp	.+510    	; 0x3902 <strtod+0x29e>
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	70 e0       	ldi	r23, 0x00	; 0
    3708:	80 e8       	ldi	r24, 0x80	; 128
    370a:	9f e7       	ldi	r25, 0x7F	; 127
    370c:	03 c1       	rjmp	.+518    	; 0x3914 <strtod+0x2b0>
    370e:	43 e0       	ldi	r20, 0x03	; 3
    3710:	50 e0       	ldi	r21, 0x00	; 0
    3712:	66 e9       	ldi	r22, 0x96	; 150
    3714:	70 e0       	ldi	r23, 0x00	; 0
    3716:	c6 01       	movw	r24, r12
    3718:	0e 94 92 1c 	call	0x3924	; 0x3924 <strncasecmp_P>
    371c:	89 2b       	or	r24, r25
    371e:	51 f4       	brne	.+20     	; 0x3734 <strtod+0xd0>
    3720:	e1 14       	cp	r14, r1
    3722:	f1 04       	cpc	r15, r1
    3724:	09 f4       	brne	.+2      	; 0x3728 <strtod+0xc4>
    3726:	f2 c0       	rjmp	.+484    	; 0x390c <strtod+0x2a8>
    3728:	0e 5f       	subi	r16, 0xFE	; 254
    372a:	1f 4f       	sbci	r17, 0xFF	; 255
    372c:	f7 01       	movw	r30, r14
    372e:	11 83       	std	Z+1, r17	; 0x01
    3730:	00 83       	st	Z, r16
    3732:	ec c0       	rjmp	.+472    	; 0x390c <strtod+0x2a8>
    3734:	68 01       	movw	r12, r16
    3736:	60 e0       	ldi	r22, 0x00	; 0
    3738:	70 e0       	ldi	r23, 0x00	; 0
    373a:	cb 01       	movw	r24, r22
    373c:	00 e0       	ldi	r16, 0x00	; 0
    373e:	10 e0       	ldi	r17, 0x00	; 0
    3740:	f6 01       	movw	r30, r12
    3742:	d0 ed       	ldi	r29, 0xD0	; 208
    3744:	d7 0d       	add	r29, r7
    3746:	da 30       	cpi	r29, 0x0A	; 10
    3748:	58 f5       	brcc	.+86     	; 0x37a0 <strtod+0x13c>
    374a:	2c 2f       	mov	r18, r28
    374c:	22 60       	ori	r18, 0x02	; 2
    374e:	62 2e       	mov	r6, r18
    3750:	2c 2f       	mov	r18, r28
    3752:	28 70       	andi	r18, 0x08	; 8
    3754:	c2 ff       	sbrs	r28, 2
    3756:	05 c0       	rjmp	.+10     	; 0x3762 <strtod+0xfe>
    3758:	21 11       	cpse	r18, r1
    375a:	28 c0       	rjmp	.+80     	; 0x37ac <strtod+0x148>
    375c:	0f 5f       	subi	r16, 0xFF	; 255
    375e:	1f 4f       	sbci	r17, 0xFF	; 255
    3760:	25 c0       	rjmp	.+74     	; 0x37ac <strtod+0x148>
    3762:	22 23       	and	r18, r18
    3764:	11 f0       	breq	.+4      	; 0x376a <strtod+0x106>
    3766:	01 50       	subi	r16, 0x01	; 1
    3768:	11 09       	sbc	r17, r1
    376a:	a5 e0       	ldi	r26, 0x05	; 5
    376c:	b0 e0       	ldi	r27, 0x00	; 0
    376e:	9b 01       	movw	r18, r22
    3770:	ac 01       	movw	r20, r24
    3772:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__muluhisi3>
    3776:	4b 01       	movw	r8, r22
    3778:	5c 01       	movw	r10, r24
    377a:	88 0c       	add	r8, r8
    377c:	99 1c       	adc	r9, r9
    377e:	aa 1c       	adc	r10, r10
    3780:	bb 1c       	adc	r11, r11
    3782:	c5 01       	movw	r24, r10
    3784:	b4 01       	movw	r22, r8
    3786:	6d 0f       	add	r22, r29
    3788:	71 1d       	adc	r23, r1
    378a:	81 1d       	adc	r24, r1
    378c:	91 1d       	adc	r25, r1
    378e:	68 39       	cpi	r22, 0x98	; 152
    3790:	a9 e9       	ldi	r26, 0x99	; 153
    3792:	7a 07       	cpc	r23, r26
    3794:	8a 07       	cpc	r24, r26
    3796:	a9 e1       	ldi	r26, 0x19	; 25
    3798:	9a 07       	cpc	r25, r26
    379a:	40 f0       	brcs	.+16     	; 0x37ac <strtod+0x148>
    379c:	c6 60       	ori	r28, 0x06	; 6
    379e:	05 c0       	rjmp	.+10     	; 0x37aa <strtod+0x146>
    37a0:	de 3f       	cpi	r29, 0xFE	; 254
    37a2:	51 f4       	brne	.+20     	; 0x37b8 <strtod+0x154>
    37a4:	c3 fd       	sbrc	r28, 3
    37a6:	44 c0       	rjmp	.+136    	; 0x3830 <strtod+0x1cc>
    37a8:	c8 60       	ori	r28, 0x08	; 8
    37aa:	6c 2e       	mov	r6, r28
    37ac:	bf ef       	ldi	r27, 0xFF	; 255
    37ae:	cb 1a       	sub	r12, r27
    37b0:	db 0a       	sbc	r13, r27
    37b2:	70 80       	ld	r7, Z
    37b4:	c6 2d       	mov	r28, r6
    37b6:	c4 cf       	rjmp	.-120    	; 0x3740 <strtod+0xdc>
    37b8:	2d 2f       	mov	r18, r29
    37ba:	2f 7d       	andi	r18, 0xDF	; 223
    37bc:	25 31       	cpi	r18, 0x15	; 21
    37be:	c1 f5       	brne	.+112    	; 0x3830 <strtod+0x1cc>
    37c0:	40 81       	ld	r20, Z
    37c2:	4d 32       	cpi	r20, 0x2D	; 45
    37c4:	11 f4       	brne	.+4      	; 0x37ca <strtod+0x166>
    37c6:	c0 61       	ori	r28, 0x10	; 16
    37c8:	06 c0       	rjmp	.+12     	; 0x37d6 <strtod+0x172>
    37ca:	4b 32       	cpi	r20, 0x2B	; 43
    37cc:	21 f0       	breq	.+8      	; 0x37d6 <strtod+0x172>
    37ce:	31 96       	adiw	r30, 0x01	; 1
    37d0:	21 e0       	ldi	r18, 0x01	; 1
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	06 c0       	rjmp	.+12     	; 0x37e2 <strtod+0x17e>
    37d6:	32 96       	adiw	r30, 0x02	; 2
    37d8:	d6 01       	movw	r26, r12
    37da:	11 96       	adiw	r26, 0x01	; 1
    37dc:	4c 91       	ld	r20, X
    37de:	22 e0       	ldi	r18, 0x02	; 2
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	a0 ed       	ldi	r26, 0xD0	; 208
    37e4:	a4 0f       	add	r26, r20
    37e6:	aa 30       	cpi	r26, 0x0A	; 10
    37e8:	18 f0       	brcs	.+6      	; 0x37f0 <strtod+0x18c>
    37ea:	e2 1b       	sub	r30, r18
    37ec:	f3 0b       	sbc	r31, r19
    37ee:	20 c0       	rjmp	.+64     	; 0x3830 <strtod+0x1cc>
    37f0:	40 e0       	ldi	r20, 0x00	; 0
    37f2:	50 e0       	ldi	r21, 0x00	; 0
    37f4:	40 38       	cpi	r20, 0x80	; 128
    37f6:	bc e0       	ldi	r27, 0x0C	; 12
    37f8:	5b 07       	cpc	r21, r27
    37fa:	5c f4       	brge	.+22     	; 0x3812 <strtod+0x1ae>
    37fc:	9a 01       	movw	r18, r20
    37fe:	22 0f       	add	r18, r18
    3800:	33 1f       	adc	r19, r19
    3802:	22 0f       	add	r18, r18
    3804:	33 1f       	adc	r19, r19
    3806:	42 0f       	add	r20, r18
    3808:	53 1f       	adc	r21, r19
    380a:	44 0f       	add	r20, r20
    380c:	55 1f       	adc	r21, r21
    380e:	4a 0f       	add	r20, r26
    3810:	51 1d       	adc	r21, r1
    3812:	31 96       	adiw	r30, 0x01	; 1
    3814:	df 01       	movw	r26, r30
    3816:	11 97       	sbiw	r26, 0x01	; 1
    3818:	2c 91       	ld	r18, X
    381a:	a0 ed       	ldi	r26, 0xD0	; 208
    381c:	a2 0f       	add	r26, r18
    381e:	aa 30       	cpi	r26, 0x0A	; 10
    3820:	48 f3       	brcs	.-46     	; 0x37f4 <strtod+0x190>
    3822:	c4 ff       	sbrs	r28, 4
    3824:	03 c0       	rjmp	.+6      	; 0x382c <strtod+0x1c8>
    3826:	51 95       	neg	r21
    3828:	41 95       	neg	r20
    382a:	51 09       	sbc	r21, r1
    382c:	04 0f       	add	r16, r20
    382e:	15 1f       	adc	r17, r21
    3830:	c1 ff       	sbrs	r28, 1
    3832:	07 c0       	rjmp	.+14     	; 0x3842 <strtod+0x1de>
    3834:	e1 14       	cp	r14, r1
    3836:	f1 04       	cpc	r15, r1
    3838:	21 f0       	breq	.+8      	; 0x3842 <strtod+0x1de>
    383a:	31 97       	sbiw	r30, 0x01	; 1
    383c:	d7 01       	movw	r26, r14
    383e:	ed 93       	st	X+, r30
    3840:	fc 93       	st	X, r31
    3842:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__floatunsisf>
    3846:	c3 70       	andi	r28, 0x03	; 3
    3848:	c3 30       	cpi	r28, 0x03	; 3
    384a:	19 f0       	breq	.+6      	; 0x3852 <strtod+0x1ee>
    384c:	6b 01       	movw	r12, r22
    384e:	7c 01       	movw	r14, r24
    3850:	06 c0       	rjmp	.+12     	; 0x385e <strtod+0x1fa>
    3852:	6b 01       	movw	r12, r22
    3854:	7c 01       	movw	r14, r24
    3856:	f7 fa       	bst	r15, 7
    3858:	f0 94       	com	r15
    385a:	f7 f8       	bld	r15, 7
    385c:	f0 94       	com	r15
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	a9 01       	movw	r20, r18
    3864:	c7 01       	movw	r24, r14
    3866:	b6 01       	movw	r22, r12
    3868:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
    386c:	88 23       	and	r24, r24
    386e:	09 f4       	brne	.+2      	; 0x3872 <strtod+0x20e>
    3870:	45 c0       	rjmp	.+138    	; 0x38fc <strtod+0x298>
    3872:	17 ff       	sbrs	r17, 7
    3874:	06 c0       	rjmp	.+12     	; 0x3882 <strtod+0x21e>
    3876:	11 95       	neg	r17
    3878:	01 95       	neg	r16
    387a:	11 09       	sbc	r17, r1
    387c:	c5 eb       	ldi	r28, 0xB5	; 181
    387e:	d0 e0       	ldi	r29, 0x00	; 0
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <strtod+0x222>
    3882:	cd ec       	ldi	r28, 0xCD	; 205
    3884:	d0 e0       	ldi	r29, 0x00	; 0
    3886:	5e 01       	movw	r10, r28
    3888:	b8 e1       	ldi	r27, 0x18	; 24
    388a:	ab 1a       	sub	r10, r27
    388c:	b1 08       	sbc	r11, r1
    388e:	46 01       	movw	r8, r12
    3890:	be 2d       	mov	r27, r14
    3892:	af 2d       	mov	r26, r15
    3894:	90 e2       	ldi	r25, 0x20	; 32
    3896:	e9 2e       	mov	r14, r25
    3898:	f1 2c       	mov	r15, r1
    389a:	0e 15       	cp	r16, r14
    389c:	1f 05       	cpc	r17, r15
    389e:	84 f0       	brlt	.+32     	; 0x38c0 <strtod+0x25c>
    38a0:	fe 01       	movw	r30, r28
    38a2:	25 91       	lpm	r18, Z+
    38a4:	35 91       	lpm	r19, Z+
    38a6:	45 91       	lpm	r20, Z+
    38a8:	54 91       	lpm	r21, Z
    38aa:	b4 01       	movw	r22, r8
    38ac:	8b 2f       	mov	r24, r27
    38ae:	9a 2f       	mov	r25, r26
    38b0:	0e 94 30 0b 	call	0x1660	; 0x1660 <__mulsf3>
    38b4:	4b 01       	movw	r8, r22
    38b6:	b8 2f       	mov	r27, r24
    38b8:	a9 2f       	mov	r26, r25
    38ba:	0e 19       	sub	r16, r14
    38bc:	1f 09       	sbc	r17, r15
    38be:	ed cf       	rjmp	.-38     	; 0x389a <strtod+0x236>
    38c0:	24 97       	sbiw	r28, 0x04	; 4
    38c2:	f5 94       	asr	r15
    38c4:	e7 94       	ror	r14
    38c6:	ca 15       	cp	r28, r10
    38c8:	db 05       	cpc	r29, r11
    38ca:	39 f7       	brne	.-50     	; 0x389a <strtod+0x236>
    38cc:	64 01       	movw	r12, r8
    38ce:	eb 2e       	mov	r14, r27
    38d0:	fa 2e       	mov	r15, r26
    38d2:	8e 2d       	mov	r24, r14
    38d4:	88 0f       	add	r24, r24
    38d6:	8f 2d       	mov	r24, r15
    38d8:	88 1f       	adc	r24, r24
    38da:	8f 3f       	cpi	r24, 0xFF	; 255
    38dc:	49 f0       	breq	.+18     	; 0x38f0 <strtod+0x28c>
    38de:	20 e0       	ldi	r18, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	a9 01       	movw	r20, r18
    38e4:	c7 01       	movw	r24, r14
    38e6:	b6 01       	movw	r22, r12
    38e8:	0e 94 9d 09 	call	0x133a	; 0x133a <__cmpsf2>
    38ec:	81 11       	cpse	r24, r1
    38ee:	06 c0       	rjmp	.+12     	; 0x38fc <strtod+0x298>
    38f0:	82 e2       	ldi	r24, 0x22	; 34
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <errno+0x1>
    38f8:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <errno>
    38fc:	c7 01       	movw	r24, r14
    38fe:	b6 01       	movw	r22, r12
    3900:	09 c0       	rjmp	.+18     	; 0x3914 <strtod+0x2b0>
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	70 e0       	ldi	r23, 0x00	; 0
    3906:	80 e8       	ldi	r24, 0x80	; 128
    3908:	9f ef       	ldi	r25, 0xFF	; 255
    390a:	04 c0       	rjmp	.+8      	; 0x3914 <strtod+0x2b0>
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	70 e0       	ldi	r23, 0x00	; 0
    3910:	80 ec       	ldi	r24, 0xC0	; 192
    3912:	9f e7       	ldi	r25, 0x7F	; 127
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	ee e0       	ldi	r30, 0x0E	; 14
    391a:	0c 94 d5 1c 	jmp	0x39aa	; 0x39aa <__epilogue_restores__+0x8>

0000391e <__ctype_isfalse>:
    391e:	99 27       	eor	r25, r25
    3920:	88 27       	eor	r24, r24

00003922 <__ctype_istrue>:
    3922:	08 95       	ret

00003924 <strncasecmp_P>:
    3924:	fb 01       	movw	r30, r22
    3926:	dc 01       	movw	r26, r24
    3928:	41 50       	subi	r20, 0x01	; 1
    392a:	50 40       	sbci	r21, 0x00	; 0
    392c:	88 f0       	brcs	.+34     	; 0x3950 <strncasecmp_P+0x2c>
    392e:	8d 91       	ld	r24, X+
    3930:	81 34       	cpi	r24, 0x41	; 65
    3932:	1c f0       	brlt	.+6      	; 0x393a <strncasecmp_P+0x16>
    3934:	8b 35       	cpi	r24, 0x5B	; 91
    3936:	0c f4       	brge	.+2      	; 0x393a <strncasecmp_P+0x16>
    3938:	80 5e       	subi	r24, 0xE0	; 224
    393a:	65 91       	lpm	r22, Z+
    393c:	61 34       	cpi	r22, 0x41	; 65
    393e:	1c f0       	brlt	.+6      	; 0x3946 <strncasecmp_P+0x22>
    3940:	6b 35       	cpi	r22, 0x5B	; 91
    3942:	0c f4       	brge	.+2      	; 0x3946 <strncasecmp_P+0x22>
    3944:	60 5e       	subi	r22, 0xE0	; 224
    3946:	86 1b       	sub	r24, r22
    3948:	61 11       	cpse	r22, r1
    394a:	71 f3       	breq	.-36     	; 0x3928 <strncasecmp_P+0x4>
    394c:	99 0b       	sbc	r25, r25
    394e:	08 95       	ret
    3950:	88 1b       	sub	r24, r24
    3952:	fc cf       	rjmp	.-8      	; 0x394c <strncasecmp_P+0x28>

00003954 <__muluhisi3>:
    3954:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <__umulhisi3>
    3958:	a5 9f       	mul	r26, r21
    395a:	90 0d       	add	r25, r0
    395c:	b4 9f       	mul	r27, r20
    395e:	90 0d       	add	r25, r0
    3960:	a4 9f       	mul	r26, r20
    3962:	80 0d       	add	r24, r0
    3964:	91 1d       	adc	r25, r1
    3966:	11 24       	eor	r1, r1
    3968:	08 95       	ret

0000396a <__prologue_saves__>:
    396a:	2f 92       	push	r2
    396c:	3f 92       	push	r3
    396e:	4f 92       	push	r4
    3970:	5f 92       	push	r5
    3972:	6f 92       	push	r6
    3974:	7f 92       	push	r7
    3976:	8f 92       	push	r8
    3978:	9f 92       	push	r9
    397a:	af 92       	push	r10
    397c:	bf 92       	push	r11
    397e:	cf 92       	push	r12
    3980:	df 92       	push	r13
    3982:	ef 92       	push	r14
    3984:	ff 92       	push	r15
    3986:	0f 93       	push	r16
    3988:	1f 93       	push	r17
    398a:	cf 93       	push	r28
    398c:	df 93       	push	r29
    398e:	cd b7       	in	r28, 0x3d	; 61
    3990:	de b7       	in	r29, 0x3e	; 62
    3992:	ca 1b       	sub	r28, r26
    3994:	db 0b       	sbc	r29, r27
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	cd bf       	out	0x3d, r28	; 61
    39a0:	09 94       	ijmp

000039a2 <__epilogue_restores__>:
    39a2:	2a 88       	ldd	r2, Y+18	; 0x12
    39a4:	39 88       	ldd	r3, Y+17	; 0x11
    39a6:	48 88       	ldd	r4, Y+16	; 0x10
    39a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    39aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    39ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    39ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    39b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    39b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    39b4:	b9 84       	ldd	r11, Y+9	; 0x09
    39b6:	c8 84       	ldd	r12, Y+8	; 0x08
    39b8:	df 80       	ldd	r13, Y+7	; 0x07
    39ba:	ee 80       	ldd	r14, Y+6	; 0x06
    39bc:	fd 80       	ldd	r15, Y+5	; 0x05
    39be:	0c 81       	ldd	r16, Y+4	; 0x04
    39c0:	1b 81       	ldd	r17, Y+3	; 0x03
    39c2:	aa 81       	ldd	r26, Y+2	; 0x02
    39c4:	b9 81       	ldd	r27, Y+1	; 0x01
    39c6:	ce 0f       	add	r28, r30
    39c8:	d1 1d       	adc	r29, r1
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	f8 94       	cli
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	0f be       	out	0x3f, r0	; 63
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	ed 01       	movw	r28, r26
    39d6:	08 95       	ret

000039d8 <__umulhisi3>:
    39d8:	a2 9f       	mul	r26, r18
    39da:	b0 01       	movw	r22, r0
    39dc:	b3 9f       	mul	r27, r19
    39de:	c0 01       	movw	r24, r0
    39e0:	a3 9f       	mul	r26, r19
    39e2:	70 0d       	add	r23, r0
    39e4:	81 1d       	adc	r24, r1
    39e6:	11 24       	eor	r1, r1
    39e8:	91 1d       	adc	r25, r1
    39ea:	b2 9f       	mul	r27, r18
    39ec:	70 0d       	add	r23, r0
    39ee:	81 1d       	adc	r24, r1
    39f0:	11 24       	eor	r1, r1
    39f2:	91 1d       	adc	r25, r1
    39f4:	08 95       	ret

000039f6 <__do_global_dtors>:
    39f6:	10 e0       	ldi	r17, 0x00	; 0
    39f8:	c4 e9       	ldi	r28, 0x94	; 148
    39fa:	d0 e0       	ldi	r29, 0x00	; 0
    39fc:	04 c0       	rjmp	.+8      	; 0x3a06 <__do_global_dtors+0x10>
    39fe:	fe 01       	movw	r30, r28
    3a00:	0e 94 dd 18 	call	0x31ba	; 0x31ba <__tablejump2__>
    3a04:	21 96       	adiw	r28, 0x01	; 1
    3a06:	c5 39       	cpi	r28, 0x95	; 149
    3a08:	d1 07       	cpc	r29, r17
    3a0a:	c9 f7       	brne	.-14     	; 0x39fe <__do_global_dtors+0x8>
    3a0c:	f8 94       	cli

00003a0e <__stop_program>:
    3a0e:	ff cf       	rjmp	.-2      	; 0x3a0e <__stop_program>
