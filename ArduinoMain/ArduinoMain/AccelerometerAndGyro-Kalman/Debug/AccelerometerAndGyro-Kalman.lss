
AccelerometerAndGyro-Kalman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012c  00800100  00003a40  00003ad4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024e  0080022c  0080022c  00003c00  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000878  00000000  00000000  00003c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012ba6  00000000  00000000  00004514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d37  00000000  00000000  000170ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000044d9  00000000  00000000  00019df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001af4  00000000  00000000  0001e2cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003342  00000000  00000000  0001fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000091a5  00000000  00000000  00023102  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  0002c2a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 95 00 	jmp	0x12a	; 0x12a <__dtors_end>
       4:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
       8:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
       c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      10:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      14:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      18:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      1c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      20:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      24:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      28:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      2c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      30:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      34:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      38:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      3c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      40:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__vector_16>
      44:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      48:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__vector_18>
      4c:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__vector_19>
      50:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      54:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      58:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      5c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      60:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__vector_24>
      64:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	4e 41       	sbci	r20, 0x1E	; 30
      98:	4e 49       	Address 0x00000098 is out of bounds.
.word	0xffff	; ????

00000099 <pstr_inity>:
      99:	49 4e 49 54 59                                      INITY

0000009e <pstr_inf>:
      9e:	49 4e 46                                            INF

000000a1 <pwr_m10>:
      a1:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      b1:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000b9 <pwr_p10>:
      b9:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      c9:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000d1 <digital_pin_to_timer_PGM>:
      d1:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      e1:	00 00 00 00                                         ....

000000e5 <digital_pin_to_bit_mask_PGM>:
      e5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      f5:	04 08 10 20                                         ... 

000000f9 <digital_pin_to_port_PGM>:
      f9:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     109:	03 03 03 03                                         ....

0000010d <port_to_output_PGM>:
     10d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000117 <port_to_mode_PGM>:
     117:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000122 <__ctors_start>:
     122:	f2 01       	movw	r30, r4
     124:	8f 0d       	add	r24, r15
     126:	8d 16       	cp	r8, r29

00000128 <__ctors_end>:
     128:	0e 02       	muls	r16, r30

0000012a <__dtors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d8 e0       	ldi	r29, 0x08	; 8
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61

00000136 <__do_copy_data>:
     136:	12 e0       	ldi	r17, 0x02	; 2
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	e0 e4       	ldi	r30, 0x40	; 64
     13e:	fa e3       	ldi	r31, 0x3A	; 58
     140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x10>
     142:	05 90       	lpm	r0, Z+
     144:	0d 92       	st	X+, r0
     146:	ac 32       	cpi	r26, 0x2C	; 44
     148:	b1 07       	cpc	r27, r17
     14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0xc>

0000014c <__do_clear_bss>:
     14c:	24 e0       	ldi	r18, 0x04	; 4
     14e:	ac e2       	ldi	r26, 0x2C	; 44
     150:	b2 e0       	ldi	r27, 0x02	; 2
     152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
     154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
     156:	aa 37       	cpi	r26, 0x7A	; 122
     158:	b2 07       	cpc	r27, r18
     15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>

0000015c <__do_global_ctors>:
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	c4 e9       	ldi	r28, 0x94	; 148
     160:	d0 e0       	ldi	r29, 0x00	; 0
     162:	04 c0       	rjmp	.+8      	; 0x16c <__do_global_ctors+0x10>
     164:	21 97       	sbiw	r28, 0x01	; 1
     166:	fe 01       	movw	r30, r28
     168:	0e 94 f5 18 	call	0x31ea	; 0x31ea <__tablejump2__>
     16c:	c1 39       	cpi	r28, 0x91	; 145
     16e:	d1 07       	cpc	r29, r17
     170:	c9 f7       	brne	.-14     	; 0x164 <__do_global_ctors+0x8>
     172:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <main>
     176:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <__do_global_dtors>

0000017a <__bad_interrupt>:
     17a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017e <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
	Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" uT");
	Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" uT");
	Serial.println("------------------------------------");
	Serial.println("");
	delay(500);
}
     17e:	08 95       	ret

00000180 <_ZN7TwoWire5writeEi>:
     180:	dc 01       	movw	r26, r24
     182:	ed 91       	ld	r30, X+
     184:	fc 91       	ld	r31, X
     186:	01 90       	ld	r0, Z+
     188:	f0 81       	ld	r31, Z
     18a:	e0 2d       	mov	r30, r0
     18c:	09 94       	ijmp

0000018e <_Z10MotorsInitv>:
	//A0 = 23
	//A1 = 24
	//A2 = 25
	//D12 = 12

	pinMode(dir1PinLF, OUTPUT);
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <dir1PinLF>
     194:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>
	pinMode(dir2PinLF, OUTPUT);
     198:	61 e0       	ldi	r22, 0x01	; 1
     19a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <dir2PinLF>
     19e:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>
	pinMode(speedPinLF, OUTPUT);
     1a2:	61 e0       	ldi	r22, 0x01	; 1
     1a4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <speedPinLF>
     1a8:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>

	pinMode(dir1PinRF, OUTPUT);
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <dir1PinRF>
     1b2:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>
	pinMode(dir2PinRF, OUTPUT);
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <dir2PinRF>
     1bc:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>
	pinMode(speedPinRF, OUTPUT);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <speedPinRF>
     1c6:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>

	pinMode(dir1PinLB, OUTPUT);
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <dir1PinLB>
     1d0:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>
	pinMode(dir2PinLB, OUTPUT);
     1d4:	61 e0       	ldi	r22, 0x01	; 1
     1d6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dir2PinLB>
     1da:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>
	pinMode(speedPinLB, OUTPUT);
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <speedPinLB>
     1e4:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>

	pinMode(dir1PinRB, OUTPUT);
     1e8:	61 e0       	ldi	r22, 0x01	; 1
     1ea:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dir1PinRB>
     1ee:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>
	pinMode(dir2PinRB, OUTPUT);
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <dir2PinRB>
     1f8:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>
	pinMode(speedPinRB, OUTPUT);
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <speedPinRB>
     202:	0c 94 3e 11 	jmp	0x227c	; 0x227c <pinMode>

00000206 <_Z8wheeldiri>:
	Wire.endTransmission(); //end transmission
}



void wheeldir (int wheelnum) {
     206:	cf 92       	push	r12
     208:	df 92       	push	r13
     20a:	ef 92       	push	r14
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	ec 01       	movw	r28, r24
	if (speedFromPC[wheelnum]>0)
     218:	8c 01       	movw	r16, r24
     21a:	00 0f       	add	r16, r16
     21c:	11 1f       	adc	r17, r17
     21e:	00 0f       	add	r16, r16
     220:	11 1f       	adc	r17, r17
     222:	f8 01       	movw	r30, r16
     224:	e0 5b       	subi	r30, 0xB0	; 176
     226:	fd 4f       	sbci	r31, 0xFD	; 253
     228:	c0 80       	ld	r12, Z
     22a:	d1 80       	ldd	r13, Z+1	; 0x01
     22c:	e2 80       	ldd	r14, Z+2	; 0x02
     22e:	f3 80       	ldd	r15, Z+3	; 0x03
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	a9 01       	movw	r20, r18
     236:	c7 01       	movw	r24, r14
     238:	b6 01       	movw	r22, r12
     23a:	0e 94 29 0b 	call	0x1652	; 0x1652 <__gesf2>
     23e:	cc 0f       	add	r28, r28
     240:	dd 1f       	adc	r29, r29
     242:	18 16       	cp	r1, r24
     244:	4c f4       	brge	.+18     	; 0x258 <_Z8wheeldiri+0x52>
	{
		digitalWrite(dir1[wheelnum],HIGH);
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	fe 01       	movw	r30, r28
     24a:	e2 5f       	subi	r30, 0xF2	; 242
     24c:	fe 4f       	sbci	r31, 0xFE	; 254
     24e:	80 81       	ld	r24, Z
     250:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <digitalWrite>
		digitalWrite(dir2[wheelnum],LOW);
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	13 c0       	rjmp	.+38     	; 0x27e <_Z8wheeldiri+0x78>
	}else if (speedFromPC[wheelnum]<0)
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	a9 01       	movw	r20, r18
     25e:	c7 01       	movw	r24, r14
     260:	b6 01       	movw	r22, r12
     262:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
     266:	87 ff       	sbrs	r24, 7
     268:	02 c0       	rjmp	.+4      	; 0x26e <_Z8wheeldiri+0x68>
	{
		digitalWrite(dir1[wheelnum],LOW);
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	01 c0       	rjmp	.+2      	; 0x270 <_Z8wheeldiri+0x6a>
		digitalWrite(dir2[wheelnum],HIGH);
	} 
	else
	{
		digitalWrite(dir1[wheelnum],HIGH);
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	fe 01       	movw	r30, r28
     272:	e2 5f       	subi	r30, 0xF2	; 242
     274:	fe 4f       	sbci	r31, 0xFE	; 254
     276:	80 81       	ld	r24, Z
     278:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <digitalWrite>
		digitalWrite(dir2[wheelnum],HIGH);
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	fe 01       	movw	r30, r28
     280:	ea 5f       	subi	r30, 0xFA	; 250
     282:	fe 4f       	sbci	r31, 0xFE	; 254
     284:	80 81       	ld	r24, Z
     286:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <digitalWrite>
	}
	analogWrite(speedPin[wheelnum], int(abs(speedFromPC[wheelnum])));
     28a:	f8 01       	movw	r30, r16
     28c:	e0 5b       	subi	r30, 0xB0	; 176
     28e:	fd 4f       	sbci	r31, 0xFD	; 253
     290:	c0 80       	ld	r12, Z
     292:	d1 80       	ldd	r13, Z+1	; 0x01
     294:	e2 80       	ldd	r14, Z+2	; 0x02
     296:	f3 80       	ldd	r15, Z+3	; 0x03
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	a9 01       	movw	r20, r18
     29e:	c7 01       	movw	r24, r14
     2a0:	b6 01       	movw	r22, r12
     2a2:	0e 94 29 0b 	call	0x1652	; 0x1652 <__gesf2>
     2a6:	18 16       	cp	r1, r24
     2a8:	1c f4       	brge	.+6      	; 0x2b0 <_Z8wheeldiri+0xaa>
     2aa:	c7 01       	movw	r24, r14
     2ac:	b6 01       	movw	r22, r12
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <_Z8wheeldiri+0xb0>
     2b0:	c7 01       	movw	r24, r14
     2b2:	b6 01       	movw	r22, r12
     2b4:	90 58       	subi	r25, 0x80	; 128
     2b6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__fixsfsi>
     2ba:	ca 5e       	subi	r28, 0xEA	; 234
     2bc:	de 4f       	sbci	r29, 0xFE	; 254
     2be:	88 81       	ld	r24, Y

}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
	else
	{
		digitalWrite(dir1[wheelnum],HIGH);
		digitalWrite(dir2[wheelnum],HIGH);
	}
	analogWrite(speedPin[wheelnum], int(abs(speedFromPC[wheelnum])));
     2d0:	0c 94 b6 10 	jmp	0x216c	; 0x216c <analogWrite>

000002d4 <_Z9parseDatav>:
		newData = false;
	}
}


void parseData() {
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
	// split the data into its parts
	char * strtokIndx; // this is used by strtok() as an index
	
	strtokIndx = strtok(receivedChars," ");      // get the first part - the string
     2d8:	68 e7       	ldi	r22, 0x78	; 120
     2da:	71 e0       	ldi	r23, 0x01	; 1
     2dc:	8f e2       	ldi	r24, 0x2F	; 47
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <strtok>
	speedFromPC[0] = atof(strtokIndx);     // convert this part to an float
     2e4:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <atof>
     2e8:	c0 e5       	ldi	r28, 0x50	; 80
     2ea:	d2 e0       	ldi	r29, 0x02	; 2
     2ec:	68 83       	st	Y, r22
     2ee:	79 83       	std	Y+1, r23	; 0x01
     2f0:	8a 83       	std	Y+2, r24	; 0x02
     2f2:	9b 83       	std	Y+3, r25	; 0x03
	
	strtokIndx = strtok(NULL, " "); // this continues where the previous call left off
     2f4:	68 e7       	ldi	r22, 0x78	; 120
     2f6:	71 e0       	ldi	r23, 0x01	; 1
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <strtok>
	speedFromPC[1] = atof(strtokIndx);     // convert this part to an float
     300:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <atof>
     304:	6c 83       	std	Y+4, r22	; 0x04
     306:	7d 83       	std	Y+5, r23	; 0x05
     308:	8e 83       	std	Y+6, r24	; 0x06
     30a:	9f 83       	std	Y+7, r25	; 0x07
	
	strtokIndx = strtok(NULL, " ");
     30c:	68 e7       	ldi	r22, 0x78	; 120
     30e:	71 e0       	ldi	r23, 0x01	; 1
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <strtok>
	speedFromPC[2] = atof(strtokIndx);     // convert this part to a float
     318:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <atof>
     31c:	68 87       	std	Y+8, r22	; 0x08
     31e:	79 87       	std	Y+9, r23	; 0x09
     320:	8a 87       	std	Y+10, r24	; 0x0a
     322:	9b 87       	std	Y+11, r25	; 0x0b

	strtokIndx = strtok(NULL, " ");
     324:	68 e7       	ldi	r22, 0x78	; 120
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <strtok>
	speedFromPC[3] = atof(strtokIndx);     // convert this part to a float
     330:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <atof>
     334:	6c 87       	std	Y+12, r22	; 0x0c
     336:	7d 87       	std	Y+13, r23	; 0x0d
     338:	8e 87       	std	Y+14, r24	; 0x0e
     33a:	9f 87       	std	Y+15, r25	; 0x0f

}
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <_Z14showParsedDatav>:


void showParsedData() {
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
	Serial.print("LF ");
     346:	69 ec       	ldi	r22, 0xC9	; 201
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	8e e0       	ldi	r24, 0x0E	; 14
     34c:	93 e0       	ldi	r25, 0x03	; 3
     34e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>
	Serial.print(speedFromPC[0]);
     352:	c0 e5       	ldi	r28, 0x50	; 80
     354:	d2 e0       	ldi	r29, 0x02	; 2
     356:	48 81       	ld	r20, Y
     358:	59 81       	ldd	r21, Y+1	; 0x01
     35a:	6a 81       	ldd	r22, Y+2	; 0x02
     35c:	7b 81       	ldd	r23, Y+3	; 0x03
     35e:	22 e0       	ldi	r18, 0x02	; 2
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	8e e0       	ldi	r24, 0x0E	; 14
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
	Serial.print(" RF ");
     36a:	6d ec       	ldi	r22, 0xCD	; 205
     36c:	71 e0       	ldi	r23, 0x01	; 1
     36e:	8e e0       	ldi	r24, 0x0E	; 14
     370:	93 e0       	ldi	r25, 0x03	; 3
     372:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>
	Serial.print(speedFromPC[1]);
     376:	4c 81       	ldd	r20, Y+4	; 0x04
     378:	5d 81       	ldd	r21, Y+5	; 0x05
     37a:	6e 81       	ldd	r22, Y+6	; 0x06
     37c:	7f 81       	ldd	r23, Y+7	; 0x07
     37e:	22 e0       	ldi	r18, 0x02	; 2
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	8e e0       	ldi	r24, 0x0E	; 14
     384:	93 e0       	ldi	r25, 0x03	; 3
     386:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
	Serial.print(" LB ");
     38a:	62 ed       	ldi	r22, 0xD2	; 210
     38c:	71 e0       	ldi	r23, 0x01	; 1
     38e:	8e e0       	ldi	r24, 0x0E	; 14
     390:	93 e0       	ldi	r25, 0x03	; 3
     392:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>
	Serial.print(speedFromPC[2]);
     396:	48 85       	ldd	r20, Y+8	; 0x08
     398:	59 85       	ldd	r21, Y+9	; 0x09
     39a:	6a 85       	ldd	r22, Y+10	; 0x0a
     39c:	7b 85       	ldd	r23, Y+11	; 0x0b
     39e:	22 e0       	ldi	r18, 0x02	; 2
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	8e e0       	ldi	r24, 0x0E	; 14
     3a4:	93 e0       	ldi	r25, 0x03	; 3
     3a6:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
	Serial.print(" RB ");
     3aa:	67 ed       	ldi	r22, 0xD7	; 215
     3ac:	71 e0       	ldi	r23, 0x01	; 1
     3ae:	8e e0       	ldi	r24, 0x0E	; 14
     3b0:	93 e0       	ldi	r25, 0x03	; 3
     3b2:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>
	Serial.println(speedFromPC[3]);
     3b6:	4c 85       	ldd	r20, Y+12	; 0x0c
     3b8:	5d 85       	ldd	r21, Y+13	; 0x0d
     3ba:	6e 85       	ldd	r22, Y+14	; 0x0e
     3bc:	7f 85       	ldd	r23, Y+15	; 0x0f
     3be:	22 e0       	ldi	r18, 0x02	; 2
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	8e e0       	ldi	r24, 0x0E	; 14
     3c4:	93 e0       	ldi	r25, 0x03	; 3
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
	Serial.print(" RF ");
	Serial.print(speedFromPC[1]);
	Serial.print(" LB ");
	Serial.print(speedFromPC[2]);
	Serial.print(" RB ");
	Serial.println(speedFromPC[3]);
     3ca:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <_ZN5Print7printlnEdi>

000003ce <_Z11showNewDatav>:
		}
	}
}

void showNewData() {
	if (newData == true) {
     3ce:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <newData>
     3d2:	88 23       	and	r24, r24
     3d4:	31 f0       	breq	.+12     	; 0x3e2 <_Z11showNewDatav+0x14>
		parseData();
     3d6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z9parseDatav>
		showParsedData();
     3da:	0e 94 a1 01 	call	0x342	; 0x342 <_Z14showParsedDatav>
		newData = false;
     3de:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <newData>
     3e2:	08 95       	ret

000003e4 <_GLOBAL__sub_I_mag>:
//End of Auto generated function prototypes by Atmel Studio



/* Assign a unique ID to this sensor at the same time */
Adafruit_HMC5883_Unified mag = Adafruit_HMC5883_Unified(12345);
     3e4:	49 e3       	ldi	r20, 0x39	; 57
     3e6:	50 e3       	ldi	r21, 0x30	; 48
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	86 ef       	ldi	r24, 0xF6	; 246
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	0e 94 94 12 	call	0x2528	; 0x2528 <_ZN24Adafruit_HMC5883_UnifiedC1El>
int g_offy = 20;
int g_offz = 93;
int truetemp;
uint32_t timer;

Kalman kalmanX; // Create the Kalman instances
     3f4:	88 ec       	ldi	r24, 0xC8	; 200
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	0e 94 a5 13 	call	0x274a	; 0x274a <_ZN6KalmanC1Ev>
Kalman kalmanY;
     3fc:	80 ea       	ldi	r24, 0xA0	; 160
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	0e 94 a5 13 	call	0x274a	; 0x274a <_ZN6KalmanC1Ev>
double kalAngleX, kalAngleY; // Calculated angle using a Kalman filter
float headingDegrees;

int d = 100;
int speedall = 255;
String inputString = "";         // a string to hold incoming data
     404:	67 ef       	ldi	r22, 0xF7	; 247
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	86 e6       	ldi	r24, 0x66	; 102
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN6StringC1EPKc>
boolean stringComplete = false;  // whether the string is complete
String newlinechar = "\n\r";
     410:	6c ed       	ldi	r22, 0xDC	; 220
     412:	71 e0       	ldi	r23, 0x01	; 1
     414:	80 e6       	ldi	r24, 0x60	; 96
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	0c 94 18 12 	jmp	0x2430	; 0x2430 <_ZN6StringC1EPKc>

0000041c <_GLOBAL__sub_D_mag>:
     41c:	80 e6       	ldi	r24, 0x60	; 96
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	0e 94 aa 11 	call	0x2354	; 0x2354 <_ZN6StringD1Ev>
double kalAngleX, kalAngleY; // Calculated angle using a Kalman filter
float headingDegrees;

int d = 100;
int speedall = 255;
String inputString = "";         // a string to hold incoming data
     424:	86 e6       	ldi	r24, 0x66	; 102
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <_ZN6StringD1Ev>

0000042c <_Z17AccelerometerInitv>:
	pinMode(dir2PinRB, OUTPUT);
	pinMode(speedPinRB, OUTPUT);
}

void AccelerometerInit()
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
	Wire.beginTransmission(0x40); // address of the accelerometer
     430:	60 e4       	ldi	r22, 0x40	; 64
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	84 eb       	ldi	r24, 0xB4	; 180
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7TwoWire17beginTransmissionEi>
	// reset the accelerometer
	Wire.write(0x10);
     43c:	60 e1       	ldi	r22, 0x10	; 16
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	84 eb       	ldi	r24, 0xB4	; 180
     442:	93 e0       	ldi	r25, 0x03	; 3
     444:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.write(0xB6);
     448:	66 eb       	ldi	r22, 0xB6	; 182
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	84 eb       	ldi	r24, 0xB4	; 180
     44e:	93 e0       	ldi	r25, 0x03	; 3
     450:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     454:	84 eb       	ldi	r24, 0xB4	; 180
     456:	93 e0       	ldi	r25, 0x03	; 3
     458:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>
	delay(10);
     45c:	6a e0       	ldi	r22, 0x0A	; 10
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 3f 10 	call	0x207e	; 0x207e <delay>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     468:	60 e4       	ldi	r22, 0x40	; 64
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	84 eb       	ldi	r24, 0xB4	; 180
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7TwoWire17beginTransmissionEi>
	// low pass filter, range settings
	Wire.write(0x0D);
     474:	6d e0       	ldi	r22, 0x0D	; 13
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	84 eb       	ldi	r24, 0xB4	; 180
     47a:	93 e0       	ldi	r25, 0x03	; 3
     47c:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.write(0x10);
     480:	60 e1       	ldi	r22, 0x10	; 16
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	84 eb       	ldi	r24, 0xB4	; 180
     486:	93 e0       	ldi	r25, 0x03	; 3
     488:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     48c:	84 eb       	ldi	r24, 0xB4	; 180
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     494:	60 e4       	ldi	r22, 0x40	; 64
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	84 eb       	ldi	r24, 0xB4	; 180
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x20); // read from here
     4a0:	60 e2       	ldi	r22, 0x20	; 32
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	84 eb       	ldi	r24, 0xB4	; 180
     4a6:	93 e0       	ldi	r25, 0x03	; 3
     4a8:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     4ac:	84 eb       	ldi	r24, 0xB4	; 180
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 1);
     4b4:	41 e0       	ldi	r20, 0x01	; 1
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	60 e4       	ldi	r22, 0x40	; 64
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	84 eb       	ldi	r24, 0xB4	; 180
     4be:	93 e0       	ldi	r25, 0x03	; 3
     4c0:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <_ZN7TwoWire11requestFromEii>
	byte data = Wire.read();
     4c4:	84 eb       	ldi	r24, 0xB4	; 180
     4c6:	93 e0       	ldi	r25, 0x03	; 3
     4c8:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
     4cc:	ec 01       	movw	r28, r24

	Wire.beginTransmission(0x40); // address of the accelerometer
     4ce:	60 e4       	ldi	r22, 0x40	; 64
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	84 eb       	ldi	r24, 0xB4	; 180
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x20);
     4da:	60 e2       	ldi	r22, 0x20	; 32
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	84 eb       	ldi	r24, 0xB4	; 180
     4e0:	93 e0       	ldi	r25, 0x03	; 3
     4e2:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	//	Wire.write(data & 0x0F); // low pass filter to 10 Hz
	Wire.write(data & 0x0F); // low pass filter to 10 Hz
     4e6:	be 01       	movw	r22, r28
     4e8:	6f 70       	andi	r22, 0x0F	; 15
     4ea:	77 27       	eor	r23, r23
     4ec:	84 eb       	ldi	r24, 0xB4	; 180
     4ee:	93 e0       	ldi	r25, 0x03	; 3
     4f0:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     4f4:	84 eb       	ldi	r24, 0xB4	; 180
     4f6:	93 e0       	ldi	r25, 0x03	; 3
     4f8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     4fc:	60 e4       	ldi	r22, 0x40	; 64
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	84 eb       	ldi	r24, 0xB4	; 180
     502:	93 e0       	ldi	r25, 0x03	; 3
     504:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x35); // read from here
     508:	65 e3       	ldi	r22, 0x35	; 53
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	84 eb       	ldi	r24, 0xB4	; 180
     50e:	93 e0       	ldi	r25, 0x03	; 3
     510:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     514:	84 eb       	ldi	r24, 0xB4	; 180
     516:	93 e0       	ldi	r25, 0x03	; 3
     518:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 1);
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	60 e4       	ldi	r22, 0x40	; 64
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	84 eb       	ldi	r24, 0xB4	; 180
     526:	93 e0       	ldi	r25, 0x03	; 3
     528:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     52c:	84 eb       	ldi	r24, 0xB4	; 180
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
     534:	ec 01       	movw	r28, r24
	Wire.beginTransmission(0x40); // address of the accelerometer
     536:	60 e4       	ldi	r22, 0x40	; 64
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	84 eb       	ldi	r24, 0xB4	; 180
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x35);
     542:	65 e3       	ldi	r22, 0x35	; 53
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	84 eb       	ldi	r24, 0xB4	; 180
     548:	93 e0       	ldi	r25, 0x03	; 3
     54a:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.write((data & 0xF1) | 0x04); // range +/- 2g
     54e:	be 01       	movw	r22, r28
     550:	61 7f       	andi	r22, 0xF1	; 241
     552:	77 27       	eor	r23, r23
     554:	64 60       	ori	r22, 0x04	; 4
     556:	84 eb       	ldi	r24, 0xB4	; 180
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     55e:	84 eb       	ldi	r24, 0xB4	; 180
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(0x40); // address of the accelerometer
     566:	60 e4       	ldi	r22, 0x40	; 64
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	84 eb       	ldi	r24, 0xB4	; 180
     56c:	93 e0       	ldi	r25, 0x03	; 3
     56e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x30);
     572:	60 e3       	ldi	r22, 0x30	; 48
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	84 eb       	ldi	r24, 0xB4	; 180
     578:	93 e0       	ldi	r25, 0x03	; 3
     57a:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	//Wire.write(0x); //
	Wire.endTransmission();
     57e:	84 eb       	ldi	r24, 0xB4	; 180
     580:	93 e0       	ldi	r25, 0x03	; 3

	//Serial.println(data, BIN);

}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
	Wire.endTransmission();

	Wire.beginTransmission(0x40); // address of the accelerometer
	Wire.write(0x30);
	//Wire.write(0x); //
	Wire.endTransmission();
     586:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>

0000058a <_Z17AccelerometerReadv>:
	//Serial.println(data, BIN);

}

void AccelerometerRead()
{
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
	Wire.beginTransmission(0x40); // address of the accelerometer
     58e:	60 e4       	ldi	r22, 0x40	; 64
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	84 eb       	ldi	r24, 0xB4	; 180
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x02); // set read pointer to data
     59a:	62 e0       	ldi	r22, 0x02	; 2
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	84 eb       	ldi	r24, 0xB4	; 180
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     5a6:	84 eb       	ldi	r24, 0xB4	; 180
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 6);
     5ae:	46 e0       	ldi	r20, 0x06	; 6
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	60 e4       	ldi	r22, 0x40	; 64
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	84 eb       	ldi	r24, 0xB4	; 180
     5b8:	93 e0       	ldi	r25, 0x03	; 3
     5ba:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <_ZN7TwoWire11requestFromEii>
	
	// read in the 3 axis data, each one is 16 bits
	// print the data to terminal
	
	short data = Wire.read();
     5be:	84 eb       	ldi	r24, 0xB4	; 180
     5c0:	93 e0       	ldi	r25, 0x03	; 3
     5c2:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
     5c6:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     5c8:	84 eb       	ldi	r24, 0xB4	; 180
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	78 2f       	mov	r23, r24
     5d6:	6c 0f       	add	r22, r28
     5d8:	7d 1f       	adc	r23, r29
	accX = data;
     5da:	07 2e       	mov	r0, r23
     5dc:	00 0c       	add	r0, r0
     5de:	88 0b       	sbc	r24, r24
     5e0:	99 0b       	sbc	r25, r25
     5e2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__floatsisf>
     5e6:	60 93 9c 02 	sts	0x029C, r22	; 0x80029c <accX>
     5ea:	70 93 9d 02 	sts	0x029D, r23	; 0x80029d <accX+0x1>
     5ee:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <accX+0x2>
     5f2:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <accX+0x3>
	data = Wire.read();
     5f6:	84 eb       	ldi	r24, 0xB4	; 180
     5f8:	93 e0       	ldi	r25, 0x03	; 3
     5fa:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
     5fe:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     600:	84 eb       	ldi	r24, 0xB4	; 180
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	78 2f       	mov	r23, r24
     60e:	6c 0f       	add	r22, r28
     610:	7d 1f       	adc	r23, r29
	accY = data;
     612:	07 2e       	mov	r0, r23
     614:	00 0c       	add	r0, r0
     616:	88 0b       	sbc	r24, r24
     618:	99 0b       	sbc	r25, r25
     61a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__floatsisf>
     61e:	60 93 98 02 	sts	0x0298, r22	; 0x800298 <accY>
     622:	70 93 99 02 	sts	0x0299, r23	; 0x800299 <accY+0x1>
     626:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <accY+0x2>
     62a:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <accY+0x3>
	data = Wire.read();
     62e:	84 eb       	ldi	r24, 0xB4	; 180
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
     636:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     638:	84 eb       	ldi	r24, 0xB4	; 180
     63a:	93 e0       	ldi	r25, 0x03	; 3
     63c:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	78 2f       	mov	r23, r24
     646:	6c 0f       	add	r22, r28
     648:	7d 1f       	adc	r23, r29
	accZ = data;
     64a:	07 2e       	mov	r0, r23
     64c:	00 0c       	add	r0, r0
     64e:	88 0b       	sbc	r24, r24
     650:	99 0b       	sbc	r25, r25
     652:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__floatsisf>
     656:	60 93 94 02 	sts	0x0294, r22	; 0x800294 <accZ>
     65a:	70 93 95 02 	sts	0x0295, r23	; 0x800295 <accZ+0x1>
     65e:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <accZ+0x2>
     662:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <accZ+0x3>
	Serial.print(" , Z = ");
	Serial.print(accZ);
	Serial.println();
	#endif

}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	08 95       	ret

0000066c <_Z7writeToihh>:

	
}

//Writes val to address register on ACC
void writeTo(int DEVICE, byte address, byte val) {
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	1f 92       	push	r1
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	16 2f       	mov	r17, r22
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     67a:	bc 01       	movw	r22, r24
     67c:	84 eb       	ldi	r24, 0xB4	; 180
     67e:	93 e0       	ldi	r25, 0x03	; 3
     680:	49 83       	std	Y+1, r20	; 0x01
     682:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);        // send register address
     686:	61 2f       	mov	r22, r17
     688:	84 eb       	ldi	r24, 0xB4	; 180
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZN7TwoWire5writeEh>
	Wire.write(val);        // send value to write
     690:	49 81       	ldd	r20, Y+1	; 0x01
     692:	64 2f       	mov	r22, r20
     694:	84 eb       	ldi	r24, 0xB4	; 180
     696:	93 e0       	ldi	r25, 0x03	; 3
     698:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZN7TwoWire5writeEh>
	Wire.endTransmission(); //end transmission
     69c:	84 eb       	ldi	r24, 0xB4	; 180
     69e:	93 e0       	ldi	r25, 0x03	; 3
}
     6a0:	0f 90       	pop	r0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
//Writes val to address register on ACC
void writeTo(int DEVICE, byte address, byte val) {
	Wire.beginTransmission(DEVICE); //start transmission to ACC
	Wire.write(address);        // send register address
	Wire.write(val);        // send value to write
	Wire.endTransmission(); //end transmission
     6a8:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>

000006ac <_Z8GyroInitv>:
	* sample rate to = 125Hz
	* parameter to +/- 2000 degrees/sec
	* low pass filter = 5Hz
	* no interrupt
	******************************************/
	writeTo(GYRO, G_PWR_MGM, 0x00);
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	6e e3       	ldi	r22, 0x3E	; 62
     6b0:	88 e6       	ldi	r24, 0x68	; 104
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 36 03 	call	0x66c	; 0x66c <_Z7writeToihh>
	writeTo(GYRO, G_SMPLRT_DIV, 0x07); // EB, 50, 80, 7F, DE, 23, 20, FF
     6b8:	47 e0       	ldi	r20, 0x07	; 7
     6ba:	65 e1       	ldi	r22, 0x15	; 21
     6bc:	88 e6       	ldi	r24, 0x68	; 104
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 36 03 	call	0x66c	; 0x66c <_Z7writeToihh>
	writeTo(GYRO, G_DLPF_FS, 0x1E); // +/- 2000 dgrs/sec, 1KHz, 1E, 19
     6c4:	4e e1       	ldi	r20, 0x1E	; 30
     6c6:	66 e1       	ldi	r22, 0x16	; 22
     6c8:	88 e6       	ldi	r24, 0x68	; 104
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 36 03 	call	0x66c	; 0x66c <_Z7writeToihh>
	writeTo(GYRO, G_INT_CFG, 0x00);
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	67 e1       	ldi	r22, 0x17	; 23
     6d4:	88 e6       	ldi	r24, 0x68	; 104
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0c 94 36 03 	jmp	0x66c	; 0x66c <_Z7writeToihh>

000006dc <setup>:

//initializes the gyroscope
void setup()
{
	#if 1
	newlinechar = "\n";
     6dc:	66 ef       	ldi	r22, 0xF6	; 246
     6de:	71 e0       	ldi	r23, 0x01	; 1
     6e0:	80 e6       	ldi	r24, 0x60	; 96
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	0e 94 2d 12 	call	0x245a	; 0x245a <_ZN6StringaSEPKc>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     6e8:	26 e0       	ldi	r18, 0x06	; 6
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	52 ec       	ldi	r21, 0xC2	; 194
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	8e e0       	ldi	r24, 0x0E	; 14
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN14HardwareSerial5beginEmh>
	#endif

		
	Serial.begin(115200);
	Wire.begin();
     6fa:	84 eb       	ldi	r24, 0xB4	; 180
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN7TwoWire5beginEv>

	MotorsInit();
     702:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z10MotorsInitv>
	AccelerometerInit();
     706:	0e 94 16 02 	call	0x42c	; 0x42c <_Z17AccelerometerInitv>
	GyroInit();
     70a:	0e 94 56 03 	call	0x6ac	; 0x6ac <_Z8GyroInitv>
	inputString.reserve(200); // reserve 200 bytes for the inputString:
     70e:	68 ec       	ldi	r22, 0xC8	; 200
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	86 e6       	ldi	r24, 0x66	; 102
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	0e 94 db 11 	call	0x23b6	; 0x23b6 <_ZN6String7reserveEj>

	Serial.println("start");
     71a:	6f ed       	ldi	r22, 0xDF	; 223
     71c:	71 e0       	ldi	r23, 0x01	; 1
     71e:	8e e0       	ldi	r24, 0x0E	; 14
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN5Print7printlnEPKc>
	timer = micros();
     726:	0e 94 1a 10 	call	0x2034	; 0x2034 <micros>
     72a:	60 93 f0 02 	sts	0x02F0, r22	; 0x8002f0 <timer>
     72e:	70 93 f1 02 	sts	0x02F1, r23	; 0x8002f1 <timer+0x1>
     732:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <timer+0x2>
     736:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <timer+0x3>
     73a:	08 95       	ret

0000073c <_Z8readFromihiPh>:
	Wire.write(val);        // send value to write
	Wire.endTransmission(); //end transmission
}

//reads num bytes starting from address register on ACC in to buff array
void readFrom(int DEVICE, byte address, int num, byte buff[]) {
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	00 d0       	rcall	.+0      	; 0x74a <_Z8readFromihiPh+0xe>
     74a:	00 d0       	rcall	.+0      	; 0x74c <_Z8readFromihiPh+0x10>
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	7c 01       	movw	r14, r24
     752:	16 2f       	mov	r17, r22
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     754:	bc 01       	movw	r22, r24
     756:	84 eb       	ldi	r24, 0xB4	; 180
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	2b 83       	std	Y+3, r18	; 0x03
     75c:	3c 83       	std	Y+4, r19	; 0x04
     75e:	49 83       	std	Y+1, r20	; 0x01
     760:	5a 83       	std	Y+2, r21	; 0x02
     762:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);        //sends address to read from
     766:	61 2f       	mov	r22, r17
     768:	84 eb       	ldi	r24, 0xB4	; 180
     76a:	93 e0       	ldi	r25, 0x03	; 3
     76c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZN7TwoWire5writeEh>
	Wire.endTransmission(); //end transmission
     770:	84 eb       	ldi	r24, 0xB4	; 180
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     778:	b7 01       	movw	r22, r14
     77a:	84 eb       	ldi	r24, 0xB4	; 180
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7TwoWire17beginTransmissionEi>
	Wire.requestFrom(DEVICE, num);    // request 6 bytes from ACC
     782:	49 81       	ldd	r20, Y+1	; 0x01
     784:	5a 81       	ldd	r21, Y+2	; 0x02
     786:	b7 01       	movw	r22, r14
     788:	84 eb       	ldi	r24, 0xB4	; 180
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <_ZN7TwoWire11requestFromEii>
     790:	2b 81       	ldd	r18, Y+3	; 0x03
     792:	02 2f       	mov	r16, r18
     794:	3c 81       	ldd	r19, Y+4	; 0x04
     796:	13 2f       	mov	r17, r19
	
	int i = 0;
	while(Wire.available())    //ACC may send less than requested (abnormal)
     798:	84 eb       	ldi	r24, 0xB4	; 180
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_ZN7TwoWire9availableEv>
     7a0:	89 2b       	or	r24, r25
     7a2:	41 f0       	breq	.+16     	; 0x7b4 <_Z8readFromihiPh+0x78>
	{
		buff[i] = Wire.read(); // receive a byte
     7a4:	84 eb       	ldi	r24, 0xB4	; 180
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
     7ac:	f8 01       	movw	r30, r16
     7ae:	81 93       	st	Z+, r24
     7b0:	8f 01       	movw	r16, r30
     7b2:	f2 cf       	rjmp	.-28     	; 0x798 <_Z8readFromihiPh+0x5c>
		i++;
	}
	Wire.endTransmission(); //end transmission
     7b4:	84 eb       	ldi	r24, 0xB4	; 180
     7b6:	93 e0       	ldi	r25, 0x03	; 3
}
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
	while(Wire.available())    //ACC may send less than requested (abnormal)
	{
		buff[i] = Wire.read(); // receive a byte
		i++;
	}
	Wire.endTransmission(); //end transmission
     7cc:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>

000007d0 <_Z16getGyroscopeDataPi>:
	writeTo(GYRO, G_DLPF_FS, 0x1E); // +/- 2000 dgrs/sec, 1KHz, 1E, 19
	writeTo(GYRO, G_INT_CFG, 0x00);
}

void getGyroscopeData(int * result)
{
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	28 97       	sbiw	r28, 0x08	; 8
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	8c 01       	movw	r16, r24
	z axis MSB = 21, z axis LSB = 22
	*************************************/
	int regAddress = 0x1B;
	int temp, x, y, z;
	byte buff[G_TO_READ];
	readFrom(GYRO, regAddress, G_TO_READ, buff); //read the gyro data from the ITG3200
     7ea:	9e 01       	movw	r18, r28
     7ec:	2f 5f       	subi	r18, 0xFF	; 255
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
     7f0:	48 e0       	ldi	r20, 0x08	; 8
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	6b e1       	ldi	r22, 0x1B	; 27
     7f6:	88 e6       	ldi	r24, 0x68	; 104
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 9e 03 	call	0x73c	; 0x73c <_Z8readFromihiPh>
	result[0] = ((buff[2] << 8) | buff[3]) + g_offx;
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	98 2f       	mov	r25, r24
     804:	88 27       	eor	r24, r24
     806:	2c 81       	ldd	r18, Y+4	; 0x04
     808:	82 2b       	or	r24, r18
     80a:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <g_offx>
     80e:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <g_offx+0x1>
     812:	82 0f       	add	r24, r18
     814:	93 1f       	adc	r25, r19
     816:	f8 01       	movw	r30, r16
     818:	91 83       	std	Z+1, r25	; 0x01
     81a:	80 83       	st	Z, r24
	result[1] = ((buff[4] << 8) | buff[5]) + g_offy;
     81c:	8d 81       	ldd	r24, Y+5	; 0x05
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	98 2f       	mov	r25, r24
     822:	88 27       	eor	r24, r24
     824:	2e 81       	ldd	r18, Y+6	; 0x06
     826:	82 2b       	or	r24, r18
     828:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <g_offy>
     82c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <g_offy+0x1>
     830:	82 0f       	add	r24, r18
     832:	93 1f       	adc	r25, r19
     834:	93 83       	std	Z+3, r25	; 0x03
     836:	82 83       	std	Z+2, r24	; 0x02
	result[2] = ((buff[6] << 8) | buff[7]) + g_offz;
     838:	2f 81       	ldd	r18, Y+7	; 0x07
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	32 2f       	mov	r19, r18
     83e:	22 27       	eor	r18, r18
     840:	88 85       	ldd	r24, Y+8	; 0x08
     842:	28 2b       	or	r18, r24
     844:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_offz>
     848:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <g_offz+0x1>
     84c:	28 0f       	add	r18, r24
     84e:	39 1f       	adc	r19, r25
     850:	35 83       	std	Z+5, r19	; 0x05
     852:	24 83       	std	Z+4, r18	; 0x04
	result[3] = (buff[0] << 8) | buff[1]; // temperature
     854:	29 81       	ldd	r18, Y+1	; 0x01
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	32 2f       	mov	r19, r18
     85a:	22 27       	eor	r18, r18
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	28 2b       	or	r18, r24
     860:	37 83       	std	Z+7, r19	; 0x07
     862:	26 83       	std	Z+6, r18	; 0x06
}
     864:	28 96       	adiw	r28, 0x08	; 8
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	08 95       	ret

0000087a <_Z8GyroReadv>:

void GyroRead (){
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	28 97       	sbiw	r28, 0x08	; 8
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
	byte addr;
	int gyro[4];
	getGyroscopeData(gyro);
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_Z16getGyroscopeDataPi>
	gyroX = gyro[0] / 14.375; //convert to degrees per second
     896:	69 81       	ldd	r22, Y+1	; 0x01
     898:	7a 81       	ldd	r23, Y+2	; 0x02
     89a:	07 2e       	mov	r0, r23
     89c:	00 0c       	add	r0, r0
     89e:	88 0b       	sbc	r24, r24
     8a0:	99 0b       	sbc	r25, r25
     8a2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__floatsisf>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	46 e6       	ldi	r20, 0x66	; 102
     8ac:	51 e4       	ldi	r21, 0x41	; 65
     8ae:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
     8b2:	60 93 90 02 	sts	0x0290, r22	; 0x800290 <gyroX>
     8b6:	70 93 91 02 	sts	0x0291, r23	; 0x800291 <gyroX+0x1>
     8ba:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <gyroX+0x2>
     8be:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <gyroX+0x3>
	gyroY = gyro[1] / 14.375;
     8c2:	6b 81       	ldd	r22, Y+3	; 0x03
     8c4:	7c 81       	ldd	r23, Y+4	; 0x04
     8c6:	07 2e       	mov	r0, r23
     8c8:	00 0c       	add	r0, r0
     8ca:	88 0b       	sbc	r24, r24
     8cc:	99 0b       	sbc	r25, r25
     8ce:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__floatsisf>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	46 e6       	ldi	r20, 0x66	; 102
     8d8:	51 e4       	ldi	r21, 0x41	; 65
     8da:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
     8de:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <gyroY>
     8e2:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <gyroY+0x1>
     8e6:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <gyroY+0x2>
     8ea:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <gyroY+0x3>
	gyroZ = gyro[2] / 14.375;
     8ee:	6d 81       	ldd	r22, Y+5	; 0x05
     8f0:	7e 81       	ldd	r23, Y+6	; 0x06
     8f2:	07 2e       	mov	r0, r23
     8f4:	00 0c       	add	r0, r0
     8f6:	88 0b       	sbc	r24, r24
     8f8:	99 0b       	sbc	r25, r25
     8fa:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__floatsisf>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	46 e6       	ldi	r20, 0x66	; 102
     904:	51 e4       	ldi	r21, 0x41	; 65
     906:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
     90a:	60 93 88 02 	sts	0x0288, r22	; 0x800288 <gyroZ>
     90e:	70 93 89 02 	sts	0x0289, r23	; 0x800289 <gyroZ+0x1>
     912:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <gyroZ+0x2>
     916:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <gyroZ+0x3>
	truetemp = 35+ ((double) (gyro[3] + 13200)) / 280; // temperature
     91a:	6f 81       	ldd	r22, Y+7	; 0x07
     91c:	78 85       	ldd	r23, Y+8	; 0x08
     91e:	60 57       	subi	r22, 0x70	; 112
     920:	7c 4c       	sbci	r23, 0xCC	; 204
     922:	07 2e       	mov	r0, r23
     924:	00 0c       	add	r0, r0
     926:	88 0b       	sbc	r24, r24
     928:	99 0b       	sbc	r25, r25
     92a:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__floatsisf>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	4c e8       	ldi	r20, 0x8C	; 140
     934:	53 e4       	ldi	r21, 0x43	; 67
     936:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	4c e0       	ldi	r20, 0x0C	; 12
     940:	52 e4       	ldi	r21, 0x42	; 66
     942:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
     946:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__fixsfsi>
     94a:	70 93 f5 02 	sts	0x02F5, r23	; 0x8002f5 <truetemp+0x1>
     94e:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <truetemp>
	Serial.println("C");
	//delay(500);
	#endif

	
}
     952:	28 96       	adiw	r28, 0x08	; 8
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <_Z10sensorloopi>:
	Serial.print(" RB ");
	Serial.println(speedFromPC[3]);
}

void sensorloop(int printout)
{
     964:	2f 92       	push	r2
     966:	3f 92       	push	r3
     968:	4f 92       	push	r4
     96a:	5f 92       	push	r5
     96c:	6f 92       	push	r6
     96e:	7f 92       	push	r7
     970:	8f 92       	push	r8
     972:	9f 92       	push	r9
     974:	af 92       	push	r10
     976:	bf 92       	push	r11
     978:	cf 92       	push	r12
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	e8 97       	sbiw	r28, 0x38	; 56
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	1c 01       	movw	r2, r24
	
	AccelerometerRead();
     99a:	0e 94 c5 02 	call	0x58a	; 0x58a <_Z17AccelerometerReadv>
	GyroRead();
     99e:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z8GyroReadv>
	
	double dt = (double)(micros() - timer) / 1000000; // Calculate delta time
     9a2:	0e 94 1a 10 	call	0x2034	; 0x2034 <micros>
     9a6:	c0 90 f0 02 	lds	r12, 0x02F0	; 0x8002f0 <timer>
     9aa:	d0 90 f1 02 	lds	r13, 0x02F1	; 0x8002f1 <timer+0x1>
     9ae:	e0 90 f2 02 	lds	r14, 0x02F2	; 0x8002f2 <timer+0x2>
     9b2:	f0 90 f3 02 	lds	r15, 0x02F3	; 0x8002f3 <timer+0x3>
     9b6:	6c 19       	sub	r22, r12
     9b8:	7d 09       	sbc	r23, r13
     9ba:	8e 09       	sbc	r24, r14
     9bc:	9f 09       	sbc	r25, r15
     9be:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__floatunsisf>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	34 e2       	ldi	r19, 0x24	; 36
     9c6:	44 e7       	ldi	r20, 0x74	; 116
     9c8:	59 e4       	ldi	r21, 0x49	; 73
     9ca:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
     9ce:	69 a7       	std	Y+41, r22	; 0x29
     9d0:	7a a7       	std	Y+42, r23	; 0x2a
     9d2:	8b a7       	std	Y+43, r24	; 0x2b
     9d4:	9c a7       	std	Y+44, r25	; 0x2c
	timer = micros();
     9d6:	0e 94 1a 10 	call	0x2034	; 0x2034 <micros>
     9da:	60 93 f0 02 	sts	0x02F0, r22	; 0x8002f0 <timer>
     9de:	70 93 f1 02 	sts	0x02F1, r23	; 0x8002f1 <timer+0x1>
     9e2:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <timer+0x2>
     9e6:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <timer+0x3>

	// Source: http://www.freescale.com/files/sensors/doc/app_note/AN3461.pdf eq. 25 and eq. 26
	// atan2 outputs the value of -π to π (radians) - see http://en.wikipedia.org/wiki/Atan2
	// It is then converted from radians to degrees
	#ifdef RESTRICT_PITCH // Eq. 25 and 26
	double roll  = atan2(accY, accZ) * RAD_TO_DEG;
     9ea:	c0 90 94 02 	lds	r12, 0x0294	; 0x800294 <accZ>
     9ee:	d0 90 95 02 	lds	r13, 0x0295	; 0x800295 <accZ+0x1>
     9f2:	e0 90 96 02 	lds	r14, 0x0296	; 0x800296 <accZ+0x2>
     9f6:	f0 90 97 02 	lds	r15, 0x0297	; 0x800297 <accZ+0x3>
     9fa:	80 90 98 02 	lds	r8, 0x0298	; 0x800298 <accY>
     9fe:	90 90 99 02 	lds	r9, 0x0299	; 0x800299 <accY+0x1>
     a02:	a0 90 9a 02 	lds	r10, 0x029A	; 0x80029a <accY+0x2>
     a06:	b0 90 9b 02 	lds	r11, 0x029B	; 0x80029b <accY+0x3>
     a0a:	a7 01       	movw	r20, r14
     a0c:	96 01       	movw	r18, r12
     a0e:	c5 01       	movw	r24, r10
     a10:	b4 01       	movw	r22, r8
     a12:	0e 94 44 09 	call	0x1288	; 0x1288 <atan2>
     a16:	21 ee       	ldi	r18, 0xE1	; 225
     a18:	3e e2       	ldi	r19, 0x2E	; 46
     a1a:	45 e6       	ldi	r20, 0x65	; 101
     a1c:	52 e4       	ldi	r21, 0x42	; 66
     a1e:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     a22:	2b 01       	movw	r4, r22
     a24:	3c 01       	movw	r6, r24
	double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
     a26:	a5 01       	movw	r20, r10
     a28:	94 01       	movw	r18, r8
     a2a:	c5 01       	movw	r24, r10
     a2c:	b4 01       	movw	r22, r8
     a2e:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     a32:	4b 01       	movw	r8, r22
     a34:	5c 01       	movw	r10, r24
     a36:	a7 01       	movw	r20, r14
     a38:	96 01       	movw	r18, r12
     a3a:	c7 01       	movw	r24, r14
     a3c:	b6 01       	movw	r22, r12
     a3e:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     a42:	9b 01       	movw	r18, r22
     a44:	ac 01       	movw	r20, r24
     a46:	c5 01       	movw	r24, r10
     a48:	b4 01       	movw	r22, r8
     a4a:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
     a4e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <sqrt>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <accX>
     a5a:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <accX+0x1>
     a5e:	a0 91 9e 02 	lds	r26, 0x029E	; 0x80029e <accX+0x2>
     a62:	b0 91 9f 02 	lds	r27, 0x029F	; 0x80029f <accX+0x3>
     a66:	bc 01       	movw	r22, r24
     a68:	cd 01       	movw	r24, r26
     a6a:	90 58       	subi	r25, 0x80	; 128
     a6c:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
     a70:	0e 94 74 09 	call	0x12e8	; 0x12e8 <atan>
     a74:	21 ee       	ldi	r18, 0xE1	; 225
     a76:	3e e2       	ldi	r19, 0x2E	; 46
     a78:	45 e6       	ldi	r20, 0x65	; 101
     a7a:	52 e4       	ldi	r21, 0x42	; 66
     a7c:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     a80:	69 ab       	std	Y+49, r22	; 0x31
     a82:	7a ab       	std	Y+50, r23	; 0x32
     a84:	8b ab       	std	Y+51, r24	; 0x33
     a86:	9c ab       	std	Y+52, r25	; 0x34
	#else // Eq. 28 and 29
	double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
	double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
	#endif

	double gyroXrate = gyroX / 131.0; // Convert to deg/s
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	43 e0       	ldi	r20, 0x03	; 3
     a8e:	53 e4       	ldi	r21, 0x43	; 67
     a90:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <gyroX>
     a94:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <gyroX+0x1>
     a98:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <gyroX+0x2>
     a9c:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <gyroX+0x3>
     aa0:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
     aa4:	6d a3       	std	Y+37, r22	; 0x25
     aa6:	7e a3       	std	Y+38, r23	; 0x26
     aa8:	8f a3       	std	Y+39, r24	; 0x27
     aaa:	98 a7       	std	Y+40, r25	; 0x28
	double gyroYrate = gyroY / 131.0; // Convert to deg/s
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	43 e0       	ldi	r20, 0x03	; 3
     ab2:	53 e4       	ldi	r21, 0x43	; 67
     ab4:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <gyroY>
     ab8:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <gyroY+0x1>
     abc:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <gyroY+0x2>
     ac0:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <gyroY+0x3>
     ac4:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
     ac8:	4b 01       	movw	r8, r22
     aca:	5c 01       	movw	r10, r24

	#ifdef RESTRICT_PITCH
	// This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees
	if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90)) {
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	44 eb       	ldi	r20, 0xB4	; 180
     ad2:	52 ec       	ldi	r21, 0xC2	; 194
     ad4:	c3 01       	movw	r24, r6
     ad6:	b2 01       	movw	r22, r4
     ad8:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
     adc:	87 ff       	sbrs	r24, 7
     ade:	10 c0       	rjmp	.+32     	; 0xb00 <_Z10sensorloopi+0x19c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	44 eb       	ldi	r20, 0xB4	; 180
     ae6:	52 e4       	ldi	r21, 0x42	; 66
     ae8:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <kalAngleX>
     aec:	70 91 75 02 	lds	r23, 0x0275	; 0x800275 <kalAngleX+0x1>
     af0:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <kalAngleX+0x2>
     af4:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <kalAngleX+0x3>
     af8:	0e 94 29 0b 	call	0x1652	; 0x1652 <__gesf2>
     afc:	18 16       	cp	r1, r24
     afe:	d4 f0       	brlt	.+52     	; 0xb34 <_Z10sensorloopi+0x1d0>
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	44 eb       	ldi	r20, 0xB4	; 180
     b06:	52 e4       	ldi	r21, 0x42	; 66
     b08:	c3 01       	movw	r24, r6
     b0a:	b2 01       	movw	r22, r4
     b0c:	0e 94 29 0b 	call	0x1652	; 0x1652 <__gesf2>
     b10:	18 16       	cp	r1, r24
     b12:	7c f5       	brge	.+94     	; 0xb72 <_Z10sensorloopi+0x20e>
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	44 eb       	ldi	r20, 0xB4	; 180
     b1a:	52 ec       	ldi	r21, 0xC2	; 194
     b1c:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <kalAngleX>
     b20:	70 91 75 02 	lds	r23, 0x0275	; 0x800275 <kalAngleX+0x1>
     b24:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <kalAngleX+0x2>
     b28:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <kalAngleX+0x3>
     b2c:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
     b30:	87 ff       	sbrs	r24, 7
     b32:	1f c0       	rjmp	.+62     	; 0xb72 <_Z10sensorloopi+0x20e>
		kalmanX.setAngle(roll);
     b34:	b3 01       	movw	r22, r6
     b36:	a2 01       	movw	r20, r4
     b38:	88 ec       	ldi	r24, 0xC8	; 200
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	0e 94 56 15 	call	0x2aac	; 0x2aac <_ZN6Kalman8setAngleEf>
		compAngleX = roll;
     b40:	40 92 7c 02 	sts	0x027C, r4	; 0x80027c <compAngleX>
     b44:	50 92 7d 02 	sts	0x027D, r5	; 0x80027d <compAngleX+0x1>
     b48:	60 92 7e 02 	sts	0x027E, r6	; 0x80027e <compAngleX+0x2>
     b4c:	70 92 7f 02 	sts	0x027F, r7	; 0x80027f <compAngleX+0x3>
		kalAngleX = roll;
     b50:	40 92 74 02 	sts	0x0274, r4	; 0x800274 <kalAngleX>
     b54:	50 92 75 02 	sts	0x0275, r5	; 0x800275 <kalAngleX+0x1>
     b58:	60 92 76 02 	sts	0x0276, r6	; 0x800276 <kalAngleX+0x2>
     b5c:	70 92 77 02 	sts	0x0277, r7	; 0x800277 <kalAngleX+0x3>
		gyroXangle = roll;
     b60:	40 92 84 02 	sts	0x0284, r4	; 0x800284 <gyroXangle>
     b64:	50 92 85 02 	sts	0x0285, r5	; 0x800285 <gyroXangle+0x1>
     b68:	60 92 86 02 	sts	0x0286, r6	; 0x800286 <gyroXangle+0x2>
     b6c:	70 92 87 02 	sts	0x0287, r7	; 0x800287 <gyroXangle+0x3>
     b70:	16 c0       	rjmp	.+44     	; 0xb9e <_Z10sensorloopi+0x23a>
	} else
	kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
     b72:	c9 a4       	ldd	r12, Y+41	; 0x29
     b74:	da a4       	ldd	r13, Y+42	; 0x2a
     b76:	eb a4       	ldd	r14, Y+43	; 0x2b
     b78:	fc a4       	ldd	r15, Y+44	; 0x2c
     b7a:	0d a1       	ldd	r16, Y+37	; 0x25
     b7c:	1e a1       	ldd	r17, Y+38	; 0x26
     b7e:	2f a1       	ldd	r18, Y+39	; 0x27
     b80:	38 a5       	ldd	r19, Y+40	; 0x28
     b82:	b3 01       	movw	r22, r6
     b84:	a2 01       	movw	r20, r4
     b86:	88 ec       	ldi	r24, 0xC8	; 200
     b88:	92 e0       	ldi	r25, 0x02	; 2
     b8a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN6Kalman8getAngleEfff>
     b8e:	60 93 74 02 	sts	0x0274, r22	; 0x800274 <kalAngleX>
     b92:	70 93 75 02 	sts	0x0275, r23	; 0x800275 <kalAngleX+0x1>
     b96:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <kalAngleX+0x2>
     b9a:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <kalAngleX+0x3>

	if (abs(kalAngleX) > 90)
     b9e:	c0 90 74 02 	lds	r12, 0x0274	; 0x800274 <kalAngleX>
     ba2:	d0 90 75 02 	lds	r13, 0x0275	; 0x800275 <kalAngleX+0x1>
     ba6:	e0 90 76 02 	lds	r14, 0x0276	; 0x800276 <kalAngleX+0x2>
     baa:	f0 90 77 02 	lds	r15, 0x0277	; 0x800277 <kalAngleX+0x3>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	a9 01       	movw	r20, r18
     bb4:	c7 01       	movw	r24, r14
     bb6:	b6 01       	movw	r22, r12
     bb8:	0e 94 29 0b 	call	0x1652	; 0x1652 <__gesf2>
     bbc:	18 16       	cp	r1, r24
     bbe:	5c f4       	brge	.+22     	; 0xbd6 <_Z10sensorloopi+0x272>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	44 eb       	ldi	r20, 0xB4	; 180
     bc6:	52 e4       	ldi	r21, 0x42	; 66
     bc8:	c7 01       	movw	r24, r14
     bca:	b6 01       	movw	r22, r12
     bcc:	0e 94 29 0b 	call	0x1652	; 0x1652 <__gesf2>
     bd0:	18 16       	cp	r1, r24
     bd2:	5c f0       	brlt	.+22     	; 0xbea <_Z10sensorloopi+0x286>
     bd4:	0e c0       	rjmp	.+28     	; 0xbf2 <_Z10sensorloopi+0x28e>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	44 eb       	ldi	r20, 0xB4	; 180
     bdc:	52 ec       	ldi	r21, 0xC2	; 194
     bde:	c7 01       	movw	r24, r14
     be0:	b6 01       	movw	r22, r12
     be2:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
     be6:	87 ff       	sbrs	r24, 7
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <_Z10sensorloopi+0x28e>
	gyroYrate = -gyroYrate; // Invert rate, so it fits the restriced accelerometer reading
     bea:	b7 fa       	bst	r11, 7
     bec:	b0 94       	com	r11
     bee:	b7 f8       	bld	r11, 7
     bf0:	b0 94       	com	r11
	kalAngleY = kalmanY.getAngle(pitch, gyroYrate, dt);
     bf2:	c9 a4       	ldd	r12, Y+41	; 0x29
     bf4:	da a4       	ldd	r13, Y+42	; 0x2a
     bf6:	eb a4       	ldd	r14, Y+43	; 0x2b
     bf8:	fc a4       	ldd	r15, Y+44	; 0x2c
     bfa:	95 01       	movw	r18, r10
     bfc:	84 01       	movw	r16, r8
     bfe:	49 a9       	ldd	r20, Y+49	; 0x31
     c00:	5a a9       	ldd	r21, Y+50	; 0x32
     c02:	6b a9       	ldd	r22, Y+51	; 0x33
     c04:	7c a9       	ldd	r23, Y+52	; 0x34
     c06:	80 ea       	ldi	r24, 0xA0	; 160
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN6Kalman8getAngleEfff>
     c0e:	6d ab       	std	Y+53, r22	; 0x35
     c10:	7e ab       	std	Y+54, r23	; 0x36
     c12:	8f ab       	std	Y+55, r24	; 0x37
     c14:	98 af       	std	Y+56, r25	; 0x38
     c16:	60 93 70 02 	sts	0x0270, r22	; 0x800270 <kalAngleY>
     c1a:	70 93 71 02 	sts	0x0271, r23	; 0x800271 <kalAngleY+0x1>
     c1e:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <kalAngleY+0x2>
     c22:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <kalAngleY+0x3>
	if (abs(kalAngleY) > 90)
	gyroXrate = -gyroXrate; // Invert rate, so it fits the restriced accelerometer reading
	kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
	#endif

	gyroXangle += gyroXrate * dt; // Calculate gyro angle without any filter
     c26:	29 a5       	ldd	r18, Y+41	; 0x29
     c28:	3a a5       	ldd	r19, Y+42	; 0x2a
     c2a:	4b a5       	ldd	r20, Y+43	; 0x2b
     c2c:	5c a5       	ldd	r21, Y+44	; 0x2c
     c2e:	6d a1       	ldd	r22, Y+37	; 0x25
     c30:	7e a1       	ldd	r23, Y+38	; 0x26
     c32:	8f a1       	ldd	r24, Y+39	; 0x27
     c34:	98 a5       	ldd	r25, Y+40	; 0x28
     c36:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     c3a:	6d a7       	std	Y+45, r22	; 0x2d
     c3c:	7e a7       	std	Y+46, r23	; 0x2e
     c3e:	8f a7       	std	Y+47, r24	; 0x2f
     c40:	98 ab       	std	Y+48, r25	; 0x30
     c42:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <gyroXangle>
     c46:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <gyroXangle+0x1>
     c4a:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <gyroXangle+0x2>
     c4e:	50 91 87 02 	lds	r21, 0x0287	; 0x800287 <gyroXangle+0x3>
     c52:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
     c56:	6d a3       	std	Y+37, r22	; 0x25
     c58:	7e a3       	std	Y+38, r23	; 0x26
     c5a:	8f a3       	std	Y+39, r24	; 0x27
     c5c:	98 a7       	std	Y+40, r25	; 0x28
     c5e:	60 93 84 02 	sts	0x0284, r22	; 0x800284 <gyroXangle>
     c62:	70 93 85 02 	sts	0x0285, r23	; 0x800285 <gyroXangle+0x1>
     c66:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <gyroXangle+0x2>
     c6a:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <gyroXangle+0x3>
	gyroYangle += gyroYrate * dt;
     c6e:	29 a5       	ldd	r18, Y+41	; 0x29
     c70:	3a a5       	ldd	r19, Y+42	; 0x2a
     c72:	4b a5       	ldd	r20, Y+43	; 0x2b
     c74:	5c a5       	ldd	r21, Y+44	; 0x2c
     c76:	c5 01       	movw	r24, r10
     c78:	b4 01       	movw	r22, r8
     c7a:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     c7e:	6b 01       	movw	r12, r22
     c80:	7c 01       	movw	r14, r24
     c82:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <gyroYangle>
     c86:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <gyroYangle+0x1>
     c8a:	40 91 82 02 	lds	r20, 0x0282	; 0x800282 <gyroYangle+0x2>
     c8e:	50 91 83 02 	lds	r21, 0x0283	; 0x800283 <gyroYangle+0x3>
     c92:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
     c96:	4b 01       	movw	r8, r22
     c98:	5c 01       	movw	r10, r24
     c9a:	60 93 80 02 	sts	0x0280, r22	; 0x800280 <gyroYangle>
     c9e:	70 93 81 02 	sts	0x0281, r23	; 0x800281 <gyroYangle+0x1>
     ca2:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <gyroYangle+0x2>
     ca6:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <gyroYangle+0x3>
	//gyroXangle += kalmanX.getRate() * dt; // Calculate gyro angle using the unbiased rate
	//gyroYangle += kalmanY.getRate() * dt;

	compAngleX = 0.93 * (compAngleX + gyroXrate * dt) + 0.07 * roll; // Calculate the angle using a Complimentary filter
     caa:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <compAngleX>
     cae:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <compAngleX+0x1>
     cb2:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <compAngleX+0x2>
     cb6:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <compAngleX+0x3>
     cba:	6d a5       	ldd	r22, Y+45	; 0x2d
     cbc:	7e a5       	ldd	r23, Y+46	; 0x2e
     cbe:	8f a5       	ldd	r24, Y+47	; 0x2f
     cc0:	98 a9       	ldd	r25, Y+48	; 0x30
     cc2:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
     cc6:	2b e7       	ldi	r18, 0x7B	; 123
     cc8:	34 e1       	ldi	r19, 0x14	; 20
     cca:	4e e6       	ldi	r20, 0x6E	; 110
     ccc:	5f e3       	ldi	r21, 0x3F	; 63
     cce:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     cd2:	6d a7       	std	Y+45, r22	; 0x2d
     cd4:	7e a7       	std	Y+46, r23	; 0x2e
     cd6:	8f a7       	std	Y+47, r24	; 0x2f
     cd8:	98 ab       	std	Y+48, r25	; 0x30
     cda:	29 e2       	ldi	r18, 0x29	; 41
     cdc:	3c e5       	ldi	r19, 0x5C	; 92
     cde:	4f e8       	ldi	r20, 0x8F	; 143
     ce0:	5d e3       	ldi	r21, 0x3D	; 61
     ce2:	c3 01       	movw	r24, r6
     ce4:	b2 01       	movw	r22, r4
     ce6:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     cea:	9b 01       	movw	r18, r22
     cec:	ac 01       	movw	r20, r24
     cee:	6d a5       	ldd	r22, Y+45	; 0x2d
     cf0:	7e a5       	ldd	r23, Y+46	; 0x2e
     cf2:	8f a5       	ldd	r24, Y+47	; 0x2f
     cf4:	98 a9       	ldd	r25, Y+48	; 0x30
     cf6:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
     cfa:	60 93 7c 02 	sts	0x027C, r22	; 0x80027c <compAngleX>
     cfe:	70 93 7d 02 	sts	0x027D, r23	; 0x80027d <compAngleX+0x1>
     d02:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <compAngleX+0x2>
     d06:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <compAngleX+0x3>
	compAngleY = 0.93 * (compAngleY + gyroYrate * dt) + 0.07 * pitch;
     d0a:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <compAngleY>
     d0e:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <compAngleY+0x1>
     d12:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <compAngleY+0x2>
     d16:	50 91 7b 02 	lds	r21, 0x027B	; 0x80027b <compAngleY+0x3>
     d1a:	c7 01       	movw	r24, r14
     d1c:	b6 01       	movw	r22, r12
     d1e:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
     d22:	2b e7       	ldi	r18, 0x7B	; 123
     d24:	34 e1       	ldi	r19, 0x14	; 20
     d26:	4e e6       	ldi	r20, 0x6E	; 110
     d28:	5f e3       	ldi	r21, 0x3F	; 63
     d2a:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     d2e:	6b 01       	movw	r12, r22
     d30:	7c 01       	movw	r14, r24
     d32:	29 e2       	ldi	r18, 0x29	; 41
     d34:	3c e5       	ldi	r19, 0x5C	; 92
     d36:	4f e8       	ldi	r20, 0x8F	; 143
     d38:	5d e3       	ldi	r21, 0x3D	; 61
     d3a:	69 a9       	ldd	r22, Y+49	; 0x31
     d3c:	7a a9       	ldd	r23, Y+50	; 0x32
     d3e:	8b a9       	ldd	r24, Y+51	; 0x33
     d40:	9c a9       	ldd	r25, Y+52	; 0x34
     d42:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     d46:	9b 01       	movw	r18, r22
     d48:	ac 01       	movw	r20, r24
     d4a:	c7 01       	movw	r24, r14
     d4c:	b6 01       	movw	r22, r12
     d4e:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
     d52:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <compAngleY>
     d56:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <compAngleY+0x1>
     d5a:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <compAngleY+0x2>
     d5e:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <compAngleY+0x3>

	// Reset the gyro angle when it has drifted too much
	if (gyroXangle < -180 || gyroXangle > 180)
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	44 e3       	ldi	r20, 0x34	; 52
     d68:	53 ec       	ldi	r21, 0xC3	; 195
     d6a:	6d a1       	ldd	r22, Y+37	; 0x25
     d6c:	7e a1       	ldd	r23, Y+38	; 0x26
     d6e:	8f a1       	ldd	r24, Y+39	; 0x27
     d70:	98 a5       	ldd	r25, Y+40	; 0x28
     d72:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
     d76:	87 fd       	sbrc	r24, 7
     d78:	0c c0       	rjmp	.+24     	; 0xd92 <_Z10sensorloopi+0x42e>
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	44 e3       	ldi	r20, 0x34	; 52
     d80:	53 e4       	ldi	r21, 0x43	; 67
     d82:	6d a1       	ldd	r22, Y+37	; 0x25
     d84:	7e a1       	ldd	r23, Y+38	; 0x26
     d86:	8f a1       	ldd	r24, Y+39	; 0x27
     d88:	98 a5       	ldd	r25, Y+40	; 0x28
     d8a:	0e 94 29 0b 	call	0x1652	; 0x1652 <__gesf2>
     d8e:	18 16       	cp	r1, r24
     d90:	84 f4       	brge	.+32     	; 0xdb2 <_Z10sensorloopi+0x44e>
	gyroXangle = kalAngleX;
     d92:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <kalAngleX>
     d96:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <kalAngleX+0x1>
     d9a:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <kalAngleX+0x2>
     d9e:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <kalAngleX+0x3>
     da2:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <gyroXangle>
     da6:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <gyroXangle+0x1>
     daa:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <gyroXangle+0x2>
     dae:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <gyroXangle+0x3>
	if (gyroYangle < -180 || gyroYangle > 180)
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	44 e3       	ldi	r20, 0x34	; 52
     db8:	53 ec       	ldi	r21, 0xC3	; 195
     dba:	c5 01       	movw	r24, r10
     dbc:	b4 01       	movw	r22, r8
     dbe:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
     dc2:	87 fd       	sbrc	r24, 7
     dc4:	0a c0       	rjmp	.+20     	; 0xdda <_Z10sensorloopi+0x476>
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	44 e3       	ldi	r20, 0x34	; 52
     dcc:	53 e4       	ldi	r21, 0x43	; 67
     dce:	c5 01       	movw	r24, r10
     dd0:	b4 01       	movw	r22, r8
     dd2:	0e 94 29 0b 	call	0x1652	; 0x1652 <__gesf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	64 f4       	brge	.+24     	; 0xdf2 <_Z10sensorloopi+0x48e>
	gyroYangle = kalAngleY;
     dda:	8d a9       	ldd	r24, Y+53	; 0x35
     ddc:	9e a9       	ldd	r25, Y+54	; 0x36
     dde:	af a9       	ldd	r26, Y+55	; 0x37
     de0:	b8 ad       	ldd	r27, Y+56	; 0x38
     de2:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <gyroYangle>
     de6:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <gyroYangle+0x1>
     dea:	a0 93 82 02 	sts	0x0282, r26	; 0x800282 <gyroYangle+0x2>
     dee:	b0 93 83 02 	sts	0x0283, r27	; 0x800283 <gyroYangle+0x3>



	/* Get a new sensor event */
	sensors_event_t event;
	mag.getEvent(&event);
     df2:	be 01       	movw	r22, r28
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	86 ef       	ldi	r24, 0xF6	; 246
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0e 94 26 13 	call	0x264c	; 0x264c <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t>
	

	// Hold the module so that Z is pointing 'up' and you can measure the heading with x&y
	// Calculate heading when the magnetometer is level, then correct for signs of axis.
	float heading = atan2(event.magnetic.y, event.magnetic.x);
     e00:	2d 89       	ldd	r18, Y+21	; 0x15
     e02:	3e 89       	ldd	r19, Y+22	; 0x16
     e04:	4f 89       	ldd	r20, Y+23	; 0x17
     e06:	58 8d       	ldd	r21, Y+24	; 0x18
     e08:	69 8d       	ldd	r22, Y+25	; 0x19
     e0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e10:	0e 94 44 09 	call	0x1288	; 0x1288 <atan2>
	// Once you have your heading, you must then add your 'Declination Angle', which is the 'Error' of the magnetic field in your location.
	// Find yours here: http://www.magnetic-declination.com/
	// Mine is: -13* 2' W, which is ~13 Degrees, or (which we need) 0.22 radians
	// If you cannot find your Declination, comment out these two lines, your compass will be slightly off.
	float declinationAngle = 0.22;
	heading += declinationAngle;
     e14:	2e ea       	ldi	r18, 0xAE	; 174
     e16:	37 e4       	ldi	r19, 0x47	; 71
     e18:	41 e6       	ldi	r20, 0x61	; 97
     e1a:	5e e3       	ldi	r21, 0x3E	; 62
     e1c:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
     e20:	6b 01       	movw	r12, r22
     e22:	7c 01       	movw	r14, r24
	
	// Correct for when signs are reversed.
	if(heading < 0)
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	a9 01       	movw	r20, r18
     e2a:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
     e2e:	87 ff       	sbrs	r24, 7
     e30:	0a c0       	rjmp	.+20     	; 0xe46 <_Z10sensorloopi+0x4e2>
	heading += 2*PI;
     e32:	2b ed       	ldi	r18, 0xDB	; 219
     e34:	3f e0       	ldi	r19, 0x0F	; 15
     e36:	49 ec       	ldi	r20, 0xC9	; 201
     e38:	50 e4       	ldi	r21, 0x40	; 64
     e3a:	c7 01       	movw	r24, r14
     e3c:	b6 01       	movw	r22, r12
     e3e:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
     e42:	6b 01       	movw	r12, r22
     e44:	7c 01       	movw	r14, r24
	
	// Check for wrap due to addition of declination.
	if(heading > 2*PI)
     e46:	2b ed       	ldi	r18, 0xDB	; 219
     e48:	3f e0       	ldi	r19, 0x0F	; 15
     e4a:	49 ec       	ldi	r20, 0xC9	; 201
     e4c:	50 e4       	ldi	r21, 0x40	; 64
     e4e:	c7 01       	movw	r24, r14
     e50:	b6 01       	movw	r22, r12
     e52:	0e 94 29 0b 	call	0x1652	; 0x1652 <__gesf2>
     e56:	18 16       	cp	r1, r24
     e58:	54 f4       	brge	.+20     	; 0xe6e <_Z10sensorloopi+0x50a>
	heading -= 2*PI;
     e5a:	2b ed       	ldi	r18, 0xDB	; 219
     e5c:	3f e0       	ldi	r19, 0x0F	; 15
     e5e:	49 ec       	ldi	r20, 0xC9	; 201
     e60:	50 e4       	ldi	r21, 0x40	; 64
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
     e6a:	6b 01       	movw	r12, r22
     e6c:	7c 01       	movw	r14, r24
	
	// Convert radians to degrees for readability.
	headingDegrees = heading * 180/M_PI;
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	44 e3       	ldi	r20, 0x34	; 52
     e74:	53 e4       	ldi	r21, 0x43	; 67
     e76:	c7 01       	movw	r24, r14
     e78:	b6 01       	movw	r22, r12
     e7a:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     e7e:	2b ed       	ldi	r18, 0xDB	; 219
     e80:	3f e0       	ldi	r19, 0x0F	; 15
     e82:	49 e4       	ldi	r20, 0x49	; 73
     e84:	50 e4       	ldi	r21, 0x40	; 64
     e86:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
     e8a:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <headingDegrees>
     e8e:	70 93 6d 02 	sts	0x026D, r23	; 0x80026d <headingDegrees+0x1>
     e92:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <headingDegrees+0x2>
     e96:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <headingDegrees+0x3>
	
	#endif
	
	/* Print Data */
	
	if (printout)
     e9a:	23 28       	or	r2, r3
     e9c:	09 f4       	brne	.+2      	; 0xea0 <_Z10sensorloopi+0x53c>
     e9e:	e6 c0       	rjmp	.+460    	; 0x106c <_Z10sensorloopi+0x708>
	{
	Serial.print(accX/16384*9.80665); Serial.print(" ");
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e8       	ldi	r20, 0x80	; 128
     ea6:	58 e3       	ldi	r21, 0x38	; 56
     ea8:	60 91 9c 02 	lds	r22, 0x029C	; 0x80029c <accX>
     eac:	70 91 9d 02 	lds	r23, 0x029D	; 0x80029d <accX+0x1>
     eb0:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <accX+0x2>
     eb4:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <accX+0x3>
     eb8:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     ebc:	2a e0       	ldi	r18, 0x0A	; 10
     ebe:	38 ee       	ldi	r19, 0xE8	; 232
     ec0:	4c e1       	ldi	r20, 0x1C	; 28
     ec2:	51 e4       	ldi	r21, 0x41	; 65
     ec4:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     ec8:	ab 01       	movw	r20, r22
     eca:	bc 01       	movw	r22, r24
     ecc:	22 e0       	ldi	r18, 0x02	; 2
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	8e e0       	ldi	r24, 0x0E	; 14
     ed2:	93 e0       	ldi	r25, 0x03	; 3
     ed4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
     ed8:	68 e7       	ldi	r22, 0x78	; 120
     eda:	71 e0       	ldi	r23, 0x01	; 1
     edc:	8e e0       	ldi	r24, 0x0E	; 14
     ede:	93 e0       	ldi	r25, 0x03	; 3
     ee0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>
	Serial.print(accY/16384*9.80665); Serial.print(" ");
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e8       	ldi	r20, 0x80	; 128
     eea:	58 e3       	ldi	r21, 0x38	; 56
     eec:	60 91 98 02 	lds	r22, 0x0298	; 0x800298 <accY>
     ef0:	70 91 99 02 	lds	r23, 0x0299	; 0x800299 <accY+0x1>
     ef4:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <accY+0x2>
     ef8:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <accY+0x3>
     efc:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     f00:	2a e0       	ldi	r18, 0x0A	; 10
     f02:	38 ee       	ldi	r19, 0xE8	; 232
     f04:	4c e1       	ldi	r20, 0x1C	; 28
     f06:	51 e4       	ldi	r21, 0x41	; 65
     f08:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     f0c:	ab 01       	movw	r20, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	22 e0       	ldi	r18, 0x02	; 2
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	8e e0       	ldi	r24, 0x0E	; 14
     f16:	93 e0       	ldi	r25, 0x03	; 3
     f18:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
     f1c:	68 e7       	ldi	r22, 0x78	; 120
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	8e e0       	ldi	r24, 0x0E	; 14
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>
	Serial.print(accZ/16384*9.80665); Serial.print(" ");
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e8       	ldi	r20, 0x80	; 128
     f2e:	58 e3       	ldi	r21, 0x38	; 56
     f30:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <accZ>
     f34:	70 91 95 02 	lds	r23, 0x0295	; 0x800295 <accZ+0x1>
     f38:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <accZ+0x2>
     f3c:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <accZ+0x3>
     f40:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     f44:	2a e0       	ldi	r18, 0x0A	; 10
     f46:	38 ee       	ldi	r19, 0xE8	; 232
     f48:	4c e1       	ldi	r20, 0x1C	; 28
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
     f50:	ab 01       	movw	r20, r22
     f52:	bc 01       	movw	r22, r24
     f54:	22 e0       	ldi	r18, 0x02	; 2
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	8e e0       	ldi	r24, 0x0E	; 14
     f5a:	93 e0       	ldi	r25, 0x03	; 3
     f5c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
     f60:	68 e7       	ldi	r22, 0x78	; 120
     f62:	71 e0       	ldi	r23, 0x01	; 1
     f64:	8e e0       	ldi	r24, 0x0E	; 14
     f66:	93 e0       	ldi	r25, 0x03	; 3
     f68:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>

	Serial.print(gyroX); Serial.print(" ");
     f6c:	40 91 90 02 	lds	r20, 0x0290	; 0x800290 <gyroX>
     f70:	50 91 91 02 	lds	r21, 0x0291	; 0x800291 <gyroX+0x1>
     f74:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <gyroX+0x2>
     f78:	70 91 93 02 	lds	r23, 0x0293	; 0x800293 <gyroX+0x3>
     f7c:	22 e0       	ldi	r18, 0x02	; 2
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	8e e0       	ldi	r24, 0x0E	; 14
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
     f88:	68 e7       	ldi	r22, 0x78	; 120
     f8a:	71 e0       	ldi	r23, 0x01	; 1
     f8c:	8e e0       	ldi	r24, 0x0E	; 14
     f8e:	93 e0       	ldi	r25, 0x03	; 3
     f90:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>
	Serial.print(gyroY); Serial.print(" ");
     f94:	40 91 8c 02 	lds	r20, 0x028C	; 0x80028c <gyroY>
     f98:	50 91 8d 02 	lds	r21, 0x028D	; 0x80028d <gyroY+0x1>
     f9c:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <gyroY+0x2>
     fa0:	70 91 8f 02 	lds	r23, 0x028F	; 0x80028f <gyroY+0x3>
     fa4:	22 e0       	ldi	r18, 0x02	; 2
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	8e e0       	ldi	r24, 0x0E	; 14
     faa:	93 e0       	ldi	r25, 0x03	; 3
     fac:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
     fb0:	68 e7       	ldi	r22, 0x78	; 120
     fb2:	71 e0       	ldi	r23, 0x01	; 1
     fb4:	8e e0       	ldi	r24, 0x0E	; 14
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>
	Serial.print(gyroZ); Serial.print(" ");
     fbc:	40 91 88 02 	lds	r20, 0x0288	; 0x800288 <gyroZ>
     fc0:	50 91 89 02 	lds	r21, 0x0289	; 0x800289 <gyroZ+0x1>
     fc4:	60 91 8a 02 	lds	r22, 0x028A	; 0x80028a <gyroZ+0x2>
     fc8:	70 91 8b 02 	lds	r23, 0x028B	; 0x80028b <gyroZ+0x3>
     fcc:	22 e0       	ldi	r18, 0x02	; 2
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	8e e0       	ldi	r24, 0x0E	; 14
     fd2:	93 e0       	ldi	r25, 0x03	; 3
     fd4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
     fd8:	68 e7       	ldi	r22, 0x78	; 120
     fda:	71 e0       	ldi	r23, 0x01	; 1
     fdc:	8e e0       	ldi	r24, 0x0E	; 14
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>

	Serial.print(event.magnetic.x); Serial.print(" ");
     fe4:	4d 89       	ldd	r20, Y+21	; 0x15
     fe6:	5e 89       	ldd	r21, Y+22	; 0x16
     fe8:	6f 89       	ldd	r22, Y+23	; 0x17
     fea:	78 8d       	ldd	r23, Y+24	; 0x18
     fec:	22 e0       	ldi	r18, 0x02	; 2
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8e e0       	ldi	r24, 0x0E	; 14
     ff2:	93 e0       	ldi	r25, 0x03	; 3
     ff4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
     ff8:	68 e7       	ldi	r22, 0x78	; 120
     ffa:	71 e0       	ldi	r23, 0x01	; 1
     ffc:	8e e0       	ldi	r24, 0x0E	; 14
     ffe:	93 e0       	ldi	r25, 0x03	; 3
    1000:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>
	Serial.print(event.magnetic.y); Serial.print(" ");
    1004:	49 8d       	ldd	r20, Y+25	; 0x19
    1006:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1008:	6b 8d       	ldd	r22, Y+27	; 0x1b
    100a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    100c:	22 e0       	ldi	r18, 0x02	; 2
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8e e0       	ldi	r24, 0x0E	; 14
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
    1018:	68 e7       	ldi	r22, 0x78	; 120
    101a:	71 e0       	ldi	r23, 0x01	; 1
    101c:	8e e0       	ldi	r24, 0x0E	; 14
    101e:	93 e0       	ldi	r25, 0x03	; 3
    1020:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>
	Serial.print(headingDegrees); Serial.print(" ");
    1024:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <headingDegrees>
    1028:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <headingDegrees+0x1>
    102c:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <headingDegrees+0x2>
    1030:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <headingDegrees+0x3>
    1034:	22 e0       	ldi	r18, 0x02	; 2
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	8e e0       	ldi	r24, 0x0E	; 14
    103a:	93 e0       	ldi	r25, 0x03	; 3
    103c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
    1040:	68 e7       	ldi	r22, 0x78	; 120
    1042:	71 e0       	ldi	r23, 0x01	; 1
    1044:	8e e0       	ldi	r24, 0x0E	; 14
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN5Print5printEPKc>
	
	Serial.print(dt);
    104c:	22 e0       	ldi	r18, 0x02	; 2
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	49 a5       	ldd	r20, Y+41	; 0x29
    1052:	5a a5       	ldd	r21, Y+42	; 0x2a
    1054:	6b a5       	ldd	r22, Y+43	; 0x2b
    1056:	7c a5       	ldd	r23, Y+44	; 0x2c
    1058:	8e e0       	ldi	r24, 0x0E	; 14
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN5Print5printEdi>
	Serial.print(newlinechar);
    1060:	60 e6       	ldi	r22, 0x60	; 96
    1062:	72 e0       	ldi	r23, 0x02	; 2
    1064:	8e e0       	ldi	r24, 0x0E	; 14
    1066:	93 e0       	ldi	r25, 0x03	; 3
    1068:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN5Print5printERK6String>
	Serial.print(" ");
	Serial.print(headingDegrees);
	Serial.println();
	#endif
	
	delay(d); // slow down output
    106c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <d>
    1070:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <d+0x1>
    1074:	07 2e       	mov	r0, r23
    1076:	00 0c       	add	r0, r0
    1078:	88 0b       	sbc	r24, r24
    107a:	99 0b       	sbc	r25, r25
    107c:	0e 94 3f 10 	call	0x207e	; 0x207e <delay>
}
    1080:	e8 96       	adiw	r28, 0x38	; 56
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	df 90       	pop	r13
    109a:	cf 90       	pop	r12
    109c:	bf 90       	pop	r11
    109e:	af 90       	pop	r10
    10a0:	9f 90       	pop	r9
    10a2:	8f 90       	pop	r8
    10a4:	7f 90       	pop	r7
    10a6:	6f 90       	pop	r6
    10a8:	5f 90       	pop	r5
    10aa:	4f 90       	pop	r4
    10ac:	3f 90       	pop	r3
    10ae:	2f 90       	pop	r2
    10b0:	08 95       	ret

000010b2 <_Z11delaysensori>:

void delaysensor(int t){
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	8c 01       	movw	r16, r24
	for (int x = 0; x < t/d; x++)
    10bc:	c0 e0       	ldi	r28, 0x00	; 0
    10be:	d0 e0       	ldi	r29, 0x00	; 0
    10c0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <d>
    10c4:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <d+0x1>
    10c8:	c8 01       	movw	r24, r16
    10ca:	0e 94 ab 18 	call	0x3156	; 0x3156 <__divmodhi4>
    10ce:	c6 17       	cp	r28, r22
    10d0:	d7 07       	cpc	r29, r23
    10d2:	34 f4       	brge	.+12     	; 0x10e0 <_Z11delaysensori+0x2e>
	{
		sensorloop(0);
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 b2 04 	call	0x964	; 0x964 <_Z10sensorloopi>
	
	delay(d); // slow down output
}

void delaysensor(int t){
	for (int x = 0; x < t/d; x++)
    10dc:	21 96       	adiw	r28, 0x01	; 1
    10de:	f0 cf       	rjmp	.-32     	; 0x10c0 <_Z11delaysensori+0xe>
	{
		sensorloop(0);
	}
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <_Z17recvWithEndMarkerv>:
	analogWrite(speedPin[wheelnum], int(abs(speedFromPC[wheelnum])));

}


void recvWithEndMarker() {
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
			}
		}
		else {
			receivedChars[ndx] = '\0'; // terminate the string
			ndx = 0;
			newData = true;
    10ee:	c1 e0       	ldi	r28, 0x01	; 1

		if (rc != endMarker) {
			receivedChars[ndx] = rc;
			ndx++;
			if (ndx >= numChars) {
				ndx = numChars - 1;
    10f0:	df e1       	ldi	r29, 0x1F	; 31
	static byte ndx = 0;
	char endMarker = '\r';
	char rc;
	
	// if (Serial.available() > 0) {
	while (Serial.available() > 0 && newData == false) {
    10f2:	8e e0       	ldi	r24, 0x0E	; 14
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN14HardwareSerial9availableEv>
    10fa:	18 16       	cp	r1, r24
    10fc:	19 06       	cpc	r1, r25
    10fe:	1c f5       	brge	.+70     	; 0x1146 <_Z17recvWithEndMarkerv+0x5c>
    1100:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <newData>
    1104:	81 11       	cpse	r24, r1
    1106:	1f c0       	rjmp	.+62     	; 0x1146 <_Z17recvWithEndMarkerv+0x5c>
		rc = Serial.read();
    1108:	8e e0       	ldi	r24, 0x0E	; 14
    110a:	93 e0       	ldi	r25, 0x03	; 3
    110c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_ZN14HardwareSerial4readEv>
    1110:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <_ZZ17recvWithEndMarkervE3ndx>

		if (rc != endMarker) {
    1114:	8d 30       	cpi	r24, 0x0D	; 13
    1116:	71 f0       	breq	.+28     	; 0x1134 <_Z17recvWithEndMarkerv+0x4a>
			receivedChars[ndx] = rc;
    1118:	ae 2f       	mov	r26, r30
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	a1 5d       	subi	r26, 0xD1	; 209
    111e:	bd 4f       	sbci	r27, 0xFD	; 253
    1120:	8c 93       	st	X, r24
			ndx++;
    1122:	ef 5f       	subi	r30, 0xFF	; 255
			if (ndx >= numChars) {
    1124:	e0 32       	cpi	r30, 0x20	; 32
    1126:	18 f4       	brcc	.+6      	; 0x112e <_Z17recvWithEndMarkerv+0x44>
	while (Serial.available() > 0 && newData == false) {
		rc = Serial.read();

		if (rc != endMarker) {
			receivedChars[ndx] = rc;
			ndx++;
    1128:	e0 93 2e 02 	sts	0x022E, r30	; 0x80022e <_ZZ17recvWithEndMarkervE3ndx>
    112c:	e2 cf       	rjmp	.-60     	; 0x10f2 <_Z17recvWithEndMarkerv+0x8>
			if (ndx >= numChars) {
				ndx = numChars - 1;
    112e:	d0 93 2e 02 	sts	0x022E, r29	; 0x80022e <_ZZ17recvWithEndMarkervE3ndx>
    1132:	df cf       	rjmp	.-66     	; 0x10f2 <_Z17recvWithEndMarkerv+0x8>
			}
		}
		else {
			receivedChars[ndx] = '\0'; // terminate the string
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	e1 5d       	subi	r30, 0xD1	; 209
    1138:	fd 4f       	sbci	r31, 0xFD	; 253
    113a:	10 82       	st	Z, r1
			ndx = 0;
    113c:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <_ZZ17recvWithEndMarkervE3ndx>
			newData = true;
    1140:	c0 93 4f 02 	sts	0x024F, r28	; 0x80024f <newData>
    1144:	d6 cf       	rjmp	.-84     	; 0x10f2 <_Z17recvWithEndMarkerv+0x8>
		}
	}
}
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <loop>:
		sensorloop(0);
	}
}

void loop() {
	delaysensor(100);
    114c:	84 e6       	ldi	r24, 0x64	; 100
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 59 08 	call	0x10b2	; 0x10b2 <_Z11delaysensori>
	d = 100;
    1154:	84 e6       	ldi	r24, 0x64	; 100
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <d+0x1>
    115c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <d>
	recvWithEndMarker();
    1160:	0e 94 75 08 	call	0x10ea	; 0x10ea <_Z17recvWithEndMarkerv>
	showNewData();
    1164:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z11showNewDatav>
	
	for (int x = 0; x < 4; x++)
	{
		wheeldir(x);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 03 01 	call	0x206	; 0x206 <_Z8wheeldiri>
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 03 01 	call	0x206	; 0x206 <_Z8wheeldiri>
    1178:	82 e0       	ldi	r24, 0x02	; 2
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 03 01 	call	0x206	; 0x206 <_Z8wheeldiri>
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0c 94 03 01 	jmp	0x206	; 0x206 <_Z8wheeldiri>

00001188 <__subsf3>:
    1188:	50 58       	subi	r21, 0x80	; 128

0000118a <__addsf3>:
    118a:	bb 27       	eor	r27, r27
    118c:	aa 27       	eor	r26, r26
    118e:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__addsf3x>
    1192:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_round>
    1196:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__fp_pscA>
    119a:	38 f0       	brcs	.+14     	; 0x11aa <__addsf3+0x20>
    119c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__fp_pscB>
    11a0:	20 f0       	brcs	.+8      	; 0x11aa <__addsf3+0x20>
    11a2:	39 f4       	brne	.+14     	; 0x11b2 <__addsf3+0x28>
    11a4:	9f 3f       	cpi	r25, 0xFF	; 255
    11a6:	19 f4       	brne	.+6      	; 0x11ae <__addsf3+0x24>
    11a8:	26 f4       	brtc	.+8      	; 0x11b2 <__addsf3+0x28>
    11aa:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_nan>
    11ae:	0e f4       	brtc	.+2      	; 0x11b2 <__addsf3+0x28>
    11b0:	e0 95       	com	r30
    11b2:	e7 fb       	bst	r30, 7
    11b4:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_inf>

000011b8 <__addsf3x>:
    11b8:	e9 2f       	mov	r30, r25
    11ba:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_split3>
    11be:	58 f3       	brcs	.-42     	; 0x1196 <__addsf3+0xc>
    11c0:	ba 17       	cp	r27, r26
    11c2:	62 07       	cpc	r22, r18
    11c4:	73 07       	cpc	r23, r19
    11c6:	84 07       	cpc	r24, r20
    11c8:	95 07       	cpc	r25, r21
    11ca:	20 f0       	brcs	.+8      	; 0x11d4 <__addsf3x+0x1c>
    11cc:	79 f4       	brne	.+30     	; 0x11ec <__addsf3x+0x34>
    11ce:	a6 f5       	brtc	.+104    	; 0x1238 <__addsf3x+0x80>
    11d0:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__fp_zero>
    11d4:	0e f4       	brtc	.+2      	; 0x11d8 <__addsf3x+0x20>
    11d6:	e0 95       	com	r30
    11d8:	0b 2e       	mov	r0, r27
    11da:	ba 2f       	mov	r27, r26
    11dc:	a0 2d       	mov	r26, r0
    11de:	0b 01       	movw	r0, r22
    11e0:	b9 01       	movw	r22, r18
    11e2:	90 01       	movw	r18, r0
    11e4:	0c 01       	movw	r0, r24
    11e6:	ca 01       	movw	r24, r20
    11e8:	a0 01       	movw	r20, r0
    11ea:	11 24       	eor	r1, r1
    11ec:	ff 27       	eor	r31, r31
    11ee:	59 1b       	sub	r21, r25
    11f0:	99 f0       	breq	.+38     	; 0x1218 <__addsf3x+0x60>
    11f2:	59 3f       	cpi	r21, 0xF9	; 249
    11f4:	50 f4       	brcc	.+20     	; 0x120a <__addsf3x+0x52>
    11f6:	50 3e       	cpi	r21, 0xE0	; 224
    11f8:	68 f1       	brcs	.+90     	; 0x1254 <__addsf3x+0x9c>
    11fa:	1a 16       	cp	r1, r26
    11fc:	f0 40       	sbci	r31, 0x00	; 0
    11fe:	a2 2f       	mov	r26, r18
    1200:	23 2f       	mov	r18, r19
    1202:	34 2f       	mov	r19, r20
    1204:	44 27       	eor	r20, r20
    1206:	58 5f       	subi	r21, 0xF8	; 248
    1208:	f3 cf       	rjmp	.-26     	; 0x11f0 <__addsf3x+0x38>
    120a:	46 95       	lsr	r20
    120c:	37 95       	ror	r19
    120e:	27 95       	ror	r18
    1210:	a7 95       	ror	r26
    1212:	f0 40       	sbci	r31, 0x00	; 0
    1214:	53 95       	inc	r21
    1216:	c9 f7       	brne	.-14     	; 0x120a <__addsf3x+0x52>
    1218:	7e f4       	brtc	.+30     	; 0x1238 <__addsf3x+0x80>
    121a:	1f 16       	cp	r1, r31
    121c:	ba 0b       	sbc	r27, r26
    121e:	62 0b       	sbc	r22, r18
    1220:	73 0b       	sbc	r23, r19
    1222:	84 0b       	sbc	r24, r20
    1224:	ba f0       	brmi	.+46     	; 0x1254 <__addsf3x+0x9c>
    1226:	91 50       	subi	r25, 0x01	; 1
    1228:	a1 f0       	breq	.+40     	; 0x1252 <__addsf3x+0x9a>
    122a:	ff 0f       	add	r31, r31
    122c:	bb 1f       	adc	r27, r27
    122e:	66 1f       	adc	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	88 1f       	adc	r24, r24
    1234:	c2 f7       	brpl	.-16     	; 0x1226 <__addsf3x+0x6e>
    1236:	0e c0       	rjmp	.+28     	; 0x1254 <__addsf3x+0x9c>
    1238:	ba 0f       	add	r27, r26
    123a:	62 1f       	adc	r22, r18
    123c:	73 1f       	adc	r23, r19
    123e:	84 1f       	adc	r24, r20
    1240:	48 f4       	brcc	.+18     	; 0x1254 <__addsf3x+0x9c>
    1242:	87 95       	ror	r24
    1244:	77 95       	ror	r23
    1246:	67 95       	ror	r22
    1248:	b7 95       	ror	r27
    124a:	f7 95       	ror	r31
    124c:	9e 3f       	cpi	r25, 0xFE	; 254
    124e:	08 f0       	brcs	.+2      	; 0x1252 <__addsf3x+0x9a>
    1250:	b0 cf       	rjmp	.-160    	; 0x11b2 <__addsf3+0x28>
    1252:	93 95       	inc	r25
    1254:	88 0f       	add	r24, r24
    1256:	08 f0       	brcs	.+2      	; 0x125a <__addsf3x+0xa2>
    1258:	99 27       	eor	r25, r25
    125a:	ee 0f       	add	r30, r30
    125c:	97 95       	ror	r25
    125e:	87 95       	ror	r24
    1260:	08 95       	ret
    1262:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__fp_pscA>
    1266:	60 f0       	brcs	.+24     	; 0x1280 <__addsf3x+0xc8>
    1268:	80 e8       	ldi	r24, 0x80	; 128
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	09 f4       	brne	.+2      	; 0x1270 <__addsf3x+0xb8>
    126e:	9e ef       	ldi	r25, 0xFE	; 254
    1270:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__fp_pscB>
    1274:	28 f0       	brcs	.+10     	; 0x1280 <__addsf3x+0xc8>
    1276:	40 e8       	ldi	r20, 0x80	; 128
    1278:	51 e0       	ldi	r21, 0x01	; 1
    127a:	71 f4       	brne	.+28     	; 0x1298 <atan2+0x10>
    127c:	5e ef       	ldi	r21, 0xFE	; 254
    127e:	0c c0       	rjmp	.+24     	; 0x1298 <atan2+0x10>
    1280:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_nan>
    1284:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__fp_zero>

00001288 <atan2>:
    1288:	e9 2f       	mov	r30, r25
    128a:	e0 78       	andi	r30, 0x80	; 128
    128c:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_split3>
    1290:	40 f3       	brcs	.-48     	; 0x1262 <__addsf3x+0xaa>
    1292:	09 2e       	mov	r0, r25
    1294:	05 2a       	or	r0, r21
    1296:	b1 f3       	breq	.-20     	; 0x1284 <__addsf3x+0xcc>
    1298:	26 17       	cp	r18, r22
    129a:	37 07       	cpc	r19, r23
    129c:	48 07       	cpc	r20, r24
    129e:	59 07       	cpc	r21, r25
    12a0:	38 f0       	brcs	.+14     	; 0x12b0 <atan2+0x28>
    12a2:	0e 2e       	mov	r0, r30
    12a4:	07 f8       	bld	r0, 7
    12a6:	e0 25       	eor	r30, r0
    12a8:	69 f0       	breq	.+26     	; 0x12c4 <atan2+0x3c>
    12aa:	e0 25       	eor	r30, r0
    12ac:	e0 64       	ori	r30, 0x40	; 64
    12ae:	0a c0       	rjmp	.+20     	; 0x12c4 <atan2+0x3c>
    12b0:	ef 63       	ori	r30, 0x3F	; 63
    12b2:	07 f8       	bld	r0, 7
    12b4:	00 94       	com	r0
    12b6:	07 fa       	bst	r0, 7
    12b8:	db 01       	movw	r26, r22
    12ba:	b9 01       	movw	r22, r18
    12bc:	9d 01       	movw	r18, r26
    12be:	dc 01       	movw	r26, r24
    12c0:	ca 01       	movw	r24, r20
    12c2:	ad 01       	movw	r20, r26
    12c4:	ef 93       	push	r30
    12c6:	0e 94 bf 09 	call	0x137e	; 0x137e <__divsf3_pse>
    12ca:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fp_round>
    12ce:	0e 94 74 09 	call	0x12e8	; 0x12e8 <atan>
    12d2:	5f 91       	pop	r21
    12d4:	55 23       	and	r21, r21
    12d6:	39 f0       	breq	.+14     	; 0x12e6 <atan2+0x5e>
    12d8:	2b ed       	ldi	r18, 0xDB	; 219
    12da:	3f e0       	ldi	r19, 0x0F	; 15
    12dc:	49 e4       	ldi	r20, 0x49	; 73
    12de:	50 fd       	sbrc	r21, 0
    12e0:	49 ec       	ldi	r20, 0xC9	; 201
    12e2:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__addsf3>
    12e6:	08 95       	ret

000012e8 <atan>:
    12e8:	df 93       	push	r29
    12ea:	dd 27       	eor	r29, r29
    12ec:	b9 2f       	mov	r27, r25
    12ee:	bf 77       	andi	r27, 0x7F	; 127
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	5f e3       	ldi	r21, 0x3F	; 63
    12f4:	16 16       	cp	r1, r22
    12f6:	17 06       	cpc	r1, r23
    12f8:	48 07       	cpc	r20, r24
    12fa:	5b 07       	cpc	r21, r27
    12fc:	18 f4       	brcc	.+6      	; 0x1304 <atan+0x1c>
    12fe:	d9 2f       	mov	r29, r25
    1300:	0e 94 2e 0b 	call	0x165c	; 0x165c <inverse>
    1304:	9f 93       	push	r25
    1306:	8f 93       	push	r24
    1308:	7f 93       	push	r23
    130a:	6f 93       	push	r22
    130c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <square>
    1310:	e8 e6       	ldi	r30, 0x68	; 104
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__fp_powser>
    1318:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fp_round>
    131c:	2f 91       	pop	r18
    131e:	3f 91       	pop	r19
    1320:	4f 91       	pop	r20
    1322:	5f 91       	pop	r21
    1324:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3x>
    1328:	dd 23       	and	r29, r29
    132a:	51 f0       	breq	.+20     	; 0x1340 <atan+0x58>
    132c:	90 58       	subi	r25, 0x80	; 128
    132e:	a2 ea       	ldi	r26, 0xA2	; 162
    1330:	2a ed       	ldi	r18, 0xDA	; 218
    1332:	3f e0       	ldi	r19, 0x0F	; 15
    1334:	49 ec       	ldi	r20, 0xC9	; 201
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	d0 78       	andi	r29, 0x80	; 128
    133a:	5d 27       	eor	r21, r29
    133c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__addsf3x>
    1340:	df 91       	pop	r29
    1342:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_round>

00001346 <__cmpsf2>:
    1346:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fp_cmp>
    134a:	08 f4       	brcc	.+2      	; 0x134e <__cmpsf2+0x8>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	08 95       	ret

00001350 <__divsf3>:
    1350:	0e 94 bc 09 	call	0x1378	; 0x1378 <__divsf3x>
    1354:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_round>
    1358:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__fp_pscB>
    135c:	58 f0       	brcs	.+22     	; 0x1374 <__divsf3+0x24>
    135e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__fp_pscA>
    1362:	40 f0       	brcs	.+16     	; 0x1374 <__divsf3+0x24>
    1364:	29 f4       	brne	.+10     	; 0x1370 <__divsf3+0x20>
    1366:	5f 3f       	cpi	r21, 0xFF	; 255
    1368:	29 f0       	breq	.+10     	; 0x1374 <__divsf3+0x24>
    136a:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_inf>
    136e:	51 11       	cpse	r21, r1
    1370:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_szero>
    1374:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_nan>

00001378 <__divsf3x>:
    1378:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_split3>
    137c:	68 f3       	brcs	.-38     	; 0x1358 <__divsf3+0x8>

0000137e <__divsf3_pse>:
    137e:	99 23       	and	r25, r25
    1380:	b1 f3       	breq	.-20     	; 0x136e <__divsf3+0x1e>
    1382:	55 23       	and	r21, r21
    1384:	91 f3       	breq	.-28     	; 0x136a <__divsf3+0x1a>
    1386:	95 1b       	sub	r25, r21
    1388:	55 0b       	sbc	r21, r21
    138a:	bb 27       	eor	r27, r27
    138c:	aa 27       	eor	r26, r26
    138e:	62 17       	cp	r22, r18
    1390:	73 07       	cpc	r23, r19
    1392:	84 07       	cpc	r24, r20
    1394:	38 f0       	brcs	.+14     	; 0x13a4 <__divsf3_pse+0x26>
    1396:	9f 5f       	subi	r25, 0xFF	; 255
    1398:	5f 4f       	sbci	r21, 0xFF	; 255
    139a:	22 0f       	add	r18, r18
    139c:	33 1f       	adc	r19, r19
    139e:	44 1f       	adc	r20, r20
    13a0:	aa 1f       	adc	r26, r26
    13a2:	a9 f3       	breq	.-22     	; 0x138e <__divsf3_pse+0x10>
    13a4:	35 d0       	rcall	.+106    	; 0x1410 <__divsf3_pse+0x92>
    13a6:	0e 2e       	mov	r0, r30
    13a8:	3a f0       	brmi	.+14     	; 0x13b8 <__divsf3_pse+0x3a>
    13aa:	e0 e8       	ldi	r30, 0x80	; 128
    13ac:	32 d0       	rcall	.+100    	; 0x1412 <__divsf3_pse+0x94>
    13ae:	91 50       	subi	r25, 0x01	; 1
    13b0:	50 40       	sbci	r21, 0x00	; 0
    13b2:	e6 95       	lsr	r30
    13b4:	00 1c       	adc	r0, r0
    13b6:	ca f7       	brpl	.-14     	; 0x13aa <__divsf3_pse+0x2c>
    13b8:	2b d0       	rcall	.+86     	; 0x1410 <__divsf3_pse+0x92>
    13ba:	fe 2f       	mov	r31, r30
    13bc:	29 d0       	rcall	.+82     	; 0x1410 <__divsf3_pse+0x92>
    13be:	66 0f       	add	r22, r22
    13c0:	77 1f       	adc	r23, r23
    13c2:	88 1f       	adc	r24, r24
    13c4:	bb 1f       	adc	r27, r27
    13c6:	26 17       	cp	r18, r22
    13c8:	37 07       	cpc	r19, r23
    13ca:	48 07       	cpc	r20, r24
    13cc:	ab 07       	cpc	r26, r27
    13ce:	b0 e8       	ldi	r27, 0x80	; 128
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <__divsf3_pse+0x56>
    13d2:	bb 0b       	sbc	r27, r27
    13d4:	80 2d       	mov	r24, r0
    13d6:	bf 01       	movw	r22, r30
    13d8:	ff 27       	eor	r31, r31
    13da:	93 58       	subi	r25, 0x83	; 131
    13dc:	5f 4f       	sbci	r21, 0xFF	; 255
    13de:	3a f0       	brmi	.+14     	; 0x13ee <__divsf3_pse+0x70>
    13e0:	9e 3f       	cpi	r25, 0xFE	; 254
    13e2:	51 05       	cpc	r21, r1
    13e4:	78 f0       	brcs	.+30     	; 0x1404 <__divsf3_pse+0x86>
    13e6:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_inf>
    13ea:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_szero>
    13ee:	5f 3f       	cpi	r21, 0xFF	; 255
    13f0:	e4 f3       	brlt	.-8      	; 0x13ea <__divsf3_pse+0x6c>
    13f2:	98 3e       	cpi	r25, 0xE8	; 232
    13f4:	d4 f3       	brlt	.-12     	; 0x13ea <__divsf3_pse+0x6c>
    13f6:	86 95       	lsr	r24
    13f8:	77 95       	ror	r23
    13fa:	67 95       	ror	r22
    13fc:	b7 95       	ror	r27
    13fe:	f7 95       	ror	r31
    1400:	9f 5f       	subi	r25, 0xFF	; 255
    1402:	c9 f7       	brne	.-14     	; 0x13f6 <__divsf3_pse+0x78>
    1404:	88 0f       	add	r24, r24
    1406:	91 1d       	adc	r25, r1
    1408:	96 95       	lsr	r25
    140a:	87 95       	ror	r24
    140c:	97 f9       	bld	r25, 7
    140e:	08 95       	ret
    1410:	e1 e0       	ldi	r30, 0x01	; 1
    1412:	66 0f       	add	r22, r22
    1414:	77 1f       	adc	r23, r23
    1416:	88 1f       	adc	r24, r24
    1418:	bb 1f       	adc	r27, r27
    141a:	62 17       	cp	r22, r18
    141c:	73 07       	cpc	r23, r19
    141e:	84 07       	cpc	r24, r20
    1420:	ba 07       	cpc	r27, r26
    1422:	20 f0       	brcs	.+8      	; 0x142c <__divsf3_pse+0xae>
    1424:	62 1b       	sub	r22, r18
    1426:	73 0b       	sbc	r23, r19
    1428:	84 0b       	sbc	r24, r20
    142a:	ba 0b       	sbc	r27, r26
    142c:	ee 1f       	adc	r30, r30
    142e:	88 f7       	brcc	.-30     	; 0x1412 <__divsf3_pse+0x94>
    1430:	e0 95       	com	r30
    1432:	08 95       	ret

00001434 <__fixsfsi>:
    1434:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fixunssfsi>
    1438:	68 94       	set
    143a:	b1 11       	cpse	r27, r1
    143c:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_szero>
    1440:	08 95       	ret

00001442 <__fixunssfsi>:
    1442:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_splitA>
    1446:	88 f0       	brcs	.+34     	; 0x146a <__fixunssfsi+0x28>
    1448:	9f 57       	subi	r25, 0x7F	; 127
    144a:	98 f0       	brcs	.+38     	; 0x1472 <__fixunssfsi+0x30>
    144c:	b9 2f       	mov	r27, r25
    144e:	99 27       	eor	r25, r25
    1450:	b7 51       	subi	r27, 0x17	; 23
    1452:	b0 f0       	brcs	.+44     	; 0x1480 <__fixunssfsi+0x3e>
    1454:	e1 f0       	breq	.+56     	; 0x148e <__fixunssfsi+0x4c>
    1456:	66 0f       	add	r22, r22
    1458:	77 1f       	adc	r23, r23
    145a:	88 1f       	adc	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	1a f0       	brmi	.+6      	; 0x1466 <__fixunssfsi+0x24>
    1460:	ba 95       	dec	r27
    1462:	c9 f7       	brne	.-14     	; 0x1456 <__fixunssfsi+0x14>
    1464:	14 c0       	rjmp	.+40     	; 0x148e <__fixunssfsi+0x4c>
    1466:	b1 30       	cpi	r27, 0x01	; 1
    1468:	91 f0       	breq	.+36     	; 0x148e <__fixunssfsi+0x4c>
    146a:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fp_zero>
    146e:	b1 e0       	ldi	r27, 0x01	; 1
    1470:	08 95       	ret
    1472:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__fp_zero>
    1476:	67 2f       	mov	r22, r23
    1478:	78 2f       	mov	r23, r24
    147a:	88 27       	eor	r24, r24
    147c:	b8 5f       	subi	r27, 0xF8	; 248
    147e:	39 f0       	breq	.+14     	; 0x148e <__fixunssfsi+0x4c>
    1480:	b9 3f       	cpi	r27, 0xF9	; 249
    1482:	cc f3       	brlt	.-14     	; 0x1476 <__fixunssfsi+0x34>
    1484:	86 95       	lsr	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	b3 95       	inc	r27
    148c:	d9 f7       	brne	.-10     	; 0x1484 <__fixunssfsi+0x42>
    148e:	3e f4       	brtc	.+14     	; 0x149e <__fixunssfsi+0x5c>
    1490:	90 95       	com	r25
    1492:	80 95       	com	r24
    1494:	70 95       	com	r23
    1496:	61 95       	neg	r22
    1498:	7f 4f       	sbci	r23, 0xFF	; 255
    149a:	8f 4f       	sbci	r24, 0xFF	; 255
    149c:	9f 4f       	sbci	r25, 0xFF	; 255
    149e:	08 95       	ret

000014a0 <__floatunsisf>:
    14a0:	e8 94       	clt
    14a2:	09 c0       	rjmp	.+18     	; 0x14b6 <__floatsisf+0x12>

000014a4 <__floatsisf>:
    14a4:	97 fb       	bst	r25, 7
    14a6:	3e f4       	brtc	.+14     	; 0x14b6 <__floatsisf+0x12>
    14a8:	90 95       	com	r25
    14aa:	80 95       	com	r24
    14ac:	70 95       	com	r23
    14ae:	61 95       	neg	r22
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	8f 4f       	sbci	r24, 0xFF	; 255
    14b4:	9f 4f       	sbci	r25, 0xFF	; 255
    14b6:	99 23       	and	r25, r25
    14b8:	a9 f0       	breq	.+42     	; 0x14e4 <__floatsisf+0x40>
    14ba:	f9 2f       	mov	r31, r25
    14bc:	96 e9       	ldi	r25, 0x96	; 150
    14be:	bb 27       	eor	r27, r27
    14c0:	93 95       	inc	r25
    14c2:	f6 95       	lsr	r31
    14c4:	87 95       	ror	r24
    14c6:	77 95       	ror	r23
    14c8:	67 95       	ror	r22
    14ca:	b7 95       	ror	r27
    14cc:	f1 11       	cpse	r31, r1
    14ce:	f8 cf       	rjmp	.-16     	; 0x14c0 <__floatsisf+0x1c>
    14d0:	fa f4       	brpl	.+62     	; 0x1510 <__floatsisf+0x6c>
    14d2:	bb 0f       	add	r27, r27
    14d4:	11 f4       	brne	.+4      	; 0x14da <__floatsisf+0x36>
    14d6:	60 ff       	sbrs	r22, 0
    14d8:	1b c0       	rjmp	.+54     	; 0x1510 <__floatsisf+0x6c>
    14da:	6f 5f       	subi	r22, 0xFF	; 255
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	8f 4f       	sbci	r24, 0xFF	; 255
    14e0:	9f 4f       	sbci	r25, 0xFF	; 255
    14e2:	16 c0       	rjmp	.+44     	; 0x1510 <__floatsisf+0x6c>
    14e4:	88 23       	and	r24, r24
    14e6:	11 f0       	breq	.+4      	; 0x14ec <__floatsisf+0x48>
    14e8:	96 e9       	ldi	r25, 0x96	; 150
    14ea:	11 c0       	rjmp	.+34     	; 0x150e <__floatsisf+0x6a>
    14ec:	77 23       	and	r23, r23
    14ee:	21 f0       	breq	.+8      	; 0x14f8 <__floatsisf+0x54>
    14f0:	9e e8       	ldi	r25, 0x8E	; 142
    14f2:	87 2f       	mov	r24, r23
    14f4:	76 2f       	mov	r23, r22
    14f6:	05 c0       	rjmp	.+10     	; 0x1502 <__floatsisf+0x5e>
    14f8:	66 23       	and	r22, r22
    14fa:	71 f0       	breq	.+28     	; 0x1518 <__floatsisf+0x74>
    14fc:	96 e8       	ldi	r25, 0x86	; 134
    14fe:	86 2f       	mov	r24, r22
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	2a f0       	brmi	.+10     	; 0x1510 <__floatsisf+0x6c>
    1506:	9a 95       	dec	r25
    1508:	66 0f       	add	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	88 1f       	adc	r24, r24
    150e:	da f7       	brpl	.-10     	; 0x1506 <__floatsisf+0x62>
    1510:	88 0f       	add	r24, r24
    1512:	96 95       	lsr	r25
    1514:	87 95       	ror	r24
    1516:	97 f9       	bld	r25, 7
    1518:	08 95       	ret

0000151a <__fp_cmp>:
    151a:	99 0f       	add	r25, r25
    151c:	00 08       	sbc	r0, r0
    151e:	55 0f       	add	r21, r21
    1520:	aa 0b       	sbc	r26, r26
    1522:	e0 e8       	ldi	r30, 0x80	; 128
    1524:	fe ef       	ldi	r31, 0xFE	; 254
    1526:	16 16       	cp	r1, r22
    1528:	17 06       	cpc	r1, r23
    152a:	e8 07       	cpc	r30, r24
    152c:	f9 07       	cpc	r31, r25
    152e:	c0 f0       	brcs	.+48     	; 0x1560 <__fp_cmp+0x46>
    1530:	12 16       	cp	r1, r18
    1532:	13 06       	cpc	r1, r19
    1534:	e4 07       	cpc	r30, r20
    1536:	f5 07       	cpc	r31, r21
    1538:	98 f0       	brcs	.+38     	; 0x1560 <__fp_cmp+0x46>
    153a:	62 1b       	sub	r22, r18
    153c:	73 0b       	sbc	r23, r19
    153e:	84 0b       	sbc	r24, r20
    1540:	95 0b       	sbc	r25, r21
    1542:	39 f4       	brne	.+14     	; 0x1552 <__fp_cmp+0x38>
    1544:	0a 26       	eor	r0, r26
    1546:	61 f0       	breq	.+24     	; 0x1560 <__fp_cmp+0x46>
    1548:	23 2b       	or	r18, r19
    154a:	24 2b       	or	r18, r20
    154c:	25 2b       	or	r18, r21
    154e:	21 f4       	brne	.+8      	; 0x1558 <__fp_cmp+0x3e>
    1550:	08 95       	ret
    1552:	0a 26       	eor	r0, r26
    1554:	09 f4       	brne	.+2      	; 0x1558 <__fp_cmp+0x3e>
    1556:	a1 40       	sbci	r26, 0x01	; 1
    1558:	a6 95       	lsr	r26
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	81 1d       	adc	r24, r1
    155e:	81 1d       	adc	r24, r1
    1560:	08 95       	ret

00001562 <__fp_inf>:
    1562:	97 f9       	bld	r25, 7
    1564:	9f 67       	ori	r25, 0x7F	; 127
    1566:	80 e8       	ldi	r24, 0x80	; 128
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	08 95       	ret

0000156e <__fp_nan>:
    156e:	9f ef       	ldi	r25, 0xFF	; 255
    1570:	80 ec       	ldi	r24, 0xC0	; 192
    1572:	08 95       	ret

00001574 <__fp_powser>:
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	1f 93       	push	r17
    157a:	0f 93       	push	r16
    157c:	ff 92       	push	r15
    157e:	ef 92       	push	r14
    1580:	df 92       	push	r13
    1582:	7b 01       	movw	r14, r22
    1584:	8c 01       	movw	r16, r24
    1586:	68 94       	set
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <__fp_powser+0x22>
    158a:	da 2e       	mov	r13, r26
    158c:	ef 01       	movw	r28, r30
    158e:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3x>
    1592:	fe 01       	movw	r30, r28
    1594:	e8 94       	clt
    1596:	a5 91       	lpm	r26, Z+
    1598:	25 91       	lpm	r18, Z+
    159a:	35 91       	lpm	r19, Z+
    159c:	45 91       	lpm	r20, Z+
    159e:	55 91       	lpm	r21, Z+
    15a0:	a6 f3       	brts	.-24     	; 0x158a <__fp_powser+0x16>
    15a2:	ef 01       	movw	r28, r30
    15a4:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <__addsf3x>
    15a8:	fe 01       	movw	r30, r28
    15aa:	97 01       	movw	r18, r14
    15ac:	a8 01       	movw	r20, r16
    15ae:	da 94       	dec	r13
    15b0:	69 f7       	brne	.-38     	; 0x158c <__fp_powser+0x18>
    15b2:	df 90       	pop	r13
    15b4:	ef 90       	pop	r14
    15b6:	ff 90       	pop	r15
    15b8:	0f 91       	pop	r16
    15ba:	1f 91       	pop	r17
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <__fp_pscA>:
    15c2:	00 24       	eor	r0, r0
    15c4:	0a 94       	dec	r0
    15c6:	16 16       	cp	r1, r22
    15c8:	17 06       	cpc	r1, r23
    15ca:	18 06       	cpc	r1, r24
    15cc:	09 06       	cpc	r0, r25
    15ce:	08 95       	ret

000015d0 <__fp_pscB>:
    15d0:	00 24       	eor	r0, r0
    15d2:	0a 94       	dec	r0
    15d4:	12 16       	cp	r1, r18
    15d6:	13 06       	cpc	r1, r19
    15d8:	14 06       	cpc	r1, r20
    15da:	05 06       	cpc	r0, r21
    15dc:	08 95       	ret

000015de <__fp_round>:
    15de:	09 2e       	mov	r0, r25
    15e0:	03 94       	inc	r0
    15e2:	00 0c       	add	r0, r0
    15e4:	11 f4       	brne	.+4      	; 0x15ea <__fp_round+0xc>
    15e6:	88 23       	and	r24, r24
    15e8:	52 f0       	brmi	.+20     	; 0x15fe <__fp_round+0x20>
    15ea:	bb 0f       	add	r27, r27
    15ec:	40 f4       	brcc	.+16     	; 0x15fe <__fp_round+0x20>
    15ee:	bf 2b       	or	r27, r31
    15f0:	11 f4       	brne	.+4      	; 0x15f6 <__fp_round+0x18>
    15f2:	60 ff       	sbrs	r22, 0
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <__fp_round+0x20>
    15f6:	6f 5f       	subi	r22, 0xFF	; 255
    15f8:	7f 4f       	sbci	r23, 0xFF	; 255
    15fa:	8f 4f       	sbci	r24, 0xFF	; 255
    15fc:	9f 4f       	sbci	r25, 0xFF	; 255
    15fe:	08 95       	ret

00001600 <__fp_split3>:
    1600:	57 fd       	sbrc	r21, 7
    1602:	90 58       	subi	r25, 0x80	; 128
    1604:	44 0f       	add	r20, r20
    1606:	55 1f       	adc	r21, r21
    1608:	59 f0       	breq	.+22     	; 0x1620 <__fp_splitA+0x10>
    160a:	5f 3f       	cpi	r21, 0xFF	; 255
    160c:	71 f0       	breq	.+28     	; 0x162a <__fp_splitA+0x1a>
    160e:	47 95       	ror	r20

00001610 <__fp_splitA>:
    1610:	88 0f       	add	r24, r24
    1612:	97 fb       	bst	r25, 7
    1614:	99 1f       	adc	r25, r25
    1616:	61 f0       	breq	.+24     	; 0x1630 <__fp_splitA+0x20>
    1618:	9f 3f       	cpi	r25, 0xFF	; 255
    161a:	79 f0       	breq	.+30     	; 0x163a <__fp_splitA+0x2a>
    161c:	87 95       	ror	r24
    161e:	08 95       	ret
    1620:	12 16       	cp	r1, r18
    1622:	13 06       	cpc	r1, r19
    1624:	14 06       	cpc	r1, r20
    1626:	55 1f       	adc	r21, r21
    1628:	f2 cf       	rjmp	.-28     	; 0x160e <__fp_split3+0xe>
    162a:	46 95       	lsr	r20
    162c:	f1 df       	rcall	.-30     	; 0x1610 <__fp_splitA>
    162e:	08 c0       	rjmp	.+16     	; 0x1640 <__fp_splitA+0x30>
    1630:	16 16       	cp	r1, r22
    1632:	17 06       	cpc	r1, r23
    1634:	18 06       	cpc	r1, r24
    1636:	99 1f       	adc	r25, r25
    1638:	f1 cf       	rjmp	.-30     	; 0x161c <__fp_splitA+0xc>
    163a:	86 95       	lsr	r24
    163c:	71 05       	cpc	r23, r1
    163e:	61 05       	cpc	r22, r1
    1640:	08 94       	sec
    1642:	08 95       	ret

00001644 <__fp_zero>:
    1644:	e8 94       	clt

00001646 <__fp_szero>:
    1646:	bb 27       	eor	r27, r27
    1648:	66 27       	eor	r22, r22
    164a:	77 27       	eor	r23, r23
    164c:	cb 01       	movw	r24, r22
    164e:	97 f9       	bld	r25, 7
    1650:	08 95       	ret

00001652 <__gesf2>:
    1652:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fp_cmp>
    1656:	08 f4       	brcc	.+2      	; 0x165a <__gesf2+0x8>
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	08 95       	ret

0000165c <inverse>:
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	80 e8       	ldi	r24, 0x80	; 128
    1666:	9f e3       	ldi	r25, 0x3F	; 63
    1668:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__divsf3>

0000166c <__mulsf3>:
    166c:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsf3x>
    1670:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_round>
    1674:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__fp_pscA>
    1678:	38 f0       	brcs	.+14     	; 0x1688 <__mulsf3+0x1c>
    167a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__fp_pscB>
    167e:	20 f0       	brcs	.+8      	; 0x1688 <__mulsf3+0x1c>
    1680:	95 23       	and	r25, r21
    1682:	11 f0       	breq	.+4      	; 0x1688 <__mulsf3+0x1c>
    1684:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_inf>
    1688:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_nan>
    168c:	11 24       	eor	r1, r1
    168e:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_szero>

00001692 <__mulsf3x>:
    1692:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_split3>
    1696:	70 f3       	brcs	.-36     	; 0x1674 <__mulsf3+0x8>

00001698 <__mulsf3_pse>:
    1698:	95 9f       	mul	r25, r21
    169a:	c1 f3       	breq	.-16     	; 0x168c <__mulsf3+0x20>
    169c:	95 0f       	add	r25, r21
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	55 1f       	adc	r21, r21
    16a2:	62 9f       	mul	r22, r18
    16a4:	f0 01       	movw	r30, r0
    16a6:	72 9f       	mul	r23, r18
    16a8:	bb 27       	eor	r27, r27
    16aa:	f0 0d       	add	r31, r0
    16ac:	b1 1d       	adc	r27, r1
    16ae:	63 9f       	mul	r22, r19
    16b0:	aa 27       	eor	r26, r26
    16b2:	f0 0d       	add	r31, r0
    16b4:	b1 1d       	adc	r27, r1
    16b6:	aa 1f       	adc	r26, r26
    16b8:	64 9f       	mul	r22, r20
    16ba:	66 27       	eor	r22, r22
    16bc:	b0 0d       	add	r27, r0
    16be:	a1 1d       	adc	r26, r1
    16c0:	66 1f       	adc	r22, r22
    16c2:	82 9f       	mul	r24, r18
    16c4:	22 27       	eor	r18, r18
    16c6:	b0 0d       	add	r27, r0
    16c8:	a1 1d       	adc	r26, r1
    16ca:	62 1f       	adc	r22, r18
    16cc:	73 9f       	mul	r23, r19
    16ce:	b0 0d       	add	r27, r0
    16d0:	a1 1d       	adc	r26, r1
    16d2:	62 1f       	adc	r22, r18
    16d4:	83 9f       	mul	r24, r19
    16d6:	a0 0d       	add	r26, r0
    16d8:	61 1d       	adc	r22, r1
    16da:	22 1f       	adc	r18, r18
    16dc:	74 9f       	mul	r23, r20
    16de:	33 27       	eor	r19, r19
    16e0:	a0 0d       	add	r26, r0
    16e2:	61 1d       	adc	r22, r1
    16e4:	23 1f       	adc	r18, r19
    16e6:	84 9f       	mul	r24, r20
    16e8:	60 0d       	add	r22, r0
    16ea:	21 1d       	adc	r18, r1
    16ec:	82 2f       	mov	r24, r18
    16ee:	76 2f       	mov	r23, r22
    16f0:	6a 2f       	mov	r22, r26
    16f2:	11 24       	eor	r1, r1
    16f4:	9f 57       	subi	r25, 0x7F	; 127
    16f6:	50 40       	sbci	r21, 0x00	; 0
    16f8:	9a f0       	brmi	.+38     	; 0x1720 <__mulsf3_pse+0x88>
    16fa:	f1 f0       	breq	.+60     	; 0x1738 <__mulsf3_pse+0xa0>
    16fc:	88 23       	and	r24, r24
    16fe:	4a f0       	brmi	.+18     	; 0x1712 <__mulsf3_pse+0x7a>
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	bb 1f       	adc	r27, r27
    1706:	66 1f       	adc	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	88 1f       	adc	r24, r24
    170c:	91 50       	subi	r25, 0x01	; 1
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	a9 f7       	brne	.-22     	; 0x16fc <__mulsf3_pse+0x64>
    1712:	9e 3f       	cpi	r25, 0xFE	; 254
    1714:	51 05       	cpc	r21, r1
    1716:	80 f0       	brcs	.+32     	; 0x1738 <__mulsf3_pse+0xa0>
    1718:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_inf>
    171c:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_szero>
    1720:	5f 3f       	cpi	r21, 0xFF	; 255
    1722:	e4 f3       	brlt	.-8      	; 0x171c <__mulsf3_pse+0x84>
    1724:	98 3e       	cpi	r25, 0xE8	; 232
    1726:	d4 f3       	brlt	.-12     	; 0x171c <__mulsf3_pse+0x84>
    1728:	86 95       	lsr	r24
    172a:	77 95       	ror	r23
    172c:	67 95       	ror	r22
    172e:	b7 95       	ror	r27
    1730:	f7 95       	ror	r31
    1732:	e7 95       	ror	r30
    1734:	9f 5f       	subi	r25, 0xFF	; 255
    1736:	c1 f7       	brne	.-16     	; 0x1728 <__mulsf3_pse+0x90>
    1738:	fe 2b       	or	r31, r30
    173a:	88 0f       	add	r24, r24
    173c:	91 1d       	adc	r25, r1
    173e:	96 95       	lsr	r25
    1740:	87 95       	ror	r24
    1742:	97 f9       	bld	r25, 7
    1744:	08 95       	ret
    1746:	19 f4       	brne	.+6      	; 0x174e <__mulsf3_pse+0xb6>
    1748:	16 f4       	brtc	.+4      	; 0x174e <__mulsf3_pse+0xb6>
    174a:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_nan>
    174e:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__fp_mpack>

00001752 <sqrt>:
    1752:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_splitA>
    1756:	b8 f3       	brcs	.-18     	; 0x1746 <__mulsf3_pse+0xae>
    1758:	99 23       	and	r25, r25
    175a:	c9 f3       	breq	.-14     	; 0x174e <__mulsf3_pse+0xb6>
    175c:	b6 f3       	brts	.-20     	; 0x174a <__mulsf3_pse+0xb2>
    175e:	9f 57       	subi	r25, 0x7F	; 127
    1760:	55 0b       	sbc	r21, r21
    1762:	87 ff       	sbrs	r24, 7
    1764:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__fp_norm2>
    1768:	00 24       	eor	r0, r0
    176a:	a0 e6       	ldi	r26, 0x60	; 96
    176c:	40 ea       	ldi	r20, 0xA0	; 160
    176e:	90 01       	movw	r18, r0
    1770:	80 58       	subi	r24, 0x80	; 128
    1772:	56 95       	lsr	r21
    1774:	97 95       	ror	r25
    1776:	28 f4       	brcc	.+10     	; 0x1782 <sqrt+0x30>
    1778:	80 5c       	subi	r24, 0xC0	; 192
    177a:	66 0f       	add	r22, r22
    177c:	77 1f       	adc	r23, r23
    177e:	88 1f       	adc	r24, r24
    1780:	20 f0       	brcs	.+8      	; 0x178a <sqrt+0x38>
    1782:	26 17       	cp	r18, r22
    1784:	37 07       	cpc	r19, r23
    1786:	48 07       	cpc	r20, r24
    1788:	30 f4       	brcc	.+12     	; 0x1796 <sqrt+0x44>
    178a:	62 1b       	sub	r22, r18
    178c:	73 0b       	sbc	r23, r19
    178e:	84 0b       	sbc	r24, r20
    1790:	20 29       	or	r18, r0
    1792:	31 29       	or	r19, r1
    1794:	4a 2b       	or	r20, r26
    1796:	a6 95       	lsr	r26
    1798:	17 94       	ror	r1
    179a:	07 94       	ror	r0
    179c:	20 25       	eor	r18, r0
    179e:	31 25       	eor	r19, r1
    17a0:	4a 27       	eor	r20, r26
    17a2:	58 f7       	brcc	.-42     	; 0x177a <sqrt+0x28>
    17a4:	66 0f       	add	r22, r22
    17a6:	77 1f       	adc	r23, r23
    17a8:	88 1f       	adc	r24, r24
    17aa:	20 f0       	brcs	.+8      	; 0x17b4 <sqrt+0x62>
    17ac:	26 17       	cp	r18, r22
    17ae:	37 07       	cpc	r19, r23
    17b0:	48 07       	cpc	r20, r24
    17b2:	30 f4       	brcc	.+12     	; 0x17c0 <sqrt+0x6e>
    17b4:	62 0b       	sbc	r22, r18
    17b6:	73 0b       	sbc	r23, r19
    17b8:	84 0b       	sbc	r24, r20
    17ba:	20 0d       	add	r18, r0
    17bc:	31 1d       	adc	r19, r1
    17be:	41 1d       	adc	r20, r1
    17c0:	a0 95       	com	r26
    17c2:	81 f7       	brne	.-32     	; 0x17a4 <sqrt+0x52>
    17c4:	b9 01       	movw	r22, r18
    17c6:	84 2f       	mov	r24, r20
    17c8:	91 58       	subi	r25, 0x81	; 129
    17ca:	88 0f       	add	r24, r24
    17cc:	96 95       	lsr	r25
    17ce:	87 95       	ror	r24
    17d0:	08 95       	ret

000017d2 <square>:
    17d2:	9b 01       	movw	r18, r22
    17d4:	ac 01       	movw	r20, r24
    17d6:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__mulsf3>

000017da <__fp_mpack>:
    17da:	9f 3f       	cpi	r25, 0xFF	; 255
    17dc:	31 f0       	breq	.+12     	; 0x17ea <__fp_mpack_finite+0xc>

000017de <__fp_mpack_finite>:
    17de:	91 50       	subi	r25, 0x01	; 1
    17e0:	20 f4       	brcc	.+8      	; 0x17ea <__fp_mpack_finite+0xc>
    17e2:	87 95       	ror	r24
    17e4:	77 95       	ror	r23
    17e6:	67 95       	ror	r22
    17e8:	b7 95       	ror	r27
    17ea:	88 0f       	add	r24, r24
    17ec:	91 1d       	adc	r25, r1
    17ee:	96 95       	lsr	r25
    17f0:	87 95       	ror	r24
    17f2:	97 f9       	bld	r25, 7
    17f4:	08 95       	ret

000017f6 <__fp_norm2>:
    17f6:	91 50       	subi	r25, 0x01	; 1
    17f8:	50 40       	sbci	r21, 0x00	; 0
    17fa:	66 0f       	add	r22, r22
    17fc:	77 1f       	adc	r23, r23
    17fe:	88 1f       	adc	r24, r24
    1800:	d2 f7       	brpl	.-12     	; 0x17f6 <__fp_norm2>
    1802:	08 95       	ret

00001804 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1804:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1806:	91 8d       	ldd	r25, Z+25	; 0x19
    1808:	22 8d       	ldd	r18, Z+26	; 0x1a
    180a:	89 2f       	mov	r24, r25
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	80 5c       	subi	r24, 0xC0	; 192
    1810:	9f 4f       	sbci	r25, 0xFF	; 255
    1812:	82 1b       	sub	r24, r18
    1814:	91 09       	sbc	r25, r1
}
    1816:	8f 73       	andi	r24, 0x3F	; 63
    1818:	99 27       	eor	r25, r25
    181a:	08 95       	ret

0000181c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    181c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    181e:	91 8d       	ldd	r25, Z+25	; 0x19
    1820:	82 8d       	ldd	r24, Z+26	; 0x1a
    1822:	98 17       	cp	r25, r24
    1824:	31 f0       	breq	.+12     	; 0x1832 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1826:	82 8d       	ldd	r24, Z+26	; 0x1a
    1828:	e8 0f       	add	r30, r24
    182a:	f1 1d       	adc	r31, r1
    182c:	85 8d       	ldd	r24, Z+29	; 0x1d
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1836:	08 95       	ret

00001838 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1838:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    183a:	91 8d       	ldd	r25, Z+25	; 0x19
    183c:	82 8d       	ldd	r24, Z+26	; 0x1a
    183e:	98 17       	cp	r25, r24
    1840:	61 f0       	breq	.+24     	; 0x185a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1842:	82 8d       	ldd	r24, Z+26	; 0x1a
    1844:	df 01       	movw	r26, r30
    1846:	a8 0f       	add	r26, r24
    1848:	b1 1d       	adc	r27, r1
    184a:	5d 96       	adiw	r26, 0x1d	; 29
    184c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    184e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1850:	9f 5f       	subi	r25, 0xFF	; 255
    1852:	9f 73       	andi	r25, 0x3F	; 63
    1854:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    185a:	8f ef       	ldi	r24, 0xFF	; 255
    185c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    185e:	08 95       	ret

00001860 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1860:	85 e8       	ldi	r24, 0x85	; 133
    1862:	9d e0       	ldi	r25, 0x0D	; 13
    1864:	89 2b       	or	r24, r25
    1866:	49 f0       	breq	.+18     	; 0x187a <_Z14serialEventRunv+0x1a>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	89 2b       	or	r24, r25
    186e:	29 f0       	breq	.+10     	; 0x187a <_Z14serialEventRunv+0x1a>
    1870:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_Z17Serial0_availablev>
    1874:	81 11       	cpse	r24, r1
    1876:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    187a:	08 95       	ret

0000187c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    187c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    187e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1880:	df 01       	movw	r26, r30
    1882:	a8 0f       	add	r26, r24
    1884:	b1 1d       	adc	r27, r1
    1886:	a3 5a       	subi	r26, 0xA3	; 163
    1888:	bf 4f       	sbci	r27, 0xFF	; 255
    188a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    188c:	84 8d       	ldd	r24, Z+28	; 0x1c
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	8f 73       	andi	r24, 0x3F	; 63
    1894:	99 27       	eor	r25, r25
    1896:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1898:	a6 89       	ldd	r26, Z+22	; 0x16
    189a:	b7 89       	ldd	r27, Z+23	; 0x17
    189c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    189e:	a0 89       	ldd	r26, Z+16	; 0x10
    18a0:	b1 89       	ldd	r27, Z+17	; 0x11
    18a2:	8c 91       	ld	r24, X
    18a4:	80 64       	ori	r24, 0x40	; 64
    18a6:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    18a8:	93 8d       	ldd	r25, Z+27	; 0x1b
    18aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    18ac:	98 13       	cpse	r25, r24
    18ae:	06 c0       	rjmp	.+12     	; 0x18bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    18b0:	02 88       	ldd	r0, Z+18	; 0x12
    18b2:	f3 89       	ldd	r31, Z+19	; 0x13
    18b4:	e0 2d       	mov	r30, r0
    18b6:	80 81       	ld	r24, Z
    18b8:	8f 7d       	andi	r24, 0xDF	; 223
    18ba:	80 83       	st	Z, r24
    18bc:	08 95       	ret

000018be <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    18c4:	88 8d       	ldd	r24, Y+24	; 0x18
    18c6:	88 23       	and	r24, r24
    18c8:	c9 f0       	breq	.+50     	; 0x18fc <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    18ca:	ea 89       	ldd	r30, Y+18	; 0x12
    18cc:	fb 89       	ldd	r31, Y+19	; 0x13
    18ce:	80 81       	ld	r24, Z
    18d0:	85 fd       	sbrc	r24, 5
    18d2:	05 c0       	rjmp	.+10     	; 0x18de <_ZN14HardwareSerial5flushEv+0x20>
    18d4:	a8 89       	ldd	r26, Y+16	; 0x10
    18d6:	b9 89       	ldd	r27, Y+17	; 0x11
    18d8:	8c 91       	ld	r24, X
    18da:	86 fd       	sbrc	r24, 6
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	07 fc       	sbrc	r0, 7
    18e2:	f5 cf       	rjmp	.-22     	; 0x18ce <_ZN14HardwareSerial5flushEv+0x10>
    18e4:	80 81       	ld	r24, Z
    18e6:	85 ff       	sbrs	r24, 5
    18e8:	f2 cf       	rjmp	.-28     	; 0x18ce <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    18ea:	a8 89       	ldd	r26, Y+16	; 0x10
    18ec:	b9 89       	ldd	r27, Y+17	; 0x11
    18ee:	8c 91       	ld	r24, X
    18f0:	85 ff       	sbrs	r24, 5
    18f2:	ed cf       	rjmp	.-38     	; 0x18ce <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    18f4:	ce 01       	movw	r24, r28
    18f6:	0e 94 3e 0c 	call	0x187c	; 0x187c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    18fa:	e7 cf       	rjmp	.-50     	; 0x18ca <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	08 95       	ret

00001902 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	ec 01       	movw	r28, r24
  _written = true;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1914:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1916:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1918:	98 13       	cpse	r25, r24
    191a:	05 c0       	rjmp	.+10     	; 0x1926 <_ZN14HardwareSerial5writeEh+0x24>
    191c:	e8 89       	ldd	r30, Y+16	; 0x10
    191e:	f9 89       	ldd	r31, Y+17	; 0x11
    1920:	80 81       	ld	r24, Z
    1922:	85 fd       	sbrc	r24, 5
    1924:	24 c0       	rjmp	.+72     	; 0x196e <_ZN14HardwareSerial5writeEh+0x6c>
    1926:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1928:	0b 8d       	ldd	r16, Y+27	; 0x1b
    192a:	10 e0       	ldi	r17, 0x00	; 0
    192c:	0f 5f       	subi	r16, 0xFF	; 255
    192e:	1f 4f       	sbci	r17, 0xFF	; 255
    1930:	0f 73       	andi	r16, 0x3F	; 63
    1932:	11 27       	eor	r17, r17
    1934:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1936:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1938:	e8 12       	cpse	r14, r24
    193a:	0c c0       	rjmp	.+24     	; 0x1954 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	07 fc       	sbrc	r0, 7
    1940:	fa cf       	rjmp	.-12     	; 0x1936 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1942:	e8 89       	ldd	r30, Y+16	; 0x10
    1944:	f9 89       	ldd	r31, Y+17	; 0x11
    1946:	80 81       	ld	r24, Z
    1948:	85 ff       	sbrs	r24, 5
    194a:	f5 cf       	rjmp	.-22     	; 0x1936 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    194c:	ce 01       	movw	r24, r28
    194e:	0e 94 3e 0c 	call	0x187c	; 0x187c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1952:	f1 cf       	rjmp	.-30     	; 0x1936 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1956:	fe 01       	movw	r30, r28
    1958:	e8 0f       	add	r30, r24
    195a:	f1 1d       	adc	r31, r1
    195c:	e3 5a       	subi	r30, 0xA3	; 163
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1962:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1964:	ea 89       	ldd	r30, Y+18	; 0x12
    1966:	fb 89       	ldd	r31, Y+19	; 0x13
    1968:	80 81       	ld	r24, Z
    196a:	80 62       	ori	r24, 0x20	; 32
    196c:	07 c0       	rjmp	.+14     	; 0x197c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    196e:	ee 89       	ldd	r30, Y+22	; 0x16
    1970:	ff 89       	ldd	r31, Y+23	; 0x17
    1972:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1974:	e8 89       	ldd	r30, Y+16	; 0x10
    1976:	f9 89       	ldd	r31, Y+17	; 0x11
    1978:	80 81       	ld	r24, Z
    197a:	80 64       	ori	r24, 0x40	; 64
    197c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	ff 90       	pop	r15
    198c:	ef 90       	pop	r14
    198e:	08 95       	ret

00001990 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1990:	cf 92       	push	r12
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	ec 01       	movw	r28, r24
    19a0:	6a 01       	movw	r12, r20
    19a2:	7b 01       	movw	r14, r22
    19a4:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    19a6:	e8 89       	ldd	r30, Y+16	; 0x10
    19a8:	f9 89       	ldd	r31, Y+17	; 0x11
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    19ae:	41 15       	cp	r20, r1
    19b0:	51 4e       	sbci	r21, 0xE1	; 225
    19b2:	61 05       	cpc	r22, r1
    19b4:	71 05       	cpc	r23, r1
    19b6:	b1 f0       	breq	.+44     	; 0x19e4 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	79 e0       	ldi	r23, 0x09	; 9
    19bc:	8d e3       	ldi	r24, 0x3D	; 61
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a7 01       	movw	r20, r14
    19c2:	96 01       	movw	r18, r12
    19c4:	0e 94 bf 18 	call	0x317e	; 0x317e <__udivmodsi4>
    19c8:	da 01       	movw	r26, r20
    19ca:	c9 01       	movw	r24, r18
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	a1 09       	sbc	r26, r1
    19d0:	b1 09       	sbc	r27, r1
    19d2:	b6 95       	lsr	r27
    19d4:	a7 95       	ror	r26
    19d6:	97 95       	ror	r25
    19d8:	87 95       	ror	r24
    19da:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    19dc:	41 15       	cp	r20, r1
    19de:	80 e1       	ldi	r24, 0x10	; 16
    19e0:	58 07       	cpc	r21, r24
    19e2:	a8 f0       	brcs	.+42     	; 0x1a0e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    19e4:	e8 89       	ldd	r30, Y+16	; 0x10
    19e6:	f9 89       	ldd	r31, Y+17	; 0x11
    19e8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    19ea:	60 e8       	ldi	r22, 0x80	; 128
    19ec:	74 e8       	ldi	r23, 0x84	; 132
    19ee:	8e e1       	ldi	r24, 0x1E	; 30
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a7 01       	movw	r20, r14
    19f4:	96 01       	movw	r18, r12
    19f6:	0e 94 bf 18 	call	0x317e	; 0x317e <__udivmodsi4>
    19fa:	ba 01       	movw	r22, r20
    19fc:	a9 01       	movw	r20, r18
    19fe:	41 50       	subi	r20, 0x01	; 1
    1a00:	51 09       	sbc	r21, r1
    1a02:	61 09       	sbc	r22, r1
    1a04:	71 09       	sbc	r23, r1
    1a06:	76 95       	lsr	r23
    1a08:	67 95       	ror	r22
    1a0a:	57 95       	ror	r21
    1a0c:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1a0e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a10:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a12:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    1a14:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a16:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a18:	40 83       	st	Z, r20

  _written = false;
    1a1a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1a1c:	ec 89       	ldd	r30, Y+20	; 0x14
    1a1e:	fd 89       	ldd	r31, Y+21	; 0x15
    1a20:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1a22:	ea 89       	ldd	r30, Y+18	; 0x12
    1a24:	fb 89       	ldd	r31, Y+19	; 0x13
    1a26:	80 81       	ld	r24, Z
    1a28:	80 61       	ori	r24, 0x10	; 16
    1a2a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1a2c:	ea 89       	ldd	r30, Y+18	; 0x12
    1a2e:	fb 89       	ldd	r31, Y+19	; 0x13
    1a30:	80 81       	ld	r24, Z
    1a32:	88 60       	ori	r24, 0x08	; 8
    1a34:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1a36:	ea 89       	ldd	r30, Y+18	; 0x12
    1a38:	fb 89       	ldd	r31, Y+19	; 0x13
    1a3a:	80 81       	ld	r24, Z
    1a3c:	80 68       	ori	r24, 0x80	; 128
    1a3e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1a40:	ea 89       	ldd	r30, Y+18	; 0x12
    1a42:	fb 89       	ldd	r31, Y+19	; 0x13
    1a44:	80 81       	ld	r24, Z
    1a46:	8f 7d       	andi	r24, 0xDF	; 223
    1a48:	80 83       	st	Z, r24
}
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	ff 90       	pop	r15
    1a52:	ef 90       	pop	r14
    1a54:	df 90       	pop	r13
    1a56:	cf 90       	pop	r12
    1a58:	08 95       	ret

00001a5a <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1a5a:	1f 92       	push	r1
    1a5c:	0f 92       	push	r0
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	0f 92       	push	r0
    1a62:	11 24       	eor	r1, r1
    1a64:	2f 93       	push	r18
    1a66:	8f 93       	push	r24
    1a68:	9f 93       	push	r25
    1a6a:	ef 93       	push	r30
    1a6c:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1a6e:	e0 91 1e 03 	lds	r30, 0x031E	; 0x80031e <Serial+0x10>
    1a72:	f0 91 1f 03 	lds	r31, 0x031F	; 0x80031f <Serial+0x11>
    1a76:	80 81       	ld	r24, Z
    1a78:	e0 91 24 03 	lds	r30, 0x0324	; 0x800324 <Serial+0x16>
    1a7c:	f0 91 25 03 	lds	r31, 0x0325	; 0x800325 <Serial+0x17>
    1a80:	82 fd       	sbrc	r24, 2
    1a82:	12 c0       	rjmp	.+36     	; 0x1aa8 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1a84:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1a86:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <Serial+0x19>
    1a8a:	8f 5f       	subi	r24, 0xFF	; 255
    1a8c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1a8e:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <Serial+0x1a>
    1a92:	82 17       	cp	r24, r18
    1a94:	51 f0       	breq	.+20     	; 0x1aaa <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1a96:	e0 91 27 03 	lds	r30, 0x0327	; 0x800327 <Serial+0x19>
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	e2 5f       	subi	r30, 0xF2	; 242
    1a9e:	fc 4f       	sbci	r31, 0xFC	; 252
    1aa0:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1aa2:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <Serial+0x19>
    1aa6:	01 c0       	rjmp	.+2      	; 0x1aaa <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1aa8:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1aaa:	ff 91       	pop	r31
    1aac:	ef 91       	pop	r30
    1aae:	9f 91       	pop	r25
    1ab0:	8f 91       	pop	r24
    1ab2:	2f 91       	pop	r18
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	0f 90       	pop	r0
    1aba:	1f 90       	pop	r1
    1abc:	18 95       	reti

00001abe <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	2f 93       	push	r18
    1aca:	3f 93       	push	r19
    1acc:	4f 93       	push	r20
    1ace:	5f 93       	push	r21
    1ad0:	6f 93       	push	r22
    1ad2:	7f 93       	push	r23
    1ad4:	8f 93       	push	r24
    1ad6:	9f 93       	push	r25
    1ad8:	af 93       	push	r26
    1ada:	bf 93       	push	r27
    1adc:	ef 93       	push	r30
    1ade:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1ae0:	8e e0       	ldi	r24, 0x0E	; 14
    1ae2:	93 e0       	ldi	r25, 0x03	; 3
    1ae4:	0e 94 3e 0c 	call	0x187c	; 0x187c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1ae8:	ff 91       	pop	r31
    1aea:	ef 91       	pop	r30
    1aec:	bf 91       	pop	r27
    1aee:	af 91       	pop	r26
    1af0:	9f 91       	pop	r25
    1af2:	8f 91       	pop	r24
    1af4:	7f 91       	pop	r23
    1af6:	6f 91       	pop	r22
    1af8:	5f 91       	pop	r21
    1afa:	4f 91       	pop	r20
    1afc:	3f 91       	pop	r19
    1afe:	2f 91       	pop	r18
    1b00:	0f 90       	pop	r0
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	0f 90       	pop	r0
    1b06:	1f 90       	pop	r1
    1b08:	18 95       	reti

00001b0a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1b0a:	8e e0       	ldi	r24, 0x0E	; 14
    1b0c:	93 e0       	ldi	r25, 0x03	; 3
    1b0e:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN14HardwareSerial9availableEv>
    1b12:	21 e0       	ldi	r18, 0x01	; 1
    1b14:	89 2b       	or	r24, r25
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <_Z17Serial0_availablev+0x10>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
}
    1b1a:	82 2f       	mov	r24, r18
    1b1c:	08 95       	ret

00001b1e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1b1e:	ee e0       	ldi	r30, 0x0E	; 14
    1b20:	f3 e0       	ldi	r31, 0x03	; 3
    1b22:	13 82       	std	Z+3, r1	; 0x03
    1b24:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1b26:	88 ee       	ldi	r24, 0xE8	; 232
    1b28:	93 e0       	ldi	r25, 0x03	; 3
    1b2a:	a0 e0       	ldi	r26, 0x00	; 0
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	84 83       	std	Z+4, r24	; 0x04
    1b30:	95 83       	std	Z+5, r25	; 0x05
    1b32:	a6 83       	std	Z+6, r26	; 0x06
    1b34:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1b36:	89 ee       	ldi	r24, 0xE9	; 233
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	80 83       	st	Z, r24
    1b3e:	85 ec       	ldi	r24, 0xC5	; 197
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	95 87       	std	Z+13, r25	; 0x0d
    1b44:	84 87       	std	Z+12, r24	; 0x0c
    1b46:	84 ec       	ldi	r24, 0xC4	; 196
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	97 87       	std	Z+15, r25	; 0x0f
    1b4c:	86 87       	std	Z+14, r24	; 0x0e
    1b4e:	80 ec       	ldi	r24, 0xC0	; 192
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	91 8b       	std	Z+17, r25	; 0x11
    1b54:	80 8b       	std	Z+16, r24	; 0x10
    1b56:	81 ec       	ldi	r24, 0xC1	; 193
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	93 8b       	std	Z+19, r25	; 0x13
    1b5c:	82 8b       	std	Z+18, r24	; 0x12
    1b5e:	82 ec       	ldi	r24, 0xC2	; 194
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	95 8b       	std	Z+21, r25	; 0x15
    1b64:	84 8b       	std	Z+20, r24	; 0x14
    1b66:	86 ec       	ldi	r24, 0xC6	; 198
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	97 8b       	std	Z+23, r25	; 0x17
    1b6c:	86 8b       	std	Z+22, r24	; 0x16
    1b6e:	11 8e       	std	Z+25, r1	; 0x19
    1b70:	12 8e       	std	Z+26, r1	; 0x1a
    1b72:	13 8e       	std	Z+27, r1	; 0x1b
    1b74:	14 8e       	std	Z+28, r1	; 0x1c
    1b76:	08 95       	ret

00001b78 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    1b78:	08 95       	ret

00001b7a <main>:

int main(void)
{
	init();
    1b7a:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <init>

	initVariant();
    1b7e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1b82:	0e 94 6e 03 	call	0x6dc	; 0x6dc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1b86:	c0 e3       	ldi	r28, 0x30	; 48
    1b88:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1b8a:	0e 94 a6 08 	call	0x114c	; 0x114c <loop>
		if (serialEventRun) serialEventRun();
    1b8e:	20 97       	sbiw	r28, 0x00	; 0
    1b90:	e1 f3       	breq	.-8      	; 0x1b8a <main+0x10>
    1b92:	0e 94 30 0c 	call	0x1860	; 0x1860 <_Z14serialEventRunv>
    1b96:	f9 cf       	rjmp	.-14     	; 0x1b8a <main+0x10>

00001b98 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	6c 01       	movw	r12, r24
    1baa:	7a 01       	movw	r14, r20
    1bac:	8b 01       	movw	r16, r22
    1bae:	c0 e0       	ldi	r28, 0x00	; 0
    1bb0:	d0 e0       	ldi	r29, 0x00	; 0
    1bb2:	ce 15       	cp	r28, r14
    1bb4:	df 05       	cpc	r29, r15
    1bb6:	89 f0       	breq	.+34     	; 0x1bda <_ZN5Print5writeEPKhj+0x42>
    1bb8:	d8 01       	movw	r26, r16
    1bba:	6d 91       	ld	r22, X+
    1bbc:	8d 01       	movw	r16, r26
    1bbe:	d6 01       	movw	r26, r12
    1bc0:	ed 91       	ld	r30, X+
    1bc2:	fc 91       	ld	r31, X
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	f0 81       	ld	r31, Z
    1bc8:	e0 2d       	mov	r30, r0
    1bca:	c6 01       	movw	r24, r12
    1bcc:	09 95       	icall
    1bce:	89 2b       	or	r24, r25
    1bd0:	11 f4       	brne	.+4      	; 0x1bd6 <_ZN5Print5writeEPKhj+0x3e>
    1bd2:	7e 01       	movw	r14, r28
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <_ZN5Print5writeEPKhj+0x42>
    1bd6:	21 96       	adiw	r28, 0x01	; 1
    1bd8:	ec cf       	rjmp	.-40     	; 0x1bb2 <_ZN5Print5writeEPKhj+0x1a>
    1bda:	c7 01       	movw	r24, r14
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	08 95       	ret

00001bee <_ZN5Print5writeEPKc>:
    1bee:	61 15       	cp	r22, r1
    1bf0:	71 05       	cpc	r23, r1
    1bf2:	79 f0       	breq	.+30     	; 0x1c12 <_ZN5Print5writeEPKc+0x24>
    1bf4:	fb 01       	movw	r30, r22
    1bf6:	01 90       	ld	r0, Z+
    1bf8:	00 20       	and	r0, r0
    1bfa:	e9 f7       	brne	.-6      	; 0x1bf6 <_ZN5Print5writeEPKc+0x8>
    1bfc:	31 97       	sbiw	r30, 0x01	; 1
    1bfe:	af 01       	movw	r20, r30
    1c00:	46 1b       	sub	r20, r22
    1c02:	57 0b       	sbc	r21, r23
    1c04:	dc 01       	movw	r26, r24
    1c06:	ed 91       	ld	r30, X+
    1c08:	fc 91       	ld	r31, X
    1c0a:	02 80       	ldd	r0, Z+2	; 0x02
    1c0c:	f3 81       	ldd	r31, Z+3	; 0x03
    1c0e:	e0 2d       	mov	r30, r0
    1c10:	09 94       	ijmp
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	08 95       	ret

00001c18 <_ZN5Print5printERK6String>:
    1c18:	dc 01       	movw	r26, r24
    1c1a:	ed 91       	ld	r30, X+
    1c1c:	fc 91       	ld	r31, X
    1c1e:	db 01       	movw	r26, r22
    1c20:	14 96       	adiw	r26, 0x04	; 4
    1c22:	4d 91       	ld	r20, X+
    1c24:	5c 91       	ld	r21, X
    1c26:	15 97       	sbiw	r26, 0x05	; 5
    1c28:	6d 91       	ld	r22, X+
    1c2a:	7c 91       	ld	r23, X
    1c2c:	02 80       	ldd	r0, Z+2	; 0x02
    1c2e:	f3 81       	ldd	r31, Z+3	; 0x03
    1c30:	e0 2d       	mov	r30, r0
    1c32:	09 94       	ijmp

00001c34 <_ZN5Print5printEPKc>:
    1c34:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <_ZN5Print5writeEPKc>

00001c38 <_ZN5Print5printEc>:
    1c38:	dc 01       	movw	r26, r24
    1c3a:	ed 91       	ld	r30, X+
    1c3c:	fc 91       	ld	r31, X
    1c3e:	01 90       	ld	r0, Z+
    1c40:	f0 81       	ld	r31, Z
    1c42:	e0 2d       	mov	r30, r0
    1c44:	09 94       	ijmp

00001c46 <_ZN5Print7printlnEv>:
    1c46:	65 ef       	ldi	r22, 0xF5	; 245
    1c48:	71 e0       	ldi	r23, 0x01	; 1
    1c4a:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <_ZN5Print5writeEPKc>

00001c4e <_ZN5Print7printlnEPKc>:
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	ec 01       	movw	r28, r24
    1c58:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN5Print5writeEPKc>
    1c5c:	8c 01       	movw	r16, r24
    1c5e:	ce 01       	movw	r24, r28
    1c60:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <_ZN5Print7printlnEv>
    1c64:	80 0f       	add	r24, r16
    1c66:	91 1f       	adc	r25, r17
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	08 95       	ret

00001c72 <_ZN5Print11printNumberEmh>:
    1c72:	8f 92       	push	r8
    1c74:	9f 92       	push	r9
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	a1 97       	sbiw	r28, 0x21	; 33
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	7c 01       	movw	r14, r24
    1c9c:	d4 2e       	mov	r13, r20
    1c9e:	c5 2e       	mov	r12, r21
    1ca0:	db 01       	movw	r26, r22
    1ca2:	19 a2       	std	Y+33, r1	; 0x21
    1ca4:	22 30       	cpi	r18, 0x02	; 2
    1ca6:	08 f4       	brcc	.+2      	; 0x1caa <_ZN5Print11printNumberEmh+0x38>
    1ca8:	2a e0       	ldi	r18, 0x0A	; 10
    1caa:	8e 01       	movw	r16, r28
    1cac:	0f 5d       	subi	r16, 0xDF	; 223
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	82 2e       	mov	r8, r18
    1cb2:	91 2c       	mov	r9, r1
    1cb4:	a1 2c       	mov	r10, r1
    1cb6:	b1 2c       	mov	r11, r1
    1cb8:	6d 2d       	mov	r22, r13
    1cba:	7c 2d       	mov	r23, r12
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	a5 01       	movw	r20, r10
    1cc0:	94 01       	movw	r18, r8
    1cc2:	0e 94 bf 18 	call	0x317e	; 0x317e <__udivmodsi4>
    1cc6:	d2 2e       	mov	r13, r18
    1cc8:	c3 2e       	mov	r12, r19
    1cca:	da 01       	movw	r26, r20
    1ccc:	01 50       	subi	r16, 0x01	; 1
    1cce:	11 09       	sbc	r17, r1
    1cd0:	6a 30       	cpi	r22, 0x0A	; 10
    1cd2:	71 05       	cpc	r23, r1
    1cd4:	81 05       	cpc	r24, r1
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	10 f4       	brcc	.+4      	; 0x1cde <_ZN5Print11printNumberEmh+0x6c>
    1cda:	60 5d       	subi	r22, 0xD0	; 208
    1cdc:	01 c0       	rjmp	.+2      	; 0x1ce0 <_ZN5Print11printNumberEmh+0x6e>
    1cde:	69 5c       	subi	r22, 0xC9	; 201
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	60 83       	st	Z, r22
    1ce4:	23 2b       	or	r18, r19
    1ce6:	24 2b       	or	r18, r20
    1ce8:	25 2b       	or	r18, r21
    1cea:	31 f7       	brne	.-52     	; 0x1cb8 <_ZN5Print11printNumberEmh+0x46>
    1cec:	b8 01       	movw	r22, r16
    1cee:	c7 01       	movw	r24, r14
    1cf0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN5Print5writeEPKc>
    1cf4:	a1 96       	adiw	r28, 0x21	; 33
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	9f 90       	pop	r9
    1d16:	8f 90       	pop	r8
    1d18:	08 95       	ret

00001d1a <_ZN5Print5printEli>:
    1d1a:	cf 92       	push	r12
    1d1c:	df 92       	push	r13
    1d1e:	ef 92       	push	r14
    1d20:	ff 92       	push	r15
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	ec 01       	movw	r28, r24
    1d2c:	6a 01       	movw	r12, r20
    1d2e:	7b 01       	movw	r14, r22
    1d30:	21 15       	cp	r18, r1
    1d32:	31 05       	cpc	r19, r1
    1d34:	79 f4       	brne	.+30     	; 0x1d54 <_ZN5Print5printEli+0x3a>
    1d36:	e8 81       	ld	r30, Y
    1d38:	f9 81       	ldd	r31, Y+1	; 0x01
    1d3a:	01 90       	ld	r0, Z+
    1d3c:	f0 81       	ld	r31, Z
    1d3e:	e0 2d       	mov	r30, r0
    1d40:	64 2f       	mov	r22, r20
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	df 90       	pop	r13
    1d50:	cf 90       	pop	r12
    1d52:	09 94       	ijmp
    1d54:	2a 30       	cpi	r18, 0x0A	; 10
    1d56:	31 05       	cpc	r19, r1
    1d58:	e9 f4       	brne	.+58     	; 0x1d94 <_ZN5Print5printEli+0x7a>
    1d5a:	77 ff       	sbrs	r23, 7
    1d5c:	1a c0       	rjmp	.+52     	; 0x1d92 <_ZN5Print5printEli+0x78>
    1d5e:	6d e2       	ldi	r22, 0x2D	; 45
    1d60:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN5Print5printEc>
    1d64:	8c 01       	movw	r16, r24
    1d66:	44 27       	eor	r20, r20
    1d68:	55 27       	eor	r21, r21
    1d6a:	ba 01       	movw	r22, r20
    1d6c:	4c 19       	sub	r20, r12
    1d6e:	5d 09       	sbc	r21, r13
    1d70:	6e 09       	sbc	r22, r14
    1d72:	7f 09       	sbc	r23, r15
    1d74:	2a e0       	ldi	r18, 0x0A	; 10
    1d76:	ce 01       	movw	r24, r28
    1d78:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZN5Print11printNumberEmh>
    1d7c:	80 0f       	add	r24, r16
    1d7e:	91 1f       	adc	r25, r17
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	ff 90       	pop	r15
    1d8a:	ef 90       	pop	r14
    1d8c:	df 90       	pop	r13
    1d8e:	cf 90       	pop	r12
    1d90:	08 95       	ret
    1d92:	2a e0       	ldi	r18, 0x0A	; 10
    1d94:	b7 01       	movw	r22, r14
    1d96:	a6 01       	movw	r20, r12
    1d98:	ce 01       	movw	r24, r28
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <_ZN5Print11printNumberEmh>

00001dae <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1dae:	4f 92       	push	r4
    1db0:	5f 92       	push	r5
    1db2:	6f 92       	push	r6
    1db4:	7f 92       	push	r7
    1db6:	8f 92       	push	r8
    1db8:	9f 92       	push	r9
    1dba:	af 92       	push	r10
    1dbc:	bf 92       	push	r11
    1dbe:	cf 92       	push	r12
    1dc0:	df 92       	push	r13
    1dc2:	ef 92       	push	r14
    1dc4:	ff 92       	push	r15
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	ec 01       	movw	r28, r24
    1dcc:	6a 01       	movw	r12, r20
    1dce:	7b 01       	movw	r14, r22
    1dd0:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1dd2:	9a 01       	movw	r18, r20
    1dd4:	ab 01       	movw	r20, r22
    1dd6:	c7 01       	movw	r24, r14
    1dd8:	b6 01       	movw	r22, r12
    1dda:	0e 94 a6 18 	call	0x314c	; 0x314c <__unordsf2>
    1dde:	88 23       	and	r24, r24
    1de0:	19 f0       	breq	.+6      	; 0x1de8 <_ZN5Print10printFloatEdh+0x3a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1de2:	68 ef       	ldi	r22, 0xF8	; 248
    1de4:	71 e0       	ldi	r23, 0x01	; 1
    1de6:	27 c0       	rjmp	.+78     	; 0x1e36 <_ZN5Print10printFloatEdh+0x88>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1de8:	26 01       	movw	r4, r12
    1dea:	37 01       	movw	r6, r14
    1dec:	e8 94       	clt
    1dee:	77 f8       	bld	r7, 7
    1df0:	2f ef       	ldi	r18, 0xFF	; 255
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	5f e7       	ldi	r21, 0x7F	; 127
    1df8:	c3 01       	movw	r24, r6
    1dfa:	b2 01       	movw	r22, r4
    1dfc:	0e 94 a6 18 	call	0x314c	; 0x314c <__unordsf2>
    1e00:	81 11       	cpse	r24, r1
    1e02:	0d c0       	rjmp	.+26     	; 0x1e1e <_ZN5Print10printFloatEdh+0x70>
    1e04:	2f ef       	ldi	r18, 0xFF	; 255
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	5f e7       	ldi	r21, 0x7F	; 127
    1e0c:	c3 01       	movw	r24, r6
    1e0e:	b2 01       	movw	r22, r4
    1e10:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	1c f4       	brge	.+6      	; 0x1e1e <_ZN5Print10printFloatEdh+0x70>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e18:	6c ef       	ldi	r22, 0xFC	; 252
    1e1a:	71 e0       	ldi	r23, 0x01	; 1
    1e1c:	0c c0       	rjmp	.+24     	; 0x1e36 <_ZN5Print10printFloatEdh+0x88>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1e1e:	2f ef       	ldi	r18, 0xFF	; 255
    1e20:	3f ef       	ldi	r19, 0xFF	; 255
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	5f e4       	ldi	r21, 0x4F	; 79
    1e26:	c7 01       	movw	r24, r14
    1e28:	b6 01       	movw	r22, r12
    1e2a:	0e 94 29 0b 	call	0x1652	; 0x1652 <__gesf2>
    1e2e:	18 16       	cp	r1, r24
    1e30:	9c f4       	brge	.+38     	; 0x1e58 <_ZN5Print10printFloatEdh+0xaa>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	72 e0       	ldi	r23, 0x02	; 2
    1e36:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	ff 90       	pop	r15
    1e3e:	ef 90       	pop	r14
    1e40:	df 90       	pop	r13
    1e42:	cf 90       	pop	r12
    1e44:	bf 90       	pop	r11
    1e46:	af 90       	pop	r10
    1e48:	9f 90       	pop	r9
    1e4a:	8f 90       	pop	r8
    1e4c:	7f 90       	pop	r7
    1e4e:	6f 90       	pop	r6
    1e50:	5f 90       	pop	r5
    1e52:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e54:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1e58:	2f ef       	ldi	r18, 0xFF	; 255
    1e5a:	3f ef       	ldi	r19, 0xFF	; 255
    1e5c:	4f e7       	ldi	r20, 0x7F	; 127
    1e5e:	5f ec       	ldi	r21, 0xCF	; 207
    1e60:	c7 01       	movw	r24, r14
    1e62:	b6 01       	movw	r22, r12
    1e64:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
    1e68:	87 fd       	sbrc	r24, 7
    1e6a:	e3 cf       	rjmp	.-58     	; 0x1e32 <_ZN5Print10printFloatEdh+0x84>
  
  // Handle negative numbers
  if (number < 0.0)
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	a9 01       	movw	r20, r18
    1e72:	c7 01       	movw	r24, r14
    1e74:	b6 01       	movw	r22, r12
    1e76:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
    1e7a:	87 ff       	sbrs	r24, 7
    1e7c:	0a c0       	rjmp	.+20     	; 0x1e92 <_ZN5Print10printFloatEdh+0xe4>
  {
     n += print('-');
    1e7e:	6d e2       	ldi	r22, 0x2D	; 45
    1e80:	ce 01       	movw	r24, r28
    1e82:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN5Print5printEc>
    1e86:	4c 01       	movw	r8, r24
     number = -number;
    1e88:	f7 fa       	bst	r15, 7
    1e8a:	f0 94       	com	r15
    1e8c:	f7 f8       	bld	r15, 7
    1e8e:	f0 94       	com	r15
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <_ZN5Print10printFloatEdh+0xe8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1e92:	81 2c       	mov	r8, r1
    1e94:	91 2c       	mov	r9, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1e96:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1e98:	60 e0       	ldi	r22, 0x00	; 0
    1e9a:	70 e0       	ldi	r23, 0x00	; 0
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1ea0:	ab 14       	cp	r10, r11
    1ea2:	41 f0       	breq	.+16     	; 0x1eb4 <_ZN5Print10printFloatEdh+0x106>
    rounding /= 10.0;
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e2       	ldi	r20, 0x20	; 32
    1eaa:	51 e4       	ldi	r21, 0x41	; 65
    1eac:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1eb0:	a3 94       	inc	r10
    1eb2:	f6 cf       	rjmp	.-20     	; 0x1ea0 <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
  
  number += rounding;
    1eb4:	9b 01       	movw	r18, r22
    1eb6:	ac 01       	movw	r20, r24
    1eb8:	c7 01       	movw	r24, r14
    1eba:	b6 01       	movw	r22, r12
    1ebc:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
    1ec0:	2b 01       	movw	r4, r22
    1ec2:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1ec4:	0e 94 21 0a 	call	0x1442	; 0x1442 <__fixunssfsi>
    1ec8:	6b 01       	movw	r12, r22
    1eca:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    1ecc:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__floatunsisf>
    1ed0:	9b 01       	movw	r18, r22
    1ed2:	ac 01       	movw	r20, r24
    1ed4:	c3 01       	movw	r24, r6
    1ed6:	b2 01       	movw	r22, r4
    1ed8:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    1edc:	2b 01       	movw	r4, r22
    1ede:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1ee0:	2a e0       	ldi	r18, 0x0A	; 10
    1ee2:	b7 01       	movw	r22, r14
    1ee4:	a6 01       	movw	r20, r12
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1eec:	7c 01       	movw	r14, r24
    1eee:	e8 0c       	add	r14, r8
    1ef0:	f9 1c       	adc	r15, r9

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1ef2:	bb 20       	and	r11, r11
    1ef4:	39 f0       	breq	.+14     	; 0x1f04 <_ZN5Print10printFloatEdh+0x156>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1ef6:	64 e0       	ldi	r22, 0x04	; 4
    1ef8:	72 e0       	ldi	r23, 0x02	; 2
    1efa:	ce 01       	movw	r24, r28
    1efc:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1f00:	e8 0e       	add	r14, r24
    1f02:	f9 1e       	adc	r15, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1f04:	db 2c       	mov	r13, r11
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1f06:	dd 20       	and	r13, r13
    1f08:	39 f1       	breq	.+78     	; 0x1f58 <_ZN5Print10printFloatEdh+0x1aa>
  {
    remainder *= 10.0;
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	c3 01       	movw	r24, r6
    1f14:	b2 01       	movw	r22, r4
    1f16:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    1f1a:	2b 01       	movw	r4, r22
    1f1c:	3c 01       	movw	r6, r24
    int toPrint = int(remainder);
    1f1e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1f22:	4b 01       	movw	r8, r22
    1f24:	77 0f       	add	r23, r23
    1f26:	aa 08       	sbc	r10, r10
    1f28:	bb 08       	sbc	r11, r11
    1f2a:	2a e0       	ldi	r18, 0x0A	; 10
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	b5 01       	movw	r22, r10
    1f30:	a4 01       	movw	r20, r8
    1f32:	ce 01       	movw	r24, r28
    1f34:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1f38:	e8 0e       	add	r14, r24
    1f3a:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    1f3c:	c5 01       	movw	r24, r10
    1f3e:	b4 01       	movw	r22, r8
    1f40:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__floatsisf>
    1f44:	9b 01       	movw	r18, r22
    1f46:	ac 01       	movw	r20, r24
    1f48:	c3 01       	movw	r24, r6
    1f4a:	b2 01       	movw	r22, r4
    1f4c:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    1f50:	2b 01       	movw	r4, r22
    1f52:	3c 01       	movw	r6, r24
    1f54:	da 94       	dec	r13
    1f56:	d7 cf       	rjmp	.-82     	; 0x1f06 <_ZN5Print10printFloatEdh+0x158>
  } 
  
  return n;
}
    1f58:	c7 01       	movw	r24, r14
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	ff 90       	pop	r15
    1f60:	ef 90       	pop	r14
    1f62:	df 90       	pop	r13
    1f64:	cf 90       	pop	r12
    1f66:	bf 90       	pop	r11
    1f68:	af 90       	pop	r10
    1f6a:	9f 90       	pop	r9
    1f6c:	8f 90       	pop	r8
    1f6e:	7f 90       	pop	r7
    1f70:	6f 90       	pop	r6
    1f72:	5f 90       	pop	r5
    1f74:	4f 90       	pop	r4
    1f76:	08 95       	ret

00001f78 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1f78:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <_ZN5Print10printFloatEdh>

00001f7c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1f7c:	0f 93       	push	r16
    1f7e:	1f 93       	push	r17
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1f86:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN5Print10printFloatEdh>
    1f8a:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <_ZN5Print7printlnEv>
  return n;
}
    1f92:	80 0f       	add	r24, r16
    1f94:	91 1f       	adc	r25, r17
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	08 95       	ret

00001fa0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1fa0:	1f 92       	push	r1
    1fa2:	0f 92       	push	r0
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	0f 92       	push	r0
    1fa8:	11 24       	eor	r1, r1
    1faa:	2f 93       	push	r18
    1fac:	3f 93       	push	r19
    1fae:	8f 93       	push	r24
    1fb0:	9f 93       	push	r25
    1fb2:	af 93       	push	r26
    1fb4:	bf 93       	push	r27
    1fb6:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <timer0_millis>
    1fba:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <timer0_millis+0x1>
    1fbe:	a0 91 ae 03 	lds	r26, 0x03AE	; 0x8003ae <timer0_millis+0x2>
    1fc2:	b0 91 af 03 	lds	r27, 0x03AF	; 0x8003af <timer0_millis+0x3>
    1fc6:	30 91 ab 03 	lds	r19, 0x03AB	; 0x8003ab <timer0_fract>
    1fca:	23 e0       	ldi	r18, 0x03	; 3
    1fcc:	23 0f       	add	r18, r19
    1fce:	2d 37       	cpi	r18, 0x7D	; 125
    1fd0:	20 f4       	brcc	.+8      	; 0x1fda <__vector_16+0x3a>
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	a1 1d       	adc	r26, r1
    1fd6:	b1 1d       	adc	r27, r1
    1fd8:	05 c0       	rjmp	.+10     	; 0x1fe4 <__vector_16+0x44>
    1fda:	26 e8       	ldi	r18, 0x86	; 134
    1fdc:	23 0f       	add	r18, r19
    1fde:	02 96       	adiw	r24, 0x02	; 2
    1fe0:	a1 1d       	adc	r26, r1
    1fe2:	b1 1d       	adc	r27, r1
    1fe4:	20 93 ab 03 	sts	0x03AB, r18	; 0x8003ab <timer0_fract>
    1fe8:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <timer0_millis>
    1fec:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <timer0_millis+0x1>
    1ff0:	a0 93 ae 03 	sts	0x03AE, r26	; 0x8003ae <timer0_millis+0x2>
    1ff4:	b0 93 af 03 	sts	0x03AF, r27	; 0x8003af <timer0_millis+0x3>
    1ff8:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <timer0_overflow_count>
    1ffc:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <timer0_overflow_count+0x1>
    2000:	a0 91 b2 03 	lds	r26, 0x03B2	; 0x8003b2 <timer0_overflow_count+0x2>
    2004:	b0 91 b3 03 	lds	r27, 0x03B3	; 0x8003b3 <timer0_overflow_count+0x3>
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	a1 1d       	adc	r26, r1
    200c:	b1 1d       	adc	r27, r1
    200e:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <timer0_overflow_count>
    2012:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <timer0_overflow_count+0x1>
    2016:	a0 93 b2 03 	sts	0x03B2, r26	; 0x8003b2 <timer0_overflow_count+0x2>
    201a:	b0 93 b3 03 	sts	0x03B3, r27	; 0x8003b3 <timer0_overflow_count+0x3>
    201e:	bf 91       	pop	r27
    2020:	af 91       	pop	r26
    2022:	9f 91       	pop	r25
    2024:	8f 91       	pop	r24
    2026:	3f 91       	pop	r19
    2028:	2f 91       	pop	r18
    202a:	0f 90       	pop	r0
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	0f 90       	pop	r0
    2030:	1f 90       	pop	r1
    2032:	18 95       	reti

00002034 <micros>:
    2034:	3f b7       	in	r19, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <timer0_overflow_count>
    203c:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <timer0_overflow_count+0x1>
    2040:	a0 91 b2 03 	lds	r26, 0x03B2	; 0x8003b2 <timer0_overflow_count+0x2>
    2044:	b0 91 b3 03 	lds	r27, 0x03B3	; 0x8003b3 <timer0_overflow_count+0x3>
    2048:	26 b5       	in	r18, 0x26	; 38
    204a:	a8 9b       	sbis	0x15, 0	; 21
    204c:	05 c0       	rjmp	.+10     	; 0x2058 <micros+0x24>
    204e:	2f 3f       	cpi	r18, 0xFF	; 255
    2050:	19 f0       	breq	.+6      	; 0x2058 <micros+0x24>
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	a1 1d       	adc	r26, r1
    2056:	b1 1d       	adc	r27, r1
    2058:	3f bf       	out	0x3f, r19	; 63
    205a:	ba 2f       	mov	r27, r26
    205c:	a9 2f       	mov	r26, r25
    205e:	98 2f       	mov	r25, r24
    2060:	88 27       	eor	r24, r24
    2062:	82 0f       	add	r24, r18
    2064:	91 1d       	adc	r25, r1
    2066:	a1 1d       	adc	r26, r1
    2068:	b1 1d       	adc	r27, r1
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	42 e0       	ldi	r20, 0x02	; 2
    2070:	66 0f       	add	r22, r22
    2072:	77 1f       	adc	r23, r23
    2074:	88 1f       	adc	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	4a 95       	dec	r20
    207a:	d1 f7       	brne	.-12     	; 0x2070 <micros+0x3c>
    207c:	08 95       	ret

0000207e <delay>:
    207e:	8f 92       	push	r8
    2080:	9f 92       	push	r9
    2082:	af 92       	push	r10
    2084:	bf 92       	push	r11
    2086:	cf 92       	push	r12
    2088:	df 92       	push	r13
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	6b 01       	movw	r12, r22
    2090:	7c 01       	movw	r14, r24
    2092:	0e 94 1a 10 	call	0x2034	; 0x2034 <micros>
    2096:	4b 01       	movw	r8, r22
    2098:	5c 01       	movw	r10, r24
    209a:	c1 14       	cp	r12, r1
    209c:	d1 04       	cpc	r13, r1
    209e:	e1 04       	cpc	r14, r1
    20a0:	f1 04       	cpc	r15, r1
    20a2:	01 f1       	breq	.+64     	; 0x20e4 <delay+0x66>
    20a4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <yield>
    20a8:	0e 94 1a 10 	call	0x2034	; 0x2034 <micros>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	88 19       	sub	r24, r8
    20b2:	99 09       	sbc	r25, r9
    20b4:	aa 09       	sbc	r26, r10
    20b6:	bb 09       	sbc	r27, r11
    20b8:	88 3e       	cpi	r24, 0xE8	; 232
    20ba:	93 40       	sbci	r25, 0x03	; 3
    20bc:	a1 05       	cpc	r26, r1
    20be:	b1 05       	cpc	r27, r1
    20c0:	60 f3       	brcs	.-40     	; 0x209a <delay+0x1c>
    20c2:	21 e0       	ldi	r18, 0x01	; 1
    20c4:	c2 1a       	sub	r12, r18
    20c6:	d1 08       	sbc	r13, r1
    20c8:	e1 08       	sbc	r14, r1
    20ca:	f1 08       	sbc	r15, r1
    20cc:	88 ee       	ldi	r24, 0xE8	; 232
    20ce:	88 0e       	add	r8, r24
    20d0:	83 e0       	ldi	r24, 0x03	; 3
    20d2:	98 1e       	adc	r9, r24
    20d4:	a1 1c       	adc	r10, r1
    20d6:	b1 1c       	adc	r11, r1
    20d8:	c1 14       	cp	r12, r1
    20da:	d1 04       	cpc	r13, r1
    20dc:	e1 04       	cpc	r14, r1
    20de:	f1 04       	cpc	r15, r1
    20e0:	19 f7       	brne	.-58     	; 0x20a8 <delay+0x2a>
    20e2:	db cf       	rjmp	.-74     	; 0x209a <delay+0x1c>
    20e4:	ff 90       	pop	r15
    20e6:	ef 90       	pop	r14
    20e8:	df 90       	pop	r13
    20ea:	cf 90       	pop	r12
    20ec:	bf 90       	pop	r11
    20ee:	af 90       	pop	r10
    20f0:	9f 90       	pop	r9
    20f2:	8f 90       	pop	r8
    20f4:	08 95       	ret

000020f6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    20f6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    20f8:	84 b5       	in	r24, 0x24	; 36
    20fa:	82 60       	ori	r24, 0x02	; 2
    20fc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    20fe:	84 b5       	in	r24, 0x24	; 36
    2100:	81 60       	ori	r24, 0x01	; 1
    2102:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2104:	85 b5       	in	r24, 0x25	; 37
    2106:	82 60       	ori	r24, 0x02	; 2
    2108:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    210a:	85 b5       	in	r24, 0x25	; 37
    210c:	81 60       	ori	r24, 0x01	; 1
    210e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2110:	ee e6       	ldi	r30, 0x6E	; 110
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	81 60       	ori	r24, 0x01	; 1
    2118:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    211a:	e1 e8       	ldi	r30, 0x81	; 129
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2120:	80 81       	ld	r24, Z
    2122:	82 60       	ori	r24, 0x02	; 2
    2124:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2126:	80 81       	ld	r24, Z
    2128:	81 60       	ori	r24, 0x01	; 1
    212a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    212c:	e0 e8       	ldi	r30, 0x80	; 128
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	81 60       	ori	r24, 0x01	; 1
    2134:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2136:	e1 eb       	ldi	r30, 0xB1	; 177
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	84 60       	ori	r24, 0x04	; 4
    213e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2140:	e0 eb       	ldi	r30, 0xB0	; 176
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	81 60       	ori	r24, 0x01	; 1
    2148:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    214a:	ea e7       	ldi	r30, 0x7A	; 122
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	84 60       	ori	r24, 0x04	; 4
    2152:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2154:	80 81       	ld	r24, Z
    2156:	82 60       	ori	r24, 0x02	; 2
    2158:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    215a:	80 81       	ld	r24, Z
    215c:	81 60       	ori	r24, 0x01	; 1
    215e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2160:	80 81       	ld	r24, Z
    2162:	80 68       	ori	r24, 0x80	; 128
    2164:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2166:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    216a:	08 95       	ret

0000216c <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    216c:	1f 93       	push	r17
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	18 2f       	mov	r17, r24
    2174:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	0e 94 3e 11 	call	0x227c	; 0x227c <pinMode>
	if (val == 0)
    217c:	20 97       	sbiw	r28, 0x00	; 0
    217e:	11 f4       	brne	.+4      	; 0x2184 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	04 c0       	rjmp	.+8      	; 0x218c <analogWrite+0x20>
	}
	else if (val == 255)
    2184:	cf 3f       	cpi	r28, 0xFF	; 255
    2186:	d1 05       	cpc	r29, r1
    2188:	39 f4       	brne	.+14     	; 0x2198 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    2194:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2198:	e1 2f       	mov	r30, r17
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	ef 52       	subi	r30, 0x2F	; 47
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	e4 91       	lpm	r30, Z
    21a2:	e3 30       	cpi	r30, 0x03	; 3
    21a4:	f9 f0       	breq	.+62     	; 0x21e4 <analogWrite+0x78>
    21a6:	48 f4       	brcc	.+18     	; 0x21ba <analogWrite+0x4e>
    21a8:	e1 30       	cpi	r30, 0x01	; 1
    21aa:	b9 f0       	breq	.+46     	; 0x21da <analogWrite+0x6e>
    21ac:	e2 30       	cpi	r30, 0x02	; 2
    21ae:	a1 f5       	brne	.+104    	; 0x2218 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    21b0:	84 b5       	in	r24, 0x24	; 36
    21b2:	80 62       	ori	r24, 0x20	; 32
    21b4:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    21b6:	c8 bd       	out	0x28, r28	; 40
				break;
    21b8:	34 c0       	rjmp	.+104    	; 0x2222 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    21ba:	e7 30       	cpi	r30, 0x07	; 7
    21bc:	e9 f0       	breq	.+58     	; 0x21f8 <analogWrite+0x8c>
    21be:	e8 30       	cpi	r30, 0x08	; 8
    21c0:	19 f1       	breq	.+70     	; 0x2208 <analogWrite+0x9c>
    21c2:	e4 30       	cpi	r30, 0x04	; 4
    21c4:	49 f5       	brne	.+82     	; 0x2218 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    21c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    21ca:	80 62       	ori	r24, 0x20	; 32
    21cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    21d0:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    21d4:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    21d8:	24 c0       	rjmp	.+72     	; 0x2222 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    21da:	84 b5       	in	r24, 0x24	; 36
    21dc:	80 68       	ori	r24, 0x80	; 128
    21de:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    21e0:	c7 bd       	out	0x27, r28	; 39
				break;
    21e2:	1f c0       	rjmp	.+62     	; 0x2222 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    21e4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    21e8:	80 68       	ori	r24, 0x80	; 128
    21ea:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    21ee:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    21f2:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    21f6:	15 c0       	rjmp	.+42     	; 0x2222 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    21f8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    21fc:	80 68       	ori	r24, 0x80	; 128
    21fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    2202:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    2206:	0d c0       	rjmp	.+26     	; 0x2222 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2208:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    220c:	80 62       	ori	r24, 0x20	; 32
    220e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    2212:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    2216:	05 c0       	rjmp	.+10     	; 0x2222 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2218:	c0 38       	cpi	r28, 0x80	; 128
    221a:	d1 05       	cpc	r29, r1
    221c:	0c f0       	brlt	.+2      	; 0x2220 <analogWrite+0xb4>
    221e:	b5 cf       	rjmp	.-150    	; 0x218a <analogWrite+0x1e>
    2220:	af cf       	rjmp	.-162    	; 0x2180 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	08 95       	ret

0000222a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    222a:	83 30       	cpi	r24, 0x03	; 3
    222c:	81 f0       	breq	.+32     	; 0x224e <turnOffPWM+0x24>
    222e:	28 f4       	brcc	.+10     	; 0x223a <turnOffPWM+0x10>
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	99 f0       	breq	.+38     	; 0x225a <turnOffPWM+0x30>
    2234:	82 30       	cpi	r24, 0x02	; 2
    2236:	a1 f0       	breq	.+40     	; 0x2260 <turnOffPWM+0x36>
    2238:	08 95       	ret
    223a:	87 30       	cpi	r24, 0x07	; 7
    223c:	a9 f0       	breq	.+42     	; 0x2268 <turnOffPWM+0x3e>
    223e:	88 30       	cpi	r24, 0x08	; 8
    2240:	b9 f0       	breq	.+46     	; 0x2270 <turnOffPWM+0x46>
    2242:	84 30       	cpi	r24, 0x04	; 4
    2244:	d1 f4       	brne	.+52     	; 0x227a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2246:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    224a:	8f 7d       	andi	r24, 0xDF	; 223
    224c:	03 c0       	rjmp	.+6      	; 0x2254 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    224e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2252:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2254:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2258:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    225a:	84 b5       	in	r24, 0x24	; 36
    225c:	8f 77       	andi	r24, 0x7F	; 127
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2260:	84 b5       	in	r24, 0x24	; 36
    2262:	8f 7d       	andi	r24, 0xDF	; 223
    2264:	84 bd       	out	0x24, r24	; 36
    2266:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2268:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    226c:	8f 77       	andi	r24, 0x7F	; 127
    226e:	03 c0       	rjmp	.+6      	; 0x2276 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2270:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2274:	8f 7d       	andi	r24, 0xDF	; 223
    2276:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    227a:	08 95       	ret

0000227c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	fc 01       	movw	r30, r24
    2284:	eb 51       	subi	r30, 0x1B	; 27
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    228a:	fc 01       	movw	r30, r24
    228c:	e7 50       	subi	r30, 0x07	; 7
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2292:	88 23       	and	r24, r24
    2294:	61 f1       	breq	.+88     	; 0x22ee <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	fc 01       	movw	r30, r24
    229e:	e9 5e       	subi	r30, 0xE9	; 233
    22a0:	fe 4f       	sbci	r31, 0xFE	; 254
    22a2:	c5 91       	lpm	r28, Z+
    22a4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    22a6:	fc 01       	movw	r30, r24
    22a8:	e3 5f       	subi	r30, 0xF3	; 243
    22aa:	fe 4f       	sbci	r31, 0xFE	; 254
    22ac:	a5 91       	lpm	r26, Z+
    22ae:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    22b0:	61 11       	cpse	r22, r1
    22b2:	09 c0       	rjmp	.+18     	; 0x22c6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    22b4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    22b6:	f8 94       	cli
		*reg &= ~bit;
    22b8:	88 81       	ld	r24, Y
    22ba:	20 95       	com	r18
    22bc:	82 23       	and	r24, r18
    22be:	88 83       	st	Y, r24
		*out &= ~bit;
    22c0:	ec 91       	ld	r30, X
    22c2:	2e 23       	and	r18, r30
    22c4:	0b c0       	rjmp	.+22     	; 0x22dc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    22c6:	62 30       	cpi	r22, 0x02	; 2
    22c8:	61 f4       	brne	.+24     	; 0x22e2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    22ca:	9f b7       	in	r25, 0x3f	; 63
                cli();
    22cc:	f8 94       	cli
		*reg &= ~bit;
    22ce:	38 81       	ld	r19, Y
    22d0:	82 2f       	mov	r24, r18
    22d2:	80 95       	com	r24
    22d4:	83 23       	and	r24, r19
    22d6:	88 83       	st	Y, r24
		*out |= bit;
    22d8:	ec 91       	ld	r30, X
    22da:	2e 2b       	or	r18, r30
    22dc:	2c 93       	st	X, r18
		SREG = oldSREG;
    22de:	9f bf       	out	0x3f, r25	; 63
    22e0:	06 c0       	rjmp	.+12     	; 0x22ee <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    22e2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    22e4:	f8 94       	cli
		*reg |= bit;
    22e6:	e8 81       	ld	r30, Y
    22e8:	2e 2b       	or	r18, r30
    22ea:	28 83       	st	Y, r18
		SREG = oldSREG;
    22ec:	8f bf       	out	0x3f, r24	; 63
	}
}
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	08 95       	ret

000022f4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    22f4:	1f 93       	push	r17
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	f9 01       	movw	r30, r18
    2300:	ef 52       	subi	r30, 0x2F	; 47
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2306:	f9 01       	movw	r30, r18
    2308:	eb 51       	subi	r30, 0x1B	; 27
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    230e:	f9 01       	movw	r30, r18
    2310:	e7 50       	subi	r30, 0x07	; 7
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2316:	cc 23       	and	r28, r28
    2318:	c9 f0       	breq	.+50     	; 0x234c <digitalWrite+0x58>
    231a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    231c:	81 11       	cpse	r24, r1
    231e:	0e 94 15 11 	call	0x222a	; 0x222a <turnOffPWM>

	out = portOutputRegister(port);
    2322:	ec 2f       	mov	r30, r28
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	e3 5f       	subi	r30, 0xF3	; 243
    232c:	fe 4f       	sbci	r31, 0xFE	; 254
    232e:	a5 91       	lpm	r26, Z+
    2330:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2332:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2334:	f8 94       	cli

	if (val == LOW) {
    2336:	11 11       	cpse	r17, r1
    2338:	05 c0       	rjmp	.+10     	; 0x2344 <digitalWrite+0x50>
		*out &= ~bit;
    233a:	9c 91       	ld	r25, X
    233c:	ed 2f       	mov	r30, r29
    233e:	e0 95       	com	r30
    2340:	e9 23       	and	r30, r25
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <digitalWrite+0x54>
	} else {
		*out |= bit;
    2344:	ec 91       	ld	r30, X
    2346:	ed 2b       	or	r30, r29
    2348:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    234a:	8f bf       	out	0x3f, r24	; 63
}
    234c:	df 91       	pop	r29
    234e:	cf 91       	pop	r28
    2350:	1f 91       	pop	r17
    2352:	08 95       	ret

00002354 <_ZN6StringD1Ev>:

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
	return *this;
}
    2354:	fc 01       	movw	r30, r24
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	0c 94 90 19 	jmp	0x3320	; 0x3320 <free>

0000235e <_ZN6String10invalidateEv>:
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	ec 01       	movw	r28, r24
    2364:	88 81       	ld	r24, Y
    2366:	99 81       	ldd	r25, Y+1	; 0x01
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	11 f0       	breq	.+4      	; 0x2370 <_ZN6String10invalidateEv+0x12>
    236c:	0e 94 90 19 	call	0x3320	; 0x3320 <free>
    2370:	19 82       	std	Y+1, r1	; 0x01
    2372:	18 82       	st	Y, r1
    2374:	1d 82       	std	Y+5, r1	; 0x05
    2376:	1c 82       	std	Y+4, r1	; 0x04
    2378:	1b 82       	std	Y+3, r1	; 0x03
    237a:	1a 82       	std	Y+2, r1	; 0x02
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	08 95       	ret

00002382 <_ZN6String12changeBufferEj>:
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	ec 01       	movw	r28, r24
    238c:	8b 01       	movw	r16, r22
    238e:	6f 5f       	subi	r22, 0xFF	; 255
    2390:	7f 4f       	sbci	r23, 0xFF	; 255
    2392:	88 81       	ld	r24, Y
    2394:	99 81       	ldd	r25, Y+1	; 0x01
    2396:	0e 94 28 1a 	call	0x3450	; 0x3450 <realloc>
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	31 f0       	breq	.+12     	; 0x23aa <_ZN6String12changeBufferEj+0x28>
    239e:	99 83       	std	Y+1, r25	; 0x01
    23a0:	88 83       	st	Y, r24
    23a2:	1b 83       	std	Y+3, r17	; 0x03
    23a4:	0a 83       	std	Y+2, r16	; 0x02
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <_ZN6String12changeBufferEj+0x2a>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	08 95       	ret

000023b6 <_ZN6String7reserveEj>:
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	ec 01       	movw	r28, r24
    23bc:	88 81       	ld	r24, Y
    23be:	99 81       	ldd	r25, Y+1	; 0x01
    23c0:	89 2b       	or	r24, r25
    23c2:	29 f0       	breq	.+10     	; 0x23ce <_ZN6String7reserveEj+0x18>
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	9b 81       	ldd	r25, Y+3	; 0x03
    23c8:	86 17       	cp	r24, r22
    23ca:	97 07       	cpc	r25, r23
    23cc:	60 f4       	brcc	.+24     	; 0x23e6 <_ZN6String7reserveEj+0x30>
    23ce:	ce 01       	movw	r24, r28
    23d0:	0e 94 c1 11 	call	0x2382	; 0x2382 <_ZN6String12changeBufferEj>
    23d4:	88 23       	and	r24, r24
    23d6:	41 f0       	breq	.+16     	; 0x23e8 <_ZN6String7reserveEj+0x32>
    23d8:	8c 81       	ldd	r24, Y+4	; 0x04
    23da:	9d 81       	ldd	r25, Y+5	; 0x05
    23dc:	89 2b       	or	r24, r25
    23de:	19 f4       	brne	.+6      	; 0x23e6 <_ZN6String7reserveEj+0x30>
    23e0:	e8 81       	ld	r30, Y
    23e2:	f9 81       	ldd	r31, Y+1	; 0x01
    23e4:	10 82       	st	Z, r1
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	08 95       	ret

000023ee <_ZN6String4copyEPKcj>:
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	ec 01       	movw	r28, r24
    23fc:	7b 01       	movw	r14, r22
    23fe:	8a 01       	movw	r16, r20
    2400:	ba 01       	movw	r22, r20
    2402:	0e 94 db 11 	call	0x23b6	; 0x23b6 <_ZN6String7reserveEj>
    2406:	81 11       	cpse	r24, r1
    2408:	04 c0       	rjmp	.+8      	; 0x2412 <_ZN6String4copyEPKcj+0x24>
    240a:	ce 01       	movw	r24, r28
    240c:	0e 94 af 11 	call	0x235e	; 0x235e <_ZN6String10invalidateEv>
    2410:	07 c0       	rjmp	.+14     	; 0x2420 <_ZN6String4copyEPKcj+0x32>
    2412:	1d 83       	std	Y+5, r17	; 0x05
    2414:	0c 83       	std	Y+4, r16	; 0x04
    2416:	b7 01       	movw	r22, r14
    2418:	88 81       	ld	r24, Y
    241a:	99 81       	ldd	r25, Y+1	; 0x01
    241c:	0e 94 0d 1b 	call	0x361a	; 0x361a <strcpy>
    2420:	ce 01       	movw	r24, r28
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	08 95       	ret

00002430 <_ZN6StringC1EPKc>:
    2430:	fc 01       	movw	r30, r24
    2432:	11 82       	std	Z+1, r1	; 0x01
    2434:	10 82       	st	Z, r1
    2436:	13 82       	std	Z+3, r1	; 0x03
    2438:	12 82       	std	Z+2, r1	; 0x02
    243a:	15 82       	std	Z+5, r1	; 0x05
    243c:	14 82       	std	Z+4, r1	; 0x04
    243e:	61 15       	cp	r22, r1
    2440:	71 05       	cpc	r23, r1
    2442:	51 f0       	breq	.+20     	; 0x2458 <_ZN6StringC1EPKc+0x28>
    2444:	fb 01       	movw	r30, r22
    2446:	01 90       	ld	r0, Z+
    2448:	00 20       	and	r0, r0
    244a:	e9 f7       	brne	.-6      	; 0x2446 <_ZN6StringC1EPKc+0x16>
    244c:	31 97       	sbiw	r30, 0x01	; 1
    244e:	af 01       	movw	r20, r30
    2450:	46 1b       	sub	r20, r22
    2452:	57 0b       	sbc	r21, r23
    2454:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <_ZN6String4copyEPKcj>
    2458:	08 95       	ret

0000245a <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	ec 01       	movw	r28, r24
	if (cstr) copy(cstr, strlen(cstr));
    2460:	61 15       	cp	r22, r1
    2462:	71 05       	cpc	r23, r1
    2464:	59 f0       	breq	.+22     	; 0x247c <_ZN6StringaSEPKc+0x22>
    2466:	fb 01       	movw	r30, r22
    2468:	01 90       	ld	r0, Z+
    246a:	00 20       	and	r0, r0
    246c:	e9 f7       	brne	.-6      	; 0x2468 <_ZN6StringaSEPKc+0xe>
    246e:	31 97       	sbiw	r30, 0x01	; 1
    2470:	af 01       	movw	r20, r30
    2472:	46 1b       	sub	r20, r22
    2474:	57 0b       	sbc	r21, r23
    2476:	0e 94 f7 11 	call	0x23ee	; 0x23ee <_ZN6String4copyEPKcj>
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <_ZN6StringaSEPKc+0x26>
	else invalidate();
    247c:	0e 94 af 11 	call	0x235e	; 0x235e <_ZN6String10invalidateEv>
	
	return *this;
}
    2480:	ce 01       	movw	r24, r28
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	08 95       	ret

00002488 <_ZN24Adafruit_HMC5883_UnifiedD1Ev>:
    value = Wire.receive();
  #endif  
  Wire.endTransmission();

  return value;
}
    2488:	08 95       	ret

0000248a <_ZN24Adafruit_HMC5883_Unified9getSensorEP8sensor_t>:
    248a:	0f 93       	push	r16
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	8c 01       	movw	r16, r24
    2494:	eb 01       	movw	r28, r22
    2496:	88 e2       	ldi	r24, 0x28	; 40
    2498:	fb 01       	movw	r30, r22
    249a:	11 92       	st	Z+, r1
    249c:	8a 95       	dec	r24
    249e:	e9 f7       	brne	.-6      	; 0x249a <_ZN24Adafruit_HMC5883_Unified9getSensorEP8sensor_t+0x10>
    24a0:	4b e0       	ldi	r20, 0x0B	; 11
    24a2:	50 e0       	ldi	r21, 0x00	; 0
    24a4:	66 e0       	ldi	r22, 0x06	; 6
    24a6:	72 e0       	ldi	r23, 0x02	; 2
    24a8:	ce 01       	movw	r24, r28
    24aa:	0e 94 14 1b 	call	0x3628	; 0x3628 <strncpy>
    24ae:	1b 86       	std	Y+11, r1	; 0x0b
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	8c 87       	std	Y+12, r24	; 0x0c
    24ba:	9d 87       	std	Y+13, r25	; 0x0d
    24bc:	ae 87       	std	Y+14, r26	; 0x0e
    24be:	bf 87       	std	Y+15, r27	; 0x0f
    24c0:	f8 01       	movw	r30, r16
    24c2:	84 89       	ldd	r24, Z+20	; 0x14
    24c4:	95 89       	ldd	r25, Z+21	; 0x15
    24c6:	a6 89       	ldd	r26, Z+22	; 0x16
    24c8:	b7 89       	ldd	r27, Z+23	; 0x17
    24ca:	88 8b       	std	Y+16, r24	; 0x10
    24cc:	99 8b       	std	Y+17, r25	; 0x11
    24ce:	aa 8b       	std	Y+18, r26	; 0x12
    24d0:	bb 8b       	std	Y+19, r27	; 0x13
    24d2:	82 e0       	ldi	r24, 0x02	; 2
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	a0 e0       	ldi	r26, 0x00	; 0
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	8c 8b       	std	Y+20, r24	; 0x14
    24dc:	9d 8b       	std	Y+21, r25	; 0x15
    24de:	ae 8b       	std	Y+22, r26	; 0x16
    24e0:	bf 8b       	std	Y+23, r27	; 0x17
    24e2:	1c a2       	std	Y+36, r1	; 0x24
    24e4:	1d a2       	std	Y+37, r1	; 0x25
    24e6:	1e a2       	std	Y+38, r1	; 0x26
    24e8:	1f a2       	std	Y+39, r1	; 0x27
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	a8 e4       	ldi	r26, 0x48	; 72
    24f0:	b4 e4       	ldi	r27, 0x44	; 68
    24f2:	88 8f       	std	Y+24, r24	; 0x18
    24f4:	99 8f       	std	Y+25, r25	; 0x19
    24f6:	aa 8f       	std	Y+26, r26	; 0x1a
    24f8:	bb 8f       	std	Y+27, r27	; 0x1b
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	a8 e4       	ldi	r26, 0x48	; 72
    2500:	b4 ec       	ldi	r27, 0xC4	; 196
    2502:	8c 8f       	std	Y+28, r24	; 0x1c
    2504:	9d 8f       	std	Y+29, r25	; 0x1d
    2506:	ae 8f       	std	Y+30, r26	; 0x1e
    2508:	bf 8f       	std	Y+31, r27	; 0x1f
    250a:	8d ec       	ldi	r24, 0xCD	; 205
    250c:	9c ec       	ldi	r25, 0xCC	; 204
    250e:	ac e4       	ldi	r26, 0x4C	; 76
    2510:	be e3       	ldi	r27, 0x3E	; 62
    2512:	88 a3       	std	Y+32, r24	; 0x20
    2514:	99 a3       	std	Y+33, r25	; 0x21
    2516:	aa a3       	std	Y+34, r26	; 0x22
    2518:	bb a3       	std	Y+35, r27	; 0x23
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	1f 91       	pop	r17
    2520:	0f 91       	pop	r16
    2522:	08 95       	ret

00002524 <_ZN24Adafruit_HMC5883_UnifiedD0Ev>:
    2524:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <_ZdlPv>

00002528 <_ZN24Adafruit_HMC5883_UnifiedC1El>:
    2528:	22 e1       	ldi	r18, 0x12	; 18
    252a:	32 e0       	ldi	r19, 0x02	; 2
    252c:	fc 01       	movw	r30, r24
    252e:	31 83       	std	Z+1, r19	; 0x01
    2530:	20 83       	st	Z, r18
    2532:	44 8b       	std	Z+20, r20	; 0x14
    2534:	55 8b       	std	Z+21, r21	; 0x15
    2536:	66 8b       	std	Z+22, r22	; 0x16
    2538:	77 8b       	std	Z+23, r23	; 0x17
    253a:	08 95       	ret

0000253c <_ZN24Adafruit_HMC5883_Unified4readEv>:
/*!
    @brief  Reads the raw data from the sensor
*/
/**************************************************************************/
void Adafruit_HMC5883_Unified::read()
{
    253c:	6f 92       	push	r6
    253e:	7f 92       	push	r7
    2540:	8f 92       	push	r8
    2542:	9f 92       	push	r9
    2544:	af 92       	push	r10
    2546:	bf 92       	push	r11
    2548:	cf 92       	push	r12
    254a:	df 92       	push	r13
    254c:	ef 92       	push	r14
    254e:	ff 92       	push	r15
    2550:	0f 93       	push	r16
    2552:	1f 93       	push	r17
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	8c 01       	movw	r16, r24
  // Read the magnetometer
  Wire.beginTransmission((byte)HMC5883_ADDRESS_MAG);
    255a:	6e e1       	ldi	r22, 0x1E	; 30
    255c:	84 eb       	ldi	r24, 0xB4	; 180
    255e:	93 e0       	ldi	r25, 0x03	; 3
    2560:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_ZN7TwoWire17beginTransmissionEh>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    2564:	63 e0       	ldi	r22, 0x03	; 3
    2566:	84 eb       	ldi	r24, 0xB4	; 180
    2568:	93 e0       	ldi	r25, 0x03	; 3
    256a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <_ZN7TwoWire5writeEh>
  #if ARDUINO >= 100
    Wire.write(HMC5883_REGISTER_MAG_OUT_X_H_M);
  #else
    Wire.send(HMC5883_REGISTER_MAG_OUT_X_H_M);
  #endif
  Wire.endTransmission();
    256e:	84 eb       	ldi	r24, 0xB4	; 180
    2570:	93 e0       	ldi	r25, 0x03	; 3
    2572:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)HMC5883_ADDRESS_MAG, (byte)6);
    2576:	46 e0       	ldi	r20, 0x06	; 6
    2578:	6e e1       	ldi	r22, 0x1E	; 30
    257a:	84 eb       	ldi	r24, 0xB4	; 180
    257c:	93 e0       	ldi	r25, 0x03	; 3
    257e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_ZN7TwoWire11requestFromEhh>
  
  // Wait around until enough data is available
  while (Wire.available() < 6);
    2582:	84 eb       	ldi	r24, 0xB4	; 180
    2584:	93 e0       	ldi	r25, 0x03	; 3
    2586:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_ZN7TwoWire9availableEv>
    258a:	06 97       	sbiw	r24, 0x06	; 6
    258c:	d4 f3       	brlt	.-12     	; 0x2582 <_ZN24Adafruit_HMC5883_Unified4readEv+0x46>

  // Note high before low (different than accel)  
  #if ARDUINO >= 100
    uint8_t xhi = Wire.read();
    258e:	84 eb       	ldi	r24, 0xB4	; 180
    2590:	93 e0       	ldi	r25, 0x03	; 3
    2592:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
    2596:	68 2e       	mov	r6, r24
    uint8_t xlo = Wire.read();
    2598:	84 eb       	ldi	r24, 0xB4	; 180
    259a:	93 e0       	ldi	r25, 0x03	; 3
    259c:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
    25a0:	78 2e       	mov	r7, r24
    uint8_t zhi = Wire.read();
    25a2:	84 eb       	ldi	r24, 0xB4	; 180
    25a4:	93 e0       	ldi	r25, 0x03	; 3
    25a6:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
    25aa:	a8 2e       	mov	r10, r24
    uint8_t zlo = Wire.read();
    25ac:	84 eb       	ldi	r24, 0xB4	; 180
    25ae:	93 e0       	ldi	r25, 0x03	; 3
    25b0:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
    25b4:	b8 2e       	mov	r11, r24
    uint8_t yhi = Wire.read();
    25b6:	84 eb       	ldi	r24, 0xB4	; 180
    25b8:	93 e0       	ldi	r25, 0x03	; 3
    25ba:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
    25be:	88 2e       	mov	r8, r24
    uint8_t ylo = Wire.read();
    25c0:	84 eb       	ldi	r24, 0xB4	; 180
    25c2:	93 e0       	ldi	r25, 0x03	; 3
    25c4:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZN7TwoWire4readEv>
    25c8:	98 2e       	mov	r9, r24
    uint8_t yhi = Wire.receive();
    uint8_t ylo = Wire.receive();
  #endif
  
  // Shift values to create properly formed integer (low byte first)
  _magData.x = (int16_t)(xlo | ((int16_t)xhi << 8));
    25ca:	d6 2c       	mov	r13, r6
    25cc:	c1 2c       	mov	r12, r1
    25ce:	b6 01       	movw	r22, r12
    25d0:	67 29       	or	r22, r7
    25d2:	07 2e       	mov	r0, r23
    25d4:	00 0c       	add	r0, r0
    25d6:	88 0b       	sbc	r24, r24
    25d8:	99 0b       	sbc	r25, r25
    25da:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__floatsisf>
    25de:	f8 01       	movw	r30, r16
    25e0:	64 83       	std	Z+4, r22	; 0x04
    25e2:	75 83       	std	Z+5, r23	; 0x05
    25e4:	86 83       	std	Z+6, r24	; 0x06
    25e6:	97 83       	std	Z+7, r25	; 0x07
  _magData.y = (int16_t)(ylo | ((int16_t)yhi << 8));
    25e8:	f8 2c       	mov	r15, r8
    25ea:	e1 2c       	mov	r14, r1
    25ec:	b7 01       	movw	r22, r14
    25ee:	69 29       	or	r22, r9
    25f0:	07 2e       	mov	r0, r23
    25f2:	00 0c       	add	r0, r0
    25f4:	88 0b       	sbc	r24, r24
    25f6:	99 0b       	sbc	r25, r25
    25f8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__floatsisf>
    25fc:	f8 01       	movw	r30, r16
    25fe:	60 87       	std	Z+8, r22	; 0x08
    2600:	71 87       	std	Z+9, r23	; 0x09
    2602:	82 87       	std	Z+10, r24	; 0x0a
    2604:	93 87       	std	Z+11, r25	; 0x0b
  _magData.z = (int16_t)(zlo | ((int16_t)zhi << 8));
    2606:	da 2d       	mov	r29, r10
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	cf 2f       	mov	r28, r31
    260c:	be 01       	movw	r22, r28
    260e:	6b 29       	or	r22, r11
    2610:	07 2e       	mov	r0, r23
    2612:	00 0c       	add	r0, r0
    2614:	88 0b       	sbc	r24, r24
    2616:	99 0b       	sbc	r25, r25
    2618:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__floatsisf>
    261c:	f8 01       	movw	r30, r16
    261e:	64 87       	std	Z+12, r22	; 0x0c
    2620:	75 87       	std	Z+13, r23	; 0x0d
    2622:	86 87       	std	Z+14, r24	; 0x0e
    2624:	97 87       	std	Z+15, r25	; 0x0f
  
  // ToDo: Calculate orientation
  _magData.orientation = 0.0;
    2626:	10 8a       	std	Z+16, r1	; 0x10
    2628:	11 8a       	std	Z+17, r1	; 0x11
    262a:	12 8a       	std	Z+18, r1	; 0x12
    262c:	13 8a       	std	Z+19, r1	; 0x13
}
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	ff 90       	pop	r15
    2638:	ef 90       	pop	r14
    263a:	df 90       	pop	r13
    263c:	cf 90       	pop	r12
    263e:	bf 90       	pop	r11
    2640:	af 90       	pop	r10
    2642:	9f 90       	pop	r9
    2644:	8f 90       	pop	r8
    2646:	7f 90       	pop	r7
    2648:	6f 90       	pop	r6
    264a:	08 95       	ret

0000264c <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t>:
/**************************************************************************/
/*! 
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_HMC5883_Unified::getEvent(sensors_event_t *event) {
    264c:	cf 92       	push	r12
    264e:	df 92       	push	r13
    2650:	ef 92       	push	r14
    2652:	ff 92       	push	r15
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	8c 01       	movw	r16, r24
    265e:	eb 01       	movw	r28, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
    2660:	84 e2       	ldi	r24, 0x24	; 36
    2662:	fb 01       	movw	r30, r22
    2664:	11 92       	st	Z+, r1
    2666:	8a 95       	dec	r24
    2668:	e9 f7       	brne	.-6      	; 0x2664 <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t+0x18>

  /* Read new data */
  read();
    266a:	c8 01       	movw	r24, r16
    266c:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN24Adafruit_HMC5883_Unified4readEv>
  
  event->version   = sizeof(sensors_event_t);
    2670:	84 e2       	ldi	r24, 0x24	; 36
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	a0 e0       	ldi	r26, 0x00	; 0
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	88 83       	st	Y, r24
    267a:	99 83       	std	Y+1, r25	; 0x01
    267c:	aa 83       	std	Y+2, r26	; 0x02
    267e:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _sensorID;
    2680:	f8 01       	movw	r30, r16
    2682:	84 89       	ldd	r24, Z+20	; 0x14
    2684:	95 89       	ldd	r25, Z+21	; 0x15
    2686:	a6 89       	ldd	r26, Z+22	; 0x16
    2688:	b7 89       	ldd	r27, Z+23	; 0x17
    268a:	8c 83       	std	Y+4, r24	; 0x04
    268c:	9d 83       	std	Y+5, r25	; 0x05
    268e:	ae 83       	std	Y+6, r26	; 0x06
    2690:	bf 83       	std	Y+7, r27	; 0x07
  event->type      = SENSOR_TYPE_MAGNETIC_FIELD;
    2692:	82 e0       	ldi	r24, 0x02	; 2
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	a0 e0       	ldi	r26, 0x00	; 0
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	88 87       	std	Y+8, r24	; 0x08
    269c:	99 87       	std	Y+9, r25	; 0x09
    269e:	aa 87       	std	Y+10, r26	; 0x0a
    26a0:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = 0;
    26a2:	18 8a       	std	Y+16, r1	; 0x10
    26a4:	19 8a       	std	Y+17, r1	; 0x11
    26a6:	1a 8a       	std	Y+18, r1	; 0x12
    26a8:	1b 8a       	std	Y+19, r1	; 0x13
  event->magnetic.x = _magData.x / _hmc5883_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA;
    26aa:	c0 90 42 01 	lds	r12, 0x0142	; 0x800142 <_ZL21_hmc5883_Gauss_LSB_XY>
    26ae:	d0 90 43 01 	lds	r13, 0x0143	; 0x800143 <_ZL21_hmc5883_Gauss_LSB_XY+0x1>
    26b2:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <_ZL21_hmc5883_Gauss_LSB_XY+0x2>
    26b6:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <_ZL21_hmc5883_Gauss_LSB_XY+0x3>
    26ba:	a7 01       	movw	r20, r14
    26bc:	96 01       	movw	r18, r12
    26be:	64 81       	ldd	r22, Z+4	; 0x04
    26c0:	75 81       	ldd	r23, Z+5	; 0x05
    26c2:	86 81       	ldd	r24, Z+6	; 0x06
    26c4:	97 81       	ldd	r25, Z+7	; 0x07
    26c6:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	48 ec       	ldi	r20, 0xC8	; 200
    26d0:	52 e4       	ldi	r21, 0x42	; 66
    26d2:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    26d6:	6c 8b       	std	Y+20, r22	; 0x14
    26d8:	7d 8b       	std	Y+21, r23	; 0x15
    26da:	8e 8b       	std	Y+22, r24	; 0x16
    26dc:	9f 8b       	std	Y+23, r25	; 0x17
  event->magnetic.y = _magData.y / _hmc5883_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA;
    26de:	a7 01       	movw	r20, r14
    26e0:	96 01       	movw	r18, r12
    26e2:	f8 01       	movw	r30, r16
    26e4:	60 85       	ldd	r22, Z+8	; 0x08
    26e6:	71 85       	ldd	r23, Z+9	; 0x09
    26e8:	82 85       	ldd	r24, Z+10	; 0x0a
    26ea:	93 85       	ldd	r25, Z+11	; 0x0b
    26ec:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	48 ec       	ldi	r20, 0xC8	; 200
    26f6:	52 e4       	ldi	r21, 0x42	; 66
    26f8:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    26fc:	68 8f       	std	Y+24, r22	; 0x18
    26fe:	79 8f       	std	Y+25, r23	; 0x19
    2700:	8a 8f       	std	Y+26, r24	; 0x1a
    2702:	9b 8f       	std	Y+27, r25	; 0x1b
  event->magnetic.z = _magData.z / _hmc5883_Gauss_LSB_Z * SENSORS_GAUSS_TO_MICROTESLA;
    2704:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <_ZL20_hmc5883_Gauss_LSB_Z>
    2708:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <_ZL20_hmc5883_Gauss_LSB_Z+0x1>
    270c:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <_ZL20_hmc5883_Gauss_LSB_Z+0x2>
    2710:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <_ZL20_hmc5883_Gauss_LSB_Z+0x3>
    2714:	f8 01       	movw	r30, r16
    2716:	64 85       	ldd	r22, Z+12	; 0x0c
    2718:	75 85       	ldd	r23, Z+13	; 0x0d
    271a:	86 85       	ldd	r24, Z+14	; 0x0e
    271c:	97 85       	ldd	r25, Z+15	; 0x0f
    271e:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	48 ec       	ldi	r20, 0xC8	; 200
    2728:	52 e4       	ldi	r21, 0x42	; 66
    272a:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    272e:	6c 8f       	std	Y+28, r22	; 0x1c
    2730:	7d 8f       	std	Y+29, r23	; 0x1d
    2732:	8e 8f       	std	Y+30, r24	; 0x1e
    2734:	9f 8f       	std	Y+31, r25	; 0x1f
  
  return true;
}
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	df 91       	pop	r29
    273a:	cf 91       	pop	r28
    273c:	1f 91       	pop	r17
    273e:	0f 91       	pop	r16
    2740:	ff 90       	pop	r15
    2742:	ef 90       	pop	r14
    2744:	df 90       	pop	r13
    2746:	cf 90       	pop	r12
    2748:	08 95       	ret

0000274a <_ZN6KalmanC1Ev>:
 e-mail   :  kristianl@tkjelectronics.com
 */

#include "Kalman.h"

Kalman::Kalman() {
    274a:	fc 01       	movw	r30, r24
    /* We will set the variables like so, these can also be tuned by the user */
    Q_angle = 0.001f;
    274c:	8f e6       	ldi	r24, 0x6F	; 111
    274e:	92 e1       	ldi	r25, 0x12	; 18
    2750:	a3 e8       	ldi	r26, 0x83	; 131
    2752:	ba e3       	ldi	r27, 0x3A	; 58
    2754:	80 83       	st	Z, r24
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	a2 83       	std	Z+2, r26	; 0x02
    275a:	b3 83       	std	Z+3, r27	; 0x03
    Q_bias = 0.003f;
    275c:	86 ea       	ldi	r24, 0xA6	; 166
    275e:	9b e9       	ldi	r25, 0x9B	; 155
    2760:	a4 e4       	ldi	r26, 0x44	; 68
    2762:	bb e3       	ldi	r27, 0x3B	; 59
    2764:	84 83       	std	Z+4, r24	; 0x04
    2766:	95 83       	std	Z+5, r25	; 0x05
    2768:	a6 83       	std	Z+6, r26	; 0x06
    276a:	b7 83       	std	Z+7, r27	; 0x07
    R_measure = 0.03f;
    276c:	8f e8       	ldi	r24, 0x8F	; 143
    276e:	92 ec       	ldi	r25, 0xC2	; 194
    2770:	a5 ef       	ldi	r26, 0xF5	; 245
    2772:	bc e3       	ldi	r27, 0x3C	; 60
    2774:	80 87       	std	Z+8, r24	; 0x08
    2776:	91 87       	std	Z+9, r25	; 0x09
    2778:	a2 87       	std	Z+10, r26	; 0x0a
    277a:	b3 87       	std	Z+11, r27	; 0x0b

    angle = 0.0f; // Reset the angle
    277c:	14 86       	std	Z+12, r1	; 0x0c
    277e:	15 86       	std	Z+13, r1	; 0x0d
    2780:	16 86       	std	Z+14, r1	; 0x0e
    2782:	17 86       	std	Z+15, r1	; 0x0f
    bias = 0.0f; // Reset bias
    2784:	10 8a       	std	Z+16, r1	; 0x10
    2786:	11 8a       	std	Z+17, r1	; 0x11
    2788:	12 8a       	std	Z+18, r1	; 0x12
    278a:	13 8a       	std	Z+19, r1	; 0x13

    P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
    278c:	10 8e       	std	Z+24, r1	; 0x18
    278e:	11 8e       	std	Z+25, r1	; 0x19
    2790:	12 8e       	std	Z+26, r1	; 0x1a
    2792:	13 8e       	std	Z+27, r1	; 0x1b
    P[0][1] = 0.0f;
    2794:	14 8e       	std	Z+28, r1	; 0x1c
    2796:	15 8e       	std	Z+29, r1	; 0x1d
    2798:	16 8e       	std	Z+30, r1	; 0x1e
    279a:	17 8e       	std	Z+31, r1	; 0x1f
    P[1][0] = 0.0f;
    279c:	10 a2       	std	Z+32, r1	; 0x20
    279e:	11 a2       	std	Z+33, r1	; 0x21
    27a0:	12 a2       	std	Z+34, r1	; 0x22
    27a2:	13 a2       	std	Z+35, r1	; 0x23
    P[1][1] = 0.0f;
    27a4:	14 a2       	std	Z+36, r1	; 0x24
    27a6:	15 a2       	std	Z+37, r1	; 0x25
    27a8:	16 a2       	std	Z+38, r1	; 0x26
    27aa:	17 a2       	std	Z+39, r1	; 0x27
    27ac:	08 95       	ret

000027ae <_ZN6Kalman8getAngleEfff>:
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float Kalman::getAngle(float newAngle, float newRate, float dt) {
    27ae:	2f 92       	push	r2
    27b0:	3f 92       	push	r3
    27b2:	4f 92       	push	r4
    27b4:	5f 92       	push	r5
    27b6:	6f 92       	push	r6
    27b8:	7f 92       	push	r7
    27ba:	8f 92       	push	r8
    27bc:	9f 92       	push	r9
    27be:	af 92       	push	r10
    27c0:	bf 92       	push	r11
    27c2:	cf 92       	push	r12
    27c4:	df 92       	push	r13
    27c6:	ef 92       	push	r14
    27c8:	ff 92       	push	r15
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	6c 97       	sbiw	r28, 0x1c	; 28
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	1c 01       	movw	r2, r24
    27e4:	4d 8b       	std	Y+21, r20	; 0x15
    27e6:	5e 8b       	std	Y+22, r21	; 0x16
    27e8:	6f 8b       	std	Y+23, r22	; 0x17
    27ea:	78 8f       	std	Y+24, r23	; 0x18
    27ec:	c9 01       	movw	r24, r18
    27ee:	b8 01       	movw	r22, r16
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
    27f0:	d1 01       	movw	r26, r2
    27f2:	50 96       	adiw	r26, 0x10	; 16
    27f4:	2d 91       	ld	r18, X+
    27f6:	3d 91       	ld	r19, X+
    27f8:	4d 91       	ld	r20, X+
    27fa:	5c 91       	ld	r21, X
    27fc:	53 97       	sbiw	r26, 0x13	; 19
    27fe:	29 8b       	std	Y+17, r18	; 0x11
    2800:	3a 8b       	std	Y+18, r19	; 0x12
    2802:	4b 8b       	std	Y+19, r20	; 0x13
    2804:	5c 8b       	std	Y+20, r21	; 0x14
    2806:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    280a:	9b 01       	movw	r18, r22
    280c:	ac 01       	movw	r20, r24
    280e:	f1 01       	movw	r30, r2
    2810:	64 8b       	std	Z+20, r22	; 0x14
    2812:	75 8b       	std	Z+21, r23	; 0x15
    2814:	86 8b       	std	Z+22, r24	; 0x16
    2816:	97 8b       	std	Z+23, r25	; 0x17
    angle += dt * rate;
    2818:	c7 01       	movw	r24, r14
    281a:	b6 01       	movw	r22, r12
    281c:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    2820:	d1 01       	movw	r26, r2
    2822:	1c 96       	adiw	r26, 0x0c	; 12
    2824:	2d 91       	ld	r18, X+
    2826:	3d 91       	ld	r19, X+
    2828:	4d 91       	ld	r20, X+
    282a:	5c 91       	ld	r21, X
    282c:	1f 97       	sbiw	r26, 0x0f	; 15
    282e:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
    2832:	6d 87       	std	Y+13, r22	; 0x0d
    2834:	7e 87       	std	Y+14, r23	; 0x0e
    2836:	8f 87       	std	Y+15, r24	; 0x0f
    2838:	98 8b       	std	Y+16, r25	; 0x10

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
    283a:	d1 01       	movw	r26, r2
    283c:	94 96       	adiw	r26, 0x24	; 36
    283e:	2d 91       	ld	r18, X+
    2840:	3d 91       	ld	r19, X+
    2842:	4d 91       	ld	r20, X+
    2844:	5c 91       	ld	r21, X
    2846:	97 97       	sbiw	r26, 0x27	; 39
    2848:	2d 83       	std	Y+5, r18	; 0x05
    284a:	3e 83       	std	Y+6, r19	; 0x06
    284c:	4f 83       	std	Y+7, r20	; 0x07
    284e:	58 87       	std	Y+8, r21	; 0x08
    2850:	c7 01       	movw	r24, r14
    2852:	b6 01       	movw	r22, r12
    2854:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    2858:	4b 01       	movw	r8, r22
    285a:	5c 01       	movw	r10, r24
    285c:	f1 01       	movw	r30, r2
    285e:	44 8c       	ldd	r4, Z+28	; 0x1c
    2860:	55 8c       	ldd	r5, Z+29	; 0x1d
    2862:	66 8c       	ldd	r6, Z+30	; 0x1e
    2864:	77 8c       	ldd	r7, Z+31	; 0x1f
    2866:	20 a1       	ldd	r18, Z+32	; 0x20
    2868:	31 a1       	ldd	r19, Z+33	; 0x21
    286a:	42 a1       	ldd	r20, Z+34	; 0x22
    286c:	53 a1       	ldd	r21, Z+35	; 0x23
    286e:	29 87       	std	Y+9, r18	; 0x09
    2870:	3a 87       	std	Y+10, r19	; 0x0a
    2872:	4b 87       	std	Y+11, r20	; 0x0b
    2874:	5c 87       	std	Y+12, r21	; 0x0c
    2876:	a3 01       	movw	r20, r6
    2878:	92 01       	movw	r18, r4
    287a:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    287e:	29 85       	ldd	r18, Y+9	; 0x09
    2880:	3a 85       	ldd	r19, Y+10	; 0x0a
    2882:	4b 85       	ldd	r20, Y+11	; 0x0b
    2884:	5c 85       	ldd	r21, Y+12	; 0x0c
    2886:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    288a:	f1 01       	movw	r30, r2
    288c:	20 81       	ld	r18, Z
    288e:	31 81       	ldd	r19, Z+1	; 0x01
    2890:	42 81       	ldd	r20, Z+2	; 0x02
    2892:	53 81       	ldd	r21, Z+3	; 0x03
    2894:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
    2898:	9b 01       	movw	r18, r22
    289a:	ac 01       	movw	r20, r24
    289c:	c7 01       	movw	r24, r14
    289e:	b6 01       	movw	r22, r12
    28a0:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    28a4:	d1 01       	movw	r26, r2
    28a6:	58 96       	adiw	r26, 0x18	; 24
    28a8:	2d 91       	ld	r18, X+
    28aa:	3d 91       	ld	r19, X+
    28ac:	4d 91       	ld	r20, X+
    28ae:	5c 91       	ld	r21, X
    28b0:	5b 97       	sbiw	r26, 0x1b	; 27
    28b2:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
    28b6:	69 83       	std	Y+1, r22	; 0x01
    28b8:	7a 83       	std	Y+2, r23	; 0x02
    28ba:	8b 83       	std	Y+3, r24	; 0x03
    28bc:	9c 83       	std	Y+4, r25	; 0x04
    P[0][1] -= dt * P[1][1];
    28be:	a5 01       	movw	r20, r10
    28c0:	94 01       	movw	r18, r8
    28c2:	c3 01       	movw	r24, r6
    28c4:	b2 01       	movw	r22, r4
    28c6:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    28ca:	2b 01       	movw	r4, r22
    28cc:	3c 01       	movw	r6, r24
    P[1][0] -= dt * P[1][1];
    28ce:	a5 01       	movw	r20, r10
    28d0:	94 01       	movw	r18, r8
    28d2:	69 85       	ldd	r22, Y+9	; 0x09
    28d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    28d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    28d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    28da:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    28de:	69 87       	std	Y+9, r22	; 0x09
    28e0:	7a 87       	std	Y+10, r23	; 0x0a
    28e2:	8b 87       	std	Y+11, r24	; 0x0b
    28e4:	9c 87       	std	Y+12, r25	; 0x0c
    P[1][1] += Q_bias * dt;
    28e6:	f1 01       	movw	r30, r2
    28e8:	24 81       	ldd	r18, Z+4	; 0x04
    28ea:	35 81       	ldd	r19, Z+5	; 0x05
    28ec:	46 81       	ldd	r20, Z+6	; 0x06
    28ee:	57 81       	ldd	r21, Z+7	; 0x07
    28f0:	c7 01       	movw	r24, r14
    28f2:	b6 01       	movw	r22, r12
    28f4:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    28f8:	9b 01       	movw	r18, r22
    28fa:	ac 01       	movw	r20, r24
    28fc:	6d 81       	ldd	r22, Y+5	; 0x05
    28fe:	7e 81       	ldd	r23, Y+6	; 0x06
    2900:	8f 81       	ldd	r24, Y+7	; 0x07
    2902:	98 85       	ldd	r25, Y+8	; 0x08
    2904:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
    2908:	69 8f       	std	Y+25, r22	; 0x19
    290a:	7a 8f       	std	Y+26, r23	; 0x1a
    290c:	8b 8f       	std	Y+27, r24	; 0x1b
    290e:	9c 8f       	std	Y+28, r25	; 0x1c

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = P[0][0] + R_measure; // Estimate error
    2910:	d1 01       	movw	r26, r2
    2912:	18 96       	adiw	r26, 0x08	; 8
    2914:	2d 91       	ld	r18, X+
    2916:	3d 91       	ld	r19, X+
    2918:	4d 91       	ld	r20, X+
    291a:	5c 91       	ld	r21, X
    291c:	1b 97       	sbiw	r26, 0x0b	; 11
    291e:	69 81       	ldd	r22, Y+1	; 0x01
    2920:	7a 81       	ldd	r23, Y+2	; 0x02
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	9c 81       	ldd	r25, Y+4	; 0x04
    2926:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
    292a:	6b 01       	movw	r12, r22
    292c:	7c 01       	movw	r14, r24
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
    292e:	9b 01       	movw	r18, r22
    2930:	ac 01       	movw	r20, r24
    2932:	69 81       	ldd	r22, Y+1	; 0x01
    2934:	7a 81       	ldd	r23, Y+2	; 0x02
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	9c 81       	ldd	r25, Y+4	; 0x04
    293a:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
    293e:	4b 01       	movw	r8, r22
    2940:	5c 01       	movw	r10, r24
    K[1] = P[1][0] / S;
    2942:	a7 01       	movw	r20, r14
    2944:	96 01       	movw	r18, r12
    2946:	69 85       	ldd	r22, Y+9	; 0x09
    2948:	7a 85       	ldd	r23, Y+10	; 0x0a
    294a:	8b 85       	ldd	r24, Y+11	; 0x0b
    294c:	9c 85       	ldd	r25, Y+12	; 0x0c
    294e:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divsf3>
    2952:	6b 01       	movw	r12, r22
    2954:	7c 01       	movw	r14, r24

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
    2956:	2d 85       	ldd	r18, Y+13	; 0x0d
    2958:	3e 85       	ldd	r19, Y+14	; 0x0e
    295a:	4f 85       	ldd	r20, Y+15	; 0x0f
    295c:	58 89       	ldd	r21, Y+16	; 0x10
    295e:	6d 89       	ldd	r22, Y+21	; 0x15
    2960:	7e 89       	ldd	r23, Y+22	; 0x16
    2962:	8f 89       	ldd	r24, Y+23	; 0x17
    2964:	98 8d       	ldd	r25, Y+24	; 0x18
    2966:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    296a:	6d 83       	std	Y+5, r22	; 0x05
    296c:	7e 83       	std	Y+6, r23	; 0x06
    296e:	8f 83       	std	Y+7, r24	; 0x07
    2970:	98 87       	std	Y+8, r25	; 0x08
    /* Step 6 */
    angle += K[0] * y;
    2972:	9b 01       	movw	r18, r22
    2974:	ac 01       	movw	r20, r24
    2976:	c5 01       	movw	r24, r10
    2978:	b4 01       	movw	r22, r8
    297a:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    297e:	9b 01       	movw	r18, r22
    2980:	ac 01       	movw	r20, r24
    2982:	6d 85       	ldd	r22, Y+13	; 0x0d
    2984:	7e 85       	ldd	r23, Y+14	; 0x0e
    2986:	8f 85       	ldd	r24, Y+15	; 0x0f
    2988:	98 89       	ldd	r25, Y+16	; 0x10
    298a:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
    298e:	6d 87       	std	Y+13, r22	; 0x0d
    2990:	7e 87       	std	Y+14, r23	; 0x0e
    2992:	8f 87       	std	Y+15, r24	; 0x0f
    2994:	98 8b       	std	Y+16, r25	; 0x10
    2996:	f1 01       	movw	r30, r2
    2998:	64 87       	std	Z+12, r22	; 0x0c
    299a:	75 87       	std	Z+13, r23	; 0x0d
    299c:	86 87       	std	Z+14, r24	; 0x0e
    299e:	97 87       	std	Z+15, r25	; 0x0f
    bias += K[1] * y;
    29a0:	2d 81       	ldd	r18, Y+5	; 0x05
    29a2:	3e 81       	ldd	r19, Y+6	; 0x06
    29a4:	4f 81       	ldd	r20, Y+7	; 0x07
    29a6:	58 85       	ldd	r21, Y+8	; 0x08
    29a8:	c7 01       	movw	r24, r14
    29aa:	b6 01       	movw	r22, r12
    29ac:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    29b0:	9b 01       	movw	r18, r22
    29b2:	ac 01       	movw	r20, r24
    29b4:	69 89       	ldd	r22, Y+17	; 0x11
    29b6:	7a 89       	ldd	r23, Y+18	; 0x12
    29b8:	8b 89       	ldd	r24, Y+19	; 0x13
    29ba:	9c 89       	ldd	r25, Y+20	; 0x14
    29bc:	0e 94 c5 08 	call	0x118a	; 0x118a <__addsf3>
    29c0:	d1 01       	movw	r26, r2
    29c2:	50 96       	adiw	r26, 0x10	; 16
    29c4:	6d 93       	st	X+, r22
    29c6:	7d 93       	st	X+, r23
    29c8:	8d 93       	st	X+, r24
    29ca:	9c 93       	st	X, r25
    29cc:	53 97       	sbiw	r26, 0x13	; 19
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
    29ce:	29 81       	ldd	r18, Y+1	; 0x01
    29d0:	3a 81       	ldd	r19, Y+2	; 0x02
    29d2:	4b 81       	ldd	r20, Y+3	; 0x03
    29d4:	5c 81       	ldd	r21, Y+4	; 0x04
    29d6:	c5 01       	movw	r24, r10
    29d8:	b4 01       	movw	r22, r8
    29da:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    29de:	9b 01       	movw	r18, r22
    29e0:	ac 01       	movw	r20, r24
    29e2:	69 81       	ldd	r22, Y+1	; 0x01
    29e4:	7a 81       	ldd	r23, Y+2	; 0x02
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ea:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    29ee:	f1 01       	movw	r30, r2
    29f0:	60 8f       	std	Z+24, r22	; 0x18
    29f2:	71 8f       	std	Z+25, r23	; 0x19
    29f4:	82 8f       	std	Z+26, r24	; 0x1a
    29f6:	93 8f       	std	Z+27, r25	; 0x1b
    P[0][1] -= K[0] * P01_temp;
    29f8:	a3 01       	movw	r20, r6
    29fa:	92 01       	movw	r18, r4
    29fc:	c5 01       	movw	r24, r10
    29fe:	b4 01       	movw	r22, r8
    2a00:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    2a04:	9b 01       	movw	r18, r22
    2a06:	ac 01       	movw	r20, r24
    2a08:	c3 01       	movw	r24, r6
    2a0a:	b2 01       	movw	r22, r4
    2a0c:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    2a10:	d1 01       	movw	r26, r2
    2a12:	5c 96       	adiw	r26, 0x1c	; 28
    2a14:	6d 93       	st	X+, r22
    2a16:	7d 93       	st	X+, r23
    2a18:	8d 93       	st	X+, r24
    2a1a:	9c 93       	st	X, r25
    2a1c:	5f 97       	sbiw	r26, 0x1f	; 31
    P[1][0] -= K[1] * P00_temp;
    2a1e:	29 81       	ldd	r18, Y+1	; 0x01
    2a20:	3a 81       	ldd	r19, Y+2	; 0x02
    2a22:	4b 81       	ldd	r20, Y+3	; 0x03
    2a24:	5c 81       	ldd	r21, Y+4	; 0x04
    2a26:	c7 01       	movw	r24, r14
    2a28:	b6 01       	movw	r22, r12
    2a2a:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    2a2e:	9b 01       	movw	r18, r22
    2a30:	ac 01       	movw	r20, r24
    2a32:	69 85       	ldd	r22, Y+9	; 0x09
    2a34:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a36:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a38:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a3a:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    2a3e:	f1 01       	movw	r30, r2
    2a40:	60 a3       	std	Z+32, r22	; 0x20
    2a42:	71 a3       	std	Z+33, r23	; 0x21
    2a44:	82 a3       	std	Z+34, r24	; 0x22
    2a46:	93 a3       	std	Z+35, r25	; 0x23
    P[1][1] -= K[1] * P01_temp;
    2a48:	a3 01       	movw	r20, r6
    2a4a:	92 01       	movw	r18, r4
    2a4c:	c7 01       	movw	r24, r14
    2a4e:	b6 01       	movw	r22, r12
    2a50:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    2a54:	9b 01       	movw	r18, r22
    2a56:	ac 01       	movw	r20, r24
    2a58:	69 8d       	ldd	r22, Y+25	; 0x19
    2a5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a60:	0e 94 c4 08 	call	0x1188	; 0x1188 <__subsf3>
    2a64:	d1 01       	movw	r26, r2
    2a66:	94 96       	adiw	r26, 0x24	; 36
    2a68:	6d 93       	st	X+, r22
    2a6a:	7d 93       	st	X+, r23
    2a6c:	8d 93       	st	X+, r24
    2a6e:	9c 93       	st	X, r25
    2a70:	97 97       	sbiw	r26, 0x27	; 39

    return angle;
};
    2a72:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a74:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a78:	98 89       	ldd	r25, Y+16	; 0x10
    2a7a:	6c 96       	adiw	r28, 0x1c	; 28
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	1f 91       	pop	r17
    2a8c:	0f 91       	pop	r16
    2a8e:	ff 90       	pop	r15
    2a90:	ef 90       	pop	r14
    2a92:	df 90       	pop	r13
    2a94:	cf 90       	pop	r12
    2a96:	bf 90       	pop	r11
    2a98:	af 90       	pop	r10
    2a9a:	9f 90       	pop	r9
    2a9c:	8f 90       	pop	r8
    2a9e:	7f 90       	pop	r7
    2aa0:	6f 90       	pop	r6
    2aa2:	5f 90       	pop	r5
    2aa4:	4f 90       	pop	r4
    2aa6:	3f 90       	pop	r3
    2aa8:	2f 90       	pop	r2
    2aaa:	08 95       	ret

00002aac <_ZN6Kalman8setAngleEf>:

void Kalman::setAngle(float angle) { this->angle = angle; }; // Used to set angle, this should be set as the starting angle
    2aac:	fc 01       	movw	r30, r24
    2aae:	44 87       	std	Z+12, r20	; 0x0c
    2ab0:	55 87       	std	Z+13, r21	; 0x0d
    2ab2:	66 87       	std	Z+14, r22	; 0x0e
    2ab4:	77 87       	std	Z+15, r23	; 0x0f
    2ab6:	08 95       	ret

00002ab8 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2ab8:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	20 91 e5 03 	lds	r18, 0x03E5	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    2ac2:	82 1b       	sub	r24, r18
    2ac4:	91 09       	sbc	r25, r1
    2ac6:	08 95       	ret

00002ac8 <_ZN7TwoWire4readEv>:
    2ac8:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    2acc:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    2ad0:	98 17       	cp	r25, r24
    2ad2:	50 f4       	brcc	.+20     	; 0x2ae8 <_ZN7TwoWire4readEv+0x20>
    2ad4:	e9 2f       	mov	r30, r25
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	ea 51       	subi	r30, 0x1A	; 26
    2ada:	fc 4f       	sbci	r31, 0xFC	; 252
    2adc:	20 81       	ld	r18, Z
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	9f 5f       	subi	r25, 0xFF	; 255
    2ae2:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    2ae6:	02 c0       	rjmp	.+4      	; 0x2aec <_ZN7TwoWire4readEv+0x24>
    2ae8:	2f ef       	ldi	r18, 0xFF	; 255
    2aea:	3f ef       	ldi	r19, 0xFF	; 255
    2aec:	c9 01       	movw	r24, r18
    2aee:	08 95       	ret

00002af0 <_ZN7TwoWire4peekEv>:
    2af0:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    2af4:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    2af8:	e8 17       	cp	r30, r24
    2afa:	30 f4       	brcc	.+12     	; 0x2b08 <_ZN7TwoWire4peekEv+0x18>
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	ea 51       	subi	r30, 0x1A	; 26
    2b00:	fc 4f       	sbci	r31, 0xFC	; 252
    2b02:	80 81       	ld	r24, Z
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	08 95       	ret
    2b08:	8f ef       	ldi	r24, 0xFF	; 255
    2b0a:	9f ef       	ldi	r25, 0xFF	; 255
    2b0c:	08 95       	ret

00002b0e <_ZN7TwoWire5flushEv>:
    2b0e:	08 95       	ret

00002b10 <_ZN7TwoWire5writeEPKhj>:
    2b10:	cf 92       	push	r12
    2b12:	df 92       	push	r13
    2b14:	ef 92       	push	r14
    2b16:	ff 92       	push	r15
    2b18:	0f 93       	push	r16
    2b1a:	1f 93       	push	r17
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	7c 01       	movw	r14, r24
    2b22:	26 2f       	mov	r18, r22
    2b24:	97 2f       	mov	r25, r23
    2b26:	8a 01       	movw	r16, r20
    2b28:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_ZN7TwoWire12transmittingE>
    2b2c:	88 23       	and	r24, r24
    2b2e:	91 f0       	breq	.+36     	; 0x2b54 <_ZN7TwoWire5writeEPKhj+0x44>
    2b30:	c6 2f       	mov	r28, r22
    2b32:	d7 2f       	mov	r29, r23
    2b34:	6e 01       	movw	r12, r28
    2b36:	c4 0e       	add	r12, r20
    2b38:	d5 1e       	adc	r13, r21
    2b3a:	cc 15       	cp	r28, r12
    2b3c:	dd 05       	cpc	r29, r13
    2b3e:	71 f0       	breq	.+28     	; 0x2b5c <_ZN7TwoWire5writeEPKhj+0x4c>
    2b40:	69 91       	ld	r22, Y+
    2b42:	d7 01       	movw	r26, r14
    2b44:	ed 91       	ld	r30, X+
    2b46:	fc 91       	ld	r31, X
    2b48:	01 90       	ld	r0, Z+
    2b4a:	f0 81       	ld	r31, Z
    2b4c:	e0 2d       	mov	r30, r0
    2b4e:	c7 01       	movw	r24, r14
    2b50:	09 95       	icall
    2b52:	f3 cf       	rjmp	.-26     	; 0x2b3a <_ZN7TwoWire5writeEPKhj+0x2a>
    2b54:	64 2f       	mov	r22, r20
    2b56:	82 2f       	mov	r24, r18
    2b58:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <twi_transmit>
    2b5c:	c8 01       	movw	r24, r16
    2b5e:	df 91       	pop	r29
    2b60:	cf 91       	pop	r28
    2b62:	1f 91       	pop	r17
    2b64:	0f 91       	pop	r16
    2b66:	ff 90       	pop	r15
    2b68:	ef 90       	pop	r14
    2b6a:	df 90       	pop	r13
    2b6c:	cf 90       	pop	r12
    2b6e:	08 95       	ret

00002b70 <_ZN7TwoWire5writeEh>:
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	1f 92       	push	r1
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	69 83       	std	Y+1, r22	; 0x01
    2b7c:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <_ZN7TwoWire12transmittingE>
    2b80:	22 23       	and	r18, r18
    2b82:	d1 f0       	breq	.+52     	; 0x2bb8 <_ZN7TwoWire5writeEh+0x48>
    2b84:	20 91 c1 03 	lds	r18, 0x03C1	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    2b88:	20 32       	cpi	r18, 0x20	; 32
    2b8a:	40 f0       	brcs	.+16     	; 0x2b9c <_ZN7TwoWire5writeEh+0x2c>
    2b8c:	21 e0       	ldi	r18, 0x01	; 1
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	fc 01       	movw	r30, r24
    2b92:	33 83       	std	Z+3, r19	; 0x03
    2b94:	22 83       	std	Z+2, r18	; 0x02
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	15 c0       	rjmp	.+42     	; 0x2bc6 <_ZN7TwoWire5writeEh+0x56>
    2b9c:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <_ZN7TwoWire13txBufferIndexE>
    2ba0:	e8 2f       	mov	r30, r24
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	ed 53       	subi	r30, 0x3D	; 61
    2ba6:	fc 4f       	sbci	r31, 0xFC	; 252
    2ba8:	99 81       	ldd	r25, Y+1	; 0x01
    2baa:	90 83       	st	Z, r25
    2bac:	8f 5f       	subi	r24, 0xFF	; 255
    2bae:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <_ZN7TwoWire13txBufferIndexE>
    2bb2:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    2bb6:	05 c0       	rjmp	.+10     	; 0x2bc2 <_ZN7TwoWire5writeEh+0x52>
    2bb8:	61 e0       	ldi	r22, 0x01	; 1
    2bba:	ce 01       	movw	r24, r28
    2bbc:	01 96       	adiw	r24, 0x01	; 1
    2bbe:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <twi_transmit>
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	0f 90       	pop	r0
    2bc8:	df 91       	pop	r29
    2bca:	cf 91       	pop	r28
    2bcc:	08 95       	ret

00002bce <_ZN7TwoWireC1Ev>:
    2bce:	fc 01       	movw	r30, r24
    2bd0:	13 82       	std	Z+3, r1	; 0x03
    2bd2:	12 82       	std	Z+2, r1	; 0x02
    2bd4:	88 ee       	ldi	r24, 0xE8	; 232
    2bd6:	93 e0       	ldi	r25, 0x03	; 3
    2bd8:	a0 e0       	ldi	r26, 0x00	; 0
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	84 83       	std	Z+4, r24	; 0x04
    2bde:	95 83       	std	Z+5, r25	; 0x05
    2be0:	a6 83       	std	Z+6, r26	; 0x06
    2be2:	b7 83       	std	Z+7, r27	; 0x07
    2be4:	80 e2       	ldi	r24, 0x20	; 32
    2be6:	92 e0       	ldi	r25, 0x02	; 2
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
    2bec:	08 95       	ret

00002bee <_ZN7TwoWire5beginEv>:
    2bee:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    2bf2:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    2bf6:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire13txBufferIndexE>
    2bfa:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    2bfe:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <twi_init>

00002c02 <_ZN7TwoWire17beginTransmissionEh>:
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <_ZN7TwoWire12transmittingE>
    2c08:	60 93 e3 03 	sts	0x03E3, r22	; 0x8003e3 <_ZN7TwoWire9txAddressE>
    2c0c:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire13txBufferIndexE>
    2c10:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    2c14:	08 95       	ret

00002c16 <_ZN7TwoWire17beginTransmissionEi>:
    2c16:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <_ZN7TwoWire17beginTransmissionEh>

00002c1a <_ZN7TwoWire15endTransmissionEh>:
    2c1a:	0f 93       	push	r16
    2c1c:	06 2f       	mov	r16, r22
    2c1e:	21 e0       	ldi	r18, 0x01	; 1
    2c20:	40 91 c1 03 	lds	r20, 0x03C1	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    2c24:	63 ec       	ldi	r22, 0xC3	; 195
    2c26:	73 e0       	ldi	r23, 0x03	; 3
    2c28:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <_ZN7TwoWire9txAddressE>
    2c2c:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <twi_writeTo>
    2c30:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire13txBufferIndexE>
    2c34:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire14txBufferLengthE>
    2c38:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <_ZN7TwoWire12transmittingE>
    2c3c:	0f 91       	pop	r16
    2c3e:	08 95       	ret

00002c40 <_ZN7TwoWire11requestFromEhhmhh>:
    2c40:	4f 92       	push	r4
    2c42:	5f 92       	push	r5
    2c44:	6f 92       	push	r6
    2c46:	7f 92       	push	r7
    2c48:	af 92       	push	r10
    2c4a:	bf 92       	push	r11
    2c4c:	cf 92       	push	r12
    2c4e:	ef 92       	push	r14
    2c50:	ff 92       	push	r15
    2c52:	0f 93       	push	r16
    2c54:	1f 93       	push	r17
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	5c 01       	movw	r10, r24
    2c5c:	f6 2e       	mov	r15, r22
    2c5e:	d4 2f       	mov	r29, r20
    2c60:	28 01       	movw	r4, r16
    2c62:	39 01       	movw	r6, r18
    2c64:	ee 20       	and	r14, r14
    2c66:	21 f1       	breq	.+72     	; 0x2cb0 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2c68:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_ZN7TwoWire17beginTransmissionEh>
    2c6c:	ce 2d       	mov	r28, r14
    2c6e:	c4 30       	cpi	r28, 0x04	; 4
    2c70:	08 f0       	brcs	.+2      	; 0x2c74 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2c72:	c3 e0       	ldi	r28, 0x03	; 3
    2c74:	c1 50       	subi	r28, 0x01	; 1
    2c76:	c0 f0       	brcs	.+48     	; 0x2ca8 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2c78:	d5 01       	movw	r26, r10
    2c7a:	ed 91       	ld	r30, X+
    2c7c:	fc 91       	ld	r31, X
    2c7e:	b8 e0       	ldi	r27, 0x08	; 8
    2c80:	cb 9f       	mul	r28, r27
    2c82:	c0 01       	movw	r24, r0
    2c84:	11 24       	eor	r1, r1
    2c86:	a3 01       	movw	r20, r6
    2c88:	92 01       	movw	r18, r4
    2c8a:	04 c0       	rjmp	.+8      	; 0x2c94 <_ZN7TwoWire11requestFromEhhmhh+0x54>
    2c8c:	56 95       	lsr	r21
    2c8e:	47 95       	ror	r20
    2c90:	37 95       	ror	r19
    2c92:	27 95       	ror	r18
    2c94:	8a 95       	dec	r24
    2c96:	d2 f7       	brpl	.-12     	; 0x2c8c <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    2c98:	ca 01       	movw	r24, r20
    2c9a:	b9 01       	movw	r22, r18
    2c9c:	01 90       	ld	r0, Z+
    2c9e:	f0 81       	ld	r31, Z
    2ca0:	e0 2d       	mov	r30, r0
    2ca2:	c5 01       	movw	r24, r10
    2ca4:	09 95       	icall
    2ca6:	e6 cf       	rjmp	.-52     	; 0x2c74 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2ca8:	60 e0       	ldi	r22, 0x00	; 0
    2caa:	c5 01       	movw	r24, r10
    2cac:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <_ZN7TwoWire15endTransmissionEh>
    2cb0:	4d 2f       	mov	r20, r29
    2cb2:	d1 32       	cpi	r29, 0x21	; 33
    2cb4:	08 f0       	brcs	.+2      	; 0x2cb8 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2cb6:	40 e2       	ldi	r20, 0x20	; 32
    2cb8:	2c 2d       	mov	r18, r12
    2cba:	66 ee       	ldi	r22, 0xE6	; 230
    2cbc:	73 e0       	ldi	r23, 0x03	; 3
    2cbe:	8f 2d       	mov	r24, r15
    2cc0:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <twi_readFrom>
    2cc4:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <_ZN7TwoWire13rxBufferIndexE>
    2cc8:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <_ZN7TwoWire14rxBufferLengthE>
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	ff 90       	pop	r15
    2cd6:	ef 90       	pop	r14
    2cd8:	cf 90       	pop	r12
    2cda:	bf 90       	pop	r11
    2cdc:	af 90       	pop	r10
    2cde:	7f 90       	pop	r7
    2ce0:	6f 90       	pop	r6
    2ce2:	5f 90       	pop	r5
    2ce4:	4f 90       	pop	r4
    2ce6:	08 95       	ret

00002ce8 <_ZN7TwoWire11requestFromEhhh>:
    2ce8:	cf 92       	push	r12
    2cea:	ef 92       	push	r14
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	c2 2e       	mov	r12, r18
    2cf2:	e1 2c       	mov	r14, r1
    2cf4:	00 e0       	ldi	r16, 0x00	; 0
    2cf6:	10 e0       	ldi	r17, 0x00	; 0
    2cf8:	98 01       	movw	r18, r16
    2cfa:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZN7TwoWire11requestFromEhhmhh>
    2cfe:	1f 91       	pop	r17
    2d00:	0f 91       	pop	r16
    2d02:	ef 90       	pop	r14
    2d04:	cf 90       	pop	r12
    2d06:	08 95       	ret

00002d08 <_ZN7TwoWire11requestFromEhh>:
    2d08:	21 e0       	ldi	r18, 0x01	; 1
    2d0a:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <_ZN7TwoWire11requestFromEhhh>

00002d0e <_ZN7TwoWire11requestFromEii>:
    2d0e:	21 e0       	ldi	r18, 0x01	; 1
    2d10:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <_ZN7TwoWire11requestFromEhhh>

00002d14 <_ZN7TwoWire15endTransmissionEv>:
    2d14:	61 e0       	ldi	r22, 0x01	; 1
    2d16:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <_ZN7TwoWire15endTransmissionEh>

00002d1a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2d1a:	84 eb       	ldi	r24, 0xB4	; 180
    2d1c:	93 e0       	ldi	r25, 0x03	; 3
    2d1e:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <_ZN7TwoWireC1Ev>

00002d22 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2d22:	08 95       	ret

00002d24 <_ZdlPv>:
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    2d24:	0c 94 90 19 	jmp	0x3320	; 0x3320 <free>

00002d28 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d28:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <twi_state>
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <twi_sendStop>
    2d32:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <twi_inRepStart>
    2d36:	61 e0       	ldi	r22, 0x01	; 1
    2d38:	82 e1       	ldi	r24, 0x12	; 18
    2d3a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <digitalWrite>
    2d3e:	61 e0       	ldi	r22, 0x01	; 1
    2d40:	83 e1       	ldi	r24, 0x13	; 19
    2d42:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <digitalWrite>
    2d46:	e9 eb       	ldi	r30, 0xB9	; 185
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8e 7f       	andi	r24, 0xFE	; 254
    2d4e:	80 83       	st	Z, r24
    2d50:	80 81       	ld	r24, Z
    2d52:	8d 7f       	andi	r24, 0xFD	; 253
    2d54:	80 83       	st	Z, r24
    2d56:	88 e4       	ldi	r24, 0x48	; 72
    2d58:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2d5c:	85 e4       	ldi	r24, 0x45	; 69
    2d5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d62:	08 95       	ret

00002d64 <twi_readFrom>:
    2d64:	41 32       	cpi	r20, 0x21	; 33
    2d66:	08 f0       	brcs	.+2      	; 0x2d6a <twi_readFrom+0x6>
    2d68:	43 c0       	rjmp	.+134    	; 0x2df0 <twi_readFrom+0x8c>
    2d6a:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <twi_state>
    2d6e:	91 11       	cpse	r25, r1
    2d70:	fc cf       	rjmp	.-8      	; 0x2d6a <twi_readFrom+0x6>
    2d72:	91 e0       	ldi	r25, 0x01	; 1
    2d74:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <twi_state>
    2d78:	20 93 71 04 	sts	0x0471, r18	; 0x800471 <twi_sendStop>
    2d7c:	2f ef       	ldi	r18, 0xFF	; 255
    2d7e:	20 93 06 04 	sts	0x0406, r18	; 0x800406 <twi_error>
    2d82:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_masterBufferIndex>
    2d86:	24 0f       	add	r18, r20
    2d88:	20 93 4a 04 	sts	0x044A, r18	; 0x80044a <twi_masterBufferLength>
    2d8c:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <twi_slarw>
    2d90:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <twi_slarw>
    2d94:	88 0f       	add	r24, r24
    2d96:	89 2b       	or	r24, r25
    2d98:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <twi_slarw>
    2d9c:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <twi_inRepStart>
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	61 f4       	brne	.+24     	; 0x2dbc <twi_readFrom+0x58>
    2da4:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <twi_inRepStart>
    2da8:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <twi_slarw>
    2dac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2db0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2db4:	83 fd       	sbrc	r24, 3
    2db6:	f8 cf       	rjmp	.-16     	; 0x2da8 <twi_readFrom+0x44>
    2db8:	85 ec       	ldi	r24, 0xC5	; 197
    2dba:	01 c0       	rjmp	.+2      	; 0x2dbe <twi_readFrom+0x5a>
    2dbc:	85 ee       	ldi	r24, 0xE5	; 229
    2dbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2dc2:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <twi_state>
    2dc6:	81 30       	cpi	r24, 0x01	; 1
    2dc8:	e1 f3       	breq	.-8      	; 0x2dc2 <twi_readFrom+0x5e>
    2dca:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <twi_masterBufferIndex>
    2dce:	84 17       	cp	r24, r20
    2dd0:	10 f4       	brcc	.+4      	; 0x2dd6 <twi_readFrom+0x72>
    2dd2:	40 91 4b 04 	lds	r20, 0x044B	; 0x80044b <twi_masterBufferIndex>
    2dd6:	2c e4       	ldi	r18, 0x4C	; 76
    2dd8:	34 e0       	ldi	r19, 0x04	; 4
    2dda:	fb 01       	movw	r30, r22
    2ddc:	d9 01       	movw	r26, r18
    2dde:	8a 2f       	mov	r24, r26
    2de0:	82 1b       	sub	r24, r18
    2de2:	84 17       	cp	r24, r20
    2de4:	18 f4       	brcc	.+6      	; 0x2dec <twi_readFrom+0x88>
    2de6:	8d 91       	ld	r24, X+
    2de8:	81 93       	st	Z+, r24
    2dea:	f9 cf       	rjmp	.-14     	; 0x2dde <twi_readFrom+0x7a>
    2dec:	84 2f       	mov	r24, r20
    2dee:	08 95       	ret
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	08 95       	ret

00002df4 <twi_writeTo>:
    2df4:	0f 93       	push	r16
    2df6:	41 32       	cpi	r20, 0x21	; 33
    2df8:	08 f0       	brcs	.+2      	; 0x2dfc <twi_writeTo+0x8>
    2dfa:	4a c0       	rjmp	.+148    	; 0x2e90 <twi_writeTo+0x9c>
    2dfc:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <twi_state>
    2e00:	91 11       	cpse	r25, r1
    2e02:	fc cf       	rjmp	.-8      	; 0x2dfc <twi_writeTo+0x8>
    2e04:	32 e0       	ldi	r19, 0x02	; 2
    2e06:	30 93 73 04 	sts	0x0473, r19	; 0x800473 <twi_state>
    2e0a:	00 93 71 04 	sts	0x0471, r16	; 0x800471 <twi_sendStop>
    2e0e:	3f ef       	ldi	r19, 0xFF	; 255
    2e10:	30 93 06 04 	sts	0x0406, r19	; 0x800406 <twi_error>
    2e14:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_masterBufferIndex>
    2e18:	40 93 4a 04 	sts	0x044A, r20	; 0x80044a <twi_masterBufferLength>
    2e1c:	fb 01       	movw	r30, r22
    2e1e:	6c e4       	ldi	r22, 0x4C	; 76
    2e20:	74 e0       	ldi	r23, 0x04	; 4
    2e22:	db 01       	movw	r26, r22
    2e24:	3a 2f       	mov	r19, r26
    2e26:	36 1b       	sub	r19, r22
    2e28:	34 17       	cp	r19, r20
    2e2a:	18 f4       	brcc	.+6      	; 0x2e32 <twi_writeTo+0x3e>
    2e2c:	31 91       	ld	r19, Z+
    2e2e:	3d 93       	st	X+, r19
    2e30:	f9 cf       	rjmp	.-14     	; 0x2e24 <twi_writeTo+0x30>
    2e32:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <twi_slarw>
    2e36:	30 91 72 04 	lds	r19, 0x0472	; 0x800472 <twi_slarw>
    2e3a:	88 0f       	add	r24, r24
    2e3c:	83 2b       	or	r24, r19
    2e3e:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <twi_slarw>
    2e42:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <twi_inRepStart>
    2e46:	81 30       	cpi	r24, 0x01	; 1
    2e48:	61 f4       	brne	.+24     	; 0x2e62 <twi_writeTo+0x6e>
    2e4a:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <twi_inRepStart>
    2e4e:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <twi_slarw>
    2e52:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2e56:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e5a:	83 fd       	sbrc	r24, 3
    2e5c:	f8 cf       	rjmp	.-16     	; 0x2e4e <twi_writeTo+0x5a>
    2e5e:	85 ec       	ldi	r24, 0xC5	; 197
    2e60:	01 c0       	rjmp	.+2      	; 0x2e64 <twi_writeTo+0x70>
    2e62:	85 ee       	ldi	r24, 0xE5	; 229
    2e64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e68:	22 23       	and	r18, r18
    2e6a:	21 f0       	breq	.+8      	; 0x2e74 <twi_writeTo+0x80>
    2e6c:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <twi_state>
    2e70:	82 30       	cpi	r24, 0x02	; 2
    2e72:	d1 f3       	breq	.-12     	; 0x2e68 <twi_writeTo+0x74>
    2e74:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <twi_error>
    2e78:	8f 3f       	cpi	r24, 0xFF	; 255
    2e7a:	79 f0       	breq	.+30     	; 0x2e9a <twi_writeTo+0xa6>
    2e7c:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <twi_error>
    2e80:	80 32       	cpi	r24, 0x20	; 32
    2e82:	41 f0       	breq	.+16     	; 0x2e94 <twi_writeTo+0xa0>
    2e84:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <twi_error>
    2e88:	80 33       	cpi	r24, 0x30	; 48
    2e8a:	31 f0       	breq	.+12     	; 0x2e98 <twi_writeTo+0xa4>
    2e8c:	94 e0       	ldi	r25, 0x04	; 4
    2e8e:	05 c0       	rjmp	.+10     	; 0x2e9a <twi_writeTo+0xa6>
    2e90:	91 e0       	ldi	r25, 0x01	; 1
    2e92:	03 c0       	rjmp	.+6      	; 0x2e9a <twi_writeTo+0xa6>
    2e94:	92 e0       	ldi	r25, 0x02	; 2
    2e96:	01 c0       	rjmp	.+2      	; 0x2e9a <twi_writeTo+0xa6>
    2e98:	93 e0       	ldi	r25, 0x03	; 3
    2e9a:	89 2f       	mov	r24, r25
    2e9c:	0f 91       	pop	r16
    2e9e:	08 95       	ret

00002ea0 <twi_transmit>:
    2ea0:	61 32       	cpi	r22, 0x21	; 33
    2ea2:	98 f4       	brcc	.+38     	; 0x2eca <twi_transmit+0x2a>
    2ea4:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <twi_state>
    2ea8:	24 30       	cpi	r18, 0x04	; 4
    2eaa:	89 f4       	brne	.+34     	; 0x2ece <twi_transmit+0x2e>
    2eac:	60 93 28 04 	sts	0x0428, r22	; 0x800428 <twi_txBufferLength>
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	2a e2       	ldi	r18, 0x2A	; 42
    2eb4:	34 e0       	ldi	r19, 0x04	; 4
    2eb6:	d9 01       	movw	r26, r18
    2eb8:	8a 2f       	mov	r24, r26
    2eba:	82 1b       	sub	r24, r18
    2ebc:	86 17       	cp	r24, r22
    2ebe:	18 f4       	brcc	.+6      	; 0x2ec6 <twi_transmit+0x26>
    2ec0:	81 91       	ld	r24, Z+
    2ec2:	8d 93       	st	X+, r24
    2ec4:	f9 cf       	rjmp	.-14     	; 0x2eb8 <twi_transmit+0x18>
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	08 95       	ret
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	08 95       	ret
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	08 95       	ret

00002ed2 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2ed2:	85 ed       	ldi	r24, 0xD5	; 213
    2ed4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2ed8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2edc:	84 fd       	sbrc	r24, 4
    2ede:	fc cf       	rjmp	.-8      	; 0x2ed8 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2ee0:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <twi_state>
    2ee4:	08 95       	ret

00002ee6 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2ee6:	85 ec       	ldi	r24, 0xC5	; 197
    2ee8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2eec:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <twi_state>
    2ef0:	08 95       	ret

00002ef2 <__vector_24>:
}

ISR(TWI_vect)
{
    2ef2:	1f 92       	push	r1
    2ef4:	0f 92       	push	r0
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	0f 92       	push	r0
    2efa:	11 24       	eor	r1, r1
    2efc:	2f 93       	push	r18
    2efe:	3f 93       	push	r19
    2f00:	4f 93       	push	r20
    2f02:	5f 93       	push	r21
    2f04:	6f 93       	push	r22
    2f06:	7f 93       	push	r23
    2f08:	8f 93       	push	r24
    2f0a:	9f 93       	push	r25
    2f0c:	af 93       	push	r26
    2f0e:	bf 93       	push	r27
    2f10:	ef 93       	push	r30
    2f12:	ff 93       	push	r31
  switch(TW_STATUS){
    2f14:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2f18:	88 7f       	andi	r24, 0xF8	; 248
    2f1a:	80 36       	cpi	r24, 0x60	; 96
    2f1c:	09 f4       	brne	.+2      	; 0x2f20 <__vector_24+0x2e>
    2f1e:	9e c0       	rjmp	.+316    	; 0x305c <__vector_24+0x16a>
    2f20:	78 f5       	brcc	.+94     	; 0x2f80 <__vector_24+0x8e>
    2f22:	88 32       	cpi	r24, 0x28	; 40
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <__vector_24+0x36>
    2f26:	5d c0       	rjmp	.+186    	; 0x2fe2 <__vector_24+0xf0>
    2f28:	90 f4       	brcc	.+36     	; 0x2f4e <__vector_24+0x5c>
    2f2a:	80 31       	cpi	r24, 0x10	; 16
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <__vector_24+0x3e>
    2f2e:	56 c0       	rjmp	.+172    	; 0x2fdc <__vector_24+0xea>
    2f30:	38 f4       	brcc	.+14     	; 0x2f40 <__vector_24+0x4e>
    2f32:	88 23       	and	r24, r24
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <__vector_24+0x46>
    2f36:	f5 c0       	rjmp	.+490    	; 0x3122 <__vector_24+0x230>
    2f38:	88 30       	cpi	r24, 0x08	; 8
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <__vector_24+0x4c>
    2f3c:	4f c0       	rjmp	.+158    	; 0x2fdc <__vector_24+0xea>
    2f3e:	f5 c0       	rjmp	.+490    	; 0x312a <__vector_24+0x238>
    2f40:	88 31       	cpi	r24, 0x18	; 24
    2f42:	09 f4       	brne	.+2      	; 0x2f46 <__vector_24+0x54>
    2f44:	4e c0       	rjmp	.+156    	; 0x2fe2 <__vector_24+0xf0>
    2f46:	80 32       	cpi	r24, 0x20	; 32
    2f48:	09 f4       	brne	.+2      	; 0x2f4c <__vector_24+0x5a>
    2f4a:	5f c0       	rjmp	.+190    	; 0x300a <__vector_24+0x118>
    2f4c:	ee c0       	rjmp	.+476    	; 0x312a <__vector_24+0x238>
    2f4e:	80 34       	cpi	r24, 0x40	; 64
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <__vector_24+0x62>
    2f52:	6a c0       	rjmp	.+212    	; 0x3028 <__vector_24+0x136>
    2f54:	58 f4       	brcc	.+22     	; 0x2f6c <__vector_24+0x7a>
    2f56:	80 33       	cpi	r24, 0x30	; 48
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <__vector_24+0x6a>
    2f5a:	57 c0       	rjmp	.+174    	; 0x300a <__vector_24+0x118>
    2f5c:	88 33       	cpi	r24, 0x38	; 56
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <__vector_24+0x70>
    2f60:	e4 c0       	rjmp	.+456    	; 0x312a <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f62:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <twi_error>
      twi_releaseBus();
    2f66:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <twi_releaseBus>
      break;
    2f6a:	df c0       	rjmp	.+446    	; 0x312a <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f6c:	80 35       	cpi	r24, 0x50	; 80
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <__vector_24+0x80>
    2f70:	4f c0       	rjmp	.+158    	; 0x3010 <__vector_24+0x11e>
    2f72:	88 35       	cpi	r24, 0x58	; 88
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <__vector_24+0x86>
    2f76:	5d c0       	rjmp	.+186    	; 0x3032 <__vector_24+0x140>
    2f78:	88 34       	cpi	r24, 0x48	; 72
    2f7a:	09 f0       	breq	.+2      	; 0x2f7e <__vector_24+0x8c>
    2f7c:	d6 c0       	rjmp	.+428    	; 0x312a <__vector_24+0x238>
    2f7e:	d3 c0       	rjmp	.+422    	; 0x3126 <__vector_24+0x234>
    2f80:	88 39       	cpi	r24, 0x98	; 152
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <__vector_24+0x94>
    2f84:	c4 c0       	rjmp	.+392    	; 0x310e <__vector_24+0x21c>
    2f86:	a8 f4       	brcc	.+42     	; 0x2fb2 <__vector_24+0xc0>
    2f88:	88 37       	cpi	r24, 0x78	; 120
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <__vector_24+0x9c>
    2f8c:	67 c0       	rjmp	.+206    	; 0x305c <__vector_24+0x16a>
    2f8e:	38 f4       	brcc	.+14     	; 0x2f9e <__vector_24+0xac>
    2f90:	88 36       	cpi	r24, 0x68	; 104
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <__vector_24+0xa4>
    2f94:	63 c0       	rjmp	.+198    	; 0x305c <__vector_24+0x16a>
    2f96:	80 37       	cpi	r24, 0x70	; 112
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <__vector_24+0xaa>
    2f9a:	60 c0       	rjmp	.+192    	; 0x305c <__vector_24+0x16a>
    2f9c:	c6 c0       	rjmp	.+396    	; 0x312a <__vector_24+0x238>
    2f9e:	88 38       	cpi	r24, 0x88	; 136
    2fa0:	09 f4       	brne	.+2      	; 0x2fa4 <__vector_24+0xb2>
    2fa2:	b5 c0       	rjmp	.+362    	; 0x310e <__vector_24+0x21c>
    2fa4:	80 39       	cpi	r24, 0x90	; 144
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <__vector_24+0xb8>
    2fa8:	5f c0       	rjmp	.+190    	; 0x3068 <__vector_24+0x176>
    2faa:	80 38       	cpi	r24, 0x80	; 128
    2fac:	09 f0       	breq	.+2      	; 0x2fb0 <__vector_24+0xbe>
    2fae:	bd c0       	rjmp	.+378    	; 0x312a <__vector_24+0x238>
    2fb0:	5b c0       	rjmp	.+182    	; 0x3068 <__vector_24+0x176>
    2fb2:	80 3b       	cpi	r24, 0xB0	; 176
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <__vector_24+0xc6>
    2fb6:	83 c0       	rjmp	.+262    	; 0x30be <__vector_24+0x1cc>
    2fb8:	38 f4       	brcc	.+14     	; 0x2fc8 <__vector_24+0xd6>
    2fba:	80 3a       	cpi	r24, 0xA0	; 160
    2fbc:	09 f4       	brne	.+2      	; 0x2fc0 <__vector_24+0xce>
    2fbe:	66 c0       	rjmp	.+204    	; 0x308c <__vector_24+0x19a>
    2fc0:	88 3a       	cpi	r24, 0xA8	; 168
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <__vector_24+0xd4>
    2fc4:	7c c0       	rjmp	.+248    	; 0x30be <__vector_24+0x1cc>
    2fc6:	b1 c0       	rjmp	.+354    	; 0x312a <__vector_24+0x238>
    2fc8:	80 3c       	cpi	r24, 0xC0	; 192
    2fca:	09 f4       	brne	.+2      	; 0x2fce <__vector_24+0xdc>
    2fcc:	a4 c0       	rjmp	.+328    	; 0x3116 <__vector_24+0x224>
    2fce:	88 3c       	cpi	r24, 0xC8	; 200
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <__vector_24+0xe2>
    2fd2:	a1 c0       	rjmp	.+322    	; 0x3116 <__vector_24+0x224>
    2fd4:	88 3b       	cpi	r24, 0xB8	; 184
    2fd6:	09 f4       	brne	.+2      	; 0x2fda <__vector_24+0xe8>
    2fd8:	87 c0       	rjmp	.+270    	; 0x30e8 <__vector_24+0x1f6>
    2fda:	a7 c0       	rjmp	.+334    	; 0x312a <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2fdc:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <twi_slarw>
    2fe0:	10 c0       	rjmp	.+32     	; 0x3002 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2fe2:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <twi_masterBufferIndex>
    2fe6:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_masterBufferLength>
    2fea:	98 17       	cp	r25, r24
    2fec:	70 f5       	brcc	.+92     	; 0x304a <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2fee:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <twi_masterBufferIndex>
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	8e 0f       	add	r24, r30
    2ff6:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <twi_masterBufferIndex>
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	e4 5b       	subi	r30, 0xB4	; 180
    2ffe:	fb 4f       	sbci	r31, 0xFB	; 251
    3000:	80 81       	ld	r24, Z
    3002:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3006:	85 ec       	ldi	r24, 0xC5	; 197
    3008:	83 c0       	rjmp	.+262    	; 0x3110 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    300a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <twi_error>
    300e:	8b c0       	rjmp	.+278    	; 0x3126 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3010:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <twi_masterBufferIndex>
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	8e 0f       	add	r24, r30
    3018:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <twi_masterBufferIndex>
    301c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	e4 5b       	subi	r30, 0xB4	; 180
    3024:	fb 4f       	sbci	r31, 0xFB	; 251
    3026:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3028:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <twi_masterBufferIndex>
    302c:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_masterBufferLength>
    3030:	6b c0       	rjmp	.+214    	; 0x3108 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3032:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <twi_masterBufferIndex>
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	8e 0f       	add	r24, r30
    303a:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <twi_masterBufferIndex>
    303e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	e4 5b       	subi	r30, 0xB4	; 180
    3046:	fb 4f       	sbci	r31, 0xFB	; 251
    3048:	80 83       	st	Z, r24
	if (twi_sendStop)
    304a:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <twi_sendStop>
    304e:	81 11       	cpse	r24, r1
    3050:	6a c0       	rjmp	.+212    	; 0x3126 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3058:	84 ea       	ldi	r24, 0xA4	; 164
    305a:	5e c0       	rjmp	.+188    	; 0x3118 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    305c:	83 e0       	ldi	r24, 0x03	; 3
    305e:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3062:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <twi_rxBufferIndex>
    3066:	cf cf       	rjmp	.-98     	; 0x3006 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3068:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_rxBufferIndex>
    306c:	80 32       	cpi	r24, 0x20	; 32
    306e:	08 f0       	brcs	.+2      	; 0x3072 <__vector_24+0x180>
    3070:	4e c0       	rjmp	.+156    	; 0x310e <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3072:	e0 91 07 04 	lds	r30, 0x0407	; 0x800407 <twi_rxBufferIndex>
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	8e 0f       	add	r24, r30
    307a:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <twi_rxBufferIndex>
    307e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	e8 5f       	subi	r30, 0xF8	; 248
    3086:	fb 4f       	sbci	r31, 0xFB	; 251
    3088:	80 83       	st	Z, r24
    308a:	bd cf       	rjmp	.-134    	; 0x3006 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    308c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3090:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_rxBufferIndex>
    3094:	80 32       	cpi	r24, 0x20	; 32
    3096:	30 f4       	brcc	.+12     	; 0x30a4 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3098:	e0 91 07 04 	lds	r30, 0x0407	; 0x800407 <twi_rxBufferIndex>
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	e8 5f       	subi	r30, 0xF8	; 248
    30a0:	fb 4f       	sbci	r31, 0xFB	; 251
    30a2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    30a4:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <twi_rxBufferIndex>
    30a8:	70 e0       	ldi	r23, 0x00	; 0
    30aa:	e0 91 6c 04 	lds	r30, 0x046C	; 0x80046c <twi_onSlaveReceive>
    30ae:	f0 91 6d 04 	lds	r31, 0x046D	; 0x80046d <twi_onSlaveReceive+0x1>
    30b2:	88 e0       	ldi	r24, 0x08	; 8
    30b4:	94 e0       	ldi	r25, 0x04	; 4
    30b6:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    30b8:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <twi_rxBufferIndex>
      break;
    30bc:	36 c0       	rjmp	.+108    	; 0x312a <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    30be:	84 e0       	ldi	r24, 0x04	; 4
    30c0:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    30c4:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    30c8:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    30cc:	e0 91 6e 04 	lds	r30, 0x046E	; 0x80046e <twi_onSlaveTransmit>
    30d0:	f0 91 6f 04 	lds	r31, 0x046F	; 0x80046f <twi_onSlaveTransmit+0x1>
    30d4:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    30d6:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <twi_txBufferLength>
    30da:	81 11       	cpse	r24, r1
    30dc:	05 c0       	rjmp	.+10     	; 0x30e8 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    30e4:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    30e8:	e0 91 29 04 	lds	r30, 0x0429	; 0x800429 <twi_txBufferIndex>
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	8e 0f       	add	r24, r30
    30f0:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <twi_txBufferIndex>
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	e6 5d       	subi	r30, 0xD6	; 214
    30f8:	fb 4f       	sbci	r31, 0xFB	; 251
    30fa:	80 81       	ld	r24, Z
    30fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3100:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <twi_txBufferIndex>
    3104:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <twi_txBufferLength>
    3108:	98 17       	cp	r25, r24
    310a:	08 f4       	brcc	.+2      	; 0x310e <__vector_24+0x21c>
    310c:	7c cf       	rjmp	.-264    	; 0x3006 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    310e:	85 e8       	ldi	r24, 0x85	; 133
    3110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3114:	0a c0       	rjmp	.+20     	; 0x312a <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3116:	85 ec       	ldi	r24, 0xC5	; 197
    3118:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    311c:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <twi_state>
      break;
    3120:	04 c0       	rjmp	.+8      	; 0x312a <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3122:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <twi_error>
      twi_stop();
    3126:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <twi_stop>
      break;
  }
}
    312a:	ff 91       	pop	r31
    312c:	ef 91       	pop	r30
    312e:	bf 91       	pop	r27
    3130:	af 91       	pop	r26
    3132:	9f 91       	pop	r25
    3134:	8f 91       	pop	r24
    3136:	7f 91       	pop	r23
    3138:	6f 91       	pop	r22
    313a:	5f 91       	pop	r21
    313c:	4f 91       	pop	r20
    313e:	3f 91       	pop	r19
    3140:	2f 91       	pop	r18
    3142:	0f 90       	pop	r0
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	0f 90       	pop	r0
    3148:	1f 90       	pop	r1
    314a:	18 95       	reti

0000314c <__unordsf2>:
    314c:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fp_cmp>
    3150:	88 0b       	sbc	r24, r24
    3152:	99 0b       	sbc	r25, r25
    3154:	08 95       	ret

00003156 <__divmodhi4>:
    3156:	97 fb       	bst	r25, 7
    3158:	07 2e       	mov	r0, r23
    315a:	16 f4       	brtc	.+4      	; 0x3160 <__divmodhi4+0xa>
    315c:	00 94       	com	r0
    315e:	07 d0       	rcall	.+14     	; 0x316e <__divmodhi4_neg1>
    3160:	77 fd       	sbrc	r23, 7
    3162:	09 d0       	rcall	.+18     	; 0x3176 <__divmodhi4_neg2>
    3164:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__udivmodhi4>
    3168:	07 fc       	sbrc	r0, 7
    316a:	05 d0       	rcall	.+10     	; 0x3176 <__divmodhi4_neg2>
    316c:	3e f4       	brtc	.+14     	; 0x317c <__divmodhi4_exit>

0000316e <__divmodhi4_neg1>:
    316e:	90 95       	com	r25
    3170:	81 95       	neg	r24
    3172:	9f 4f       	sbci	r25, 0xFF	; 255
    3174:	08 95       	ret

00003176 <__divmodhi4_neg2>:
    3176:	70 95       	com	r23
    3178:	61 95       	neg	r22
    317a:	7f 4f       	sbci	r23, 0xFF	; 255

0000317c <__divmodhi4_exit>:
    317c:	08 95       	ret

0000317e <__udivmodsi4>:
    317e:	a1 e2       	ldi	r26, 0x21	; 33
    3180:	1a 2e       	mov	r1, r26
    3182:	aa 1b       	sub	r26, r26
    3184:	bb 1b       	sub	r27, r27
    3186:	fd 01       	movw	r30, r26
    3188:	0d c0       	rjmp	.+26     	; 0x31a4 <__udivmodsi4_ep>

0000318a <__udivmodsi4_loop>:
    318a:	aa 1f       	adc	r26, r26
    318c:	bb 1f       	adc	r27, r27
    318e:	ee 1f       	adc	r30, r30
    3190:	ff 1f       	adc	r31, r31
    3192:	a2 17       	cp	r26, r18
    3194:	b3 07       	cpc	r27, r19
    3196:	e4 07       	cpc	r30, r20
    3198:	f5 07       	cpc	r31, r21
    319a:	20 f0       	brcs	.+8      	; 0x31a4 <__udivmodsi4_ep>
    319c:	a2 1b       	sub	r26, r18
    319e:	b3 0b       	sbc	r27, r19
    31a0:	e4 0b       	sbc	r30, r20
    31a2:	f5 0b       	sbc	r31, r21

000031a4 <__udivmodsi4_ep>:
    31a4:	66 1f       	adc	r22, r22
    31a6:	77 1f       	adc	r23, r23
    31a8:	88 1f       	adc	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	1a 94       	dec	r1
    31ae:	69 f7       	brne	.-38     	; 0x318a <__udivmodsi4_loop>
    31b0:	60 95       	com	r22
    31b2:	70 95       	com	r23
    31b4:	80 95       	com	r24
    31b6:	90 95       	com	r25
    31b8:	9b 01       	movw	r18, r22
    31ba:	ac 01       	movw	r20, r24
    31bc:	bd 01       	movw	r22, r26
    31be:	cf 01       	movw	r24, r30
    31c0:	08 95       	ret

000031c2 <__udivmodhi4>:
    31c2:	aa 1b       	sub	r26, r26
    31c4:	bb 1b       	sub	r27, r27
    31c6:	51 e1       	ldi	r21, 0x11	; 17
    31c8:	07 c0       	rjmp	.+14     	; 0x31d8 <__udivmodhi4_ep>

000031ca <__udivmodhi4_loop>:
    31ca:	aa 1f       	adc	r26, r26
    31cc:	bb 1f       	adc	r27, r27
    31ce:	a6 17       	cp	r26, r22
    31d0:	b7 07       	cpc	r27, r23
    31d2:	10 f0       	brcs	.+4      	; 0x31d8 <__udivmodhi4_ep>
    31d4:	a6 1b       	sub	r26, r22
    31d6:	b7 0b       	sbc	r27, r23

000031d8 <__udivmodhi4_ep>:
    31d8:	88 1f       	adc	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	5a 95       	dec	r21
    31de:	a9 f7       	brne	.-22     	; 0x31ca <__udivmodhi4_loop>
    31e0:	80 95       	com	r24
    31e2:	90 95       	com	r25
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	08 95       	ret

000031ea <__tablejump2__>:
    31ea:	ee 0f       	add	r30, r30
    31ec:	ff 1f       	adc	r31, r31
    31ee:	05 90       	lpm	r0, Z+
    31f0:	f4 91       	lpm	r31, Z
    31f2:	e0 2d       	mov	r30, r0
    31f4:	09 94       	ijmp

000031f6 <malloc>:
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	82 30       	cpi	r24, 0x02	; 2
    31fc:	91 05       	cpc	r25, r1
    31fe:	10 f4       	brcc	.+4      	; 0x3204 <malloc+0xe>
    3200:	82 e0       	ldi	r24, 0x02	; 2
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	e0 91 76 04 	lds	r30, 0x0476	; 0x800476 <__flp>
    3208:	f0 91 77 04 	lds	r31, 0x0477	; 0x800477 <__flp+0x1>
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	c0 e0       	ldi	r28, 0x00	; 0
    3212:	d0 e0       	ldi	r29, 0x00	; 0
    3214:	30 97       	sbiw	r30, 0x00	; 0
    3216:	11 f1       	breq	.+68     	; 0x325c <malloc+0x66>
    3218:	40 81       	ld	r20, Z
    321a:	51 81       	ldd	r21, Z+1	; 0x01
    321c:	48 17       	cp	r20, r24
    321e:	59 07       	cpc	r21, r25
    3220:	c0 f0       	brcs	.+48     	; 0x3252 <malloc+0x5c>
    3222:	48 17       	cp	r20, r24
    3224:	59 07       	cpc	r21, r25
    3226:	61 f4       	brne	.+24     	; 0x3240 <malloc+0x4a>
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	20 97       	sbiw	r28, 0x00	; 0
    322e:	19 f0       	breq	.+6      	; 0x3236 <malloc+0x40>
    3230:	9b 83       	std	Y+3, r25	; 0x03
    3232:	8a 83       	std	Y+2, r24	; 0x02
    3234:	2b c0       	rjmp	.+86     	; 0x328c <malloc+0x96>
    3236:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <__flp+0x1>
    323a:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <__flp>
    323e:	26 c0       	rjmp	.+76     	; 0x328c <malloc+0x96>
    3240:	21 15       	cp	r18, r1
    3242:	31 05       	cpc	r19, r1
    3244:	19 f0       	breq	.+6      	; 0x324c <malloc+0x56>
    3246:	42 17       	cp	r20, r18
    3248:	53 07       	cpc	r21, r19
    324a:	18 f4       	brcc	.+6      	; 0x3252 <malloc+0x5c>
    324c:	9a 01       	movw	r18, r20
    324e:	be 01       	movw	r22, r28
    3250:	df 01       	movw	r26, r30
    3252:	ef 01       	movw	r28, r30
    3254:	02 80       	ldd	r0, Z+2	; 0x02
    3256:	f3 81       	ldd	r31, Z+3	; 0x03
    3258:	e0 2d       	mov	r30, r0
    325a:	dc cf       	rjmp	.-72     	; 0x3214 <malloc+0x1e>
    325c:	21 15       	cp	r18, r1
    325e:	31 05       	cpc	r19, r1
    3260:	09 f1       	breq	.+66     	; 0x32a4 <malloc+0xae>
    3262:	28 1b       	sub	r18, r24
    3264:	39 0b       	sbc	r19, r25
    3266:	24 30       	cpi	r18, 0x04	; 4
    3268:	31 05       	cpc	r19, r1
    326a:	90 f4       	brcc	.+36     	; 0x3290 <malloc+0x9a>
    326c:	12 96       	adiw	r26, 0x02	; 2
    326e:	8d 91       	ld	r24, X+
    3270:	9c 91       	ld	r25, X
    3272:	13 97       	sbiw	r26, 0x03	; 3
    3274:	61 15       	cp	r22, r1
    3276:	71 05       	cpc	r23, r1
    3278:	21 f0       	breq	.+8      	; 0x3282 <malloc+0x8c>
    327a:	fb 01       	movw	r30, r22
    327c:	93 83       	std	Z+3, r25	; 0x03
    327e:	82 83       	std	Z+2, r24	; 0x02
    3280:	04 c0       	rjmp	.+8      	; 0x328a <malloc+0x94>
    3282:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <__flp+0x1>
    3286:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <__flp>
    328a:	fd 01       	movw	r30, r26
    328c:	32 96       	adiw	r30, 0x02	; 2
    328e:	44 c0       	rjmp	.+136    	; 0x3318 <malloc+0x122>
    3290:	fd 01       	movw	r30, r26
    3292:	e2 0f       	add	r30, r18
    3294:	f3 1f       	adc	r31, r19
    3296:	81 93       	st	Z+, r24
    3298:	91 93       	st	Z+, r25
    329a:	22 50       	subi	r18, 0x02	; 2
    329c:	31 09       	sbc	r19, r1
    329e:	2d 93       	st	X+, r18
    32a0:	3c 93       	st	X, r19
    32a2:	3a c0       	rjmp	.+116    	; 0x3318 <malloc+0x122>
    32a4:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <__brkval>
    32a8:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <__brkval+0x1>
    32ac:	23 2b       	or	r18, r19
    32ae:	41 f4       	brne	.+16     	; 0x32c0 <malloc+0xca>
    32b0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    32b4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    32b8:	30 93 75 04 	sts	0x0475, r19	; 0x800475 <__brkval+0x1>
    32bc:	20 93 74 04 	sts	0x0474, r18	; 0x800474 <__brkval>
    32c0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    32c4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    32c8:	21 15       	cp	r18, r1
    32ca:	31 05       	cpc	r19, r1
    32cc:	41 f4       	brne	.+16     	; 0x32de <malloc+0xe8>
    32ce:	2d b7       	in	r18, 0x3d	; 61
    32d0:	3e b7       	in	r19, 0x3e	; 62
    32d2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    32d6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    32da:	24 1b       	sub	r18, r20
    32dc:	35 0b       	sbc	r19, r21
    32de:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <__brkval>
    32e2:	f0 91 75 04 	lds	r31, 0x0475	; 0x800475 <__brkval+0x1>
    32e6:	e2 17       	cp	r30, r18
    32e8:	f3 07       	cpc	r31, r19
    32ea:	a0 f4       	brcc	.+40     	; 0x3314 <malloc+0x11e>
    32ec:	2e 1b       	sub	r18, r30
    32ee:	3f 0b       	sbc	r19, r31
    32f0:	28 17       	cp	r18, r24
    32f2:	39 07       	cpc	r19, r25
    32f4:	78 f0       	brcs	.+30     	; 0x3314 <malloc+0x11e>
    32f6:	ac 01       	movw	r20, r24
    32f8:	4e 5f       	subi	r20, 0xFE	; 254
    32fa:	5f 4f       	sbci	r21, 0xFF	; 255
    32fc:	24 17       	cp	r18, r20
    32fe:	35 07       	cpc	r19, r21
    3300:	48 f0       	brcs	.+18     	; 0x3314 <malloc+0x11e>
    3302:	4e 0f       	add	r20, r30
    3304:	5f 1f       	adc	r21, r31
    3306:	50 93 75 04 	sts	0x0475, r21	; 0x800475 <__brkval+0x1>
    330a:	40 93 74 04 	sts	0x0474, r20	; 0x800474 <__brkval>
    330e:	81 93       	st	Z+, r24
    3310:	91 93       	st	Z+, r25
    3312:	02 c0       	rjmp	.+4      	; 0x3318 <malloc+0x122>
    3314:	e0 e0       	ldi	r30, 0x00	; 0
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	cf 01       	movw	r24, r30
    331a:	df 91       	pop	r29
    331c:	cf 91       	pop	r28
    331e:	08 95       	ret

00003320 <free>:
    3320:	0f 93       	push	r16
    3322:	1f 93       	push	r17
    3324:	cf 93       	push	r28
    3326:	df 93       	push	r29
    3328:	00 97       	sbiw	r24, 0x00	; 0
    332a:	09 f4       	brne	.+2      	; 0x332e <free+0xe>
    332c:	8c c0       	rjmp	.+280    	; 0x3446 <free+0x126>
    332e:	fc 01       	movw	r30, r24
    3330:	32 97       	sbiw	r30, 0x02	; 2
    3332:	13 82       	std	Z+3, r1	; 0x03
    3334:	12 82       	std	Z+2, r1	; 0x02
    3336:	00 91 76 04 	lds	r16, 0x0476	; 0x800476 <__flp>
    333a:	10 91 77 04 	lds	r17, 0x0477	; 0x800477 <__flp+0x1>
    333e:	01 15       	cp	r16, r1
    3340:	11 05       	cpc	r17, r1
    3342:	81 f4       	brne	.+32     	; 0x3364 <free+0x44>
    3344:	20 81       	ld	r18, Z
    3346:	31 81       	ldd	r19, Z+1	; 0x01
    3348:	82 0f       	add	r24, r18
    334a:	93 1f       	adc	r25, r19
    334c:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <__brkval>
    3350:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <__brkval+0x1>
    3354:	28 17       	cp	r18, r24
    3356:	39 07       	cpc	r19, r25
    3358:	79 f5       	brne	.+94     	; 0x33b8 <free+0x98>
    335a:	f0 93 75 04 	sts	0x0475, r31	; 0x800475 <__brkval+0x1>
    335e:	e0 93 74 04 	sts	0x0474, r30	; 0x800474 <__brkval>
    3362:	71 c0       	rjmp	.+226    	; 0x3446 <free+0x126>
    3364:	d8 01       	movw	r26, r16
    3366:	40 e0       	ldi	r20, 0x00	; 0
    3368:	50 e0       	ldi	r21, 0x00	; 0
    336a:	ae 17       	cp	r26, r30
    336c:	bf 07       	cpc	r27, r31
    336e:	50 f4       	brcc	.+20     	; 0x3384 <free+0x64>
    3370:	12 96       	adiw	r26, 0x02	; 2
    3372:	2d 91       	ld	r18, X+
    3374:	3c 91       	ld	r19, X
    3376:	13 97       	sbiw	r26, 0x03	; 3
    3378:	ad 01       	movw	r20, r26
    337a:	21 15       	cp	r18, r1
    337c:	31 05       	cpc	r19, r1
    337e:	09 f1       	breq	.+66     	; 0x33c2 <free+0xa2>
    3380:	d9 01       	movw	r26, r18
    3382:	f3 cf       	rjmp	.-26     	; 0x336a <free+0x4a>
    3384:	9d 01       	movw	r18, r26
    3386:	da 01       	movw	r26, r20
    3388:	33 83       	std	Z+3, r19	; 0x03
    338a:	22 83       	std	Z+2, r18	; 0x02
    338c:	60 81       	ld	r22, Z
    338e:	71 81       	ldd	r23, Z+1	; 0x01
    3390:	86 0f       	add	r24, r22
    3392:	97 1f       	adc	r25, r23
    3394:	82 17       	cp	r24, r18
    3396:	93 07       	cpc	r25, r19
    3398:	69 f4       	brne	.+26     	; 0x33b4 <free+0x94>
    339a:	ec 01       	movw	r28, r24
    339c:	28 81       	ld	r18, Y
    339e:	39 81       	ldd	r19, Y+1	; 0x01
    33a0:	26 0f       	add	r18, r22
    33a2:	37 1f       	adc	r19, r23
    33a4:	2e 5f       	subi	r18, 0xFE	; 254
    33a6:	3f 4f       	sbci	r19, 0xFF	; 255
    33a8:	31 83       	std	Z+1, r19	; 0x01
    33aa:	20 83       	st	Z, r18
    33ac:	8a 81       	ldd	r24, Y+2	; 0x02
    33ae:	9b 81       	ldd	r25, Y+3	; 0x03
    33b0:	93 83       	std	Z+3, r25	; 0x03
    33b2:	82 83       	std	Z+2, r24	; 0x02
    33b4:	45 2b       	or	r20, r21
    33b6:	29 f4       	brne	.+10     	; 0x33c2 <free+0xa2>
    33b8:	f0 93 77 04 	sts	0x0477, r31	; 0x800477 <__flp+0x1>
    33bc:	e0 93 76 04 	sts	0x0476, r30	; 0x800476 <__flp>
    33c0:	42 c0       	rjmp	.+132    	; 0x3446 <free+0x126>
    33c2:	13 96       	adiw	r26, 0x03	; 3
    33c4:	fc 93       	st	X, r31
    33c6:	ee 93       	st	-X, r30
    33c8:	12 97       	sbiw	r26, 0x02	; 2
    33ca:	ed 01       	movw	r28, r26
    33cc:	49 91       	ld	r20, Y+
    33ce:	59 91       	ld	r21, Y+
    33d0:	9e 01       	movw	r18, r28
    33d2:	24 0f       	add	r18, r20
    33d4:	35 1f       	adc	r19, r21
    33d6:	e2 17       	cp	r30, r18
    33d8:	f3 07       	cpc	r31, r19
    33da:	71 f4       	brne	.+28     	; 0x33f8 <free+0xd8>
    33dc:	80 81       	ld	r24, Z
    33de:	91 81       	ldd	r25, Z+1	; 0x01
    33e0:	84 0f       	add	r24, r20
    33e2:	95 1f       	adc	r25, r21
    33e4:	02 96       	adiw	r24, 0x02	; 2
    33e6:	11 96       	adiw	r26, 0x01	; 1
    33e8:	9c 93       	st	X, r25
    33ea:	8e 93       	st	-X, r24
    33ec:	82 81       	ldd	r24, Z+2	; 0x02
    33ee:	93 81       	ldd	r25, Z+3	; 0x03
    33f0:	13 96       	adiw	r26, 0x03	; 3
    33f2:	9c 93       	st	X, r25
    33f4:	8e 93       	st	-X, r24
    33f6:	12 97       	sbiw	r26, 0x02	; 2
    33f8:	e0 e0       	ldi	r30, 0x00	; 0
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	d8 01       	movw	r26, r16
    33fe:	12 96       	adiw	r26, 0x02	; 2
    3400:	8d 91       	ld	r24, X+
    3402:	9c 91       	ld	r25, X
    3404:	13 97       	sbiw	r26, 0x03	; 3
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	19 f0       	breq	.+6      	; 0x3410 <free+0xf0>
    340a:	f8 01       	movw	r30, r16
    340c:	8c 01       	movw	r16, r24
    340e:	f6 cf       	rjmp	.-20     	; 0x33fc <free+0xdc>
    3410:	8d 91       	ld	r24, X+
    3412:	9c 91       	ld	r25, X
    3414:	98 01       	movw	r18, r16
    3416:	2e 5f       	subi	r18, 0xFE	; 254
    3418:	3f 4f       	sbci	r19, 0xFF	; 255
    341a:	82 0f       	add	r24, r18
    341c:	93 1f       	adc	r25, r19
    341e:	20 91 74 04 	lds	r18, 0x0474	; 0x800474 <__brkval>
    3422:	30 91 75 04 	lds	r19, 0x0475	; 0x800475 <__brkval+0x1>
    3426:	28 17       	cp	r18, r24
    3428:	39 07       	cpc	r19, r25
    342a:	69 f4       	brne	.+26     	; 0x3446 <free+0x126>
    342c:	30 97       	sbiw	r30, 0x00	; 0
    342e:	29 f4       	brne	.+10     	; 0x343a <free+0x11a>
    3430:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <__flp+0x1>
    3434:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <__flp>
    3438:	02 c0       	rjmp	.+4      	; 0x343e <free+0x11e>
    343a:	13 82       	std	Z+3, r1	; 0x03
    343c:	12 82       	std	Z+2, r1	; 0x02
    343e:	10 93 75 04 	sts	0x0475, r17	; 0x800475 <__brkval+0x1>
    3442:	00 93 74 04 	sts	0x0474, r16	; 0x800474 <__brkval>
    3446:	df 91       	pop	r29
    3448:	cf 91       	pop	r28
    344a:	1f 91       	pop	r17
    344c:	0f 91       	pop	r16
    344e:	08 95       	ret

00003450 <realloc>:
    3450:	a0 e0       	ldi	r26, 0x00	; 0
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	ee e2       	ldi	r30, 0x2E	; 46
    3456:	fa e1       	ldi	r31, 0x1A	; 26
    3458:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__prologue_saves__+0x8>
    345c:	ec 01       	movw	r28, r24
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	21 f4       	brne	.+8      	; 0x346a <realloc+0x1a>
    3462:	cb 01       	movw	r24, r22
    3464:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <malloc>
    3468:	b8 c0       	rjmp	.+368    	; 0x35da <realloc+0x18a>
    346a:	fc 01       	movw	r30, r24
    346c:	e6 0f       	add	r30, r22
    346e:	f7 1f       	adc	r31, r23
    3470:	9c 01       	movw	r18, r24
    3472:	22 50       	subi	r18, 0x02	; 2
    3474:	31 09       	sbc	r19, r1
    3476:	e2 17       	cp	r30, r18
    3478:	f3 07       	cpc	r31, r19
    347a:	08 f4       	brcc	.+2      	; 0x347e <realloc+0x2e>
    347c:	ac c0       	rjmp	.+344    	; 0x35d6 <realloc+0x186>
    347e:	d9 01       	movw	r26, r18
    3480:	0d 91       	ld	r16, X+
    3482:	1c 91       	ld	r17, X
    3484:	11 97       	sbiw	r26, 0x01	; 1
    3486:	06 17       	cp	r16, r22
    3488:	17 07       	cpc	r17, r23
    348a:	b0 f0       	brcs	.+44     	; 0x34b8 <realloc+0x68>
    348c:	05 30       	cpi	r16, 0x05	; 5
    348e:	11 05       	cpc	r17, r1
    3490:	08 f4       	brcc	.+2      	; 0x3494 <realloc+0x44>
    3492:	9f c0       	rjmp	.+318    	; 0x35d2 <realloc+0x182>
    3494:	c8 01       	movw	r24, r16
    3496:	04 97       	sbiw	r24, 0x04	; 4
    3498:	86 17       	cp	r24, r22
    349a:	97 07       	cpc	r25, r23
    349c:	08 f4       	brcc	.+2      	; 0x34a0 <realloc+0x50>
    349e:	99 c0       	rjmp	.+306    	; 0x35d2 <realloc+0x182>
    34a0:	02 50       	subi	r16, 0x02	; 2
    34a2:	11 09       	sbc	r17, r1
    34a4:	06 1b       	sub	r16, r22
    34a6:	17 0b       	sbc	r17, r23
    34a8:	01 93       	st	Z+, r16
    34aa:	11 93       	st	Z+, r17
    34ac:	6d 93       	st	X+, r22
    34ae:	7c 93       	st	X, r23
    34b0:	cf 01       	movw	r24, r30
    34b2:	0e 94 90 19 	call	0x3320	; 0x3320 <free>
    34b6:	8d c0       	rjmp	.+282    	; 0x35d2 <realloc+0x182>
    34b8:	5b 01       	movw	r10, r22
    34ba:	a0 1a       	sub	r10, r16
    34bc:	b1 0a       	sbc	r11, r17
    34be:	4c 01       	movw	r8, r24
    34c0:	80 0e       	add	r8, r16
    34c2:	91 1e       	adc	r9, r17
    34c4:	a0 91 76 04 	lds	r26, 0x0476	; 0x800476 <__flp>
    34c8:	b0 91 77 04 	lds	r27, 0x0477	; 0x800477 <__flp+0x1>
    34cc:	40 e0       	ldi	r20, 0x00	; 0
    34ce:	50 e0       	ldi	r21, 0x00	; 0
    34d0:	e1 2c       	mov	r14, r1
    34d2:	f1 2c       	mov	r15, r1
    34d4:	10 97       	sbiw	r26, 0x00	; 0
    34d6:	09 f4       	brne	.+2      	; 0x34da <realloc+0x8a>
    34d8:	4a c0       	rjmp	.+148    	; 0x356e <realloc+0x11e>
    34da:	a8 15       	cp	r26, r8
    34dc:	b9 05       	cpc	r27, r9
    34de:	d1 f5       	brne	.+116    	; 0x3554 <realloc+0x104>
    34e0:	6d 90       	ld	r6, X+
    34e2:	7c 90       	ld	r7, X
    34e4:	11 97       	sbiw	r26, 0x01	; 1
    34e6:	63 01       	movw	r12, r6
    34e8:	82 e0       	ldi	r24, 0x02	; 2
    34ea:	c8 0e       	add	r12, r24
    34ec:	d1 1c       	adc	r13, r1
    34ee:	ca 14       	cp	r12, r10
    34f0:	db 04       	cpc	r13, r11
    34f2:	80 f1       	brcs	.+96     	; 0x3554 <realloc+0x104>
    34f4:	a3 01       	movw	r20, r6
    34f6:	4a 19       	sub	r20, r10
    34f8:	5b 09       	sbc	r21, r11
    34fa:	6a 01       	movw	r12, r20
    34fc:	82 e0       	ldi	r24, 0x02	; 2
    34fe:	c8 0e       	add	r12, r24
    3500:	d1 1c       	adc	r13, r1
    3502:	12 96       	adiw	r26, 0x02	; 2
    3504:	bc 90       	ld	r11, X
    3506:	12 97       	sbiw	r26, 0x02	; 2
    3508:	13 96       	adiw	r26, 0x03	; 3
    350a:	ac 91       	ld	r26, X
    350c:	b5 e0       	ldi	r27, 0x05	; 5
    350e:	cb 16       	cp	r12, r27
    3510:	d1 04       	cpc	r13, r1
    3512:	40 f0       	brcs	.+16     	; 0x3524 <realloc+0xd4>
    3514:	b2 82       	std	Z+2, r11	; 0x02
    3516:	a3 83       	std	Z+3, r26	; 0x03
    3518:	51 83       	std	Z+1, r21	; 0x01
    351a:	40 83       	st	Z, r20
    351c:	d9 01       	movw	r26, r18
    351e:	6d 93       	st	X+, r22
    3520:	7c 93       	st	X, r23
    3522:	0a c0       	rjmp	.+20     	; 0x3538 <realloc+0xe8>
    3524:	0e 5f       	subi	r16, 0xFE	; 254
    3526:	1f 4f       	sbci	r17, 0xFF	; 255
    3528:	c3 01       	movw	r24, r6
    352a:	80 0f       	add	r24, r16
    352c:	91 1f       	adc	r25, r17
    352e:	f9 01       	movw	r30, r18
    3530:	91 83       	std	Z+1, r25	; 0x01
    3532:	80 83       	st	Z, r24
    3534:	eb 2d       	mov	r30, r11
    3536:	fa 2f       	mov	r31, r26
    3538:	e1 14       	cp	r14, r1
    353a:	f1 04       	cpc	r15, r1
    353c:	31 f0       	breq	.+12     	; 0x354a <realloc+0xfa>
    353e:	d7 01       	movw	r26, r14
    3540:	13 96       	adiw	r26, 0x03	; 3
    3542:	fc 93       	st	X, r31
    3544:	ee 93       	st	-X, r30
    3546:	12 97       	sbiw	r26, 0x02	; 2
    3548:	44 c0       	rjmp	.+136    	; 0x35d2 <realloc+0x182>
    354a:	f0 93 77 04 	sts	0x0477, r31	; 0x800477 <__flp+0x1>
    354e:	e0 93 76 04 	sts	0x0476, r30	; 0x800476 <__flp>
    3552:	3f c0       	rjmp	.+126    	; 0x35d2 <realloc+0x182>
    3554:	8d 91       	ld	r24, X+
    3556:	9c 91       	ld	r25, X
    3558:	11 97       	sbiw	r26, 0x01	; 1
    355a:	48 17       	cp	r20, r24
    355c:	59 07       	cpc	r21, r25
    355e:	08 f4       	brcc	.+2      	; 0x3562 <realloc+0x112>
    3560:	ac 01       	movw	r20, r24
    3562:	7d 01       	movw	r14, r26
    3564:	12 96       	adiw	r26, 0x02	; 2
    3566:	0d 90       	ld	r0, X+
    3568:	bc 91       	ld	r27, X
    356a:	a0 2d       	mov	r26, r0
    356c:	b3 cf       	rjmp	.-154    	; 0x34d4 <realloc+0x84>
    356e:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <__brkval>
    3572:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <__brkval+0x1>
    3576:	88 15       	cp	r24, r8
    3578:	99 05       	cpc	r25, r9
    357a:	e1 f4       	brne	.+56     	; 0x35b4 <realloc+0x164>
    357c:	46 17       	cp	r20, r22
    357e:	57 07       	cpc	r21, r23
    3580:	c8 f4       	brcc	.+50     	; 0x35b4 <realloc+0x164>
    3582:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3586:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    358a:	00 97       	sbiw	r24, 0x00	; 0
    358c:	41 f4       	brne	.+16     	; 0x359e <realloc+0x14e>
    358e:	8d b7       	in	r24, 0x3d	; 61
    3590:	9e b7       	in	r25, 0x3e	; 62
    3592:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3596:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    359a:	84 1b       	sub	r24, r20
    359c:	95 0b       	sbc	r25, r21
    359e:	e8 17       	cp	r30, r24
    35a0:	f9 07       	cpc	r31, r25
    35a2:	c8 f4       	brcc	.+50     	; 0x35d6 <realloc+0x186>
    35a4:	f0 93 75 04 	sts	0x0475, r31	; 0x800475 <__brkval+0x1>
    35a8:	e0 93 74 04 	sts	0x0474, r30	; 0x800474 <__brkval>
    35ac:	f9 01       	movw	r30, r18
    35ae:	71 83       	std	Z+1, r23	; 0x01
    35b0:	60 83       	st	Z, r22
    35b2:	0f c0       	rjmp	.+30     	; 0x35d2 <realloc+0x182>
    35b4:	cb 01       	movw	r24, r22
    35b6:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <malloc>
    35ba:	7c 01       	movw	r14, r24
    35bc:	00 97       	sbiw	r24, 0x00	; 0
    35be:	59 f0       	breq	.+22     	; 0x35d6 <realloc+0x186>
    35c0:	a8 01       	movw	r20, r16
    35c2:	be 01       	movw	r22, r28
    35c4:	0e 94 04 1b 	call	0x3608	; 0x3608 <memcpy>
    35c8:	ce 01       	movw	r24, r28
    35ca:	0e 94 90 19 	call	0x3320	; 0x3320 <free>
    35ce:	c7 01       	movw	r24, r14
    35d0:	04 c0       	rjmp	.+8      	; 0x35da <realloc+0x18a>
    35d2:	ce 01       	movw	r24, r28
    35d4:	02 c0       	rjmp	.+4      	; 0x35da <realloc+0x18a>
    35d6:	80 e0       	ldi	r24, 0x00	; 0
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	cd b7       	in	r28, 0x3d	; 61
    35dc:	de b7       	in	r29, 0x3e	; 62
    35de:	ee e0       	ldi	r30, 0x0E	; 14
    35e0:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__epilogue_restores__+0x8>

000035e4 <atof>:
    35e4:	66 27       	eor	r22, r22
    35e6:	77 27       	eor	r23, r23
    35e8:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <strtod>

000035ec <isspace>:
    35ec:	91 11       	cpse	r25, r1
    35ee:	0c 94 a7 1c 	jmp	0x394e	; 0x394e <__ctype_isfalse>
    35f2:	80 32       	cpi	r24, 0x20	; 32
    35f4:	19 f0       	breq	.+6      	; 0x35fc <isspace+0x10>
    35f6:	89 50       	subi	r24, 0x09	; 9
    35f8:	85 50       	subi	r24, 0x05	; 5
    35fa:	c8 f7       	brcc	.-14     	; 0x35ee <isspace+0x2>
    35fc:	08 95       	ret

000035fe <strtok>:
    35fe:	4c e2       	ldi	r20, 0x2C	; 44
    3600:	52 e0       	ldi	r21, 0x02	; 2
    3602:	0e 94 23 1b 	call	0x3646	; 0x3646 <strtok_r>
    3606:	08 95       	ret

00003608 <memcpy>:
    3608:	fb 01       	movw	r30, r22
    360a:	dc 01       	movw	r26, r24
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <memcpy+0xa>
    360e:	01 90       	ld	r0, Z+
    3610:	0d 92       	st	X+, r0
    3612:	41 50       	subi	r20, 0x01	; 1
    3614:	50 40       	sbci	r21, 0x00	; 0
    3616:	d8 f7       	brcc	.-10     	; 0x360e <memcpy+0x6>
    3618:	08 95       	ret

0000361a <strcpy>:
    361a:	fb 01       	movw	r30, r22
    361c:	dc 01       	movw	r26, r24
    361e:	01 90       	ld	r0, Z+
    3620:	0d 92       	st	X+, r0
    3622:	00 20       	and	r0, r0
    3624:	e1 f7       	brne	.-8      	; 0x361e <strcpy+0x4>
    3626:	08 95       	ret

00003628 <strncpy>:
    3628:	fb 01       	movw	r30, r22
    362a:	dc 01       	movw	r26, r24
    362c:	41 50       	subi	r20, 0x01	; 1
    362e:	50 40       	sbci	r21, 0x00	; 0
    3630:	48 f0       	brcs	.+18     	; 0x3644 <strncpy+0x1c>
    3632:	01 90       	ld	r0, Z+
    3634:	0d 92       	st	X+, r0
    3636:	00 20       	and	r0, r0
    3638:	c9 f7       	brne	.-14     	; 0x362c <strncpy+0x4>
    363a:	01 c0       	rjmp	.+2      	; 0x363e <strncpy+0x16>
    363c:	1d 92       	st	X+, r1
    363e:	41 50       	subi	r20, 0x01	; 1
    3640:	50 40       	sbci	r21, 0x00	; 0
    3642:	e0 f7       	brcc	.-8      	; 0x363c <strncpy+0x14>
    3644:	08 95       	ret

00003646 <strtok_r>:
    3646:	fa 01       	movw	r30, r20
    3648:	a1 91       	ld	r26, Z+
    364a:	b0 81       	ld	r27, Z
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	19 f4       	brne	.+6      	; 0x3656 <strtok_r+0x10>
    3650:	10 97       	sbiw	r26, 0x00	; 0
    3652:	e1 f0       	breq	.+56     	; 0x368c <strtok_r+0x46>
    3654:	cd 01       	movw	r24, r26
    3656:	dc 01       	movw	r26, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0d 90       	ld	r0, X+
    365c:	00 20       	and	r0, r0
    365e:	11 f4       	brne	.+4      	; 0x3664 <strtok_r+0x1e>
    3660:	c0 01       	movw	r24, r0
    3662:	13 c0       	rjmp	.+38     	; 0x368a <strtok_r+0x44>
    3664:	fb 01       	movw	r30, r22
    3666:	21 91       	ld	r18, Z+
    3668:	22 23       	and	r18, r18
    366a:	19 f0       	breq	.+6      	; 0x3672 <strtok_r+0x2c>
    366c:	20 15       	cp	r18, r0
    366e:	d9 f7       	brne	.-10     	; 0x3666 <strtok_r+0x20>
    3670:	f3 cf       	rjmp	.-26     	; 0x3658 <strtok_r+0x12>
    3672:	fb 01       	movw	r30, r22
    3674:	21 91       	ld	r18, Z+
    3676:	20 15       	cp	r18, r0
    3678:	19 f4       	brne	.+6      	; 0x3680 <strtok_r+0x3a>
    367a:	1e 92       	st	-X, r1
    367c:	11 96       	adiw	r26, 0x01	; 1
    367e:	06 c0       	rjmp	.+12     	; 0x368c <strtok_r+0x46>
    3680:	22 23       	and	r18, r18
    3682:	c1 f7       	brne	.-16     	; 0x3674 <strtok_r+0x2e>
    3684:	0d 90       	ld	r0, X+
    3686:	00 20       	and	r0, r0
    3688:	a1 f7       	brne	.-24     	; 0x3672 <strtok_r+0x2c>
    368a:	d0 01       	movw	r26, r0
    368c:	fa 01       	movw	r30, r20
    368e:	a1 93       	st	Z+, r26
    3690:	b0 83       	st	Z, r27
    3692:	08 95       	ret

00003694 <strtod>:
    3694:	a0 e0       	ldi	r26, 0x00	; 0
    3696:	b0 e0       	ldi	r27, 0x00	; 0
    3698:	e0 e5       	ldi	r30, 0x50	; 80
    369a:	fb e1       	ldi	r31, 0x1B	; 27
    369c:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__prologue_saves__+0x8>
    36a0:	ec 01       	movw	r28, r24
    36a2:	7b 01       	movw	r14, r22
    36a4:	61 15       	cp	r22, r1
    36a6:	71 05       	cpc	r23, r1
    36a8:	19 f0       	breq	.+6      	; 0x36b0 <strtod+0x1c>
    36aa:	db 01       	movw	r26, r22
    36ac:	8d 93       	st	X+, r24
    36ae:	9c 93       	st	X, r25
    36b0:	8e 01       	movw	r16, r28
    36b2:	0f 5f       	subi	r16, 0xFF	; 255
    36b4:	1f 4f       	sbci	r17, 0xFF	; 255
    36b6:	78 80       	ld	r7, Y
    36b8:	87 2d       	mov	r24, r7
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <isspace>
    36c0:	89 2b       	or	r24, r25
    36c2:	11 f0       	breq	.+4      	; 0x36c8 <strtod+0x34>
    36c4:	e8 01       	movw	r28, r16
    36c6:	f4 cf       	rjmp	.-24     	; 0x36b0 <strtod+0x1c>
    36c8:	bd e2       	ldi	r27, 0x2D	; 45
    36ca:	7b 12       	cpse	r7, r27
    36cc:	05 c0       	rjmp	.+10     	; 0x36d8 <strtod+0x44>
    36ce:	0f 5f       	subi	r16, 0xFF	; 255
    36d0:	1f 4f       	sbci	r17, 0xFF	; 255
    36d2:	79 80       	ldd	r7, Y+1	; 0x01
    36d4:	c1 e0       	ldi	r28, 0x01	; 1
    36d6:	08 c0       	rjmp	.+16     	; 0x36e8 <strtod+0x54>
    36d8:	eb e2       	ldi	r30, 0x2B	; 43
    36da:	7e 12       	cpse	r7, r30
    36dc:	04 c0       	rjmp	.+8      	; 0x36e6 <strtod+0x52>
    36de:	8e 01       	movw	r16, r28
    36e0:	0e 5f       	subi	r16, 0xFE	; 254
    36e2:	1f 4f       	sbci	r17, 0xFF	; 255
    36e4:	79 80       	ldd	r7, Y+1	; 0x01
    36e6:	c0 e0       	ldi	r28, 0x00	; 0
    36e8:	68 01       	movw	r12, r16
    36ea:	f1 e0       	ldi	r31, 0x01	; 1
    36ec:	cf 1a       	sub	r12, r31
    36ee:	d1 08       	sbc	r13, r1
    36f0:	43 e0       	ldi	r20, 0x03	; 3
    36f2:	50 e0       	ldi	r21, 0x00	; 0
    36f4:	6e e9       	ldi	r22, 0x9E	; 158
    36f6:	70 e0       	ldi	r23, 0x00	; 0
    36f8:	c6 01       	movw	r24, r12
    36fa:	0e 94 aa 1c 	call	0x3954	; 0x3954 <strncasecmp_P>
    36fe:	89 2b       	or	r24, r25
    3700:	f1 f4       	brne	.+60     	; 0x373e <strtod+0xaa>
    3702:	68 01       	movw	r12, r16
    3704:	22 e0       	ldi	r18, 0x02	; 2
    3706:	c2 0e       	add	r12, r18
    3708:	d1 1c       	adc	r13, r1
    370a:	45 e0       	ldi	r20, 0x05	; 5
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	69 e9       	ldi	r22, 0x99	; 153
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	c6 01       	movw	r24, r12
    3714:	0e 94 aa 1c 	call	0x3954	; 0x3954 <strncasecmp_P>
    3718:	89 2b       	or	r24, r25
    371a:	21 f4       	brne	.+8      	; 0x3724 <strtod+0x90>
    371c:	68 01       	movw	r12, r16
    371e:	87 e0       	ldi	r24, 0x07	; 7
    3720:	c8 0e       	add	r12, r24
    3722:	d1 1c       	adc	r13, r1
    3724:	e1 14       	cp	r14, r1
    3726:	f1 04       	cpc	r15, r1
    3728:	19 f0       	breq	.+6      	; 0x3730 <strtod+0x9c>
    372a:	d7 01       	movw	r26, r14
    372c:	cd 92       	st	X+, r12
    372e:	dc 92       	st	X, r13
    3730:	c1 11       	cpse	r28, r1
    3732:	ff c0       	rjmp	.+510    	; 0x3932 <strtod+0x29e>
    3734:	60 e0       	ldi	r22, 0x00	; 0
    3736:	70 e0       	ldi	r23, 0x00	; 0
    3738:	80 e8       	ldi	r24, 0x80	; 128
    373a:	9f e7       	ldi	r25, 0x7F	; 127
    373c:	03 c1       	rjmp	.+518    	; 0x3944 <strtod+0x2b0>
    373e:	43 e0       	ldi	r20, 0x03	; 3
    3740:	50 e0       	ldi	r21, 0x00	; 0
    3742:	66 e9       	ldi	r22, 0x96	; 150
    3744:	70 e0       	ldi	r23, 0x00	; 0
    3746:	c6 01       	movw	r24, r12
    3748:	0e 94 aa 1c 	call	0x3954	; 0x3954 <strncasecmp_P>
    374c:	89 2b       	or	r24, r25
    374e:	51 f4       	brne	.+20     	; 0x3764 <strtod+0xd0>
    3750:	e1 14       	cp	r14, r1
    3752:	f1 04       	cpc	r15, r1
    3754:	09 f4       	brne	.+2      	; 0x3758 <strtod+0xc4>
    3756:	f2 c0       	rjmp	.+484    	; 0x393c <strtod+0x2a8>
    3758:	0e 5f       	subi	r16, 0xFE	; 254
    375a:	1f 4f       	sbci	r17, 0xFF	; 255
    375c:	f7 01       	movw	r30, r14
    375e:	11 83       	std	Z+1, r17	; 0x01
    3760:	00 83       	st	Z, r16
    3762:	ec c0       	rjmp	.+472    	; 0x393c <strtod+0x2a8>
    3764:	68 01       	movw	r12, r16
    3766:	60 e0       	ldi	r22, 0x00	; 0
    3768:	70 e0       	ldi	r23, 0x00	; 0
    376a:	cb 01       	movw	r24, r22
    376c:	00 e0       	ldi	r16, 0x00	; 0
    376e:	10 e0       	ldi	r17, 0x00	; 0
    3770:	f6 01       	movw	r30, r12
    3772:	d0 ed       	ldi	r29, 0xD0	; 208
    3774:	d7 0d       	add	r29, r7
    3776:	da 30       	cpi	r29, 0x0A	; 10
    3778:	58 f5       	brcc	.+86     	; 0x37d0 <strtod+0x13c>
    377a:	2c 2f       	mov	r18, r28
    377c:	22 60       	ori	r18, 0x02	; 2
    377e:	62 2e       	mov	r6, r18
    3780:	2c 2f       	mov	r18, r28
    3782:	28 70       	andi	r18, 0x08	; 8
    3784:	c2 ff       	sbrs	r28, 2
    3786:	05 c0       	rjmp	.+10     	; 0x3792 <strtod+0xfe>
    3788:	21 11       	cpse	r18, r1
    378a:	28 c0       	rjmp	.+80     	; 0x37dc <strtod+0x148>
    378c:	0f 5f       	subi	r16, 0xFF	; 255
    378e:	1f 4f       	sbci	r17, 0xFF	; 255
    3790:	25 c0       	rjmp	.+74     	; 0x37dc <strtod+0x148>
    3792:	22 23       	and	r18, r18
    3794:	11 f0       	breq	.+4      	; 0x379a <strtod+0x106>
    3796:	01 50       	subi	r16, 0x01	; 1
    3798:	11 09       	sbc	r17, r1
    379a:	a5 e0       	ldi	r26, 0x05	; 5
    379c:	b0 e0       	ldi	r27, 0x00	; 0
    379e:	9b 01       	movw	r18, r22
    37a0:	ac 01       	movw	r20, r24
    37a2:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__muluhisi3>
    37a6:	4b 01       	movw	r8, r22
    37a8:	5c 01       	movw	r10, r24
    37aa:	88 0c       	add	r8, r8
    37ac:	99 1c       	adc	r9, r9
    37ae:	aa 1c       	adc	r10, r10
    37b0:	bb 1c       	adc	r11, r11
    37b2:	c5 01       	movw	r24, r10
    37b4:	b4 01       	movw	r22, r8
    37b6:	6d 0f       	add	r22, r29
    37b8:	71 1d       	adc	r23, r1
    37ba:	81 1d       	adc	r24, r1
    37bc:	91 1d       	adc	r25, r1
    37be:	68 39       	cpi	r22, 0x98	; 152
    37c0:	a9 e9       	ldi	r26, 0x99	; 153
    37c2:	7a 07       	cpc	r23, r26
    37c4:	8a 07       	cpc	r24, r26
    37c6:	a9 e1       	ldi	r26, 0x19	; 25
    37c8:	9a 07       	cpc	r25, r26
    37ca:	40 f0       	brcs	.+16     	; 0x37dc <strtod+0x148>
    37cc:	c6 60       	ori	r28, 0x06	; 6
    37ce:	05 c0       	rjmp	.+10     	; 0x37da <strtod+0x146>
    37d0:	de 3f       	cpi	r29, 0xFE	; 254
    37d2:	51 f4       	brne	.+20     	; 0x37e8 <strtod+0x154>
    37d4:	c3 fd       	sbrc	r28, 3
    37d6:	44 c0       	rjmp	.+136    	; 0x3860 <strtod+0x1cc>
    37d8:	c8 60       	ori	r28, 0x08	; 8
    37da:	6c 2e       	mov	r6, r28
    37dc:	bf ef       	ldi	r27, 0xFF	; 255
    37de:	cb 1a       	sub	r12, r27
    37e0:	db 0a       	sbc	r13, r27
    37e2:	70 80       	ld	r7, Z
    37e4:	c6 2d       	mov	r28, r6
    37e6:	c4 cf       	rjmp	.-120    	; 0x3770 <strtod+0xdc>
    37e8:	2d 2f       	mov	r18, r29
    37ea:	2f 7d       	andi	r18, 0xDF	; 223
    37ec:	25 31       	cpi	r18, 0x15	; 21
    37ee:	c1 f5       	brne	.+112    	; 0x3860 <strtod+0x1cc>
    37f0:	40 81       	ld	r20, Z
    37f2:	4d 32       	cpi	r20, 0x2D	; 45
    37f4:	11 f4       	brne	.+4      	; 0x37fa <strtod+0x166>
    37f6:	c0 61       	ori	r28, 0x10	; 16
    37f8:	06 c0       	rjmp	.+12     	; 0x3806 <strtod+0x172>
    37fa:	4b 32       	cpi	r20, 0x2B	; 43
    37fc:	21 f0       	breq	.+8      	; 0x3806 <strtod+0x172>
    37fe:	31 96       	adiw	r30, 0x01	; 1
    3800:	21 e0       	ldi	r18, 0x01	; 1
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	06 c0       	rjmp	.+12     	; 0x3812 <strtod+0x17e>
    3806:	32 96       	adiw	r30, 0x02	; 2
    3808:	d6 01       	movw	r26, r12
    380a:	11 96       	adiw	r26, 0x01	; 1
    380c:	4c 91       	ld	r20, X
    380e:	22 e0       	ldi	r18, 0x02	; 2
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	a0 ed       	ldi	r26, 0xD0	; 208
    3814:	a4 0f       	add	r26, r20
    3816:	aa 30       	cpi	r26, 0x0A	; 10
    3818:	18 f0       	brcs	.+6      	; 0x3820 <strtod+0x18c>
    381a:	e2 1b       	sub	r30, r18
    381c:	f3 0b       	sbc	r31, r19
    381e:	20 c0       	rjmp	.+64     	; 0x3860 <strtod+0x1cc>
    3820:	40 e0       	ldi	r20, 0x00	; 0
    3822:	50 e0       	ldi	r21, 0x00	; 0
    3824:	40 38       	cpi	r20, 0x80	; 128
    3826:	bc e0       	ldi	r27, 0x0C	; 12
    3828:	5b 07       	cpc	r21, r27
    382a:	5c f4       	brge	.+22     	; 0x3842 <strtod+0x1ae>
    382c:	9a 01       	movw	r18, r20
    382e:	22 0f       	add	r18, r18
    3830:	33 1f       	adc	r19, r19
    3832:	22 0f       	add	r18, r18
    3834:	33 1f       	adc	r19, r19
    3836:	42 0f       	add	r20, r18
    3838:	53 1f       	adc	r21, r19
    383a:	44 0f       	add	r20, r20
    383c:	55 1f       	adc	r21, r21
    383e:	4a 0f       	add	r20, r26
    3840:	51 1d       	adc	r21, r1
    3842:	31 96       	adiw	r30, 0x01	; 1
    3844:	df 01       	movw	r26, r30
    3846:	11 97       	sbiw	r26, 0x01	; 1
    3848:	2c 91       	ld	r18, X
    384a:	a0 ed       	ldi	r26, 0xD0	; 208
    384c:	a2 0f       	add	r26, r18
    384e:	aa 30       	cpi	r26, 0x0A	; 10
    3850:	48 f3       	brcs	.-46     	; 0x3824 <strtod+0x190>
    3852:	c4 ff       	sbrs	r28, 4
    3854:	03 c0       	rjmp	.+6      	; 0x385c <strtod+0x1c8>
    3856:	51 95       	neg	r21
    3858:	41 95       	neg	r20
    385a:	51 09       	sbc	r21, r1
    385c:	04 0f       	add	r16, r20
    385e:	15 1f       	adc	r17, r21
    3860:	c1 ff       	sbrs	r28, 1
    3862:	07 c0       	rjmp	.+14     	; 0x3872 <strtod+0x1de>
    3864:	e1 14       	cp	r14, r1
    3866:	f1 04       	cpc	r15, r1
    3868:	21 f0       	breq	.+8      	; 0x3872 <strtod+0x1de>
    386a:	31 97       	sbiw	r30, 0x01	; 1
    386c:	d7 01       	movw	r26, r14
    386e:	ed 93       	st	X+, r30
    3870:	fc 93       	st	X, r31
    3872:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__floatunsisf>
    3876:	c3 70       	andi	r28, 0x03	; 3
    3878:	c3 30       	cpi	r28, 0x03	; 3
    387a:	19 f0       	breq	.+6      	; 0x3882 <strtod+0x1ee>
    387c:	6b 01       	movw	r12, r22
    387e:	7c 01       	movw	r14, r24
    3880:	06 c0       	rjmp	.+12     	; 0x388e <strtod+0x1fa>
    3882:	6b 01       	movw	r12, r22
    3884:	7c 01       	movw	r14, r24
    3886:	f7 fa       	bst	r15, 7
    3888:	f0 94       	com	r15
    388a:	f7 f8       	bld	r15, 7
    388c:	f0 94       	com	r15
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	a9 01       	movw	r20, r18
    3894:	c7 01       	movw	r24, r14
    3896:	b6 01       	movw	r22, r12
    3898:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
    389c:	88 23       	and	r24, r24
    389e:	09 f4       	brne	.+2      	; 0x38a2 <strtod+0x20e>
    38a0:	45 c0       	rjmp	.+138    	; 0x392c <strtod+0x298>
    38a2:	17 ff       	sbrs	r17, 7
    38a4:	06 c0       	rjmp	.+12     	; 0x38b2 <strtod+0x21e>
    38a6:	11 95       	neg	r17
    38a8:	01 95       	neg	r16
    38aa:	11 09       	sbc	r17, r1
    38ac:	c5 eb       	ldi	r28, 0xB5	; 181
    38ae:	d0 e0       	ldi	r29, 0x00	; 0
    38b0:	02 c0       	rjmp	.+4      	; 0x38b6 <strtod+0x222>
    38b2:	cd ec       	ldi	r28, 0xCD	; 205
    38b4:	d0 e0       	ldi	r29, 0x00	; 0
    38b6:	5e 01       	movw	r10, r28
    38b8:	b8 e1       	ldi	r27, 0x18	; 24
    38ba:	ab 1a       	sub	r10, r27
    38bc:	b1 08       	sbc	r11, r1
    38be:	46 01       	movw	r8, r12
    38c0:	be 2d       	mov	r27, r14
    38c2:	af 2d       	mov	r26, r15
    38c4:	90 e2       	ldi	r25, 0x20	; 32
    38c6:	e9 2e       	mov	r14, r25
    38c8:	f1 2c       	mov	r15, r1
    38ca:	0e 15       	cp	r16, r14
    38cc:	1f 05       	cpc	r17, r15
    38ce:	84 f0       	brlt	.+32     	; 0x38f0 <strtod+0x25c>
    38d0:	fe 01       	movw	r30, r28
    38d2:	25 91       	lpm	r18, Z+
    38d4:	35 91       	lpm	r19, Z+
    38d6:	45 91       	lpm	r20, Z+
    38d8:	54 91       	lpm	r21, Z
    38da:	b4 01       	movw	r22, r8
    38dc:	8b 2f       	mov	r24, r27
    38de:	9a 2f       	mov	r25, r26
    38e0:	0e 94 36 0b 	call	0x166c	; 0x166c <__mulsf3>
    38e4:	4b 01       	movw	r8, r22
    38e6:	b8 2f       	mov	r27, r24
    38e8:	a9 2f       	mov	r26, r25
    38ea:	0e 19       	sub	r16, r14
    38ec:	1f 09       	sbc	r17, r15
    38ee:	ed cf       	rjmp	.-38     	; 0x38ca <strtod+0x236>
    38f0:	24 97       	sbiw	r28, 0x04	; 4
    38f2:	f5 94       	asr	r15
    38f4:	e7 94       	ror	r14
    38f6:	ca 15       	cp	r28, r10
    38f8:	db 05       	cpc	r29, r11
    38fa:	39 f7       	brne	.-50     	; 0x38ca <strtod+0x236>
    38fc:	64 01       	movw	r12, r8
    38fe:	eb 2e       	mov	r14, r27
    3900:	fa 2e       	mov	r15, r26
    3902:	8e 2d       	mov	r24, r14
    3904:	88 0f       	add	r24, r24
    3906:	8f 2d       	mov	r24, r15
    3908:	88 1f       	adc	r24, r24
    390a:	8f 3f       	cpi	r24, 0xFF	; 255
    390c:	49 f0       	breq	.+18     	; 0x3920 <strtod+0x28c>
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	a9 01       	movw	r20, r18
    3914:	c7 01       	movw	r24, r14
    3916:	b6 01       	movw	r22, r12
    3918:	0e 94 a3 09 	call	0x1346	; 0x1346 <__cmpsf2>
    391c:	81 11       	cpse	r24, r1
    391e:	06 c0       	rjmp	.+12     	; 0x392c <strtod+0x298>
    3920:	82 e2       	ldi	r24, 0x22	; 34
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <errno+0x1>
    3928:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <errno>
    392c:	c7 01       	movw	r24, r14
    392e:	b6 01       	movw	r22, r12
    3930:	09 c0       	rjmp	.+18     	; 0x3944 <strtod+0x2b0>
    3932:	60 e0       	ldi	r22, 0x00	; 0
    3934:	70 e0       	ldi	r23, 0x00	; 0
    3936:	80 e8       	ldi	r24, 0x80	; 128
    3938:	9f ef       	ldi	r25, 0xFF	; 255
    393a:	04 c0       	rjmp	.+8      	; 0x3944 <strtod+0x2b0>
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	70 e0       	ldi	r23, 0x00	; 0
    3940:	80 ec       	ldi	r24, 0xC0	; 192
    3942:	9f e7       	ldi	r25, 0x7F	; 127
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
    3948:	ee e0       	ldi	r30, 0x0E	; 14
    394a:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__epilogue_restores__+0x8>

0000394e <__ctype_isfalse>:
    394e:	99 27       	eor	r25, r25
    3950:	88 27       	eor	r24, r24

00003952 <__ctype_istrue>:
    3952:	08 95       	ret

00003954 <strncasecmp_P>:
    3954:	fb 01       	movw	r30, r22
    3956:	dc 01       	movw	r26, r24
    3958:	41 50       	subi	r20, 0x01	; 1
    395a:	50 40       	sbci	r21, 0x00	; 0
    395c:	88 f0       	brcs	.+34     	; 0x3980 <strncasecmp_P+0x2c>
    395e:	8d 91       	ld	r24, X+
    3960:	81 34       	cpi	r24, 0x41	; 65
    3962:	1c f0       	brlt	.+6      	; 0x396a <strncasecmp_P+0x16>
    3964:	8b 35       	cpi	r24, 0x5B	; 91
    3966:	0c f4       	brge	.+2      	; 0x396a <strncasecmp_P+0x16>
    3968:	80 5e       	subi	r24, 0xE0	; 224
    396a:	65 91       	lpm	r22, Z+
    396c:	61 34       	cpi	r22, 0x41	; 65
    396e:	1c f0       	brlt	.+6      	; 0x3976 <strncasecmp_P+0x22>
    3970:	6b 35       	cpi	r22, 0x5B	; 91
    3972:	0c f4       	brge	.+2      	; 0x3976 <strncasecmp_P+0x22>
    3974:	60 5e       	subi	r22, 0xE0	; 224
    3976:	86 1b       	sub	r24, r22
    3978:	61 11       	cpse	r22, r1
    397a:	71 f3       	breq	.-36     	; 0x3958 <strncasecmp_P+0x4>
    397c:	99 0b       	sbc	r25, r25
    397e:	08 95       	ret
    3980:	88 1b       	sub	r24, r24
    3982:	fc cf       	rjmp	.-8      	; 0x397c <strncasecmp_P+0x28>

00003984 <__muluhisi3>:
    3984:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__umulhisi3>
    3988:	a5 9f       	mul	r26, r21
    398a:	90 0d       	add	r25, r0
    398c:	b4 9f       	mul	r27, r20
    398e:	90 0d       	add	r25, r0
    3990:	a4 9f       	mul	r26, r20
    3992:	80 0d       	add	r24, r0
    3994:	91 1d       	adc	r25, r1
    3996:	11 24       	eor	r1, r1
    3998:	08 95       	ret

0000399a <__prologue_saves__>:
    399a:	2f 92       	push	r2
    399c:	3f 92       	push	r3
    399e:	4f 92       	push	r4
    39a0:	5f 92       	push	r5
    39a2:	6f 92       	push	r6
    39a4:	7f 92       	push	r7
    39a6:	8f 92       	push	r8
    39a8:	9f 92       	push	r9
    39aa:	af 92       	push	r10
    39ac:	bf 92       	push	r11
    39ae:	cf 92       	push	r12
    39b0:	df 92       	push	r13
    39b2:	ef 92       	push	r14
    39b4:	ff 92       	push	r15
    39b6:	0f 93       	push	r16
    39b8:	1f 93       	push	r17
    39ba:	cf 93       	push	r28
    39bc:	df 93       	push	r29
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    39c2:	ca 1b       	sub	r28, r26
    39c4:	db 0b       	sbc	r29, r27
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	f8 94       	cli
    39ca:	de bf       	out	0x3e, r29	; 62
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	09 94       	ijmp

000039d2 <__epilogue_restores__>:
    39d2:	2a 88       	ldd	r2, Y+18	; 0x12
    39d4:	39 88       	ldd	r3, Y+17	; 0x11
    39d6:	48 88       	ldd	r4, Y+16	; 0x10
    39d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    39da:	6e 84       	ldd	r6, Y+14	; 0x0e
    39dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    39de:	8c 84       	ldd	r8, Y+12	; 0x0c
    39e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    39e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    39e4:	b9 84       	ldd	r11, Y+9	; 0x09
    39e6:	c8 84       	ldd	r12, Y+8	; 0x08
    39e8:	df 80       	ldd	r13, Y+7	; 0x07
    39ea:	ee 80       	ldd	r14, Y+6	; 0x06
    39ec:	fd 80       	ldd	r15, Y+5	; 0x05
    39ee:	0c 81       	ldd	r16, Y+4	; 0x04
    39f0:	1b 81       	ldd	r17, Y+3	; 0x03
    39f2:	aa 81       	ldd	r26, Y+2	; 0x02
    39f4:	b9 81       	ldd	r27, Y+1	; 0x01
    39f6:	ce 0f       	add	r28, r30
    39f8:	d1 1d       	adc	r29, r1
    39fa:	0f b6       	in	r0, 0x3f	; 63
    39fc:	f8 94       	cli
    39fe:	de bf       	out	0x3e, r29	; 62
    3a00:	0f be       	out	0x3f, r0	; 63
    3a02:	cd bf       	out	0x3d, r28	; 61
    3a04:	ed 01       	movw	r28, r26
    3a06:	08 95       	ret

00003a08 <__umulhisi3>:
    3a08:	a2 9f       	mul	r26, r18
    3a0a:	b0 01       	movw	r22, r0
    3a0c:	b3 9f       	mul	r27, r19
    3a0e:	c0 01       	movw	r24, r0
    3a10:	a3 9f       	mul	r26, r19
    3a12:	70 0d       	add	r23, r0
    3a14:	81 1d       	adc	r24, r1
    3a16:	11 24       	eor	r1, r1
    3a18:	91 1d       	adc	r25, r1
    3a1a:	b2 9f       	mul	r27, r18
    3a1c:	70 0d       	add	r23, r0
    3a1e:	81 1d       	adc	r24, r1
    3a20:	11 24       	eor	r1, r1
    3a22:	91 1d       	adc	r25, r1
    3a24:	08 95       	ret

00003a26 <__do_global_dtors>:
    3a26:	10 e0       	ldi	r17, 0x00	; 0
    3a28:	c4 e9       	ldi	r28, 0x94	; 148
    3a2a:	d0 e0       	ldi	r29, 0x00	; 0
    3a2c:	04 c0       	rjmp	.+8      	; 0x3a36 <__do_global_dtors+0x10>
    3a2e:	fe 01       	movw	r30, r28
    3a30:	0e 94 f5 18 	call	0x31ea	; 0x31ea <__tablejump2__>
    3a34:	21 96       	adiw	r28, 0x01	; 1
    3a36:	c5 39       	cpi	r28, 0x95	; 149
    3a38:	d1 07       	cpc	r29, r17
    3a3a:	c9 f7       	brne	.-14     	; 0x3a2e <__do_global_dtors+0x8>
    3a3c:	f8 94       	cli

00003a3e <__stop_program>:
    3a3e:	ff cf       	rjmp	.-2      	; 0x3a3e <__stop_program>
