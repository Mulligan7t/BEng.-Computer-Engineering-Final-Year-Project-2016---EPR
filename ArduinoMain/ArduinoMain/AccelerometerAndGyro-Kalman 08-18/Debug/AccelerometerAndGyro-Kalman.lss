
AccelerometerAndGyro-Kalman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  00003712  000037a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000219  0080022e  0080022e  000038d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000038d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000890  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012db9  00000000  00000000  000041d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d3c  00000000  00000000  00016f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000045d8  00000000  00000000  00019cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ad0  00000000  00000000  0001e2a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000032b2  00000000  00000000  0001fd74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008fd9  00000000  00000000  00023026  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000898  00000000  00000000  0002bfff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 00 	jmp	0xee	; 0xee <__dtors_end>
       4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
       8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
       c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      40:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__vector_16>
      44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      48:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__vector_18>
      4c:	0c 94 a5 0d 	jmp	0x1b4a	; 0x1b4a <__vector_19>
      50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      54:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      60:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__vector_24>
      64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	00 00       	nop
      98:	00 08       	sbc	r0, r0
      9a:	00 02       	muls	r16, r16
      9c:	01 00       	.word	0x0001	; ????
      9e:	00 03       	mulsu	r16, r16
      a0:	04 07       	cpc	r16, r20
	...

000000aa <digital_pin_to_bit_mask_PGM>:
      aa:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      ba:	04 08 10 20                                         ... 

000000be <digital_pin_to_port_PGM>:
      be:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ce:	03 03 03 03                                         ....

000000d2 <port_to_output_PGM>:
      d2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000dc <port_to_mode_PGM>:
      dc:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000e6 <__ctors_start>:
      e6:	fd 01       	movw	r30, r26
      e8:	d5 0d       	add	r29, r5
      ea:	c1 16       	cp	r12, r17

000000ec <__ctors_end>:
      ec:	19 02       	muls	r17, r25

000000ee <__dtors_end>:
      ee:	11 24       	eor	r1, r1
      f0:	1f be       	out	0x3f, r1	; 63
      f2:	cf ef       	ldi	r28, 0xFF	; 255
      f4:	d8 e0       	ldi	r29, 0x08	; 8
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	cd bf       	out	0x3d, r28	; 61

000000fa <__do_copy_data>:
      fa:	12 e0       	ldi	r17, 0x02	; 2
      fc:	a0 e0       	ldi	r26, 0x00	; 0
      fe:	b1 e0       	ldi	r27, 0x01	; 1
     100:	e2 e1       	ldi	r30, 0x12	; 18
     102:	f7 e3       	ldi	r31, 0x37	; 55
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x10>
     106:	05 90       	lpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ae 32       	cpi	r26, 0x2E	; 46
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0xc>

00000110 <__do_clear_bss>:
     110:	24 e0       	ldi	r18, 0x04	; 4
     112:	ae e2       	ldi	r26, 0x2E	; 46
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a7 34       	cpi	r26, 0x47	; 71
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c6 e7       	ldi	r28, 0x76	; 118
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	04 c0       	rjmp	.+8      	; 0x130 <__do_global_ctors+0x10>
     128:	21 97       	sbiw	r28, 0x01	; 1
     12a:	fe 01       	movw	r30, r28
     12c:	0e 94 29 19 	call	0x3252	; 0x3252 <__tablejump2__>
     130:	c3 37       	cpi	r28, 0x73	; 115
     132:	d1 07       	cpc	r29, r17
     134:	c9 f7       	brne	.-14     	; 0x128 <__do_global_ctors+0x8>
     136:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <main>
     13a:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__do_global_dtors>

0000013e <__bad_interrupt>:
     13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
	digitalWrite(dir2PinLB, LOW);

	digitalWrite(dir1PinRF, LOW);
	digitalWrite(dir2PinRF, LOW);
	digitalWrite(dir1PinRB, LOW);
	digitalWrite(dir2PinRB, LOW);
     142:	08 95       	ret

00000144 <_ZN7TwoWire5writeEi>:
     144:	dc 01       	movw	r26, r24
     146:	ed 91       	ld	r30, X+
     148:	fc 91       	ld	r31, X
     14a:	01 90       	ld	r0, Z+
     14c:	f0 81       	ld	r31, Z
     14e:	e0 2d       	mov	r30, r0
     150:	09 94       	ijmp

00000152 <_Z10MotorsInitv>:
     152:	61 e0       	ldi	r22, 0x01	; 1
     154:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dir1PinLF>
     158:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
     15c:	61 e0       	ldi	r22, 0x01	; 1
     15e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dir2PinLF>
     162:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <speedPinLF>
     16c:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dir1PinRF>
     176:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
     17a:	61 e0       	ldi	r22, 0x01	; 1
     17c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dir2PinRF>
     180:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
     184:	61 e0       	ldi	r22, 0x01	; 1
     186:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <speedPinRF>
     18a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dir1PinLB>
     194:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
     198:	61 e0       	ldi	r22, 0x01	; 1
     19a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dir2PinLB>
     19e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
     1a2:	61 e0       	ldi	r22, 0x01	; 1
     1a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <speedPinLB>
     1a8:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir1PinRB>
     1b2:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dir2PinRB>
     1bc:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <speedPinRB>
     1c6:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <pinMode>

000001ca <_Z7forwardv>:
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dir1PinLF>
     1d0:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dir2PinLF>
     1da:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     1de:	61 e0       	ldi	r22, 0x01	; 1
     1e0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dir1PinRF>
     1e4:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dir2PinRF>
     1ee:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dir1PinLB>
     1f8:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dir2PinLB>
     202:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir1PinRB>
     20c:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dir2PinRB>
     216:	0c 94 ae 11 	jmp	0x235c	; 0x235c <digitalWrite>

0000021a <_Z7reversev>:
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dir1PinLF>
     220:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     224:	61 e0       	ldi	r22, 0x01	; 1
     226:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dir2PinLF>
     22a:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dir1PinLB>
     234:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dir2PinLB>
     23e:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dir1PinRF>
     248:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dir2PinRF>
     252:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir1PinRB>
     25c:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     260:	61 e0       	ldi	r22, 0x01	; 1
     262:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dir2PinRB>
     266:	0c 94 ae 11 	jmp	0x235c	; 0x235c <digitalWrite>

0000026a <_Z4leftv>:
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dir1PinLF>
     270:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dir2PinLF>
     27a:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     27e:	61 e0       	ldi	r22, 0x01	; 1
     280:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dir1PinRF>
     284:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dir2PinRF>
     28e:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dir1PinLB>
     298:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dir2PinLB>
     2a2:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir1PinRB>
     2ac:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dir2PinRB>
     2b6:	0c 94 ae 11 	jmp	0x235c	; 0x235c <digitalWrite>

000002ba <_Z5rightv>:
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dir1PinLF>
     2c0:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dir2PinLF>
     2ca:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dir1PinRF>
     2d4:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dir2PinRF>
     2de:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dir1PinLB>
     2e8:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dir2PinLB>
     2f2:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir1PinRB>
     2fc:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dir2PinRB>
     306:	0c 94 ae 11 	jmp	0x235c	; 0x235c <digitalWrite>

0000030a <_Z8turnleftv>:
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dir1PinLF>
     310:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     314:	61 e0       	ldi	r22, 0x01	; 1
     316:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dir2PinLF>
     31a:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dir1PinLB>
     324:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dir2PinLB>
     32e:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     332:	61 e0       	ldi	r22, 0x01	; 1
     334:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dir1PinRF>
     338:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dir2PinRF>
     342:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir1PinRB>
     34c:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dir2PinRB>
     356:	0c 94 ae 11 	jmp	0x235c	; 0x235c <digitalWrite>

0000035a <_Z9turnrightv>:
     35a:	61 e0       	ldi	r22, 0x01	; 1
     35c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dir1PinLF>
     360:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dir2PinLF>
     36a:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dir1PinLB>
     374:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dir2PinLB>
     37e:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dir1PinRF>
     388:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dir2PinRF>
     392:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir1PinRB>
     39c:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dir2PinRB>
     3a6:	0c 94 ae 11 	jmp	0x235c	; 0x235c <digitalWrite>

000003aa <_Z4stopv>:
}

void stop(){
	digitalWrite(dir1PinLF, HIGH);
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dir1PinLF>
     3b0:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
	digitalWrite(dir2PinLF, HIGH);
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dir2PinLF>
     3ba:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
	digitalWrite(dir1PinLB, HIGH);
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <dir1PinLB>
     3c4:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
	digitalWrite(dir2PinLB, HIGH);
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dir2PinLB>
     3ce:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>

	digitalWrite(dir1PinRF, HIGH);
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dir1PinRF>
     3d8:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
	digitalWrite(dir2PinRF, HIGH);
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dir2PinRF>
     3e2:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
	digitalWrite(dir1PinRB, HIGH);
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <dir1PinRB>
     3ec:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
	digitalWrite(dir2PinRB, HIGH);
     3f0:	61 e0       	ldi	r22, 0x01	; 1
     3f2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <dir2PinRB>
     3f6:	0c 94 ae 11 	jmp	0x235c	; 0x235c <digitalWrite>

000003fa <_GLOBAL__sub_I_mag>:
//End of Auto generated function prototypes by Atmel Studio



/* Assign a unique ID to this sensor at the same time */
Adafruit_HMC5883_Unified mag = Adafruit_HMC5883_Unified(12345);
     3fa:	49 e3       	ldi	r20, 0x39	; 57
     3fc:	50 e3       	ldi	r21, 0x30	; 48
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	85 ec       	ldi	r24, 0xC5	; 197
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	0e 94 c8 12 	call	0x2590	; 0x2590 <_ZN24Adafruit_HMC5883_UnifiedC1El>
int g_offy = 20;
int g_offz = 93;
int truetemp;
uint32_t timer;

Kalman kalmanX; // Create the Kalman instances
     40a:	87 e9       	ldi	r24, 0x97	; 151
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_ZN6KalmanC1Ev>
Kalman kalmanY;
     412:	8f e6       	ldi	r24, 0x6F	; 111
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_ZN6KalmanC1Ev>
double kalAngleX, kalAngleY; // Calculated angle using a Kalman filter
float headingDegrees;

int d = 100;
int speedall = 255;
String inputString = "";         // a string to hold incoming data
     41a:	68 ef       	ldi	r22, 0xF8	; 248
     41c:	71 e0       	ldi	r23, 0x01	; 1
     41e:	85 e3       	ldi	r24, 0x35	; 53
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN6StringC1EPKc>
boolean stringComplete = false;  // whether the string is complete
String newlinechar = "\n\r";
     426:	63 eb       	ldi	r22, 0xB3	; 179
     428:	71 e0       	ldi	r23, 0x01	; 1
     42a:	8e e2       	ldi	r24, 0x2E	; 46
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <_ZN6StringC1EPKc>

00000432 <_GLOBAL__sub_D_mag>:
     432:	8e e2       	ldi	r24, 0x2E	; 46
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	0e 94 de 11 	call	0x23bc	; 0x23bc <_ZN6StringD1Ev>
double kalAngleX, kalAngleY; // Calculated angle using a Kalman filter
float headingDegrees;

int d = 100;
int speedall = 255;
String inputString = "";         // a string to hold incoming data
     43a:	85 e3       	ldi	r24, 0x35	; 53
     43c:	92 e0       	ldi	r25, 0x02	; 2
     43e:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <_ZN6StringD1Ev>

00000442 <_Z17AccelerometerInitv>:
	pinMode(dir2PinRB, OUTPUT);
	pinMode(speedPinRB, OUTPUT);
}

void AccelerometerInit()
{
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
	Wire.beginTransmission(0x40); // address of the accelerometer
     446:	60 e4       	ldi	r22, 0x40	; 64
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	83 e8       	ldi	r24, 0x83	; 131
     44c:	93 e0       	ldi	r25, 0x03	; 3
     44e:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7TwoWire17beginTransmissionEi>
	// reset the accelerometer
	Wire.write(0x10);
     452:	60 e1       	ldi	r22, 0x10	; 16
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	83 e8       	ldi	r24, 0x83	; 131
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	Wire.write(0xB6);
     45e:	66 eb       	ldi	r22, 0xB6	; 182
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	83 e8       	ldi	r24, 0x83	; 131
     464:	93 e0       	ldi	r25, 0x03	; 3
     466:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     46a:	83 e8       	ldi	r24, 0x83	; 131
     46c:	93 e0       	ldi	r25, 0x03	; 3
     46e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>
	delay(10);
     472:	6a e0       	ldi	r22, 0x0A	; 10
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <delay>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     47e:	60 e4       	ldi	r22, 0x40	; 64
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	83 e8       	ldi	r24, 0x83	; 131
     484:	93 e0       	ldi	r25, 0x03	; 3
     486:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7TwoWire17beginTransmissionEi>
	// low pass filter, range settings
	Wire.write(0x0D);
     48a:	6d e0       	ldi	r22, 0x0D	; 13
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	83 e8       	ldi	r24, 0x83	; 131
     490:	93 e0       	ldi	r25, 0x03	; 3
     492:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	Wire.write(0x10);
     496:	60 e1       	ldi	r22, 0x10	; 16
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	83 e8       	ldi	r24, 0x83	; 131
     49c:	93 e0       	ldi	r25, 0x03	; 3
     49e:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     4a2:	83 e8       	ldi	r24, 0x83	; 131
     4a4:	93 e0       	ldi	r25, 0x03	; 3
     4a6:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     4aa:	60 e4       	ldi	r22, 0x40	; 64
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	83 e8       	ldi	r24, 0x83	; 131
     4b0:	93 e0       	ldi	r25, 0x03	; 3
     4b2:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x20); // read from here
     4b6:	60 e2       	ldi	r22, 0x20	; 32
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	83 e8       	ldi	r24, 0x83	; 131
     4bc:	93 e0       	ldi	r25, 0x03	; 3
     4be:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     4c2:	83 e8       	ldi	r24, 0x83	; 131
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 1);
     4ca:	41 e0       	ldi	r20, 0x01	; 1
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	60 e4       	ldi	r22, 0x40	; 64
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	83 e8       	ldi	r24, 0x83	; 131
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN7TwoWire11requestFromEii>
	byte data = Wire.read();
     4da:	83 e8       	ldi	r24, 0x83	; 131
     4dc:	93 e0       	ldi	r25, 0x03	; 3
     4de:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
     4e2:	ec 01       	movw	r28, r24

	Wire.beginTransmission(0x40); // address of the accelerometer
     4e4:	60 e4       	ldi	r22, 0x40	; 64
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	83 e8       	ldi	r24, 0x83	; 131
     4ea:	93 e0       	ldi	r25, 0x03	; 3
     4ec:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x20);
     4f0:	60 e2       	ldi	r22, 0x20	; 32
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	83 e8       	ldi	r24, 0x83	; 131
     4f6:	93 e0       	ldi	r25, 0x03	; 3
     4f8:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	//	Wire.write(data & 0x0F); // low pass filter to 10 Hz
	Wire.write(data & 0x0F); // low pass filter to 10 Hz
     4fc:	be 01       	movw	r22, r28
     4fe:	6f 70       	andi	r22, 0x0F	; 15
     500:	77 27       	eor	r23, r23
     502:	83 e8       	ldi	r24, 0x83	; 131
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     50a:	83 e8       	ldi	r24, 0x83	; 131
     50c:	93 e0       	ldi	r25, 0x03	; 3
     50e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(0x40); // address of the accelerometer
     512:	60 e4       	ldi	r22, 0x40	; 64
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	83 e8       	ldi	r24, 0x83	; 131
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x35); // read from here
     51e:	65 e3       	ldi	r22, 0x35	; 53
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	83 e8       	ldi	r24, 0x83	; 131
     524:	93 e0       	ldi	r25, 0x03	; 3
     526:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     52a:	83 e8       	ldi	r24, 0x83	; 131
     52c:	93 e0       	ldi	r25, 0x03	; 3
     52e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 1);
     532:	41 e0       	ldi	r20, 0x01	; 1
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	60 e4       	ldi	r22, 0x40	; 64
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	83 e8       	ldi	r24, 0x83	; 131
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     542:	83 e8       	ldi	r24, 0x83	; 131
     544:	93 e0       	ldi	r25, 0x03	; 3
     546:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
     54a:	ec 01       	movw	r28, r24
	Wire.beginTransmission(0x40); // address of the accelerometer
     54c:	60 e4       	ldi	r22, 0x40	; 64
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	83 e8       	ldi	r24, 0x83	; 131
     552:	93 e0       	ldi	r25, 0x03	; 3
     554:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x35);
     558:	65 e3       	ldi	r22, 0x35	; 53
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	83 e8       	ldi	r24, 0x83	; 131
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	Wire.write((data & 0xF1) | 0x04); // range +/- 2g
     564:	be 01       	movw	r22, r28
     566:	61 7f       	andi	r22, 0xF1	; 241
     568:	77 27       	eor	r23, r23
     56a:	64 60       	ori	r22, 0x04	; 4
     56c:	83 e8       	ldi	r24, 0x83	; 131
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     574:	83 e8       	ldi	r24, 0x83	; 131
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(0x40); // address of the accelerometer
     57c:	60 e4       	ldi	r22, 0x40	; 64
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	83 e8       	ldi	r24, 0x83	; 131
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x30);
     588:	60 e3       	ldi	r22, 0x30	; 48
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	83 e8       	ldi	r24, 0x83	; 131
     58e:	93 e0       	ldi	r25, 0x03	; 3
     590:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	//Wire.write(0x); //
	Wire.endTransmission();
     594:	83 e8       	ldi	r24, 0x83	; 131
     596:	93 e0       	ldi	r25, 0x03	; 3

	//Serial.println(data, BIN);

}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
	Wire.endTransmission();

	Wire.beginTransmission(0x40); // address of the accelerometer
	Wire.write(0x30);
	//Wire.write(0x); //
	Wire.endTransmission();
     59c:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>

000005a0 <_Z17AccelerometerReadv>:
	//Serial.println(data, BIN);

}

void AccelerometerRead()
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
	Wire.beginTransmission(0x40); // address of the accelerometer
     5a4:	60 e4       	ldi	r22, 0x40	; 64
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	83 e8       	ldi	r24, 0x83	; 131
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x02); // set read pointer to data
     5b0:	62 e0       	ldi	r22, 0x02	; 2
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	83 e8       	ldi	r24, 0x83	; 131
     5b6:	93 e0       	ldi	r25, 0x03	; 3
     5b8:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     5bc:	83 e8       	ldi	r24, 0x83	; 131
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(0x40, 6);
     5c4:	46 e0       	ldi	r20, 0x06	; 6
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	60 e4       	ldi	r22, 0x40	; 64
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	83 e8       	ldi	r24, 0x83	; 131
     5ce:	93 e0       	ldi	r25, 0x03	; 3
     5d0:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN7TwoWire11requestFromEii>
	
	// read in the 3 axis data, each one is 16 bits
	// print the data to terminal
	
	short data = Wire.read();
     5d4:	83 e8       	ldi	r24, 0x83	; 131
     5d6:	93 e0       	ldi	r25, 0x03	; 3
     5d8:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
     5dc:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     5de:	83 e8       	ldi	r24, 0x83	; 131
     5e0:	93 e0       	ldi	r25, 0x03	; 3
     5e2:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	78 2f       	mov	r23, r24
     5ec:	6c 0f       	add	r22, r28
     5ee:	7d 1f       	adc	r23, r29
	accX = data;
     5f0:	07 2e       	mov	r0, r23
     5f2:	00 0c       	add	r0, r0
     5f4:	88 0b       	sbc	r24, r24
     5f6:	99 0b       	sbc	r25, r25
     5f8:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatsisf>
     5fc:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <accX>
     600:	70 93 6c 02 	sts	0x026C, r23	; 0x80026c <accX+0x1>
     604:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <accX+0x2>
     608:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <accX+0x3>
	data = Wire.read();
     60c:	83 e8       	ldi	r24, 0x83	; 131
     60e:	93 e0       	ldi	r25, 0x03	; 3
     610:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
     614:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     616:	83 e8       	ldi	r24, 0x83	; 131
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	78 2f       	mov	r23, r24
     624:	6c 0f       	add	r22, r28
     626:	7d 1f       	adc	r23, r29
	accY = data;
     628:	07 2e       	mov	r0, r23
     62a:	00 0c       	add	r0, r0
     62c:	88 0b       	sbc	r24, r24
     62e:	99 0b       	sbc	r25, r25
     630:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatsisf>
     634:	60 93 67 02 	sts	0x0267, r22	; 0x800267 <accY>
     638:	70 93 68 02 	sts	0x0268, r23	; 0x800268 <accY+0x1>
     63c:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <accY+0x2>
     640:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <accY+0x3>
	data = Wire.read();
     644:	83 e8       	ldi	r24, 0x83	; 131
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
     64c:	ec 01       	movw	r28, r24
	data += Wire.read() << 8;
     64e:	83 e8       	ldi	r24, 0x83	; 131
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	78 2f       	mov	r23, r24
     65c:	6c 0f       	add	r22, r28
     65e:	7d 1f       	adc	r23, r29
	accZ = data;
     660:	07 2e       	mov	r0, r23
     662:	00 0c       	add	r0, r0
     664:	88 0b       	sbc	r24, r24
     666:	99 0b       	sbc	r25, r25
     668:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatsisf>
     66c:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <accZ>
     670:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <accZ+0x1>
     674:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <accZ+0x2>
     678:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <accZ+0x3>
	Serial.print(" , Z = ");
	Serial.print(accZ);
	Serial.println();
	#endif

}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <_Z7writeToihh>:

	
}

//Writes val to address register on ACC
void writeTo(int DEVICE, byte address, byte val) {
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	1f 92       	push	r1
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	16 2f       	mov	r17, r22
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     690:	bc 01       	movw	r22, r24
     692:	83 e8       	ldi	r24, 0x83	; 131
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	49 83       	std	Y+1, r20	; 0x01
     698:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);        // send register address
     69c:	61 2f       	mov	r22, r17
     69e:	83 e8       	ldi	r24, 0x83	; 131
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN7TwoWire5writeEh>
	Wire.write(val);        // send value to write
     6a6:	49 81       	ldd	r20, Y+1	; 0x01
     6a8:	64 2f       	mov	r22, r20
     6aa:	83 e8       	ldi	r24, 0x83	; 131
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN7TwoWire5writeEh>
	Wire.endTransmission(); //end transmission
     6b2:	83 e8       	ldi	r24, 0x83	; 131
     6b4:	93 e0       	ldi	r25, 0x03	; 3
}
     6b6:	0f 90       	pop	r0
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
//Writes val to address register on ACC
void writeTo(int DEVICE, byte address, byte val) {
	Wire.beginTransmission(DEVICE); //start transmission to ACC
	Wire.write(address);        // send register address
	Wire.write(val);        // send value to write
	Wire.endTransmission(); //end transmission
     6be:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>

000006c2 <_Z8GyroInitv>:
	* sample rate to = 125Hz
	* parameter to +/- 2000 degrees/sec
	* low pass filter = 5Hz
	* no interrupt
	******************************************/
	writeTo(GYRO, G_PWR_MGM, 0x00);
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	6e e3       	ldi	r22, 0x3E	; 62
     6c6:	88 e6       	ldi	r24, 0x68	; 104
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 41 03 	call	0x682	; 0x682 <_Z7writeToihh>
	writeTo(GYRO, G_SMPLRT_DIV, 0x07); // EB, 50, 80, 7F, DE, 23, 20, FF
     6ce:	47 e0       	ldi	r20, 0x07	; 7
     6d0:	65 e1       	ldi	r22, 0x15	; 21
     6d2:	88 e6       	ldi	r24, 0x68	; 104
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 41 03 	call	0x682	; 0x682 <_Z7writeToihh>
	writeTo(GYRO, G_DLPF_FS, 0x1E); // +/- 2000 dgrs/sec, 1KHz, 1E, 19
     6da:	4e e1       	ldi	r20, 0x1E	; 30
     6dc:	66 e1       	ldi	r22, 0x16	; 22
     6de:	88 e6       	ldi	r24, 0x68	; 104
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 41 03 	call	0x682	; 0x682 <_Z7writeToihh>
	writeTo(GYRO, G_INT_CFG, 0x00);
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	67 e1       	ldi	r22, 0x17	; 23
     6ea:	88 e6       	ldi	r24, 0x68	; 104
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0c 94 41 03 	jmp	0x682	; 0x682 <_Z7writeToihh>

000006f2 <setup>:

//initializes the gyroscope
void setup()
{
	#if 1
	newlinechar = "\n";
     6f2:	67 ef       	ldi	r22, 0xF7	; 247
     6f4:	71 e0       	ldi	r23, 0x01	; 1
     6f6:	8e e2       	ldi	r24, 0x2E	; 46
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	0e 94 61 12 	call	0x24c2	; 0x24c2 <_ZN6StringaSEPKc>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     6fe:	26 e0       	ldi	r18, 0x06	; 6
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	52 ec       	ldi	r21, 0xC2	; 194
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	8d ed       	ldi	r24, 0xDD	; 221
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN14HardwareSerial5beginEmh>
	#endif
	
	Serial.begin(115200);
	Wire.begin();
     710:	83 e8       	ldi	r24, 0x83	; 131
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZN7TwoWire5beginEv>

	MotorsInit();
     718:	0e 94 a9 00 	call	0x152	; 0x152 <_Z10MotorsInitv>
	AccelerometerInit();
     71c:	0e 94 21 02 	call	0x442	; 0x442 <_Z17AccelerometerInitv>
	GyroInit();
     720:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_Z8GyroInitv>
	inputString.reserve(200); // reserve 200 bytes for the inputString:
     724:	68 ec       	ldi	r22, 0xC8	; 200
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	85 e3       	ldi	r24, 0x35	; 53
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN6String7reserveEj>

	timer = micros();
     730:	0e 94 4e 10 	call	0x209c	; 0x209c <micros>
     734:	60 93 bf 02 	sts	0x02BF, r22	; 0x8002bf <timer>
     738:	70 93 c0 02 	sts	0x02C0, r23	; 0x8002c0 <timer+0x1>
     73c:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <timer+0x2>
     740:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <timer+0x3>
     744:	08 95       	ret

00000746 <_Z8readFromihiPh>:
	Wire.write(val);        // send value to write
	Wire.endTransmission(); //end transmission
}

//reads num bytes starting from address register on ACC in to buff array
void readFrom(int DEVICE, byte address, int num, byte buff[]) {
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	00 d0       	rcall	.+0      	; 0x754 <_Z8readFromihiPh+0xe>
     754:	00 d0       	rcall	.+0      	; 0x756 <_Z8readFromihiPh+0x10>
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	7c 01       	movw	r14, r24
     75c:	16 2f       	mov	r17, r22
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     75e:	bc 01       	movw	r22, r24
     760:	83 e8       	ldi	r24, 0x83	; 131
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	2b 83       	std	Y+3, r18	; 0x03
     766:	3c 83       	std	Y+4, r19	; 0x04
     768:	49 83       	std	Y+1, r20	; 0x01
     76a:	5a 83       	std	Y+2, r21	; 0x02
     76c:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(address);        //sends address to read from
     770:	61 2f       	mov	r22, r17
     772:	83 e8       	ldi	r24, 0x83	; 131
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN7TwoWire5writeEh>
	Wire.endTransmission(); //end transmission
     77a:	83 e8       	ldi	r24, 0x83	; 131
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>
	
	Wire.beginTransmission(DEVICE); //start transmission to ACC
     782:	b7 01       	movw	r22, r14
     784:	83 e8       	ldi	r24, 0x83	; 131
     786:	93 e0       	ldi	r25, 0x03	; 3
     788:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <_ZN7TwoWire17beginTransmissionEi>
	Wire.requestFrom(DEVICE, num);    // request 6 bytes from ACC
     78c:	49 81       	ldd	r20, Y+1	; 0x01
     78e:	5a 81       	ldd	r21, Y+2	; 0x02
     790:	b7 01       	movw	r22, r14
     792:	83 e8       	ldi	r24, 0x83	; 131
     794:	93 e0       	ldi	r25, 0x03	; 3
     796:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZN7TwoWire11requestFromEii>
     79a:	2b 81       	ldd	r18, Y+3	; 0x03
     79c:	02 2f       	mov	r16, r18
     79e:	3c 81       	ldd	r19, Y+4	; 0x04
     7a0:	13 2f       	mov	r17, r19
	
	int i = 0;
	while(Wire.available())    //ACC may send less than requested (abnormal)
     7a2:	83 e8       	ldi	r24, 0x83	; 131
     7a4:	93 e0       	ldi	r25, 0x03	; 3
     7a6:	0e 94 90 15 	call	0x2b20	; 0x2b20 <_ZN7TwoWire9availableEv>
     7aa:	89 2b       	or	r24, r25
     7ac:	41 f0       	breq	.+16     	; 0x7be <_Z8readFromihiPh+0x78>
	{
		buff[i] = Wire.read(); // receive a byte
     7ae:	83 e8       	ldi	r24, 0x83	; 131
     7b0:	93 e0       	ldi	r25, 0x03	; 3
     7b2:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
     7b6:	f8 01       	movw	r30, r16
     7b8:	81 93       	st	Z+, r24
     7ba:	8f 01       	movw	r16, r30
     7bc:	f2 cf       	rjmp	.-28     	; 0x7a2 <_Z8readFromihiPh+0x5c>
		i++;
	}
	Wire.endTransmission(); //end transmission
     7be:	83 e8       	ldi	r24, 0x83	; 131
     7c0:	93 e0       	ldi	r25, 0x03	; 3
}
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
	while(Wire.available())    //ACC may send less than requested (abnormal)
	{
		buff[i] = Wire.read(); // receive a byte
		i++;
	}
	Wire.endTransmission(); //end transmission
     7d6:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>

000007da <_Z16getGyroscopeDataPi>:
	writeTo(GYRO, G_DLPF_FS, 0x1E); // +/- 2000 dgrs/sec, 1KHz, 1E, 19
	writeTo(GYRO, G_INT_CFG, 0x00);
}

void getGyroscopeData(int * result)
{
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	28 97       	sbiw	r28, 0x08	; 8
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	f8 94       	cli
     7ec:	de bf       	out	0x3e, r29	; 62
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	cd bf       	out	0x3d, r28	; 61
     7f2:	8c 01       	movw	r16, r24
	z axis MSB = 21, z axis LSB = 22
	*************************************/
	int regAddress = 0x1B;
	int temp, x, y, z;
	byte buff[G_TO_READ];
	readFrom(GYRO, regAddress, G_TO_READ, buff); //read the gyro data from the ITG3200
     7f4:	9e 01       	movw	r18, r28
     7f6:	2f 5f       	subi	r18, 0xFF	; 255
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	48 e0       	ldi	r20, 0x08	; 8
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	6b e1       	ldi	r22, 0x1B	; 27
     800:	88 e6       	ldi	r24, 0x68	; 104
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 a3 03 	call	0x746	; 0x746 <_Z8readFromihiPh>
	result[0] = ((buff[2] << 8) | buff[3]) + g_offx;
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	98 2f       	mov	r25, r24
     80e:	88 27       	eor	r24, r24
     810:	2c 81       	ldd	r18, Y+4	; 0x04
     812:	82 2b       	or	r24, r18
     814:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <g_offx>
     818:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <g_offx+0x1>
     81c:	82 0f       	add	r24, r18
     81e:	93 1f       	adc	r25, r19
     820:	f8 01       	movw	r30, r16
     822:	91 83       	std	Z+1, r25	; 0x01
     824:	80 83       	st	Z, r24
	result[1] = ((buff[4] << 8) | buff[5]) + g_offy;
     826:	8d 81       	ldd	r24, Y+5	; 0x05
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	98 2f       	mov	r25, r24
     82c:	88 27       	eor	r24, r24
     82e:	2e 81       	ldd	r18, Y+6	; 0x06
     830:	82 2b       	or	r24, r18
     832:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <g_offy>
     836:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <g_offy+0x1>
     83a:	82 0f       	add	r24, r18
     83c:	93 1f       	adc	r25, r19
     83e:	93 83       	std	Z+3, r25	; 0x03
     840:	82 83       	std	Z+2, r24	; 0x02
	result[2] = ((buff[6] << 8) | buff[7]) + g_offz;
     842:	2f 81       	ldd	r18, Y+7	; 0x07
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	32 2f       	mov	r19, r18
     848:	22 27       	eor	r18, r18
     84a:	88 85       	ldd	r24, Y+8	; 0x08
     84c:	28 2b       	or	r18, r24
     84e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_offz>
     852:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <g_offz+0x1>
     856:	28 0f       	add	r18, r24
     858:	39 1f       	adc	r19, r25
     85a:	35 83       	std	Z+5, r19	; 0x05
     85c:	24 83       	std	Z+4, r18	; 0x04
	result[3] = (buff[0] << 8) | buff[1]; // temperature
     85e:	29 81       	ldd	r18, Y+1	; 0x01
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	32 2f       	mov	r19, r18
     864:	22 27       	eor	r18, r18
     866:	8a 81       	ldd	r24, Y+2	; 0x02
     868:	28 2b       	or	r18, r24
     86a:	37 83       	std	Z+7, r19	; 0x07
     86c:	26 83       	std	Z+6, r18	; 0x06
}
     86e:	28 96       	adiw	r28, 0x08	; 8
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	08 95       	ret

00000884 <_Z8GyroReadv>:

void GyroRead (){
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	28 97       	sbiw	r28, 0x08	; 8
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
	byte addr;
	int gyro[4];
	getGyroscopeData(gyro);
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	0e 94 ed 03 	call	0x7da	; 0x7da <_Z16getGyroscopeDataPi>
	gyroX = gyro[0] / 14.375; //convert to degrees per second
     8a0:	69 81       	ldd	r22, Y+1	; 0x01
     8a2:	7a 81       	ldd	r23, Y+2	; 0x02
     8a4:	07 2e       	mov	r0, r23
     8a6:	00 0c       	add	r0, r0
     8a8:	88 0b       	sbc	r24, r24
     8aa:	99 0b       	sbc	r25, r25
     8ac:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatsisf>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	46 e6       	ldi	r20, 0x66	; 102
     8b6:	51 e4       	ldi	r21, 0x41	; 65
     8b8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     8bc:	60 93 5f 02 	sts	0x025F, r22	; 0x80025f <gyroX>
     8c0:	70 93 60 02 	sts	0x0260, r23	; 0x800260 <gyroX+0x1>
     8c4:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <gyroX+0x2>
     8c8:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <gyroX+0x3>
	gyroY = gyro[1] / 14.375;
     8cc:	6b 81       	ldd	r22, Y+3	; 0x03
     8ce:	7c 81       	ldd	r23, Y+4	; 0x04
     8d0:	07 2e       	mov	r0, r23
     8d2:	00 0c       	add	r0, r0
     8d4:	88 0b       	sbc	r24, r24
     8d6:	99 0b       	sbc	r25, r25
     8d8:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatsisf>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	46 e6       	ldi	r20, 0x66	; 102
     8e2:	51 e4       	ldi	r21, 0x41	; 65
     8e4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     8e8:	60 93 5b 02 	sts	0x025B, r22	; 0x80025b <gyroY>
     8ec:	70 93 5c 02 	sts	0x025C, r23	; 0x80025c <gyroY+0x1>
     8f0:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <gyroY+0x2>
     8f4:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <gyroY+0x3>
	gyroZ = gyro[2] / 14.375;
     8f8:	6d 81       	ldd	r22, Y+5	; 0x05
     8fa:	7e 81       	ldd	r23, Y+6	; 0x06
     8fc:	07 2e       	mov	r0, r23
     8fe:	00 0c       	add	r0, r0
     900:	88 0b       	sbc	r24, r24
     902:	99 0b       	sbc	r25, r25
     904:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatsisf>
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	46 e6       	ldi	r20, 0x66	; 102
     90e:	51 e4       	ldi	r21, 0x41	; 65
     910:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     914:	60 93 57 02 	sts	0x0257, r22	; 0x800257 <gyroZ>
     918:	70 93 58 02 	sts	0x0258, r23	; 0x800258 <gyroZ+0x1>
     91c:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <gyroZ+0x2>
     920:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <gyroZ+0x3>
	truetemp = 35+ ((double) (gyro[3] + 13200)) / 280; // temperature
     924:	6f 81       	ldd	r22, Y+7	; 0x07
     926:	78 85       	ldd	r23, Y+8	; 0x08
     928:	60 57       	subi	r22, 0x70	; 112
     92a:	7c 4c       	sbci	r23, 0xCC	; 204
     92c:	07 2e       	mov	r0, r23
     92e:	00 0c       	add	r0, r0
     930:	88 0b       	sbc	r24, r24
     932:	99 0b       	sbc	r25, r25
     934:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatsisf>
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	4c e8       	ldi	r20, 0x8C	; 140
     93e:	53 e4       	ldi	r21, 0x43	; 67
     940:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	4c e0       	ldi	r20, 0x0C	; 12
     94a:	52 e4       	ldi	r21, 0x42	; 66
     94c:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     950:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__fixsfsi>
     954:	70 93 c4 02 	sts	0x02C4, r23	; 0x8002c4 <truetemp+0x1>
     958:	60 93 c3 02 	sts	0x02C3, r22	; 0x8002c3 <truetemp>
	Serial.println("C");
	//delay(500);
	#endif

	
}
     95c:	28 96       	adiw	r28, 0x08	; 8
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <_Z10sensorloopv>:
	digitalWrite(dir1PinRB, HIGH);
	digitalWrite(dir2PinRB, HIGH);
}

void sensorloop()
{
     96e:	4f 92       	push	r4
     970:	5f 92       	push	r5
     972:	6f 92       	push	r6
     974:	7f 92       	push	r7
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	e8 97       	sbiw	r28, 0x38	; 56
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
	AccelerometerRead();
     99e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_Z17AccelerometerReadv>
	GyroRead();
     9a2:	0e 94 42 04 	call	0x884	; 0x884 <_Z8GyroReadv>
	
	double dt = (double)(micros() - timer) / 1000000; // Calculate delta time
     9a6:	0e 94 4e 10 	call	0x209c	; 0x209c <micros>
     9aa:	c0 90 bf 02 	lds	r12, 0x02BF	; 0x8002bf <timer>
     9ae:	d0 90 c0 02 	lds	r13, 0x02C0	; 0x8002c0 <timer+0x1>
     9b2:	e0 90 c1 02 	lds	r14, 0x02C1	; 0x8002c1 <timer+0x2>
     9b6:	f0 90 c2 02 	lds	r15, 0x02C2	; 0x8002c2 <timer+0x3>
     9ba:	6c 19       	sub	r22, r12
     9bc:	7d 09       	sbc	r23, r13
     9be:	8e 09       	sbc	r24, r14
     9c0:	9f 09       	sbc	r25, r15
     9c2:	0e 94 96 0a 	call	0x152c	; 0x152c <__floatunsisf>
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	34 e2       	ldi	r19, 0x24	; 36
     9ca:	44 e7       	ldi	r20, 0x74	; 116
     9cc:	59 e4       	ldi	r21, 0x49	; 73
     9ce:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     9d2:	69 a7       	std	Y+41, r22	; 0x29
     9d4:	7a a7       	std	Y+42, r23	; 0x2a
     9d6:	8b a7       	std	Y+43, r24	; 0x2b
     9d8:	9c a7       	std	Y+44, r25	; 0x2c
	timer = micros();
     9da:	0e 94 4e 10 	call	0x209c	; 0x209c <micros>
     9de:	60 93 bf 02 	sts	0x02BF, r22	; 0x8002bf <timer>
     9e2:	70 93 c0 02 	sts	0x02C0, r23	; 0x8002c0 <timer+0x1>
     9e6:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <timer+0x2>
     9ea:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <timer+0x3>

	// Source: http://www.freescale.com/files/sensors/doc/app_note/AN3461.pdf eq. 25 and eq. 26
	// atan2 outputs the value of -π to π (radians) - see http://en.wikipedia.org/wiki/Atan2
	// It is then converted from radians to degrees
	#ifdef RESTRICT_PITCH // Eq. 25 and 26
	double roll  = atan2(accY, accZ) * RAD_TO_DEG;
     9ee:	c0 90 63 02 	lds	r12, 0x0263	; 0x800263 <accZ>
     9f2:	d0 90 64 02 	lds	r13, 0x0264	; 0x800264 <accZ+0x1>
     9f6:	e0 90 65 02 	lds	r14, 0x0265	; 0x800265 <accZ+0x2>
     9fa:	f0 90 66 02 	lds	r15, 0x0266	; 0x800266 <accZ+0x3>
     9fe:	80 90 67 02 	lds	r8, 0x0267	; 0x800267 <accY>
     a02:	90 90 68 02 	lds	r9, 0x0268	; 0x800268 <accY+0x1>
     a06:	a0 90 69 02 	lds	r10, 0x0269	; 0x800269 <accY+0x2>
     a0a:	b0 90 6a 02 	lds	r11, 0x026A	; 0x80026a <accY+0x3>
     a0e:	a7 01       	movw	r20, r14
     a10:	96 01       	movw	r18, r12
     a12:	c5 01       	movw	r24, r10
     a14:	b4 01       	movw	r22, r8
     a16:	0e 94 8a 09 	call	0x1314	; 0x1314 <atan2>
     a1a:	21 ee       	ldi	r18, 0xE1	; 225
     a1c:	3e e2       	ldi	r19, 0x2E	; 46
     a1e:	45 e6       	ldi	r20, 0x65	; 101
     a20:	52 e4       	ldi	r21, 0x42	; 66
     a22:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     a26:	2b 01       	movw	r4, r22
     a28:	3c 01       	movw	r6, r24
	double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
     a2a:	a5 01       	movw	r20, r10
     a2c:	94 01       	movw	r18, r8
     a2e:	c5 01       	movw	r24, r10
     a30:	b4 01       	movw	r22, r8
     a32:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     a36:	4b 01       	movw	r8, r22
     a38:	5c 01       	movw	r10, r24
     a3a:	a7 01       	movw	r20, r14
     a3c:	96 01       	movw	r18, r12
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     a46:	9b 01       	movw	r18, r22
     a48:	ac 01       	movw	r20, r24
     a4a:	c5 01       	movw	r24, r10
     a4c:	b4 01       	movw	r22, r8
     a4e:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     a52:	0e 94 ef 0b 	call	0x17de	; 0x17de <sqrt>
     a56:	9b 01       	movw	r18, r22
     a58:	ac 01       	movw	r20, r24
     a5a:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <accX>
     a5e:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <accX+0x1>
     a62:	a0 91 6d 02 	lds	r26, 0x026D	; 0x80026d <accX+0x2>
     a66:	b0 91 6e 02 	lds	r27, 0x026E	; 0x80026e <accX+0x3>
     a6a:	bc 01       	movw	r22, r24
     a6c:	cd 01       	movw	r24, r26
     a6e:	90 58       	subi	r25, 0x80	; 128
     a70:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     a74:	0e 94 ba 09 	call	0x1374	; 0x1374 <atan>
     a78:	21 ee       	ldi	r18, 0xE1	; 225
     a7a:	3e e2       	ldi	r19, 0x2E	; 46
     a7c:	45 e6       	ldi	r20, 0x65	; 101
     a7e:	52 e4       	ldi	r21, 0x42	; 66
     a80:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     a84:	69 ab       	std	Y+49, r22	; 0x31
     a86:	7a ab       	std	Y+50, r23	; 0x32
     a88:	8b ab       	std	Y+51, r24	; 0x33
     a8a:	9c ab       	std	Y+52, r25	; 0x34
	#else // Eq. 28 and 29
	double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
	double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
	#endif

	double gyroXrate = gyroX / 131.0; // Convert to deg/s
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	43 e0       	ldi	r20, 0x03	; 3
     a92:	53 e4       	ldi	r21, 0x43	; 67
     a94:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <gyroX>
     a98:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <gyroX+0x1>
     a9c:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <gyroX+0x2>
     aa0:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <gyroX+0x3>
     aa4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     aa8:	6d a3       	std	Y+37, r22	; 0x25
     aaa:	7e a3       	std	Y+38, r23	; 0x26
     aac:	8f a3       	std	Y+39, r24	; 0x27
     aae:	98 a7       	std	Y+40, r25	; 0x28
	double gyroYrate = gyroY / 131.0; // Convert to deg/s
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	43 e0       	ldi	r20, 0x03	; 3
     ab6:	53 e4       	ldi	r21, 0x43	; 67
     ab8:	60 91 5b 02 	lds	r22, 0x025B	; 0x80025b <gyroY>
     abc:	70 91 5c 02 	lds	r23, 0x025C	; 0x80025c <gyroY+0x1>
     ac0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <gyroY+0x2>
     ac4:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <gyroY+0x3>
     ac8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     acc:	4b 01       	movw	r8, r22
     ace:	5c 01       	movw	r10, r24

	#ifdef RESTRICT_PITCH
	// This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees
	if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90)) {
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	44 eb       	ldi	r20, 0xB4	; 180
     ad6:	52 ec       	ldi	r21, 0xC2	; 194
     ad8:	c3 01       	movw	r24, r6
     ada:	b2 01       	movw	r22, r4
     adc:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
     ae0:	87 ff       	sbrs	r24, 7
     ae2:	10 c0       	rjmp	.+32     	; 0xb04 <_Z10sensorloopv+0x196>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	44 eb       	ldi	r20, 0xB4	; 180
     aea:	52 e4       	ldi	r21, 0x42	; 66
     aec:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <kalAngleX>
     af0:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <kalAngleX+0x1>
     af4:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <kalAngleX+0x2>
     af8:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <kalAngleX+0x3>
     afc:	0e 94 6f 0b 	call	0x16de	; 0x16de <__gesf2>
     b00:	18 16       	cp	r1, r24
     b02:	d4 f0       	brlt	.+52     	; 0xb38 <_Z10sensorloopv+0x1ca>
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	44 eb       	ldi	r20, 0xB4	; 180
     b0a:	52 e4       	ldi	r21, 0x42	; 66
     b0c:	c3 01       	movw	r24, r6
     b0e:	b2 01       	movw	r22, r4
     b10:	0e 94 6f 0b 	call	0x16de	; 0x16de <__gesf2>
     b14:	18 16       	cp	r1, r24
     b16:	7c f5       	brge	.+94     	; 0xb76 <_Z10sensorloopv+0x208>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	44 eb       	ldi	r20, 0xB4	; 180
     b1e:	52 ec       	ldi	r21, 0xC2	; 194
     b20:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <kalAngleX>
     b24:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <kalAngleX+0x1>
     b28:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <kalAngleX+0x2>
     b2c:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <kalAngleX+0x3>
     b30:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
     b34:	87 ff       	sbrs	r24, 7
     b36:	1f c0       	rjmp	.+62     	; 0xb76 <_Z10sensorloopv+0x208>
		kalmanX.setAngle(roll);
     b38:	b3 01       	movw	r22, r6
     b3a:	a2 01       	movw	r20, r4
     b3c:	87 e9       	ldi	r24, 0x97	; 151
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <_ZN6Kalman8setAngleEf>
		compAngleX = roll;
     b44:	40 92 4b 02 	sts	0x024B, r4	; 0x80024b <compAngleX>
     b48:	50 92 4c 02 	sts	0x024C, r5	; 0x80024c <compAngleX+0x1>
     b4c:	60 92 4d 02 	sts	0x024D, r6	; 0x80024d <compAngleX+0x2>
     b50:	70 92 4e 02 	sts	0x024E, r7	; 0x80024e <compAngleX+0x3>
		kalAngleX = roll;
     b54:	40 92 43 02 	sts	0x0243, r4	; 0x800243 <kalAngleX>
     b58:	50 92 44 02 	sts	0x0244, r5	; 0x800244 <kalAngleX+0x1>
     b5c:	60 92 45 02 	sts	0x0245, r6	; 0x800245 <kalAngleX+0x2>
     b60:	70 92 46 02 	sts	0x0246, r7	; 0x800246 <kalAngleX+0x3>
		gyroXangle = roll;
     b64:	40 92 53 02 	sts	0x0253, r4	; 0x800253 <gyroXangle>
     b68:	50 92 54 02 	sts	0x0254, r5	; 0x800254 <gyroXangle+0x1>
     b6c:	60 92 55 02 	sts	0x0255, r6	; 0x800255 <gyroXangle+0x2>
     b70:	70 92 56 02 	sts	0x0256, r7	; 0x800256 <gyroXangle+0x3>
     b74:	16 c0       	rjmp	.+44     	; 0xba2 <_Z10sensorloopv+0x234>
	} else
	kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
     b76:	c9 a4       	ldd	r12, Y+41	; 0x29
     b78:	da a4       	ldd	r13, Y+42	; 0x2a
     b7a:	eb a4       	ldd	r14, Y+43	; 0x2b
     b7c:	fc a4       	ldd	r15, Y+44	; 0x2c
     b7e:	0d a1       	ldd	r16, Y+37	; 0x25
     b80:	1e a1       	ldd	r17, Y+38	; 0x26
     b82:	2f a1       	ldd	r18, Y+39	; 0x27
     b84:	38 a5       	ldd	r19, Y+40	; 0x28
     b86:	b3 01       	movw	r22, r6
     b88:	a2 01       	movw	r20, r4
     b8a:	87 e9       	ldi	r24, 0x97	; 151
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 0b 14 	call	0x2816	; 0x2816 <_ZN6Kalman8getAngleEfff>
     b92:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <kalAngleX>
     b96:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <kalAngleX+0x1>
     b9a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <kalAngleX+0x2>
     b9e:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <kalAngleX+0x3>

	if (abs(kalAngleX) > 90)
     ba2:	c0 90 43 02 	lds	r12, 0x0243	; 0x800243 <kalAngleX>
     ba6:	d0 90 44 02 	lds	r13, 0x0244	; 0x800244 <kalAngleX+0x1>
     baa:	e0 90 45 02 	lds	r14, 0x0245	; 0x800245 <kalAngleX+0x2>
     bae:	f0 90 46 02 	lds	r15, 0x0246	; 0x800246 <kalAngleX+0x3>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	a9 01       	movw	r20, r18
     bb8:	c7 01       	movw	r24, r14
     bba:	b6 01       	movw	r22, r12
     bbc:	0e 94 6f 0b 	call	0x16de	; 0x16de <__gesf2>
     bc0:	18 16       	cp	r1, r24
     bc2:	5c f4       	brge	.+22     	; 0xbda <_Z10sensorloopv+0x26c>
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	44 eb       	ldi	r20, 0xB4	; 180
     bca:	52 e4       	ldi	r21, 0x42	; 66
     bcc:	c7 01       	movw	r24, r14
     bce:	b6 01       	movw	r22, r12
     bd0:	0e 94 6f 0b 	call	0x16de	; 0x16de <__gesf2>
     bd4:	18 16       	cp	r1, r24
     bd6:	5c f0       	brlt	.+22     	; 0xbee <_Z10sensorloopv+0x280>
     bd8:	0e c0       	rjmp	.+28     	; 0xbf6 <_Z10sensorloopv+0x288>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	44 eb       	ldi	r20, 0xB4	; 180
     be0:	52 ec       	ldi	r21, 0xC2	; 194
     be2:	c7 01       	movw	r24, r14
     be4:	b6 01       	movw	r22, r12
     be6:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
     bea:	87 ff       	sbrs	r24, 7
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <_Z10sensorloopv+0x288>
	gyroYrate = -gyroYrate; // Invert rate, so it fits the restriced accelerometer reading
     bee:	b7 fa       	bst	r11, 7
     bf0:	b0 94       	com	r11
     bf2:	b7 f8       	bld	r11, 7
     bf4:	b0 94       	com	r11
	kalAngleY = kalmanY.getAngle(pitch, gyroYrate, dt);
     bf6:	c9 a4       	ldd	r12, Y+41	; 0x29
     bf8:	da a4       	ldd	r13, Y+42	; 0x2a
     bfa:	eb a4       	ldd	r14, Y+43	; 0x2b
     bfc:	fc a4       	ldd	r15, Y+44	; 0x2c
     bfe:	95 01       	movw	r18, r10
     c00:	84 01       	movw	r16, r8
     c02:	49 a9       	ldd	r20, Y+49	; 0x31
     c04:	5a a9       	ldd	r21, Y+50	; 0x32
     c06:	6b a9       	ldd	r22, Y+51	; 0x33
     c08:	7c a9       	ldd	r23, Y+52	; 0x34
     c0a:	8f e6       	ldi	r24, 0x6F	; 111
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	0e 94 0b 14 	call	0x2816	; 0x2816 <_ZN6Kalman8getAngleEfff>
     c12:	6d ab       	std	Y+53, r22	; 0x35
     c14:	7e ab       	std	Y+54, r23	; 0x36
     c16:	8f ab       	std	Y+55, r24	; 0x37
     c18:	98 af       	std	Y+56, r25	; 0x38
     c1a:	60 93 3f 02 	sts	0x023F, r22	; 0x80023f <kalAngleY>
     c1e:	70 93 40 02 	sts	0x0240, r23	; 0x800240 <kalAngleY+0x1>
     c22:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <kalAngleY+0x2>
     c26:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <kalAngleY+0x3>
	if (abs(kalAngleY) > 90)
	gyroXrate = -gyroXrate; // Invert rate, so it fits the restriced accelerometer reading
	kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
	#endif

	gyroXangle += gyroXrate * dt; // Calculate gyro angle without any filter
     c2a:	29 a5       	ldd	r18, Y+41	; 0x29
     c2c:	3a a5       	ldd	r19, Y+42	; 0x2a
     c2e:	4b a5       	ldd	r20, Y+43	; 0x2b
     c30:	5c a5       	ldd	r21, Y+44	; 0x2c
     c32:	6d a1       	ldd	r22, Y+37	; 0x25
     c34:	7e a1       	ldd	r23, Y+38	; 0x26
     c36:	8f a1       	ldd	r24, Y+39	; 0x27
     c38:	98 a5       	ldd	r25, Y+40	; 0x28
     c3a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     c3e:	6d a7       	std	Y+45, r22	; 0x2d
     c40:	7e a7       	std	Y+46, r23	; 0x2e
     c42:	8f a7       	std	Y+47, r24	; 0x2f
     c44:	98 ab       	std	Y+48, r25	; 0x30
     c46:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <gyroXangle>
     c4a:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <gyroXangle+0x1>
     c4e:	40 91 55 02 	lds	r20, 0x0255	; 0x800255 <gyroXangle+0x2>
     c52:	50 91 56 02 	lds	r21, 0x0256	; 0x800256 <gyroXangle+0x3>
     c56:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     c5a:	6d a3       	std	Y+37, r22	; 0x25
     c5c:	7e a3       	std	Y+38, r23	; 0x26
     c5e:	8f a3       	std	Y+39, r24	; 0x27
     c60:	98 a7       	std	Y+40, r25	; 0x28
     c62:	60 93 53 02 	sts	0x0253, r22	; 0x800253 <gyroXangle>
     c66:	70 93 54 02 	sts	0x0254, r23	; 0x800254 <gyroXangle+0x1>
     c6a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <gyroXangle+0x2>
     c6e:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <gyroXangle+0x3>
	gyroYangle += gyroYrate * dt;
     c72:	29 a5       	ldd	r18, Y+41	; 0x29
     c74:	3a a5       	ldd	r19, Y+42	; 0x2a
     c76:	4b a5       	ldd	r20, Y+43	; 0x2b
     c78:	5c a5       	ldd	r21, Y+44	; 0x2c
     c7a:	c5 01       	movw	r24, r10
     c7c:	b4 01       	movw	r22, r8
     c7e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     c82:	6b 01       	movw	r12, r22
     c84:	7c 01       	movw	r14, r24
     c86:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <gyroYangle>
     c8a:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <gyroYangle+0x1>
     c8e:	40 91 51 02 	lds	r20, 0x0251	; 0x800251 <gyroYangle+0x2>
     c92:	50 91 52 02 	lds	r21, 0x0252	; 0x800252 <gyroYangle+0x3>
     c96:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     c9a:	4b 01       	movw	r8, r22
     c9c:	5c 01       	movw	r10, r24
     c9e:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <gyroYangle>
     ca2:	70 93 50 02 	sts	0x0250, r23	; 0x800250 <gyroYangle+0x1>
     ca6:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <gyroYangle+0x2>
     caa:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <gyroYangle+0x3>
	//gyroXangle += kalmanX.getRate() * dt; // Calculate gyro angle using the unbiased rate
	//gyroYangle += kalmanY.getRate() * dt;

	compAngleX = 0.93 * (compAngleX + gyroXrate * dt) + 0.07 * roll; // Calculate the angle using a Complimentary filter
     cae:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <compAngleX>
     cb2:	30 91 4c 02 	lds	r19, 0x024C	; 0x80024c <compAngleX+0x1>
     cb6:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <compAngleX+0x2>
     cba:	50 91 4e 02 	lds	r21, 0x024E	; 0x80024e <compAngleX+0x3>
     cbe:	6d a5       	ldd	r22, Y+45	; 0x2d
     cc0:	7e a5       	ldd	r23, Y+46	; 0x2e
     cc2:	8f a5       	ldd	r24, Y+47	; 0x2f
     cc4:	98 a9       	ldd	r25, Y+48	; 0x30
     cc6:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     cca:	2b e7       	ldi	r18, 0x7B	; 123
     ccc:	34 e1       	ldi	r19, 0x14	; 20
     cce:	4e e6       	ldi	r20, 0x6E	; 110
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     cd6:	6d a7       	std	Y+45, r22	; 0x2d
     cd8:	7e a7       	std	Y+46, r23	; 0x2e
     cda:	8f a7       	std	Y+47, r24	; 0x2f
     cdc:	98 ab       	std	Y+48, r25	; 0x30
     cde:	29 e2       	ldi	r18, 0x29	; 41
     ce0:	3c e5       	ldi	r19, 0x5C	; 92
     ce2:	4f e8       	ldi	r20, 0x8F	; 143
     ce4:	5d e3       	ldi	r21, 0x3D	; 61
     ce6:	c3 01       	movw	r24, r6
     ce8:	b2 01       	movw	r22, r4
     cea:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     cee:	9b 01       	movw	r18, r22
     cf0:	ac 01       	movw	r20, r24
     cf2:	6d a5       	ldd	r22, Y+45	; 0x2d
     cf4:	7e a5       	ldd	r23, Y+46	; 0x2e
     cf6:	8f a5       	ldd	r24, Y+47	; 0x2f
     cf8:	98 a9       	ldd	r25, Y+48	; 0x30
     cfa:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     cfe:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <compAngleX>
     d02:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <compAngleX+0x1>
     d06:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <compAngleX+0x2>
     d0a:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <compAngleX+0x3>
	compAngleY = 0.93 * (compAngleY + gyroYrate * dt) + 0.07 * pitch;
     d0e:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <compAngleY>
     d12:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <compAngleY+0x1>
     d16:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <compAngleY+0x2>
     d1a:	50 91 4a 02 	lds	r21, 0x024A	; 0x80024a <compAngleY+0x3>
     d1e:	c7 01       	movw	r24, r14
     d20:	b6 01       	movw	r22, r12
     d22:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     d26:	2b e7       	ldi	r18, 0x7B	; 123
     d28:	34 e1       	ldi	r19, 0x14	; 20
     d2a:	4e e6       	ldi	r20, 0x6E	; 110
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     d32:	6b 01       	movw	r12, r22
     d34:	7c 01       	movw	r14, r24
     d36:	29 e2       	ldi	r18, 0x29	; 41
     d38:	3c e5       	ldi	r19, 0x5C	; 92
     d3a:	4f e8       	ldi	r20, 0x8F	; 143
     d3c:	5d e3       	ldi	r21, 0x3D	; 61
     d3e:	69 a9       	ldd	r22, Y+49	; 0x31
     d40:	7a a9       	ldd	r23, Y+50	; 0x32
     d42:	8b a9       	ldd	r24, Y+51	; 0x33
     d44:	9c a9       	ldd	r25, Y+52	; 0x34
     d46:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     d4a:	9b 01       	movw	r18, r22
     d4c:	ac 01       	movw	r20, r24
     d4e:	c7 01       	movw	r24, r14
     d50:	b6 01       	movw	r22, r12
     d52:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     d56:	60 93 47 02 	sts	0x0247, r22	; 0x800247 <compAngleY>
     d5a:	70 93 48 02 	sts	0x0248, r23	; 0x800248 <compAngleY+0x1>
     d5e:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <compAngleY+0x2>
     d62:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <compAngleY+0x3>

	// Reset the gyro angle when it has drifted too much
	if (gyroXangle < -180 || gyroXangle > 180)
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	44 e3       	ldi	r20, 0x34	; 52
     d6c:	53 ec       	ldi	r21, 0xC3	; 195
     d6e:	6d a1       	ldd	r22, Y+37	; 0x25
     d70:	7e a1       	ldd	r23, Y+38	; 0x26
     d72:	8f a1       	ldd	r24, Y+39	; 0x27
     d74:	98 a5       	ldd	r25, Y+40	; 0x28
     d76:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
     d7a:	87 fd       	sbrc	r24, 7
     d7c:	0c c0       	rjmp	.+24     	; 0xd96 <_Z10sensorloopv+0x428>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	44 e3       	ldi	r20, 0x34	; 52
     d84:	53 e4       	ldi	r21, 0x43	; 67
     d86:	6d a1       	ldd	r22, Y+37	; 0x25
     d88:	7e a1       	ldd	r23, Y+38	; 0x26
     d8a:	8f a1       	ldd	r24, Y+39	; 0x27
     d8c:	98 a5       	ldd	r25, Y+40	; 0x28
     d8e:	0e 94 6f 0b 	call	0x16de	; 0x16de <__gesf2>
     d92:	18 16       	cp	r1, r24
     d94:	84 f4       	brge	.+32     	; 0xdb6 <_Z10sensorloopv+0x448>
	gyroXangle = kalAngleX;
     d96:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <kalAngleX>
     d9a:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <kalAngleX+0x1>
     d9e:	a0 91 45 02 	lds	r26, 0x0245	; 0x800245 <kalAngleX+0x2>
     da2:	b0 91 46 02 	lds	r27, 0x0246	; 0x800246 <kalAngleX+0x3>
     da6:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <gyroXangle>
     daa:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <gyroXangle+0x1>
     dae:	a0 93 55 02 	sts	0x0255, r26	; 0x800255 <gyroXangle+0x2>
     db2:	b0 93 56 02 	sts	0x0256, r27	; 0x800256 <gyroXangle+0x3>
	if (gyroYangle < -180 || gyroYangle > 180)
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	44 e3       	ldi	r20, 0x34	; 52
     dbc:	53 ec       	ldi	r21, 0xC3	; 195
     dbe:	c5 01       	movw	r24, r10
     dc0:	b4 01       	movw	r22, r8
     dc2:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
     dc6:	87 fd       	sbrc	r24, 7
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <_Z10sensorloopv+0x470>
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	44 e3       	ldi	r20, 0x34	; 52
     dd0:	53 e4       	ldi	r21, 0x43	; 67
     dd2:	c5 01       	movw	r24, r10
     dd4:	b4 01       	movw	r22, r8
     dd6:	0e 94 6f 0b 	call	0x16de	; 0x16de <__gesf2>
     dda:	18 16       	cp	r1, r24
     ddc:	64 f4       	brge	.+24     	; 0xdf6 <_Z10sensorloopv+0x488>
	gyroYangle = kalAngleY;
     dde:	8d a9       	ldd	r24, Y+53	; 0x35
     de0:	9e a9       	ldd	r25, Y+54	; 0x36
     de2:	af a9       	ldd	r26, Y+55	; 0x37
     de4:	b8 ad       	ldd	r27, Y+56	; 0x38
     de6:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <gyroYangle>
     dea:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <gyroYangle+0x1>
     dee:	a0 93 51 02 	sts	0x0251, r26	; 0x800251 <gyroYangle+0x2>
     df2:	b0 93 52 02 	sts	0x0252, r27	; 0x800252 <gyroYangle+0x3>



	/* Get a new sensor event */
	sensors_event_t event;
	mag.getEvent(&event);
     df6:	be 01       	movw	r22, r28
     df8:	6f 5f       	subi	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	85 ec       	ldi	r24, 0xC5	; 197
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t>
	

	// Hold the module so that Z is pointing 'up' and you can measure the heading with x&y
	// Calculate heading when the magnetometer is level, then correct for signs of axis.
	float heading = atan2(event.magnetic.y, event.magnetic.x);
     e04:	2d 89       	ldd	r18, Y+21	; 0x15
     e06:	3e 89       	ldd	r19, Y+22	; 0x16
     e08:	4f 89       	ldd	r20, Y+23	; 0x17
     e0a:	58 8d       	ldd	r21, Y+24	; 0x18
     e0c:	69 8d       	ldd	r22, Y+25	; 0x19
     e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e14:	0e 94 8a 09 	call	0x1314	; 0x1314 <atan2>
	// Once you have your heading, you must then add your 'Declination Angle', which is the 'Error' of the magnetic field in your location.
	// Find yours here: http://www.magnetic-declination.com/
	// Mine is: -13* 2' W, which is ~13 Degrees, or (which we need) 0.22 radians
	// If you cannot find your Declination, comment out these two lines, your compass will be slightly off.
	float declinationAngle = 0.22;
	heading += declinationAngle;
     e18:	2e ea       	ldi	r18, 0xAE	; 174
     e1a:	37 e4       	ldi	r19, 0x47	; 71
     e1c:	41 e6       	ldi	r20, 0x61	; 97
     e1e:	5e e3       	ldi	r21, 0x3E	; 62
     e20:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     e24:	6b 01       	movw	r12, r22
     e26:	7c 01       	movw	r14, r24
	
	// Correct for when signs are reversed.
	if(heading < 0)
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	a9 01       	movw	r20, r18
     e2e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
     e32:	87 ff       	sbrs	r24, 7
     e34:	0a c0       	rjmp	.+20     	; 0xe4a <_Z10sensorloopv+0x4dc>
	heading += 2*PI;
     e36:	2b ed       	ldi	r18, 0xDB	; 219
     e38:	3f e0       	ldi	r19, 0x0F	; 15
     e3a:	49 ec       	ldi	r20, 0xC9	; 201
     e3c:	50 e4       	ldi	r21, 0x40	; 64
     e3e:	c7 01       	movw	r24, r14
     e40:	b6 01       	movw	r22, r12
     e42:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
     e46:	6b 01       	movw	r12, r22
     e48:	7c 01       	movw	r14, r24
	
	// Check for wrap due to addition of declination.
	if(heading > 2*PI)
     e4a:	2b ed       	ldi	r18, 0xDB	; 219
     e4c:	3f e0       	ldi	r19, 0x0F	; 15
     e4e:	49 ec       	ldi	r20, 0xC9	; 201
     e50:	50 e4       	ldi	r21, 0x40	; 64
     e52:	c7 01       	movw	r24, r14
     e54:	b6 01       	movw	r22, r12
     e56:	0e 94 6f 0b 	call	0x16de	; 0x16de <__gesf2>
     e5a:	18 16       	cp	r1, r24
     e5c:	54 f4       	brge	.+20     	; 0xe72 <_Z10sensorloopv+0x504>
	heading -= 2*PI;
     e5e:	2b ed       	ldi	r18, 0xDB	; 219
     e60:	3f e0       	ldi	r19, 0x0F	; 15
     e62:	49 ec       	ldi	r20, 0xC9	; 201
     e64:	50 e4       	ldi	r21, 0x40	; 64
     e66:	c7 01       	movw	r24, r14
     e68:	b6 01       	movw	r22, r12
     e6a:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
     e6e:	6b 01       	movw	r12, r22
     e70:	7c 01       	movw	r14, r24
	
	// Convert radians to degrees for readability.
	headingDegrees = heading * 180/M_PI;
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	44 e3       	ldi	r20, 0x34	; 52
     e78:	53 e4       	ldi	r21, 0x43	; 67
     e7a:	c7 01       	movw	r24, r14
     e7c:	b6 01       	movw	r22, r12
     e7e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     e82:	2b ed       	ldi	r18, 0xDB	; 219
     e84:	3f e0       	ldi	r19, 0x0F	; 15
     e86:	49 e4       	ldi	r20, 0x49	; 73
     e88:	50 e4       	ldi	r21, 0x40	; 64
     e8a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     e8e:	60 93 3b 02 	sts	0x023B, r22	; 0x80023b <headingDegrees>
     e92:	70 93 3c 02 	sts	0x023C, r23	; 0x80023c <headingDegrees+0x1>
     e96:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <headingDegrees+0x2>
     e9a:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <headingDegrees+0x3>
	#endif
	
	/* Print Data */
	
	#if 1 // Set to 1 to activate
	Serial.print(accX/16384*9.80665); Serial.print(" ");
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e8       	ldi	r20, 0x80	; 128
     ea4:	58 e3       	ldi	r21, 0x38	; 56
     ea6:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <accX>
     eaa:	70 91 6c 02 	lds	r23, 0x026C	; 0x80026c <accX+0x1>
     eae:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <accX+0x2>
     eb2:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <accX+0x3>
     eb6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     eba:	2a e0       	ldi	r18, 0x0A	; 10
     ebc:	38 ee       	ldi	r19, 0xE8	; 232
     ebe:	4c e1       	ldi	r20, 0x1C	; 28
     ec0:	51 e4       	ldi	r21, 0x41	; 65
     ec2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     ec6:	ab 01       	movw	r20, r22
     ec8:	bc 01       	movw	r22, r24
     eca:	22 e0       	ldi	r18, 0x02	; 2
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	8d ed       	ldi	r24, 0xDD	; 221
     ed0:	92 e0       	ldi	r25, 0x02	; 2
     ed2:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print5printEdi>
     ed6:	64 ee       	ldi	r22, 0xE4	; 228
     ed8:	71 e0       	ldi	r23, 0x01	; 1
     eda:	8d ed       	ldi	r24, 0xDD	; 221
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5Print5printEPKc>
	Serial.print(accY/16384*9.80665); Serial.print(" ");
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e8       	ldi	r20, 0x80	; 128
     ee8:	58 e3       	ldi	r21, 0x38	; 56
     eea:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <accY>
     eee:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <accY+0x1>
     ef2:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <accY+0x2>
     ef6:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <accY+0x3>
     efa:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     efe:	2a e0       	ldi	r18, 0x0A	; 10
     f00:	38 ee       	ldi	r19, 0xE8	; 232
     f02:	4c e1       	ldi	r20, 0x1C	; 28
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     f0a:	ab 01       	movw	r20, r22
     f0c:	bc 01       	movw	r22, r24
     f0e:	22 e0       	ldi	r18, 0x02	; 2
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	8d ed       	ldi	r24, 0xDD	; 221
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print5printEdi>
     f1a:	64 ee       	ldi	r22, 0xE4	; 228
     f1c:	71 e0       	ldi	r23, 0x01	; 1
     f1e:	8d ed       	ldi	r24, 0xDD	; 221
     f20:	92 e0       	ldi	r25, 0x02	; 2
     f22:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5Print5printEPKc>
	Serial.print(accZ/16384*9.80665); Serial.print(" ");
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e8       	ldi	r20, 0x80	; 128
     f2c:	58 e3       	ldi	r21, 0x38	; 56
     f2e:	60 91 63 02 	lds	r22, 0x0263	; 0x800263 <accZ>
     f32:	70 91 64 02 	lds	r23, 0x0264	; 0x800264 <accZ+0x1>
     f36:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <accZ+0x2>
     f3a:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <accZ+0x3>
     f3e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     f42:	2a e0       	ldi	r18, 0x0A	; 10
     f44:	38 ee       	ldi	r19, 0xE8	; 232
     f46:	4c e1       	ldi	r20, 0x1C	; 28
     f48:	51 e4       	ldi	r21, 0x41	; 65
     f4a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
     f4e:	ab 01       	movw	r20, r22
     f50:	bc 01       	movw	r22, r24
     f52:	22 e0       	ldi	r18, 0x02	; 2
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	8d ed       	ldi	r24, 0xDD	; 221
     f58:	92 e0       	ldi	r25, 0x02	; 2
     f5a:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print5printEdi>
     f5e:	64 ee       	ldi	r22, 0xE4	; 228
     f60:	71 e0       	ldi	r23, 0x01	; 1
     f62:	8d ed       	ldi	r24, 0xDD	; 221
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5Print5printEPKc>

	Serial.print(gyroX); Serial.print(" ");
     f6a:	40 91 5f 02 	lds	r20, 0x025F	; 0x80025f <gyroX>
     f6e:	50 91 60 02 	lds	r21, 0x0260	; 0x800260 <gyroX+0x1>
     f72:	60 91 61 02 	lds	r22, 0x0261	; 0x800261 <gyroX+0x2>
     f76:	70 91 62 02 	lds	r23, 0x0262	; 0x800262 <gyroX+0x3>
     f7a:	22 e0       	ldi	r18, 0x02	; 2
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	8d ed       	ldi	r24, 0xDD	; 221
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print5printEdi>
     f86:	64 ee       	ldi	r22, 0xE4	; 228
     f88:	71 e0       	ldi	r23, 0x01	; 1
     f8a:	8d ed       	ldi	r24, 0xDD	; 221
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5Print5printEPKc>
	Serial.print(gyroY); Serial.print(" ");
     f92:	40 91 5b 02 	lds	r20, 0x025B	; 0x80025b <gyroY>
     f96:	50 91 5c 02 	lds	r21, 0x025C	; 0x80025c <gyroY+0x1>
     f9a:	60 91 5d 02 	lds	r22, 0x025D	; 0x80025d <gyroY+0x2>
     f9e:	70 91 5e 02 	lds	r23, 0x025E	; 0x80025e <gyroY+0x3>
     fa2:	22 e0       	ldi	r18, 0x02	; 2
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	8d ed       	ldi	r24, 0xDD	; 221
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print5printEdi>
     fae:	64 ee       	ldi	r22, 0xE4	; 228
     fb0:	71 e0       	ldi	r23, 0x01	; 1
     fb2:	8d ed       	ldi	r24, 0xDD	; 221
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5Print5printEPKc>
	Serial.print(gyroZ); Serial.print(" ");
     fba:	40 91 57 02 	lds	r20, 0x0257	; 0x800257 <gyroZ>
     fbe:	50 91 58 02 	lds	r21, 0x0258	; 0x800258 <gyroZ+0x1>
     fc2:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <gyroZ+0x2>
     fc6:	70 91 5a 02 	lds	r23, 0x025A	; 0x80025a <gyroZ+0x3>
     fca:	22 e0       	ldi	r18, 0x02	; 2
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	8d ed       	ldi	r24, 0xDD	; 221
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print5printEdi>
     fd6:	64 ee       	ldi	r22, 0xE4	; 228
     fd8:	71 e0       	ldi	r23, 0x01	; 1
     fda:	8d ed       	ldi	r24, 0xDD	; 221
     fdc:	92 e0       	ldi	r25, 0x02	; 2
     fde:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5Print5printEPKc>

	Serial.print(event.magnetic.x); Serial.print(" ");
     fe2:	4d 89       	ldd	r20, Y+21	; 0x15
     fe4:	5e 89       	ldd	r21, Y+22	; 0x16
     fe6:	6f 89       	ldd	r22, Y+23	; 0x17
     fe8:	78 8d       	ldd	r23, Y+24	; 0x18
     fea:	22 e0       	ldi	r18, 0x02	; 2
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	8d ed       	ldi	r24, 0xDD	; 221
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print5printEdi>
     ff6:	64 ee       	ldi	r22, 0xE4	; 228
     ff8:	71 e0       	ldi	r23, 0x01	; 1
     ffa:	8d ed       	ldi	r24, 0xDD	; 221
     ffc:	92 e0       	ldi	r25, 0x02	; 2
     ffe:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5Print5printEPKc>
	Serial.print(event.magnetic.y); Serial.print(" ");
    1002:	49 8d       	ldd	r20, Y+25	; 0x19
    1004:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1006:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1008:	7c 8d       	ldd	r23, Y+28	; 0x1c
    100a:	22 e0       	ldi	r18, 0x02	; 2
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	8d ed       	ldi	r24, 0xDD	; 221
    1010:	92 e0       	ldi	r25, 0x02	; 2
    1012:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print5printEdi>
    1016:	64 ee       	ldi	r22, 0xE4	; 228
    1018:	71 e0       	ldi	r23, 0x01	; 1
    101a:	8d ed       	ldi	r24, 0xDD	; 221
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5Print5printEPKc>
	Serial.print(headingDegrees); Serial.print(" ");
    1022:	40 91 3b 02 	lds	r20, 0x023B	; 0x80023b <headingDegrees>
    1026:	50 91 3c 02 	lds	r21, 0x023C	; 0x80023c <headingDegrees+0x1>
    102a:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <headingDegrees+0x2>
    102e:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <headingDegrees+0x3>
    1032:	22 e0       	ldi	r18, 0x02	; 2
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	8d ed       	ldi	r24, 0xDD	; 221
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print5printEdi>
    103e:	64 ee       	ldi	r22, 0xE4	; 228
    1040:	71 e0       	ldi	r23, 0x01	; 1
    1042:	8d ed       	ldi	r24, 0xDD	; 221
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5Print5printEPKc>
	
	Serial.print(dt);
    104a:	22 e0       	ldi	r18, 0x02	; 2
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	49 a5       	ldd	r20, Y+41	; 0x29
    1050:	5a a5       	ldd	r21, Y+42	; 0x2a
    1052:	6b a5       	ldd	r22, Y+43	; 0x2b
    1054:	7c a5       	ldd	r23, Y+44	; 0x2c
    1056:	8d ed       	ldi	r24, 0xDD	; 221
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	0e 94 02 10 	call	0x2004	; 0x2004 <_ZN5Print5printEdi>
	Serial.print(newlinechar);
    105e:	6e e2       	ldi	r22, 0x2E	; 46
    1060:	72 e0       	ldi	r23, 0x02	; 2
    1062:	8d ed       	ldi	r24, 0xDD	; 221
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN5Print5printERK6String>
	Serial.print(kalAngleX*10);
	Serial.print(" ");
	Serial.print(headingDegrees);
	Serial.println();
	#endif
	analogWrite(speedPinLF, speedall);//Sets speed variable via PWM
    106a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <speedall>
    106e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <speedall+0x1>
    1072:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <speedPinLF>
    1076:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <analogWrite>
	analogWrite(speedPinRF, speedall);//Sets speed variable via PWM
    107a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <speedall>
    107e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <speedall+0x1>
    1082:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <speedPinRF>
    1086:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <analogWrite>
	analogWrite(speedPinLB, speedall);//Sets speed variable via PWM
    108a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <speedall>
    108e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <speedall+0x1>
    1092:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <speedPinLB>
    1096:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <analogWrite>
	analogWrite(speedPinRB, speedall);//Sets speed variable via PWM
    109a:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <speedall>
    109e:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <speedall+0x1>
    10a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <speedPinRB>
    10a6:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <analogWrite>
	
	delay(d); // slow down output
    10aa:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <d>
    10ae:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <d+0x1>
    10b2:	07 2e       	mov	r0, r23
    10b4:	00 0c       	add	r0, r0
    10b6:	88 0b       	sbc	r24, r24
    10b8:	99 0b       	sbc	r25, r25
    10ba:	0e 94 73 10 	call	0x20e6	; 0x20e6 <delay>
}
    10be:	e8 96       	adiw	r28, 0x38	; 56
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	cf 90       	pop	r12
    10da:	bf 90       	pop	r11
    10dc:	af 90       	pop	r10
    10de:	9f 90       	pop	r9
    10e0:	8f 90       	pop	r8
    10e2:	7f 90       	pop	r7
    10e4:	6f 90       	pop	r6
    10e6:	5f 90       	pop	r5
    10e8:	4f 90       	pop	r4
    10ea:	08 95       	ret

000010ec <_Z11delaysensori>:

void delaysensor(int t){
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	8c 01       	movw	r16, r24
	for (int x = 0; x < t/d; x++)
    10f6:	c0 e0       	ldi	r28, 0x00	; 0
    10f8:	d0 e0       	ldi	r29, 0x00	; 0
    10fa:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <d>
    10fe:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <d+0x1>
    1102:	c8 01       	movw	r24, r16
    1104:	0e 94 df 18 	call	0x31be	; 0x31be <__divmodhi4>
    1108:	c6 17       	cp	r28, r22
    110a:	d7 07       	cpc	r29, r23
    110c:	24 f4       	brge	.+8      	; 0x1116 <_Z11delaysensori+0x2a>
	{
		sensorloop();
    110e:	0e 94 b7 04 	call	0x96e	; 0x96e <_Z10sensorloopv>
	
	delay(d); // slow down output
}

void delaysensor(int t){
	for (int x = 0; x < t/d; x++)
    1112:	21 96       	adiw	r28, 0x01	; 1
    1114:	f2 cf       	rjmp	.-28     	; 0x10fa <_Z11delaysensori+0xe>
	{
		sensorloop();
	}
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	08 95       	ret

00001120 <loop>:

void loop() {
	delaysensor(10);
    1120:	8a e0       	ldi	r24, 0x0A	; 10
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z11delaysensori>
		d = 10;
    1128:	8a e0       	ldi	r24, 0x0A	; 10
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <d+0x1>
    1130:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <d>
	}
	#endif

	#if 1
	char incomingByte = 'a';
	if (Serial.available() > 0) {
    1134:	8d ed       	ldi	r24, 0xDD	; 221
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN14HardwareSerial9availableEv>
    113c:	18 16       	cp	r1, r24
    113e:	19 06       	cpc	r1, r25
    1140:	0c f0       	brlt	.+2      	; 0x1144 <loop+0x24>
    1142:	4f c0       	rjmp	.+158    	; 0x11e2 <loop+0xc2>
		// read the incoming byte:
		incomingByte = (char)Serial.read();
    1144:	8d ed       	ldi	r24, 0xDD	; 221
    1146:	92 e0       	ldi	r25, 0x02	; 2
    1148:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN14HardwareSerial4readEv>

		// say what you got:
	//	Serial.print("I received: ");
		//Serial.println(incomingByte);

		if (incomingByte=='w')
    114c:	87 37       	cpi	r24, 0x77	; 119
    114e:	49 f4       	brne	.+18     	; 0x1162 <loop+0x42>
		{
			speedall = 255;
    1150:	8f ef       	ldi	r24, 0xFF	; 255
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <speedall+0x1>
    1158:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <speedall>
			forward();
    115c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z7forwardv>
    1160:	36 c0       	rjmp	.+108    	; 0x11ce <loop+0xae>
			delaysensor(100);
			speedall = 0;
			stop();
		}
		else if (incomingByte=='a')
    1162:	81 36       	cpi	r24, 0x61	; 97
    1164:	49 f4       	brne	.+18     	; 0x1178 <loop+0x58>
		{
			speedall = 255;
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <speedall+0x1>
    116e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <speedall>
			left();
    1172:	0e 94 35 01 	call	0x26a	; 0x26a <_Z4leftv>
    1176:	2b c0       	rjmp	.+86     	; 0x11ce <loop+0xae>
			delaysensor(100);
			speedall = 0;
			stop();
		}
		else if (incomingByte=='s')
    1178:	83 37       	cpi	r24, 0x73	; 115
    117a:	49 f4       	brne	.+18     	; 0x118e <loop+0x6e>
		{
			speedall = 255;
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <speedall+0x1>
    1184:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <speedall>
			reverse();
    1188:	0e 94 0d 01 	call	0x21a	; 0x21a <_Z7reversev>
    118c:	20 c0       	rjmp	.+64     	; 0x11ce <loop+0xae>
			delaysensor(100);
			speedall = 0;
			stop();
		}
		else if (incomingByte=='d')
    118e:	84 36       	cpi	r24, 0x64	; 100
    1190:	49 f4       	brne	.+18     	; 0x11a4 <loop+0x84>
		{
			speedall = 255;
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <speedall+0x1>
    119a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <speedall>
			right();
    119e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <_Z5rightv>
    11a2:	15 c0       	rjmp	.+42     	; 0x11ce <loop+0xae>
			delaysensor(100);
			speedall = 0;
			stop();
		}
		else if (incomingByte=='q')
    11a4:	81 37       	cpi	r24, 0x71	; 113
    11a6:	49 f4       	brne	.+18     	; 0x11ba <loop+0x9a>
		{
			speedall = 255;
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <speedall+0x1>
    11b0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <speedall>
			turnleft();
    11b4:	0e 94 85 01 	call	0x30a	; 0x30a <_Z8turnleftv>
    11b8:	0a c0       	rjmp	.+20     	; 0x11ce <loop+0xae>
			delaysensor(100);
			speedall = 0;
			stop();
	}else if (incomingByte=='e')
    11ba:	85 36       	cpi	r24, 0x65	; 101
    11bc:	91 f4       	brne	.+36     	; 0x11e2 <loop+0xc2>
	{
		speedall = 255;
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <speedall+0x1>
    11c6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <speedall>
		turnright();
    11ca:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9turnrightv>
		delaysensor(100);
    11ce:	84 e6       	ldi	r24, 0x64	; 100
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 76 08 	call	0x10ec	; 0x10ec <_Z11delaysensori>
		speedall = 0;
    11d6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <speedall+0x1>
    11da:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <speedall>
		stop();
    11de:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_Z4stopv>
	}

	}
	
	
	if (stringComplete) {
    11e2:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <stringComplete>
    11e6:	88 23       	and	r24, r24
    11e8:	a1 f0       	breq	.+40     	; 0x1212 <loop+0xf2>

		Serial.print("I received:                                    ");
    11ea:	66 eb       	ldi	r22, 0xB6	; 182
    11ec:	71 e0       	ldi	r23, 0x01	; 1
    11ee:	8d ed       	ldi	r24, 0xDD	; 221
    11f0:	92 e0       	ldi	r25, 0x02	; 2
    11f2:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN5Print5printEPKc>
		Serial.println(inputString);
    11f6:	65 e3       	ldi	r22, 0x35	; 53
    11f8:	72 e0       	ldi	r23, 0x02	; 2
    11fa:	8d ed       	ldi	r24, 0xDD	; 221
    11fc:	92 e0       	ldi	r25, 0x02	; 2
    11fe:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN5Print7printlnERK6String>
		// clear the string:
		inputString = "";
    1202:	68 ef       	ldi	r22, 0xF8	; 248
    1204:	71 e0       	ldi	r23, 0x01	; 1
    1206:	85 e3       	ldi	r24, 0x35	; 53
    1208:	92 e0       	ldi	r25, 0x02	; 2
    120a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <_ZN6StringaSEPKc>
		stringComplete = false;
    120e:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <stringComplete>
    1212:	08 95       	ret

00001214 <__subsf3>:
    1214:	50 58       	subi	r21, 0x80	; 128

00001216 <__addsf3>:
    1216:	bb 27       	eor	r27, r27
    1218:	aa 27       	eor	r26, r26
    121a:	0e 94 22 09 	call	0x1244	; 0x1244 <__addsf3x>
    121e:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_round>
    1222:	0e 94 27 0b 	call	0x164e	; 0x164e <__fp_pscA>
    1226:	38 f0       	brcs	.+14     	; 0x1236 <__addsf3+0x20>
    1228:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_pscB>
    122c:	20 f0       	brcs	.+8      	; 0x1236 <__addsf3+0x20>
    122e:	39 f4       	brne	.+14     	; 0x123e <__addsf3+0x28>
    1230:	9f 3f       	cpi	r25, 0xFF	; 255
    1232:	19 f4       	brne	.+6      	; 0x123a <__addsf3+0x24>
    1234:	26 f4       	brtc	.+8      	; 0x123e <__addsf3+0x28>
    1236:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__fp_nan>
    123a:	0e f4       	brtc	.+2      	; 0x123e <__addsf3+0x28>
    123c:	e0 95       	com	r30
    123e:	e7 fb       	bst	r30, 7
    1240:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_inf>

00001244 <__addsf3x>:
    1244:	e9 2f       	mov	r30, r25
    1246:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_split3>
    124a:	58 f3       	brcs	.-42     	; 0x1222 <__addsf3+0xc>
    124c:	ba 17       	cp	r27, r26
    124e:	62 07       	cpc	r22, r18
    1250:	73 07       	cpc	r23, r19
    1252:	84 07       	cpc	r24, r20
    1254:	95 07       	cpc	r25, r21
    1256:	20 f0       	brcs	.+8      	; 0x1260 <__addsf3x+0x1c>
    1258:	79 f4       	brne	.+30     	; 0x1278 <__addsf3x+0x34>
    125a:	a6 f5       	brtc	.+104    	; 0x12c4 <__addsf3x+0x80>
    125c:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__fp_zero>
    1260:	0e f4       	brtc	.+2      	; 0x1264 <__addsf3x+0x20>
    1262:	e0 95       	com	r30
    1264:	0b 2e       	mov	r0, r27
    1266:	ba 2f       	mov	r27, r26
    1268:	a0 2d       	mov	r26, r0
    126a:	0b 01       	movw	r0, r22
    126c:	b9 01       	movw	r22, r18
    126e:	90 01       	movw	r18, r0
    1270:	0c 01       	movw	r0, r24
    1272:	ca 01       	movw	r24, r20
    1274:	a0 01       	movw	r20, r0
    1276:	11 24       	eor	r1, r1
    1278:	ff 27       	eor	r31, r31
    127a:	59 1b       	sub	r21, r25
    127c:	99 f0       	breq	.+38     	; 0x12a4 <__addsf3x+0x60>
    127e:	59 3f       	cpi	r21, 0xF9	; 249
    1280:	50 f4       	brcc	.+20     	; 0x1296 <__addsf3x+0x52>
    1282:	50 3e       	cpi	r21, 0xE0	; 224
    1284:	68 f1       	brcs	.+90     	; 0x12e0 <__addsf3x+0x9c>
    1286:	1a 16       	cp	r1, r26
    1288:	f0 40       	sbci	r31, 0x00	; 0
    128a:	a2 2f       	mov	r26, r18
    128c:	23 2f       	mov	r18, r19
    128e:	34 2f       	mov	r19, r20
    1290:	44 27       	eor	r20, r20
    1292:	58 5f       	subi	r21, 0xF8	; 248
    1294:	f3 cf       	rjmp	.-26     	; 0x127c <__addsf3x+0x38>
    1296:	46 95       	lsr	r20
    1298:	37 95       	ror	r19
    129a:	27 95       	ror	r18
    129c:	a7 95       	ror	r26
    129e:	f0 40       	sbci	r31, 0x00	; 0
    12a0:	53 95       	inc	r21
    12a2:	c9 f7       	brne	.-14     	; 0x1296 <__addsf3x+0x52>
    12a4:	7e f4       	brtc	.+30     	; 0x12c4 <__addsf3x+0x80>
    12a6:	1f 16       	cp	r1, r31
    12a8:	ba 0b       	sbc	r27, r26
    12aa:	62 0b       	sbc	r22, r18
    12ac:	73 0b       	sbc	r23, r19
    12ae:	84 0b       	sbc	r24, r20
    12b0:	ba f0       	brmi	.+46     	; 0x12e0 <__addsf3x+0x9c>
    12b2:	91 50       	subi	r25, 0x01	; 1
    12b4:	a1 f0       	breq	.+40     	; 0x12de <__addsf3x+0x9a>
    12b6:	ff 0f       	add	r31, r31
    12b8:	bb 1f       	adc	r27, r27
    12ba:	66 1f       	adc	r22, r22
    12bc:	77 1f       	adc	r23, r23
    12be:	88 1f       	adc	r24, r24
    12c0:	c2 f7       	brpl	.-16     	; 0x12b2 <__addsf3x+0x6e>
    12c2:	0e c0       	rjmp	.+28     	; 0x12e0 <__addsf3x+0x9c>
    12c4:	ba 0f       	add	r27, r26
    12c6:	62 1f       	adc	r22, r18
    12c8:	73 1f       	adc	r23, r19
    12ca:	84 1f       	adc	r24, r20
    12cc:	48 f4       	brcc	.+18     	; 0x12e0 <__addsf3x+0x9c>
    12ce:	87 95       	ror	r24
    12d0:	77 95       	ror	r23
    12d2:	67 95       	ror	r22
    12d4:	b7 95       	ror	r27
    12d6:	f7 95       	ror	r31
    12d8:	9e 3f       	cpi	r25, 0xFE	; 254
    12da:	08 f0       	brcs	.+2      	; 0x12de <__addsf3x+0x9a>
    12dc:	b0 cf       	rjmp	.-160    	; 0x123e <__addsf3+0x28>
    12de:	93 95       	inc	r25
    12e0:	88 0f       	add	r24, r24
    12e2:	08 f0       	brcs	.+2      	; 0x12e6 <__addsf3x+0xa2>
    12e4:	99 27       	eor	r25, r25
    12e6:	ee 0f       	add	r30, r30
    12e8:	97 95       	ror	r25
    12ea:	87 95       	ror	r24
    12ec:	08 95       	ret
    12ee:	0e 94 27 0b 	call	0x164e	; 0x164e <__fp_pscA>
    12f2:	60 f0       	brcs	.+24     	; 0x130c <__addsf3x+0xc8>
    12f4:	80 e8       	ldi	r24, 0x80	; 128
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <__addsf3x+0xb8>
    12fa:	9e ef       	ldi	r25, 0xFE	; 254
    12fc:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_pscB>
    1300:	28 f0       	brcs	.+10     	; 0x130c <__addsf3x+0xc8>
    1302:	40 e8       	ldi	r20, 0x80	; 128
    1304:	51 e0       	ldi	r21, 0x01	; 1
    1306:	71 f4       	brne	.+28     	; 0x1324 <atan2+0x10>
    1308:	5e ef       	ldi	r21, 0xFE	; 254
    130a:	0c c0       	rjmp	.+24     	; 0x1324 <atan2+0x10>
    130c:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__fp_nan>
    1310:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__fp_zero>

00001314 <atan2>:
    1314:	e9 2f       	mov	r30, r25
    1316:	e0 78       	andi	r30, 0x80	; 128
    1318:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_split3>
    131c:	40 f3       	brcs	.-48     	; 0x12ee <__addsf3x+0xaa>
    131e:	09 2e       	mov	r0, r25
    1320:	05 2a       	or	r0, r21
    1322:	b1 f3       	breq	.-20     	; 0x1310 <__addsf3x+0xcc>
    1324:	26 17       	cp	r18, r22
    1326:	37 07       	cpc	r19, r23
    1328:	48 07       	cpc	r20, r24
    132a:	59 07       	cpc	r21, r25
    132c:	38 f0       	brcs	.+14     	; 0x133c <atan2+0x28>
    132e:	0e 2e       	mov	r0, r30
    1330:	07 f8       	bld	r0, 7
    1332:	e0 25       	eor	r30, r0
    1334:	69 f0       	breq	.+26     	; 0x1350 <atan2+0x3c>
    1336:	e0 25       	eor	r30, r0
    1338:	e0 64       	ori	r30, 0x40	; 64
    133a:	0a c0       	rjmp	.+20     	; 0x1350 <atan2+0x3c>
    133c:	ef 63       	ori	r30, 0x3F	; 63
    133e:	07 f8       	bld	r0, 7
    1340:	00 94       	com	r0
    1342:	07 fa       	bst	r0, 7
    1344:	db 01       	movw	r26, r22
    1346:	b9 01       	movw	r22, r18
    1348:	9d 01       	movw	r18, r26
    134a:	dc 01       	movw	r26, r24
    134c:	ca 01       	movw	r24, r20
    134e:	ad 01       	movw	r20, r26
    1350:	ef 93       	push	r30
    1352:	0e 94 05 0a 	call	0x140a	; 0x140a <__divsf3_pse>
    1356:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_round>
    135a:	0e 94 ba 09 	call	0x1374	; 0x1374 <atan>
    135e:	5f 91       	pop	r21
    1360:	55 23       	and	r21, r21
    1362:	39 f0       	breq	.+14     	; 0x1372 <atan2+0x5e>
    1364:	2b ed       	ldi	r18, 0xDB	; 219
    1366:	3f e0       	ldi	r19, 0x0F	; 15
    1368:	49 e4       	ldi	r20, 0x49	; 73
    136a:	50 fd       	sbrc	r21, 0
    136c:	49 ec       	ldi	r20, 0xC9	; 201
    136e:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__addsf3>
    1372:	08 95       	ret

00001374 <atan>:
    1374:	df 93       	push	r29
    1376:	dd 27       	eor	r29, r29
    1378:	b9 2f       	mov	r27, r25
    137a:	bf 77       	andi	r27, 0x7F	; 127
    137c:	40 e8       	ldi	r20, 0x80	; 128
    137e:	5f e3       	ldi	r21, 0x3F	; 63
    1380:	16 16       	cp	r1, r22
    1382:	17 06       	cpc	r1, r23
    1384:	48 07       	cpc	r20, r24
    1386:	5b 07       	cpc	r21, r27
    1388:	18 f4       	brcc	.+6      	; 0x1390 <atan+0x1c>
    138a:	d9 2f       	mov	r29, r25
    138c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <inverse>
    1390:	9f 93       	push	r25
    1392:	8f 93       	push	r24
    1394:	7f 93       	push	r23
    1396:	6f 93       	push	r22
    1398:	0e 94 2f 0c 	call	0x185e	; 0x185e <square>
    139c:	e8 e6       	ldi	r30, 0x68	; 104
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_powser>
    13a4:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_round>
    13a8:	2f 91       	pop	r18
    13aa:	3f 91       	pop	r19
    13ac:	4f 91       	pop	r20
    13ae:	5f 91       	pop	r21
    13b0:	0e 94 8f 0b 	call	0x171e	; 0x171e <__mulsf3x>
    13b4:	dd 23       	and	r29, r29
    13b6:	51 f0       	breq	.+20     	; 0x13cc <atan+0x58>
    13b8:	90 58       	subi	r25, 0x80	; 128
    13ba:	a2 ea       	ldi	r26, 0xA2	; 162
    13bc:	2a ed       	ldi	r18, 0xDA	; 218
    13be:	3f e0       	ldi	r19, 0x0F	; 15
    13c0:	49 ec       	ldi	r20, 0xC9	; 201
    13c2:	5f e3       	ldi	r21, 0x3F	; 63
    13c4:	d0 78       	andi	r29, 0x80	; 128
    13c6:	5d 27       	eor	r21, r29
    13c8:	0e 94 22 09 	call	0x1244	; 0x1244 <__addsf3x>
    13cc:	df 91       	pop	r29
    13ce:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_round>

000013d2 <__cmpsf2>:
    13d2:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__fp_cmp>
    13d6:	08 f4       	brcc	.+2      	; 0x13da <__cmpsf2+0x8>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	08 95       	ret

000013dc <__divsf3>:
    13dc:	0e 94 02 0a 	call	0x1404	; 0x1404 <__divsf3x>
    13e0:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_round>
    13e4:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_pscB>
    13e8:	58 f0       	brcs	.+22     	; 0x1400 <__divsf3+0x24>
    13ea:	0e 94 27 0b 	call	0x164e	; 0x164e <__fp_pscA>
    13ee:	40 f0       	brcs	.+16     	; 0x1400 <__divsf3+0x24>
    13f0:	29 f4       	brne	.+10     	; 0x13fc <__divsf3+0x20>
    13f2:	5f 3f       	cpi	r21, 0xFF	; 255
    13f4:	29 f0       	breq	.+10     	; 0x1400 <__divsf3+0x24>
    13f6:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_inf>
    13fa:	51 11       	cpse	r21, r1
    13fc:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_szero>
    1400:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__fp_nan>

00001404 <__divsf3x>:
    1404:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_split3>
    1408:	68 f3       	brcs	.-38     	; 0x13e4 <__divsf3+0x8>

0000140a <__divsf3_pse>:
    140a:	99 23       	and	r25, r25
    140c:	b1 f3       	breq	.-20     	; 0x13fa <__divsf3+0x1e>
    140e:	55 23       	and	r21, r21
    1410:	91 f3       	breq	.-28     	; 0x13f6 <__divsf3+0x1a>
    1412:	95 1b       	sub	r25, r21
    1414:	55 0b       	sbc	r21, r21
    1416:	bb 27       	eor	r27, r27
    1418:	aa 27       	eor	r26, r26
    141a:	62 17       	cp	r22, r18
    141c:	73 07       	cpc	r23, r19
    141e:	84 07       	cpc	r24, r20
    1420:	38 f0       	brcs	.+14     	; 0x1430 <__divsf3_pse+0x26>
    1422:	9f 5f       	subi	r25, 0xFF	; 255
    1424:	5f 4f       	sbci	r21, 0xFF	; 255
    1426:	22 0f       	add	r18, r18
    1428:	33 1f       	adc	r19, r19
    142a:	44 1f       	adc	r20, r20
    142c:	aa 1f       	adc	r26, r26
    142e:	a9 f3       	breq	.-22     	; 0x141a <__divsf3_pse+0x10>
    1430:	35 d0       	rcall	.+106    	; 0x149c <__divsf3_pse+0x92>
    1432:	0e 2e       	mov	r0, r30
    1434:	3a f0       	brmi	.+14     	; 0x1444 <__divsf3_pse+0x3a>
    1436:	e0 e8       	ldi	r30, 0x80	; 128
    1438:	32 d0       	rcall	.+100    	; 0x149e <__divsf3_pse+0x94>
    143a:	91 50       	subi	r25, 0x01	; 1
    143c:	50 40       	sbci	r21, 0x00	; 0
    143e:	e6 95       	lsr	r30
    1440:	00 1c       	adc	r0, r0
    1442:	ca f7       	brpl	.-14     	; 0x1436 <__divsf3_pse+0x2c>
    1444:	2b d0       	rcall	.+86     	; 0x149c <__divsf3_pse+0x92>
    1446:	fe 2f       	mov	r31, r30
    1448:	29 d0       	rcall	.+82     	; 0x149c <__divsf3_pse+0x92>
    144a:	66 0f       	add	r22, r22
    144c:	77 1f       	adc	r23, r23
    144e:	88 1f       	adc	r24, r24
    1450:	bb 1f       	adc	r27, r27
    1452:	26 17       	cp	r18, r22
    1454:	37 07       	cpc	r19, r23
    1456:	48 07       	cpc	r20, r24
    1458:	ab 07       	cpc	r26, r27
    145a:	b0 e8       	ldi	r27, 0x80	; 128
    145c:	09 f0       	breq	.+2      	; 0x1460 <__divsf3_pse+0x56>
    145e:	bb 0b       	sbc	r27, r27
    1460:	80 2d       	mov	r24, r0
    1462:	bf 01       	movw	r22, r30
    1464:	ff 27       	eor	r31, r31
    1466:	93 58       	subi	r25, 0x83	; 131
    1468:	5f 4f       	sbci	r21, 0xFF	; 255
    146a:	3a f0       	brmi	.+14     	; 0x147a <__divsf3_pse+0x70>
    146c:	9e 3f       	cpi	r25, 0xFE	; 254
    146e:	51 05       	cpc	r21, r1
    1470:	78 f0       	brcs	.+30     	; 0x1490 <__divsf3_pse+0x86>
    1472:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_inf>
    1476:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_szero>
    147a:	5f 3f       	cpi	r21, 0xFF	; 255
    147c:	e4 f3       	brlt	.-8      	; 0x1476 <__divsf3_pse+0x6c>
    147e:	98 3e       	cpi	r25, 0xE8	; 232
    1480:	d4 f3       	brlt	.-12     	; 0x1476 <__divsf3_pse+0x6c>
    1482:	86 95       	lsr	r24
    1484:	77 95       	ror	r23
    1486:	67 95       	ror	r22
    1488:	b7 95       	ror	r27
    148a:	f7 95       	ror	r31
    148c:	9f 5f       	subi	r25, 0xFF	; 255
    148e:	c9 f7       	brne	.-14     	; 0x1482 <__divsf3_pse+0x78>
    1490:	88 0f       	add	r24, r24
    1492:	91 1d       	adc	r25, r1
    1494:	96 95       	lsr	r25
    1496:	87 95       	ror	r24
    1498:	97 f9       	bld	r25, 7
    149a:	08 95       	ret
    149c:	e1 e0       	ldi	r30, 0x01	; 1
    149e:	66 0f       	add	r22, r22
    14a0:	77 1f       	adc	r23, r23
    14a2:	88 1f       	adc	r24, r24
    14a4:	bb 1f       	adc	r27, r27
    14a6:	62 17       	cp	r22, r18
    14a8:	73 07       	cpc	r23, r19
    14aa:	84 07       	cpc	r24, r20
    14ac:	ba 07       	cpc	r27, r26
    14ae:	20 f0       	brcs	.+8      	; 0x14b8 <__divsf3_pse+0xae>
    14b0:	62 1b       	sub	r22, r18
    14b2:	73 0b       	sbc	r23, r19
    14b4:	84 0b       	sbc	r24, r20
    14b6:	ba 0b       	sbc	r27, r26
    14b8:	ee 1f       	adc	r30, r30
    14ba:	88 f7       	brcc	.-30     	; 0x149e <__divsf3_pse+0x94>
    14bc:	e0 95       	com	r30
    14be:	08 95       	ret

000014c0 <__fixsfsi>:
    14c0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fixunssfsi>
    14c4:	68 94       	set
    14c6:	b1 11       	cpse	r27, r1
    14c8:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_szero>
    14cc:	08 95       	ret

000014ce <__fixunssfsi>:
    14ce:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fp_splitA>
    14d2:	88 f0       	brcs	.+34     	; 0x14f6 <__fixunssfsi+0x28>
    14d4:	9f 57       	subi	r25, 0x7F	; 127
    14d6:	98 f0       	brcs	.+38     	; 0x14fe <__fixunssfsi+0x30>
    14d8:	b9 2f       	mov	r27, r25
    14da:	99 27       	eor	r25, r25
    14dc:	b7 51       	subi	r27, 0x17	; 23
    14de:	b0 f0       	brcs	.+44     	; 0x150c <__fixunssfsi+0x3e>
    14e0:	e1 f0       	breq	.+56     	; 0x151a <__fixunssfsi+0x4c>
    14e2:	66 0f       	add	r22, r22
    14e4:	77 1f       	adc	r23, r23
    14e6:	88 1f       	adc	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	1a f0       	brmi	.+6      	; 0x14f2 <__fixunssfsi+0x24>
    14ec:	ba 95       	dec	r27
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <__fixunssfsi+0x14>
    14f0:	14 c0       	rjmp	.+40     	; 0x151a <__fixunssfsi+0x4c>
    14f2:	b1 30       	cpi	r27, 0x01	; 1
    14f4:	91 f0       	breq	.+36     	; 0x151a <__fixunssfsi+0x4c>
    14f6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__fp_zero>
    14fa:	b1 e0       	ldi	r27, 0x01	; 1
    14fc:	08 95       	ret
    14fe:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__fp_zero>
    1502:	67 2f       	mov	r22, r23
    1504:	78 2f       	mov	r23, r24
    1506:	88 27       	eor	r24, r24
    1508:	b8 5f       	subi	r27, 0xF8	; 248
    150a:	39 f0       	breq	.+14     	; 0x151a <__fixunssfsi+0x4c>
    150c:	b9 3f       	cpi	r27, 0xF9	; 249
    150e:	cc f3       	brlt	.-14     	; 0x1502 <__fixunssfsi+0x34>
    1510:	86 95       	lsr	r24
    1512:	77 95       	ror	r23
    1514:	67 95       	ror	r22
    1516:	b3 95       	inc	r27
    1518:	d9 f7       	brne	.-10     	; 0x1510 <__fixunssfsi+0x42>
    151a:	3e f4       	brtc	.+14     	; 0x152a <__fixunssfsi+0x5c>
    151c:	90 95       	com	r25
    151e:	80 95       	com	r24
    1520:	70 95       	com	r23
    1522:	61 95       	neg	r22
    1524:	7f 4f       	sbci	r23, 0xFF	; 255
    1526:	8f 4f       	sbci	r24, 0xFF	; 255
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	08 95       	ret

0000152c <__floatunsisf>:
    152c:	e8 94       	clt
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <__floatsisf+0x12>

00001530 <__floatsisf>:
    1530:	97 fb       	bst	r25, 7
    1532:	3e f4       	brtc	.+14     	; 0x1542 <__floatsisf+0x12>
    1534:	90 95       	com	r25
    1536:	80 95       	com	r24
    1538:	70 95       	com	r23
    153a:	61 95       	neg	r22
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
    153e:	8f 4f       	sbci	r24, 0xFF	; 255
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	99 23       	and	r25, r25
    1544:	a9 f0       	breq	.+42     	; 0x1570 <__floatsisf+0x40>
    1546:	f9 2f       	mov	r31, r25
    1548:	96 e9       	ldi	r25, 0x96	; 150
    154a:	bb 27       	eor	r27, r27
    154c:	93 95       	inc	r25
    154e:	f6 95       	lsr	r31
    1550:	87 95       	ror	r24
    1552:	77 95       	ror	r23
    1554:	67 95       	ror	r22
    1556:	b7 95       	ror	r27
    1558:	f1 11       	cpse	r31, r1
    155a:	f8 cf       	rjmp	.-16     	; 0x154c <__floatsisf+0x1c>
    155c:	fa f4       	brpl	.+62     	; 0x159c <__floatsisf+0x6c>
    155e:	bb 0f       	add	r27, r27
    1560:	11 f4       	brne	.+4      	; 0x1566 <__floatsisf+0x36>
    1562:	60 ff       	sbrs	r22, 0
    1564:	1b c0       	rjmp	.+54     	; 0x159c <__floatsisf+0x6c>
    1566:	6f 5f       	subi	r22, 0xFF	; 255
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	8f 4f       	sbci	r24, 0xFF	; 255
    156c:	9f 4f       	sbci	r25, 0xFF	; 255
    156e:	16 c0       	rjmp	.+44     	; 0x159c <__floatsisf+0x6c>
    1570:	88 23       	and	r24, r24
    1572:	11 f0       	breq	.+4      	; 0x1578 <__floatsisf+0x48>
    1574:	96 e9       	ldi	r25, 0x96	; 150
    1576:	11 c0       	rjmp	.+34     	; 0x159a <__floatsisf+0x6a>
    1578:	77 23       	and	r23, r23
    157a:	21 f0       	breq	.+8      	; 0x1584 <__floatsisf+0x54>
    157c:	9e e8       	ldi	r25, 0x8E	; 142
    157e:	87 2f       	mov	r24, r23
    1580:	76 2f       	mov	r23, r22
    1582:	05 c0       	rjmp	.+10     	; 0x158e <__floatsisf+0x5e>
    1584:	66 23       	and	r22, r22
    1586:	71 f0       	breq	.+28     	; 0x15a4 <__floatsisf+0x74>
    1588:	96 e8       	ldi	r25, 0x86	; 134
    158a:	86 2f       	mov	r24, r22
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	2a f0       	brmi	.+10     	; 0x159c <__floatsisf+0x6c>
    1592:	9a 95       	dec	r25
    1594:	66 0f       	add	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	88 1f       	adc	r24, r24
    159a:	da f7       	brpl	.-10     	; 0x1592 <__floatsisf+0x62>
    159c:	88 0f       	add	r24, r24
    159e:	96 95       	lsr	r25
    15a0:	87 95       	ror	r24
    15a2:	97 f9       	bld	r25, 7
    15a4:	08 95       	ret

000015a6 <__fp_cmp>:
    15a6:	99 0f       	add	r25, r25
    15a8:	00 08       	sbc	r0, r0
    15aa:	55 0f       	add	r21, r21
    15ac:	aa 0b       	sbc	r26, r26
    15ae:	e0 e8       	ldi	r30, 0x80	; 128
    15b0:	fe ef       	ldi	r31, 0xFE	; 254
    15b2:	16 16       	cp	r1, r22
    15b4:	17 06       	cpc	r1, r23
    15b6:	e8 07       	cpc	r30, r24
    15b8:	f9 07       	cpc	r31, r25
    15ba:	c0 f0       	brcs	.+48     	; 0x15ec <__fp_cmp+0x46>
    15bc:	12 16       	cp	r1, r18
    15be:	13 06       	cpc	r1, r19
    15c0:	e4 07       	cpc	r30, r20
    15c2:	f5 07       	cpc	r31, r21
    15c4:	98 f0       	brcs	.+38     	; 0x15ec <__fp_cmp+0x46>
    15c6:	62 1b       	sub	r22, r18
    15c8:	73 0b       	sbc	r23, r19
    15ca:	84 0b       	sbc	r24, r20
    15cc:	95 0b       	sbc	r25, r21
    15ce:	39 f4       	brne	.+14     	; 0x15de <__fp_cmp+0x38>
    15d0:	0a 26       	eor	r0, r26
    15d2:	61 f0       	breq	.+24     	; 0x15ec <__fp_cmp+0x46>
    15d4:	23 2b       	or	r18, r19
    15d6:	24 2b       	or	r18, r20
    15d8:	25 2b       	or	r18, r21
    15da:	21 f4       	brne	.+8      	; 0x15e4 <__fp_cmp+0x3e>
    15dc:	08 95       	ret
    15de:	0a 26       	eor	r0, r26
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <__fp_cmp+0x3e>
    15e2:	a1 40       	sbci	r26, 0x01	; 1
    15e4:	a6 95       	lsr	r26
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	81 1d       	adc	r24, r1
    15ea:	81 1d       	adc	r24, r1
    15ec:	08 95       	ret

000015ee <__fp_inf>:
    15ee:	97 f9       	bld	r25, 7
    15f0:	9f 67       	ori	r25, 0x7F	; 127
    15f2:	80 e8       	ldi	r24, 0x80	; 128
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	08 95       	ret

000015fa <__fp_nan>:
    15fa:	9f ef       	ldi	r25, 0xFF	; 255
    15fc:	80 ec       	ldi	r24, 0xC0	; 192
    15fe:	08 95       	ret

00001600 <__fp_powser>:
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	1f 93       	push	r17
    1606:	0f 93       	push	r16
    1608:	ff 92       	push	r15
    160a:	ef 92       	push	r14
    160c:	df 92       	push	r13
    160e:	7b 01       	movw	r14, r22
    1610:	8c 01       	movw	r16, r24
    1612:	68 94       	set
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <__fp_powser+0x22>
    1616:	da 2e       	mov	r13, r26
    1618:	ef 01       	movw	r28, r30
    161a:	0e 94 8f 0b 	call	0x171e	; 0x171e <__mulsf3x>
    161e:	fe 01       	movw	r30, r28
    1620:	e8 94       	clt
    1622:	a5 91       	lpm	r26, Z+
    1624:	25 91       	lpm	r18, Z+
    1626:	35 91       	lpm	r19, Z+
    1628:	45 91       	lpm	r20, Z+
    162a:	55 91       	lpm	r21, Z+
    162c:	a6 f3       	brts	.-24     	; 0x1616 <__fp_powser+0x16>
    162e:	ef 01       	movw	r28, r30
    1630:	0e 94 22 09 	call	0x1244	; 0x1244 <__addsf3x>
    1634:	fe 01       	movw	r30, r28
    1636:	97 01       	movw	r18, r14
    1638:	a8 01       	movw	r20, r16
    163a:	da 94       	dec	r13
    163c:	69 f7       	brne	.-38     	; 0x1618 <__fp_powser+0x18>
    163e:	df 90       	pop	r13
    1640:	ef 90       	pop	r14
    1642:	ff 90       	pop	r15
    1644:	0f 91       	pop	r16
    1646:	1f 91       	pop	r17
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <__fp_pscA>:
    164e:	00 24       	eor	r0, r0
    1650:	0a 94       	dec	r0
    1652:	16 16       	cp	r1, r22
    1654:	17 06       	cpc	r1, r23
    1656:	18 06       	cpc	r1, r24
    1658:	09 06       	cpc	r0, r25
    165a:	08 95       	ret

0000165c <__fp_pscB>:
    165c:	00 24       	eor	r0, r0
    165e:	0a 94       	dec	r0
    1660:	12 16       	cp	r1, r18
    1662:	13 06       	cpc	r1, r19
    1664:	14 06       	cpc	r1, r20
    1666:	05 06       	cpc	r0, r21
    1668:	08 95       	ret

0000166a <__fp_round>:
    166a:	09 2e       	mov	r0, r25
    166c:	03 94       	inc	r0
    166e:	00 0c       	add	r0, r0
    1670:	11 f4       	brne	.+4      	; 0x1676 <__fp_round+0xc>
    1672:	88 23       	and	r24, r24
    1674:	52 f0       	brmi	.+20     	; 0x168a <__fp_round+0x20>
    1676:	bb 0f       	add	r27, r27
    1678:	40 f4       	brcc	.+16     	; 0x168a <__fp_round+0x20>
    167a:	bf 2b       	or	r27, r31
    167c:	11 f4       	brne	.+4      	; 0x1682 <__fp_round+0x18>
    167e:	60 ff       	sbrs	r22, 0
    1680:	04 c0       	rjmp	.+8      	; 0x168a <__fp_round+0x20>
    1682:	6f 5f       	subi	r22, 0xFF	; 255
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	8f 4f       	sbci	r24, 0xFF	; 255
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	08 95       	ret

0000168c <__fp_split3>:
    168c:	57 fd       	sbrc	r21, 7
    168e:	90 58       	subi	r25, 0x80	; 128
    1690:	44 0f       	add	r20, r20
    1692:	55 1f       	adc	r21, r21
    1694:	59 f0       	breq	.+22     	; 0x16ac <__fp_splitA+0x10>
    1696:	5f 3f       	cpi	r21, 0xFF	; 255
    1698:	71 f0       	breq	.+28     	; 0x16b6 <__fp_splitA+0x1a>
    169a:	47 95       	ror	r20

0000169c <__fp_splitA>:
    169c:	88 0f       	add	r24, r24
    169e:	97 fb       	bst	r25, 7
    16a0:	99 1f       	adc	r25, r25
    16a2:	61 f0       	breq	.+24     	; 0x16bc <__fp_splitA+0x20>
    16a4:	9f 3f       	cpi	r25, 0xFF	; 255
    16a6:	79 f0       	breq	.+30     	; 0x16c6 <__fp_splitA+0x2a>
    16a8:	87 95       	ror	r24
    16aa:	08 95       	ret
    16ac:	12 16       	cp	r1, r18
    16ae:	13 06       	cpc	r1, r19
    16b0:	14 06       	cpc	r1, r20
    16b2:	55 1f       	adc	r21, r21
    16b4:	f2 cf       	rjmp	.-28     	; 0x169a <__fp_split3+0xe>
    16b6:	46 95       	lsr	r20
    16b8:	f1 df       	rcall	.-30     	; 0x169c <__fp_splitA>
    16ba:	08 c0       	rjmp	.+16     	; 0x16cc <__fp_splitA+0x30>
    16bc:	16 16       	cp	r1, r22
    16be:	17 06       	cpc	r1, r23
    16c0:	18 06       	cpc	r1, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	f1 cf       	rjmp	.-30     	; 0x16a8 <__fp_splitA+0xc>
    16c6:	86 95       	lsr	r24
    16c8:	71 05       	cpc	r23, r1
    16ca:	61 05       	cpc	r22, r1
    16cc:	08 94       	sec
    16ce:	08 95       	ret

000016d0 <__fp_zero>:
    16d0:	e8 94       	clt

000016d2 <__fp_szero>:
    16d2:	bb 27       	eor	r27, r27
    16d4:	66 27       	eor	r22, r22
    16d6:	77 27       	eor	r23, r23
    16d8:	cb 01       	movw	r24, r22
    16da:	97 f9       	bld	r25, 7
    16dc:	08 95       	ret

000016de <__gesf2>:
    16de:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__fp_cmp>
    16e2:	08 f4       	brcc	.+2      	; 0x16e6 <__gesf2+0x8>
    16e4:	8f ef       	ldi	r24, 0xFF	; 255
    16e6:	08 95       	ret

000016e8 <inverse>:
    16e8:	9b 01       	movw	r18, r22
    16ea:	ac 01       	movw	r20, r24
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	80 e8       	ldi	r24, 0x80	; 128
    16f2:	9f e3       	ldi	r25, 0x3F	; 63
    16f4:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__divsf3>

000016f8 <__mulsf3>:
    16f8:	0e 94 8f 0b 	call	0x171e	; 0x171e <__mulsf3x>
    16fc:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_round>
    1700:	0e 94 27 0b 	call	0x164e	; 0x164e <__fp_pscA>
    1704:	38 f0       	brcs	.+14     	; 0x1714 <__mulsf3+0x1c>
    1706:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_pscB>
    170a:	20 f0       	brcs	.+8      	; 0x1714 <__mulsf3+0x1c>
    170c:	95 23       	and	r25, r21
    170e:	11 f0       	breq	.+4      	; 0x1714 <__mulsf3+0x1c>
    1710:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_inf>
    1714:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__fp_nan>
    1718:	11 24       	eor	r1, r1
    171a:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_szero>

0000171e <__mulsf3x>:
    171e:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_split3>
    1722:	70 f3       	brcs	.-36     	; 0x1700 <__mulsf3+0x8>

00001724 <__mulsf3_pse>:
    1724:	95 9f       	mul	r25, r21
    1726:	c1 f3       	breq	.-16     	; 0x1718 <__mulsf3+0x20>
    1728:	95 0f       	add	r25, r21
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	55 1f       	adc	r21, r21
    172e:	62 9f       	mul	r22, r18
    1730:	f0 01       	movw	r30, r0
    1732:	72 9f       	mul	r23, r18
    1734:	bb 27       	eor	r27, r27
    1736:	f0 0d       	add	r31, r0
    1738:	b1 1d       	adc	r27, r1
    173a:	63 9f       	mul	r22, r19
    173c:	aa 27       	eor	r26, r26
    173e:	f0 0d       	add	r31, r0
    1740:	b1 1d       	adc	r27, r1
    1742:	aa 1f       	adc	r26, r26
    1744:	64 9f       	mul	r22, r20
    1746:	66 27       	eor	r22, r22
    1748:	b0 0d       	add	r27, r0
    174a:	a1 1d       	adc	r26, r1
    174c:	66 1f       	adc	r22, r22
    174e:	82 9f       	mul	r24, r18
    1750:	22 27       	eor	r18, r18
    1752:	b0 0d       	add	r27, r0
    1754:	a1 1d       	adc	r26, r1
    1756:	62 1f       	adc	r22, r18
    1758:	73 9f       	mul	r23, r19
    175a:	b0 0d       	add	r27, r0
    175c:	a1 1d       	adc	r26, r1
    175e:	62 1f       	adc	r22, r18
    1760:	83 9f       	mul	r24, r19
    1762:	a0 0d       	add	r26, r0
    1764:	61 1d       	adc	r22, r1
    1766:	22 1f       	adc	r18, r18
    1768:	74 9f       	mul	r23, r20
    176a:	33 27       	eor	r19, r19
    176c:	a0 0d       	add	r26, r0
    176e:	61 1d       	adc	r22, r1
    1770:	23 1f       	adc	r18, r19
    1772:	84 9f       	mul	r24, r20
    1774:	60 0d       	add	r22, r0
    1776:	21 1d       	adc	r18, r1
    1778:	82 2f       	mov	r24, r18
    177a:	76 2f       	mov	r23, r22
    177c:	6a 2f       	mov	r22, r26
    177e:	11 24       	eor	r1, r1
    1780:	9f 57       	subi	r25, 0x7F	; 127
    1782:	50 40       	sbci	r21, 0x00	; 0
    1784:	9a f0       	brmi	.+38     	; 0x17ac <__mulsf3_pse+0x88>
    1786:	f1 f0       	breq	.+60     	; 0x17c4 <__mulsf3_pse+0xa0>
    1788:	88 23       	and	r24, r24
    178a:	4a f0       	brmi	.+18     	; 0x179e <__mulsf3_pse+0x7a>
    178c:	ee 0f       	add	r30, r30
    178e:	ff 1f       	adc	r31, r31
    1790:	bb 1f       	adc	r27, r27
    1792:	66 1f       	adc	r22, r22
    1794:	77 1f       	adc	r23, r23
    1796:	88 1f       	adc	r24, r24
    1798:	91 50       	subi	r25, 0x01	; 1
    179a:	50 40       	sbci	r21, 0x00	; 0
    179c:	a9 f7       	brne	.-22     	; 0x1788 <__mulsf3_pse+0x64>
    179e:	9e 3f       	cpi	r25, 0xFE	; 254
    17a0:	51 05       	cpc	r21, r1
    17a2:	80 f0       	brcs	.+32     	; 0x17c4 <__mulsf3_pse+0xa0>
    17a4:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_inf>
    17a8:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_szero>
    17ac:	5f 3f       	cpi	r21, 0xFF	; 255
    17ae:	e4 f3       	brlt	.-8      	; 0x17a8 <__mulsf3_pse+0x84>
    17b0:	98 3e       	cpi	r25, 0xE8	; 232
    17b2:	d4 f3       	brlt	.-12     	; 0x17a8 <__mulsf3_pse+0x84>
    17b4:	86 95       	lsr	r24
    17b6:	77 95       	ror	r23
    17b8:	67 95       	ror	r22
    17ba:	b7 95       	ror	r27
    17bc:	f7 95       	ror	r31
    17be:	e7 95       	ror	r30
    17c0:	9f 5f       	subi	r25, 0xFF	; 255
    17c2:	c1 f7       	brne	.-16     	; 0x17b4 <__mulsf3_pse+0x90>
    17c4:	fe 2b       	or	r31, r30
    17c6:	88 0f       	add	r24, r24
    17c8:	91 1d       	adc	r25, r1
    17ca:	96 95       	lsr	r25
    17cc:	87 95       	ror	r24
    17ce:	97 f9       	bld	r25, 7
    17d0:	08 95       	ret
    17d2:	19 f4       	brne	.+6      	; 0x17da <__mulsf3_pse+0xb6>
    17d4:	16 f4       	brtc	.+4      	; 0x17da <__mulsf3_pse+0xb6>
    17d6:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__fp_nan>
    17da:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__fp_mpack>

000017de <sqrt>:
    17de:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fp_splitA>
    17e2:	b8 f3       	brcs	.-18     	; 0x17d2 <__mulsf3_pse+0xae>
    17e4:	99 23       	and	r25, r25
    17e6:	c9 f3       	breq	.-14     	; 0x17da <__mulsf3_pse+0xb6>
    17e8:	b6 f3       	brts	.-20     	; 0x17d6 <__mulsf3_pse+0xb2>
    17ea:	9f 57       	subi	r25, 0x7F	; 127
    17ec:	55 0b       	sbc	r21, r21
    17ee:	87 ff       	sbrs	r24, 7
    17f0:	0e 94 41 0c 	call	0x1882	; 0x1882 <__fp_norm2>
    17f4:	00 24       	eor	r0, r0
    17f6:	a0 e6       	ldi	r26, 0x60	; 96
    17f8:	40 ea       	ldi	r20, 0xA0	; 160
    17fa:	90 01       	movw	r18, r0
    17fc:	80 58       	subi	r24, 0x80	; 128
    17fe:	56 95       	lsr	r21
    1800:	97 95       	ror	r25
    1802:	28 f4       	brcc	.+10     	; 0x180e <sqrt+0x30>
    1804:	80 5c       	subi	r24, 0xC0	; 192
    1806:	66 0f       	add	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	88 1f       	adc	r24, r24
    180c:	20 f0       	brcs	.+8      	; 0x1816 <sqrt+0x38>
    180e:	26 17       	cp	r18, r22
    1810:	37 07       	cpc	r19, r23
    1812:	48 07       	cpc	r20, r24
    1814:	30 f4       	brcc	.+12     	; 0x1822 <sqrt+0x44>
    1816:	62 1b       	sub	r22, r18
    1818:	73 0b       	sbc	r23, r19
    181a:	84 0b       	sbc	r24, r20
    181c:	20 29       	or	r18, r0
    181e:	31 29       	or	r19, r1
    1820:	4a 2b       	or	r20, r26
    1822:	a6 95       	lsr	r26
    1824:	17 94       	ror	r1
    1826:	07 94       	ror	r0
    1828:	20 25       	eor	r18, r0
    182a:	31 25       	eor	r19, r1
    182c:	4a 27       	eor	r20, r26
    182e:	58 f7       	brcc	.-42     	; 0x1806 <sqrt+0x28>
    1830:	66 0f       	add	r22, r22
    1832:	77 1f       	adc	r23, r23
    1834:	88 1f       	adc	r24, r24
    1836:	20 f0       	brcs	.+8      	; 0x1840 <sqrt+0x62>
    1838:	26 17       	cp	r18, r22
    183a:	37 07       	cpc	r19, r23
    183c:	48 07       	cpc	r20, r24
    183e:	30 f4       	brcc	.+12     	; 0x184c <sqrt+0x6e>
    1840:	62 0b       	sbc	r22, r18
    1842:	73 0b       	sbc	r23, r19
    1844:	84 0b       	sbc	r24, r20
    1846:	20 0d       	add	r18, r0
    1848:	31 1d       	adc	r19, r1
    184a:	41 1d       	adc	r20, r1
    184c:	a0 95       	com	r26
    184e:	81 f7       	brne	.-32     	; 0x1830 <sqrt+0x52>
    1850:	b9 01       	movw	r22, r18
    1852:	84 2f       	mov	r24, r20
    1854:	91 58       	subi	r25, 0x81	; 129
    1856:	88 0f       	add	r24, r24
    1858:	96 95       	lsr	r25
    185a:	87 95       	ror	r24
    185c:	08 95       	ret

0000185e <square>:
    185e:	9b 01       	movw	r18, r22
    1860:	ac 01       	movw	r20, r24
    1862:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__mulsf3>

00001866 <__fp_mpack>:
    1866:	9f 3f       	cpi	r25, 0xFF	; 255
    1868:	31 f0       	breq	.+12     	; 0x1876 <__fp_mpack_finite+0xc>

0000186a <__fp_mpack_finite>:
    186a:	91 50       	subi	r25, 0x01	; 1
    186c:	20 f4       	brcc	.+8      	; 0x1876 <__fp_mpack_finite+0xc>
    186e:	87 95       	ror	r24
    1870:	77 95       	ror	r23
    1872:	67 95       	ror	r22
    1874:	b7 95       	ror	r27
    1876:	88 0f       	add	r24, r24
    1878:	91 1d       	adc	r25, r1
    187a:	96 95       	lsr	r25
    187c:	87 95       	ror	r24
    187e:	97 f9       	bld	r25, 7
    1880:	08 95       	ret

00001882 <__fp_norm2>:
    1882:	91 50       	subi	r25, 0x01	; 1
    1884:	50 40       	sbci	r21, 0x00	; 0
    1886:	66 0f       	add	r22, r22
    1888:	77 1f       	adc	r23, r23
    188a:	88 1f       	adc	r24, r24
    188c:	d2 f7       	brpl	.-12     	; 0x1882 <__fp_norm2>
    188e:	08 95       	ret

00001890 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1890:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1892:	91 8d       	ldd	r25, Z+25	; 0x19
    1894:	22 8d       	ldd	r18, Z+26	; 0x1a
    1896:	89 2f       	mov	r24, r25
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	80 5c       	subi	r24, 0xC0	; 192
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	82 1b       	sub	r24, r18
    18a0:	91 09       	sbc	r25, r1
}
    18a2:	8f 73       	andi	r24, 0x3F	; 63
    18a4:	99 27       	eor	r25, r25
    18a6:	08 95       	ret

000018a8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    18a8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    18aa:	91 8d       	ldd	r25, Z+25	; 0x19
    18ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ae:	98 17       	cp	r25, r24
    18b0:	31 f0       	breq	.+12     	; 0x18be <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    18b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    18b4:	e8 0f       	add	r30, r24
    18b6:	f1 1d       	adc	r31, r1
    18b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18be:	8f ef       	ldi	r24, 0xFF	; 255
    18c0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    18c2:	08 95       	ret

000018c4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    18c4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    18c6:	91 8d       	ldd	r25, Z+25	; 0x19
    18c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ca:	98 17       	cp	r25, r24
    18cc:	61 f0       	breq	.+24     	; 0x18e6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    18ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    18d0:	df 01       	movw	r26, r30
    18d2:	a8 0f       	add	r26, r24
    18d4:	b1 1d       	adc	r27, r1
    18d6:	5d 96       	adiw	r26, 0x1d	; 29
    18d8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    18da:	92 8d       	ldd	r25, Z+26	; 0x1a
    18dc:	9f 5f       	subi	r25, 0xFF	; 255
    18de:	9f 73       	andi	r25, 0x3F	; 63
    18e0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    18e8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    18ea:	08 95       	ret

000018ec <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    18ec:	8b ec       	ldi	r24, 0xCB	; 203
    18ee:	9d e0       	ldi	r25, 0x0D	; 13
    18f0:	89 2b       	or	r24, r25
    18f2:	49 f0       	breq	.+18     	; 0x1906 <_Z14serialEventRunv+0x1a>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	89 2b       	or	r24, r25
    18fa:	29 f0       	breq	.+10     	; 0x1906 <_Z14serialEventRunv+0x1a>
    18fc:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <_Z17Serial0_availablev>
    1900:	81 11       	cpse	r24, r1
    1902:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1906:	08 95       	ret

00001908 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1908:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    190a:	84 8d       	ldd	r24, Z+28	; 0x1c
    190c:	df 01       	movw	r26, r30
    190e:	a8 0f       	add	r26, r24
    1910:	b1 1d       	adc	r27, r1
    1912:	a3 5a       	subi	r26, 0xA3	; 163
    1914:	bf 4f       	sbci	r27, 0xFF	; 255
    1916:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1918:	84 8d       	ldd	r24, Z+28	; 0x1c
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	8f 73       	andi	r24, 0x3F	; 63
    1920:	99 27       	eor	r25, r25
    1922:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1924:	a6 89       	ldd	r26, Z+22	; 0x16
    1926:	b7 89       	ldd	r27, Z+23	; 0x17
    1928:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    192a:	a0 89       	ldd	r26, Z+16	; 0x10
    192c:	b1 89       	ldd	r27, Z+17	; 0x11
    192e:	8c 91       	ld	r24, X
    1930:	80 64       	ori	r24, 0x40	; 64
    1932:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1934:	93 8d       	ldd	r25, Z+27	; 0x1b
    1936:	84 8d       	ldd	r24, Z+28	; 0x1c
    1938:	98 13       	cpse	r25, r24
    193a:	06 c0       	rjmp	.+12     	; 0x1948 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    193c:	02 88       	ldd	r0, Z+18	; 0x12
    193e:	f3 89       	ldd	r31, Z+19	; 0x13
    1940:	e0 2d       	mov	r30, r0
    1942:	80 81       	ld	r24, Z
    1944:	8f 7d       	andi	r24, 0xDF	; 223
    1946:	80 83       	st	Z, r24
    1948:	08 95       	ret

0000194a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1950:	88 8d       	ldd	r24, Y+24	; 0x18
    1952:	88 23       	and	r24, r24
    1954:	c9 f0       	breq	.+50     	; 0x1988 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1956:	ea 89       	ldd	r30, Y+18	; 0x12
    1958:	fb 89       	ldd	r31, Y+19	; 0x13
    195a:	80 81       	ld	r24, Z
    195c:	85 fd       	sbrc	r24, 5
    195e:	05 c0       	rjmp	.+10     	; 0x196a <_ZN14HardwareSerial5flushEv+0x20>
    1960:	a8 89       	ldd	r26, Y+16	; 0x10
    1962:	b9 89       	ldd	r27, Y+17	; 0x11
    1964:	8c 91       	ld	r24, X
    1966:	86 fd       	sbrc	r24, 6
    1968:	0f c0       	rjmp	.+30     	; 0x1988 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	07 fc       	sbrc	r0, 7
    196e:	f5 cf       	rjmp	.-22     	; 0x195a <_ZN14HardwareSerial5flushEv+0x10>
    1970:	80 81       	ld	r24, Z
    1972:	85 ff       	sbrs	r24, 5
    1974:	f2 cf       	rjmp	.-28     	; 0x195a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1976:	a8 89       	ldd	r26, Y+16	; 0x10
    1978:	b9 89       	ldd	r27, Y+17	; 0x11
    197a:	8c 91       	ld	r24, X
    197c:	85 ff       	sbrs	r24, 5
    197e:	ed cf       	rjmp	.-38     	; 0x195a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1980:	ce 01       	movw	r24, r28
    1982:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1986:	e7 cf       	rjmp	.-50     	; 0x1956 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	08 95       	ret

0000198e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    198e:	ef 92       	push	r14
    1990:	ff 92       	push	r15
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	ec 01       	movw	r28, r24
  _written = true;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    19a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19a4:	98 13       	cpse	r25, r24
    19a6:	05 c0       	rjmp	.+10     	; 0x19b2 <_ZN14HardwareSerial5writeEh+0x24>
    19a8:	e8 89       	ldd	r30, Y+16	; 0x10
    19aa:	f9 89       	ldd	r31, Y+17	; 0x11
    19ac:	80 81       	ld	r24, Z
    19ae:	85 fd       	sbrc	r24, 5
    19b0:	24 c0       	rjmp	.+72     	; 0x19fa <_ZN14HardwareSerial5writeEh+0x6c>
    19b2:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    19b4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    19b6:	10 e0       	ldi	r17, 0x00	; 0
    19b8:	0f 5f       	subi	r16, 0xFF	; 255
    19ba:	1f 4f       	sbci	r17, 0xFF	; 255
    19bc:	0f 73       	andi	r16, 0x3F	; 63
    19be:	11 27       	eor	r17, r17
    19c0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    19c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19c4:	e8 12       	cpse	r14, r24
    19c6:	0c c0       	rjmp	.+24     	; 0x19e0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	07 fc       	sbrc	r0, 7
    19cc:	fa cf       	rjmp	.-12     	; 0x19c2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    19ce:	e8 89       	ldd	r30, Y+16	; 0x10
    19d0:	f9 89       	ldd	r31, Y+17	; 0x11
    19d2:	80 81       	ld	r24, Z
    19d4:	85 ff       	sbrs	r24, 5
    19d6:	f5 cf       	rjmp	.-22     	; 0x19c2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    19d8:	ce 01       	movw	r24, r28
    19da:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    19de:	f1 cf       	rjmp	.-30     	; 0x19c2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    19e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e2:	fe 01       	movw	r30, r28
    19e4:	e8 0f       	add	r30, r24
    19e6:	f1 1d       	adc	r31, r1
    19e8:	e3 5a       	subi	r30, 0xA3	; 163
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    19ee:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    19f0:	ea 89       	ldd	r30, Y+18	; 0x12
    19f2:	fb 89       	ldd	r31, Y+19	; 0x13
    19f4:	80 81       	ld	r24, Z
    19f6:	80 62       	ori	r24, 0x20	; 32
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    19fa:	ee 89       	ldd	r30, Y+22	; 0x16
    19fc:	ff 89       	ldd	r31, Y+23	; 0x17
    19fe:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1a00:	e8 89       	ldd	r30, Y+16	; 0x10
    1a02:	f9 89       	ldd	r31, Y+17	; 0x11
    1a04:	80 81       	ld	r24, Z
    1a06:	80 64       	ori	r24, 0x40	; 64
    1a08:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	08 95       	ret

00001a1c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1a1c:	cf 92       	push	r12
    1a1e:	df 92       	push	r13
    1a20:	ef 92       	push	r14
    1a22:	ff 92       	push	r15
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	ec 01       	movw	r28, r24
    1a2c:	6a 01       	movw	r12, r20
    1a2e:	7b 01       	movw	r14, r22
    1a30:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1a32:	e8 89       	ldd	r30, Y+16	; 0x10
    1a34:	f9 89       	ldd	r31, Y+17	; 0x11
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a3a:	41 15       	cp	r20, r1
    1a3c:	51 4e       	sbci	r21, 0xE1	; 225
    1a3e:	61 05       	cpc	r22, r1
    1a40:	71 05       	cpc	r23, r1
    1a42:	b1 f0       	breq	.+44     	; 0x1a70 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	79 e0       	ldi	r23, 0x09	; 9
    1a48:	8d e3       	ldi	r24, 0x3D	; 61
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a7 01       	movw	r20, r14
    1a4e:	96 01       	movw	r18, r12
    1a50:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__udivmodsi4>
    1a54:	da 01       	movw	r26, r20
    1a56:	c9 01       	movw	r24, r18
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	a1 09       	sbc	r26, r1
    1a5c:	b1 09       	sbc	r27, r1
    1a5e:	b6 95       	lsr	r27
    1a60:	a7 95       	ror	r26
    1a62:	97 95       	ror	r25
    1a64:	87 95       	ror	r24
    1a66:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1a68:	41 15       	cp	r20, r1
    1a6a:	80 e1       	ldi	r24, 0x10	; 16
    1a6c:	58 07       	cpc	r21, r24
    1a6e:	a8 f0       	brcs	.+42     	; 0x1a9a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1a70:	e8 89       	ldd	r30, Y+16	; 0x10
    1a72:	f9 89       	ldd	r31, Y+17	; 0x11
    1a74:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1a76:	60 e8       	ldi	r22, 0x80	; 128
    1a78:	74 e8       	ldi	r23, 0x84	; 132
    1a7a:	8e e1       	ldi	r24, 0x1E	; 30
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a7 01       	movw	r20, r14
    1a80:	96 01       	movw	r18, r12
    1a82:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__udivmodsi4>
    1a86:	ba 01       	movw	r22, r20
    1a88:	a9 01       	movw	r20, r18
    1a8a:	41 50       	subi	r20, 0x01	; 1
    1a8c:	51 09       	sbc	r21, r1
    1a8e:	61 09       	sbc	r22, r1
    1a90:	71 09       	sbc	r23, r1
    1a92:	76 95       	lsr	r23
    1a94:	67 95       	ror	r22
    1a96:	57 95       	ror	r21
    1a98:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1a9a:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a9c:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a9e:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
    1aa0:	ee 85       	ldd	r30, Y+14	; 0x0e
    1aa2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1aa4:	40 83       	st	Z, r20

  _written = false;
    1aa6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1aa8:	ec 89       	ldd	r30, Y+20	; 0x14
    1aaa:	fd 89       	ldd	r31, Y+21	; 0x15
    1aac:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1aae:	ea 89       	ldd	r30, Y+18	; 0x12
    1ab0:	fb 89       	ldd	r31, Y+19	; 0x13
    1ab2:	80 81       	ld	r24, Z
    1ab4:	80 61       	ori	r24, 0x10	; 16
    1ab6:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1ab8:	ea 89       	ldd	r30, Y+18	; 0x12
    1aba:	fb 89       	ldd	r31, Y+19	; 0x13
    1abc:	80 81       	ld	r24, Z
    1abe:	88 60       	ori	r24, 0x08	; 8
    1ac0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1ac2:	ea 89       	ldd	r30, Y+18	; 0x12
    1ac4:	fb 89       	ldd	r31, Y+19	; 0x13
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 68       	ori	r24, 0x80	; 128
    1aca:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1acc:	ea 89       	ldd	r30, Y+18	; 0x12
    1ace:	fb 89       	ldd	r31, Y+19	; 0x13
    1ad0:	80 81       	ld	r24, Z
    1ad2:	8f 7d       	andi	r24, 0xDF	; 223
    1ad4:	80 83       	st	Z, r24
}
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
    1ae4:	08 95       	ret

00001ae6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1ae6:	1f 92       	push	r1
    1ae8:	0f 92       	push	r0
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	0f 92       	push	r0
    1aee:	11 24       	eor	r1, r1
    1af0:	2f 93       	push	r18
    1af2:	8f 93       	push	r24
    1af4:	9f 93       	push	r25
    1af6:	ef 93       	push	r30
    1af8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1afa:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <Serial+0x10>
    1afe:	f0 91 ee 02 	lds	r31, 0x02EE	; 0x8002ee <Serial+0x11>
    1b02:	80 81       	ld	r24, Z
    1b04:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <Serial+0x16>
    1b08:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <Serial+0x17>
    1b0c:	82 fd       	sbrc	r24, 2
    1b0e:	12 c0       	rjmp	.+36     	; 0x1b34 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1b10:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1b12:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <Serial+0x19>
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1b1a:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <Serial+0x1a>
    1b1e:	82 17       	cp	r24, r18
    1b20:	51 f0       	breq	.+20     	; 0x1b36 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1b22:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <Serial+0x19>
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	e3 52       	subi	r30, 0x23	; 35
    1b2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b2c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1b2e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <Serial+0x19>
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1b34:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1b36:	ff 91       	pop	r31
    1b38:	ef 91       	pop	r30
    1b3a:	9f 91       	pop	r25
    1b3c:	8f 91       	pop	r24
    1b3e:	2f 91       	pop	r18
    1b40:	0f 90       	pop	r0
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	0f 90       	pop	r0
    1b46:	1f 90       	pop	r1
    1b48:	18 95       	reti

00001b4a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1b4a:	1f 92       	push	r1
    1b4c:	0f 92       	push	r0
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	0f 92       	push	r0
    1b52:	11 24       	eor	r1, r1
    1b54:	2f 93       	push	r18
    1b56:	3f 93       	push	r19
    1b58:	4f 93       	push	r20
    1b5a:	5f 93       	push	r21
    1b5c:	6f 93       	push	r22
    1b5e:	7f 93       	push	r23
    1b60:	8f 93       	push	r24
    1b62:	9f 93       	push	r25
    1b64:	af 93       	push	r26
    1b66:	bf 93       	push	r27
    1b68:	ef 93       	push	r30
    1b6a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1b6c:	8d ed       	ldi	r24, 0xDD	; 221
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
    1b70:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1b74:	ff 91       	pop	r31
    1b76:	ef 91       	pop	r30
    1b78:	bf 91       	pop	r27
    1b7a:	af 91       	pop	r26
    1b7c:	9f 91       	pop	r25
    1b7e:	8f 91       	pop	r24
    1b80:	7f 91       	pop	r23
    1b82:	6f 91       	pop	r22
    1b84:	5f 91       	pop	r21
    1b86:	4f 91       	pop	r20
    1b88:	3f 91       	pop	r19
    1b8a:	2f 91       	pop	r18
    1b8c:	0f 90       	pop	r0
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	0f 90       	pop	r0
    1b92:	1f 90       	pop	r1
    1b94:	18 95       	reti

00001b96 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1b96:	8d ed       	ldi	r24, 0xDD	; 221
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN14HardwareSerial9availableEv>
    1b9e:	21 e0       	ldi	r18, 0x01	; 1
    1ba0:	89 2b       	or	r24, r25
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <_Z17Serial0_availablev+0x10>
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
}
    1ba6:	82 2f       	mov	r24, r18
    1ba8:	08 95       	ret

00001baa <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1baa:	ed ed       	ldi	r30, 0xDD	; 221
    1bac:	f2 e0       	ldi	r31, 0x02	; 2
    1bae:	13 82       	std	Z+3, r1	; 0x03
    1bb0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1bb2:	88 ee       	ldi	r24, 0xE8	; 232
    1bb4:	93 e0       	ldi	r25, 0x03	; 3
    1bb6:	a0 e0       	ldi	r26, 0x00	; 0
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	84 83       	std	Z+4, r24	; 0x04
    1bbc:	95 83       	std	Z+5, r25	; 0x05
    1bbe:	a6 83       	std	Z+6, r26	; 0x06
    1bc0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1bc2:	8a ee       	ldi	r24, 0xEA	; 234
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	80 83       	st	Z, r24
    1bca:	85 ec       	ldi	r24, 0xC5	; 197
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	95 87       	std	Z+13, r25	; 0x0d
    1bd0:	84 87       	std	Z+12, r24	; 0x0c
    1bd2:	84 ec       	ldi	r24, 0xC4	; 196
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	97 87       	std	Z+15, r25	; 0x0f
    1bd8:	86 87       	std	Z+14, r24	; 0x0e
    1bda:	80 ec       	ldi	r24, 0xC0	; 192
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	91 8b       	std	Z+17, r25	; 0x11
    1be0:	80 8b       	std	Z+16, r24	; 0x10
    1be2:	81 ec       	ldi	r24, 0xC1	; 193
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	93 8b       	std	Z+19, r25	; 0x13
    1be8:	82 8b       	std	Z+18, r24	; 0x12
    1bea:	82 ec       	ldi	r24, 0xC2	; 194
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	95 8b       	std	Z+21, r25	; 0x15
    1bf0:	84 8b       	std	Z+20, r24	; 0x14
    1bf2:	86 ec       	ldi	r24, 0xC6	; 198
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	97 8b       	std	Z+23, r25	; 0x17
    1bf8:	86 8b       	std	Z+22, r24	; 0x16
    1bfa:	11 8e       	std	Z+25, r1	; 0x19
    1bfc:	12 8e       	std	Z+26, r1	; 0x1a
    1bfe:	13 8e       	std	Z+27, r1	; 0x1b
    1c00:	14 8e       	std	Z+28, r1	; 0x1c
    1c02:	08 95       	ret

00001c04 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
    1c04:	08 95       	ret

00001c06 <main>:

int main(void)
{
	init();
    1c06:	0e 94 af 10 	call	0x215e	; 0x215e <init>

	initVariant();
    1c0a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1c0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1c12:	c6 e7       	ldi	r28, 0x76	; 118
    1c14:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1c16:	0e 94 90 08 	call	0x1120	; 0x1120 <loop>
		if (serialEventRun) serialEventRun();
    1c1a:	20 97       	sbiw	r28, 0x00	; 0
    1c1c:	e1 f3       	breq	.-8      	; 0x1c16 <main+0x10>
    1c1e:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_Z14serialEventRunv>
    1c22:	f9 cf       	rjmp	.-14     	; 0x1c16 <main+0x10>

00001c24 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    1c24:	cf 92       	push	r12
    1c26:	df 92       	push	r13
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	6c 01       	movw	r12, r24
    1c36:	7a 01       	movw	r14, r20
    1c38:	8b 01       	movw	r16, r22
    1c3a:	c0 e0       	ldi	r28, 0x00	; 0
    1c3c:	d0 e0       	ldi	r29, 0x00	; 0
    1c3e:	ce 15       	cp	r28, r14
    1c40:	df 05       	cpc	r29, r15
    1c42:	89 f0       	breq	.+34     	; 0x1c66 <_ZN5Print5writeEPKhj+0x42>
    1c44:	d8 01       	movw	r26, r16
    1c46:	6d 91       	ld	r22, X+
    1c48:	8d 01       	movw	r16, r26
    1c4a:	d6 01       	movw	r26, r12
    1c4c:	ed 91       	ld	r30, X+
    1c4e:	fc 91       	ld	r31, X
    1c50:	01 90       	ld	r0, Z+
    1c52:	f0 81       	ld	r31, Z
    1c54:	e0 2d       	mov	r30, r0
    1c56:	c6 01       	movw	r24, r12
    1c58:	09 95       	icall
    1c5a:	89 2b       	or	r24, r25
    1c5c:	11 f4       	brne	.+4      	; 0x1c62 <_ZN5Print5writeEPKhj+0x3e>
    1c5e:	7e 01       	movw	r14, r28
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <_ZN5Print5writeEPKhj+0x42>
    1c62:	21 96       	adiw	r28, 0x01	; 1
    1c64:	ec cf       	rjmp	.-40     	; 0x1c3e <_ZN5Print5writeEPKhj+0x1a>
    1c66:	c7 01       	movw	r24, r14
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	df 90       	pop	r13
    1c76:	cf 90       	pop	r12
    1c78:	08 95       	ret

00001c7a <_ZN5Print5writeEPKc>:
    1c7a:	61 15       	cp	r22, r1
    1c7c:	71 05       	cpc	r23, r1
    1c7e:	79 f0       	breq	.+30     	; 0x1c9e <_ZN5Print5writeEPKc+0x24>
    1c80:	fb 01       	movw	r30, r22
    1c82:	01 90       	ld	r0, Z+
    1c84:	00 20       	and	r0, r0
    1c86:	e9 f7       	brne	.-6      	; 0x1c82 <_ZN5Print5writeEPKc+0x8>
    1c88:	31 97       	sbiw	r30, 0x01	; 1
    1c8a:	af 01       	movw	r20, r30
    1c8c:	46 1b       	sub	r20, r22
    1c8e:	57 0b       	sbc	r21, r23
    1c90:	dc 01       	movw	r26, r24
    1c92:	ed 91       	ld	r30, X+
    1c94:	fc 91       	ld	r31, X
    1c96:	02 80       	ldd	r0, Z+2	; 0x02
    1c98:	f3 81       	ldd	r31, Z+3	; 0x03
    1c9a:	e0 2d       	mov	r30, r0
    1c9c:	09 94       	ijmp
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	08 95       	ret

00001ca4 <_ZN5Print5printERK6String>:
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	ed 91       	ld	r30, X+
    1ca8:	fc 91       	ld	r31, X
    1caa:	db 01       	movw	r26, r22
    1cac:	14 96       	adiw	r26, 0x04	; 4
    1cae:	4d 91       	ld	r20, X+
    1cb0:	5c 91       	ld	r21, X
    1cb2:	15 97       	sbiw	r26, 0x05	; 5
    1cb4:	6d 91       	ld	r22, X+
    1cb6:	7c 91       	ld	r23, X
    1cb8:	02 80       	ldd	r0, Z+2	; 0x02
    1cba:	f3 81       	ldd	r31, Z+3	; 0x03
    1cbc:	e0 2d       	mov	r30, r0
    1cbe:	09 94       	ijmp

00001cc0 <_ZN5Print5printEPKc>:
    1cc0:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <_ZN5Print5writeEPKc>

00001cc4 <_ZN5Print5printEc>:
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	ed 91       	ld	r30, X+
    1cc8:	fc 91       	ld	r31, X
    1cca:	01 90       	ld	r0, Z+
    1ccc:	f0 81       	ld	r31, Z
    1cce:	e0 2d       	mov	r30, r0
    1cd0:	09 94       	ijmp

00001cd2 <_ZN5Print7printlnEv>:
    1cd2:	66 ef       	ldi	r22, 0xF6	; 246
    1cd4:	71 e0       	ldi	r23, 0x01	; 1
    1cd6:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <_ZN5Print5writeEPKc>

00001cda <_ZN5Print7printlnERK6String>:
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	ec 01       	movw	r28, r24
    1ce4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN5Print5printERK6String>
    1ce8:	8c 01       	movw	r16, r24
    1cea:	ce 01       	movw	r24, r28
    1cec:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_ZN5Print7printlnEv>
    1cf0:	80 0f       	add	r24, r16
    1cf2:	91 1f       	adc	r25, r17
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	08 95       	ret

00001cfe <_ZN5Print11printNumberEmh>:
    1cfe:	8f 92       	push	r8
    1d00:	9f 92       	push	r9
    1d02:	af 92       	push	r10
    1d04:	bf 92       	push	r11
    1d06:	cf 92       	push	r12
    1d08:	df 92       	push	r13
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	a1 97       	sbiw	r28, 0x21	; 33
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	7c 01       	movw	r14, r24
    1d28:	d4 2e       	mov	r13, r20
    1d2a:	c5 2e       	mov	r12, r21
    1d2c:	db 01       	movw	r26, r22
    1d2e:	19 a2       	std	Y+33, r1	; 0x21
    1d30:	22 30       	cpi	r18, 0x02	; 2
    1d32:	08 f4       	brcc	.+2      	; 0x1d36 <_ZN5Print11printNumberEmh+0x38>
    1d34:	2a e0       	ldi	r18, 0x0A	; 10
    1d36:	8e 01       	movw	r16, r28
    1d38:	0f 5d       	subi	r16, 0xDF	; 223
    1d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3c:	82 2e       	mov	r8, r18
    1d3e:	91 2c       	mov	r9, r1
    1d40:	a1 2c       	mov	r10, r1
    1d42:	b1 2c       	mov	r11, r1
    1d44:	6d 2d       	mov	r22, r13
    1d46:	7c 2d       	mov	r23, r12
    1d48:	cd 01       	movw	r24, r26
    1d4a:	a5 01       	movw	r20, r10
    1d4c:	94 01       	movw	r18, r8
    1d4e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__udivmodsi4>
    1d52:	d2 2e       	mov	r13, r18
    1d54:	c3 2e       	mov	r12, r19
    1d56:	da 01       	movw	r26, r20
    1d58:	01 50       	subi	r16, 0x01	; 1
    1d5a:	11 09       	sbc	r17, r1
    1d5c:	6a 30       	cpi	r22, 0x0A	; 10
    1d5e:	71 05       	cpc	r23, r1
    1d60:	81 05       	cpc	r24, r1
    1d62:	91 05       	cpc	r25, r1
    1d64:	10 f4       	brcc	.+4      	; 0x1d6a <_ZN5Print11printNumberEmh+0x6c>
    1d66:	60 5d       	subi	r22, 0xD0	; 208
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <_ZN5Print11printNumberEmh+0x6e>
    1d6a:	69 5c       	subi	r22, 0xC9	; 201
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	60 83       	st	Z, r22
    1d70:	23 2b       	or	r18, r19
    1d72:	24 2b       	or	r18, r20
    1d74:	25 2b       	or	r18, r21
    1d76:	31 f7       	brne	.-52     	; 0x1d44 <_ZN5Print11printNumberEmh+0x46>
    1d78:	b8 01       	movw	r22, r16
    1d7a:	c7 01       	movw	r24, r14
    1d7c:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_ZN5Print5writeEPKc>
    1d80:	a1 96       	adiw	r28, 0x21	; 33
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	ff 90       	pop	r15
    1d96:	ef 90       	pop	r14
    1d98:	df 90       	pop	r13
    1d9a:	cf 90       	pop	r12
    1d9c:	bf 90       	pop	r11
    1d9e:	af 90       	pop	r10
    1da0:	9f 90       	pop	r9
    1da2:	8f 90       	pop	r8
    1da4:	08 95       	ret

00001da6 <_ZN5Print5printEli>:
    1da6:	cf 92       	push	r12
    1da8:	df 92       	push	r13
    1daa:	ef 92       	push	r14
    1dac:	ff 92       	push	r15
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	ec 01       	movw	r28, r24
    1db8:	6a 01       	movw	r12, r20
    1dba:	7b 01       	movw	r14, r22
    1dbc:	21 15       	cp	r18, r1
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	79 f4       	brne	.+30     	; 0x1de0 <_ZN5Print5printEli+0x3a>
    1dc2:	e8 81       	ld	r30, Y
    1dc4:	f9 81       	ldd	r31, Y+1	; 0x01
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	f0 81       	ld	r31, Z
    1dca:	e0 2d       	mov	r30, r0
    1dcc:	64 2f       	mov	r22, r20
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	df 90       	pop	r13
    1ddc:	cf 90       	pop	r12
    1dde:	09 94       	ijmp
    1de0:	2a 30       	cpi	r18, 0x0A	; 10
    1de2:	31 05       	cpc	r19, r1
    1de4:	e9 f4       	brne	.+58     	; 0x1e20 <_ZN5Print5printEli+0x7a>
    1de6:	77 ff       	sbrs	r23, 7
    1de8:	1a c0       	rjmp	.+52     	; 0x1e1e <_ZN5Print5printEli+0x78>
    1dea:	6d e2       	ldi	r22, 0x2D	; 45
    1dec:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_ZN5Print5printEc>
    1df0:	8c 01       	movw	r16, r24
    1df2:	44 27       	eor	r20, r20
    1df4:	55 27       	eor	r21, r21
    1df6:	ba 01       	movw	r22, r20
    1df8:	4c 19       	sub	r20, r12
    1dfa:	5d 09       	sbc	r21, r13
    1dfc:	6e 09       	sbc	r22, r14
    1dfe:	7f 09       	sbc	r23, r15
    1e00:	2a e0       	ldi	r18, 0x0A	; 10
    1e02:	ce 01       	movw	r24, r28
    1e04:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN5Print11printNumberEmh>
    1e08:	80 0f       	add	r24, r16
    1e0a:	91 1f       	adc	r25, r17
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	df 90       	pop	r13
    1e1a:	cf 90       	pop	r12
    1e1c:	08 95       	ret
    1e1e:	2a e0       	ldi	r18, 0x0A	; 10
    1e20:	b7 01       	movw	r22, r14
    1e22:	a6 01       	movw	r20, r12
    1e24:	ce 01       	movw	r24, r28
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	df 90       	pop	r13
    1e34:	cf 90       	pop	r12
    1e36:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <_ZN5Print11printNumberEmh>

00001e3a <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1e3a:	4f 92       	push	r4
    1e3c:	5f 92       	push	r5
    1e3e:	6f 92       	push	r6
    1e40:	7f 92       	push	r7
    1e42:	8f 92       	push	r8
    1e44:	9f 92       	push	r9
    1e46:	af 92       	push	r10
    1e48:	bf 92       	push	r11
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	ec 01       	movw	r28, r24
    1e58:	6a 01       	movw	r12, r20
    1e5a:	7b 01       	movw	r14, r22
    1e5c:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1e5e:	9a 01       	movw	r18, r20
    1e60:	ab 01       	movw	r20, r22
    1e62:	c7 01       	movw	r24, r14
    1e64:	b6 01       	movw	r22, r12
    1e66:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__unordsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	19 f0       	breq	.+6      	; 0x1e74 <_ZN5Print10printFloatEdh+0x3a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1e6e:	69 ef       	ldi	r22, 0xF9	; 249
    1e70:	71 e0       	ldi	r23, 0x01	; 1
    1e72:	27 c0       	rjmp	.+78     	; 0x1ec2 <_ZN5Print10printFloatEdh+0x88>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1e74:	26 01       	movw	r4, r12
    1e76:	37 01       	movw	r6, r14
    1e78:	e8 94       	clt
    1e7a:	77 f8       	bld	r7, 7
    1e7c:	2f ef       	ldi	r18, 0xFF	; 255
    1e7e:	3f ef       	ldi	r19, 0xFF	; 255
    1e80:	4f e7       	ldi	r20, 0x7F	; 127
    1e82:	5f e7       	ldi	r21, 0x7F	; 127
    1e84:	c3 01       	movw	r24, r6
    1e86:	b2 01       	movw	r22, r4
    1e88:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__unordsf2>
    1e8c:	81 11       	cpse	r24, r1
    1e8e:	0d c0       	rjmp	.+26     	; 0x1eaa <_ZN5Print10printFloatEdh+0x70>
    1e90:	2f ef       	ldi	r18, 0xFF	; 255
    1e92:	3f ef       	ldi	r19, 0xFF	; 255
    1e94:	4f e7       	ldi	r20, 0x7F	; 127
    1e96:	5f e7       	ldi	r21, 0x7F	; 127
    1e98:	c3 01       	movw	r24, r6
    1e9a:	b2 01       	movw	r22, r4
    1e9c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	1c f4       	brge	.+6      	; 0x1eaa <_ZN5Print10printFloatEdh+0x70>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1ea4:	6d ef       	ldi	r22, 0xFD	; 253
    1ea6:	71 e0       	ldi	r23, 0x01	; 1
    1ea8:	0c c0       	rjmp	.+24     	; 0x1ec2 <_ZN5Print10printFloatEdh+0x88>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1eaa:	2f ef       	ldi	r18, 0xFF	; 255
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	5f e4       	ldi	r21, 0x4F	; 79
    1eb2:	c7 01       	movw	r24, r14
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	0e 94 6f 0b 	call	0x16de	; 0x16de <__gesf2>
    1eba:	18 16       	cp	r1, r24
    1ebc:	9c f4       	brge	.+38     	; 0x1ee4 <_ZN5Print10printFloatEdh+0xaa>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1ebe:	61 e0       	ldi	r22, 0x01	; 1
    1ec0:	72 e0       	ldi	r23, 0x02	; 2
    1ec2:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	bf 90       	pop	r11
    1ed2:	af 90       	pop	r10
    1ed4:	9f 90       	pop	r9
    1ed6:	8f 90       	pop	r8
    1ed8:	7f 90       	pop	r7
    1eda:	6f 90       	pop	r6
    1edc:	5f 90       	pop	r5
    1ede:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1ee0:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1ee4:	2f ef       	ldi	r18, 0xFF	; 255
    1ee6:	3f ef       	ldi	r19, 0xFF	; 255
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	5f ec       	ldi	r21, 0xCF	; 207
    1eec:	c7 01       	movw	r24, r14
    1eee:	b6 01       	movw	r22, r12
    1ef0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
    1ef4:	87 fd       	sbrc	r24, 7
    1ef6:	e3 cf       	rjmp	.-58     	; 0x1ebe <_ZN5Print10printFloatEdh+0x84>
  
  // Handle negative numbers
  if (number < 0.0)
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	a9 01       	movw	r20, r18
    1efe:	c7 01       	movw	r24, r14
    1f00:	b6 01       	movw	r22, r12
    1f02:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__cmpsf2>
    1f06:	87 ff       	sbrs	r24, 7
    1f08:	0a c0       	rjmp	.+20     	; 0x1f1e <_ZN5Print10printFloatEdh+0xe4>
  {
     n += print('-');
    1f0a:	6d e2       	ldi	r22, 0x2D	; 45
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_ZN5Print5printEc>
    1f12:	4c 01       	movw	r8, r24
     number = -number;
    1f14:	f7 fa       	bst	r15, 7
    1f16:	f0 94       	com	r15
    1f18:	f7 f8       	bld	r15, 7
    1f1a:	f0 94       	com	r15
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <_ZN5Print10printFloatEdh+0xe8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1f1e:	81 2c       	mov	r8, r1
    1f20:	91 2c       	mov	r9, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1f22:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1f24:	60 e0       	ldi	r22, 0x00	; 0
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1f2c:	ab 14       	cp	r10, r11
    1f2e:	41 f0       	breq	.+16     	; 0x1f40 <_ZN5Print10printFloatEdh+0x106>
    rounding /= 10.0;
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1f3c:	a3 94       	inc	r10
    1f3e:	f6 cf       	rjmp	.-20     	; 0x1f2c <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
  
  number += rounding;
    1f40:	9b 01       	movw	r18, r22
    1f42:	ac 01       	movw	r20, r24
    1f44:	c7 01       	movw	r24, r14
    1f46:	b6 01       	movw	r22, r12
    1f48:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
    1f4c:	2b 01       	movw	r4, r22
    1f4e:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1f50:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__fixunssfsi>
    1f54:	6b 01       	movw	r12, r22
    1f56:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    1f58:	0e 94 96 0a 	call	0x152c	; 0x152c <__floatunsisf>
    1f5c:	9b 01       	movw	r18, r22
    1f5e:	ac 01       	movw	r20, r24
    1f60:	c3 01       	movw	r24, r6
    1f62:	b2 01       	movw	r22, r4
    1f64:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    1f68:	2b 01       	movw	r4, r22
    1f6a:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1f6c:	2a e0       	ldi	r18, 0x0A	; 10
    1f6e:	b7 01       	movw	r22, r14
    1f70:	a6 01       	movw	r20, r12
    1f72:	ce 01       	movw	r24, r28
    1f74:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1f78:	7c 01       	movw	r14, r24
    1f7a:	e8 0c       	add	r14, r8
    1f7c:	f9 1c       	adc	r15, r9

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1f7e:	bb 20       	and	r11, r11
    1f80:	39 f0       	breq	.+14     	; 0x1f90 <_ZN5Print10printFloatEdh+0x156>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1f82:	65 e0       	ldi	r22, 0x05	; 5
    1f84:	72 e0       	ldi	r23, 0x02	; 2
    1f86:	ce 01       	movw	r24, r28
    1f88:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1f8c:	e8 0e       	add	r14, r24
    1f8e:	f9 1e       	adc	r15, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1f90:	db 2c       	mov	r13, r11
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1f92:	dd 20       	and	r13, r13
    1f94:	39 f1       	breq	.+78     	; 0x1fe4 <_ZN5Print10printFloatEdh+0x1aa>
  {
    remainder *= 10.0;
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e2       	ldi	r20, 0x20	; 32
    1f9c:	51 e4       	ldi	r21, 0x41	; 65
    1f9e:	c3 01       	movw	r24, r6
    1fa0:	b2 01       	movw	r22, r4
    1fa2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    1fa6:	2b 01       	movw	r4, r22
    1fa8:	3c 01       	movw	r6, r24
    int toPrint = int(remainder);
    1faa:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1fae:	4b 01       	movw	r8, r22
    1fb0:	77 0f       	add	r23, r23
    1fb2:	aa 08       	sbc	r10, r10
    1fb4:	bb 08       	sbc	r11, r11
    1fb6:	2a e0       	ldi	r18, 0x0A	; 10
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	b5 01       	movw	r22, r10
    1fbc:	a4 01       	movw	r20, r8
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1fc4:	e8 0e       	add	r14, r24
    1fc6:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    1fc8:	c5 01       	movw	r24, r10
    1fca:	b4 01       	movw	r22, r8
    1fcc:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatsisf>
    1fd0:	9b 01       	movw	r18, r22
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	c3 01       	movw	r24, r6
    1fd6:	b2 01       	movw	r22, r4
    1fd8:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    1fdc:	2b 01       	movw	r4, r22
    1fde:	3c 01       	movw	r6, r24
    1fe0:	da 94       	dec	r13
    1fe2:	d7 cf       	rjmp	.-82     	; 0x1f92 <_ZN5Print10printFloatEdh+0x158>
  } 
  
  return n;
}
    1fe4:	c7 01       	movw	r24, r14
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	df 90       	pop	r13
    1ff0:	cf 90       	pop	r12
    1ff2:	bf 90       	pop	r11
    1ff4:	af 90       	pop	r10
    1ff6:	9f 90       	pop	r9
    1ff8:	8f 90       	pop	r8
    1ffa:	7f 90       	pop	r7
    1ffc:	6f 90       	pop	r6
    1ffe:	5f 90       	pop	r5
    2000:	4f 90       	pop	r4
    2002:	08 95       	ret

00002004 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2004:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <_ZN5Print10printFloatEdh>

00002008 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2008:	1f 92       	push	r1
    200a:	0f 92       	push	r0
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	0f 92       	push	r0
    2010:	11 24       	eor	r1, r1
    2012:	2f 93       	push	r18
    2014:	3f 93       	push	r19
    2016:	8f 93       	push	r24
    2018:	9f 93       	push	r25
    201a:	af 93       	push	r26
    201c:	bf 93       	push	r27
    201e:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <timer0_millis>
    2022:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <timer0_millis+0x1>
    2026:	a0 91 7d 03 	lds	r26, 0x037D	; 0x80037d <timer0_millis+0x2>
    202a:	b0 91 7e 03 	lds	r27, 0x037E	; 0x80037e <timer0_millis+0x3>
    202e:	30 91 7a 03 	lds	r19, 0x037A	; 0x80037a <timer0_fract>
    2032:	23 e0       	ldi	r18, 0x03	; 3
    2034:	23 0f       	add	r18, r19
    2036:	2d 37       	cpi	r18, 0x7D	; 125
    2038:	20 f4       	brcc	.+8      	; 0x2042 <__vector_16+0x3a>
    203a:	01 96       	adiw	r24, 0x01	; 1
    203c:	a1 1d       	adc	r26, r1
    203e:	b1 1d       	adc	r27, r1
    2040:	05 c0       	rjmp	.+10     	; 0x204c <__vector_16+0x44>
    2042:	26 e8       	ldi	r18, 0x86	; 134
    2044:	23 0f       	add	r18, r19
    2046:	02 96       	adiw	r24, 0x02	; 2
    2048:	a1 1d       	adc	r26, r1
    204a:	b1 1d       	adc	r27, r1
    204c:	20 93 7a 03 	sts	0x037A, r18	; 0x80037a <timer0_fract>
    2050:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <timer0_millis>
    2054:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <timer0_millis+0x1>
    2058:	a0 93 7d 03 	sts	0x037D, r26	; 0x80037d <timer0_millis+0x2>
    205c:	b0 93 7e 03 	sts	0x037E, r27	; 0x80037e <timer0_millis+0x3>
    2060:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <timer0_overflow_count>
    2064:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <timer0_overflow_count+0x1>
    2068:	a0 91 81 03 	lds	r26, 0x0381	; 0x800381 <timer0_overflow_count+0x2>
    206c:	b0 91 82 03 	lds	r27, 0x0382	; 0x800382 <timer0_overflow_count+0x3>
    2070:	01 96       	adiw	r24, 0x01	; 1
    2072:	a1 1d       	adc	r26, r1
    2074:	b1 1d       	adc	r27, r1
    2076:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <timer0_overflow_count>
    207a:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <timer0_overflow_count+0x1>
    207e:	a0 93 81 03 	sts	0x0381, r26	; 0x800381 <timer0_overflow_count+0x2>
    2082:	b0 93 82 03 	sts	0x0382, r27	; 0x800382 <timer0_overflow_count+0x3>
    2086:	bf 91       	pop	r27
    2088:	af 91       	pop	r26
    208a:	9f 91       	pop	r25
    208c:	8f 91       	pop	r24
    208e:	3f 91       	pop	r19
    2090:	2f 91       	pop	r18
    2092:	0f 90       	pop	r0
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	0f 90       	pop	r0
    2098:	1f 90       	pop	r1
    209a:	18 95       	reti

0000209c <micros>:
    209c:	3f b7       	in	r19, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <timer0_overflow_count>
    20a4:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <timer0_overflow_count+0x1>
    20a8:	a0 91 81 03 	lds	r26, 0x0381	; 0x800381 <timer0_overflow_count+0x2>
    20ac:	b0 91 82 03 	lds	r27, 0x0382	; 0x800382 <timer0_overflow_count+0x3>
    20b0:	26 b5       	in	r18, 0x26	; 38
    20b2:	a8 9b       	sbis	0x15, 0	; 21
    20b4:	05 c0       	rjmp	.+10     	; 0x20c0 <micros+0x24>
    20b6:	2f 3f       	cpi	r18, 0xFF	; 255
    20b8:	19 f0       	breq	.+6      	; 0x20c0 <micros+0x24>
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	a1 1d       	adc	r26, r1
    20be:	b1 1d       	adc	r27, r1
    20c0:	3f bf       	out	0x3f, r19	; 63
    20c2:	ba 2f       	mov	r27, r26
    20c4:	a9 2f       	mov	r26, r25
    20c6:	98 2f       	mov	r25, r24
    20c8:	88 27       	eor	r24, r24
    20ca:	82 0f       	add	r24, r18
    20cc:	91 1d       	adc	r25, r1
    20ce:	a1 1d       	adc	r26, r1
    20d0:	b1 1d       	adc	r27, r1
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	42 e0       	ldi	r20, 0x02	; 2
    20d8:	66 0f       	add	r22, r22
    20da:	77 1f       	adc	r23, r23
    20dc:	88 1f       	adc	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	4a 95       	dec	r20
    20e2:	d1 f7       	brne	.-12     	; 0x20d8 <micros+0x3c>
    20e4:	08 95       	ret

000020e6 <delay>:
    20e6:	8f 92       	push	r8
    20e8:	9f 92       	push	r9
    20ea:	af 92       	push	r10
    20ec:	bf 92       	push	r11
    20ee:	cf 92       	push	r12
    20f0:	df 92       	push	r13
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	6b 01       	movw	r12, r22
    20f8:	7c 01       	movw	r14, r24
    20fa:	0e 94 4e 10 	call	0x209c	; 0x209c <micros>
    20fe:	4b 01       	movw	r8, r22
    2100:	5c 01       	movw	r10, r24
    2102:	c1 14       	cp	r12, r1
    2104:	d1 04       	cpc	r13, r1
    2106:	e1 04       	cpc	r14, r1
    2108:	f1 04       	cpc	r15, r1
    210a:	01 f1       	breq	.+64     	; 0x214c <delay+0x66>
    210c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <yield>
    2110:	0e 94 4e 10 	call	0x209c	; 0x209c <micros>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	88 19       	sub	r24, r8
    211a:	99 09       	sbc	r25, r9
    211c:	aa 09       	sbc	r26, r10
    211e:	bb 09       	sbc	r27, r11
    2120:	88 3e       	cpi	r24, 0xE8	; 232
    2122:	93 40       	sbci	r25, 0x03	; 3
    2124:	a1 05       	cpc	r26, r1
    2126:	b1 05       	cpc	r27, r1
    2128:	60 f3       	brcs	.-40     	; 0x2102 <delay+0x1c>
    212a:	21 e0       	ldi	r18, 0x01	; 1
    212c:	c2 1a       	sub	r12, r18
    212e:	d1 08       	sbc	r13, r1
    2130:	e1 08       	sbc	r14, r1
    2132:	f1 08       	sbc	r15, r1
    2134:	88 ee       	ldi	r24, 0xE8	; 232
    2136:	88 0e       	add	r8, r24
    2138:	83 e0       	ldi	r24, 0x03	; 3
    213a:	98 1e       	adc	r9, r24
    213c:	a1 1c       	adc	r10, r1
    213e:	b1 1c       	adc	r11, r1
    2140:	c1 14       	cp	r12, r1
    2142:	d1 04       	cpc	r13, r1
    2144:	e1 04       	cpc	r14, r1
    2146:	f1 04       	cpc	r15, r1
    2148:	19 f7       	brne	.-58     	; 0x2110 <delay+0x2a>
    214a:	db cf       	rjmp	.-74     	; 0x2102 <delay+0x1c>
    214c:	ff 90       	pop	r15
    214e:	ef 90       	pop	r14
    2150:	df 90       	pop	r13
    2152:	cf 90       	pop	r12
    2154:	bf 90       	pop	r11
    2156:	af 90       	pop	r10
    2158:	9f 90       	pop	r9
    215a:	8f 90       	pop	r8
    215c:	08 95       	ret

0000215e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    215e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2160:	84 b5       	in	r24, 0x24	; 36
    2162:	82 60       	ori	r24, 0x02	; 2
    2164:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2166:	84 b5       	in	r24, 0x24	; 36
    2168:	81 60       	ori	r24, 0x01	; 1
    216a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    216c:	85 b5       	in	r24, 0x25	; 37
    216e:	82 60       	ori	r24, 0x02	; 2
    2170:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2172:	85 b5       	in	r24, 0x25	; 37
    2174:	81 60       	ori	r24, 0x01	; 1
    2176:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2178:	ee e6       	ldi	r30, 0x6E	; 110
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	81 60       	ori	r24, 0x01	; 1
    2180:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2182:	e1 e8       	ldi	r30, 0x81	; 129
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2188:	80 81       	ld	r24, Z
    218a:	82 60       	ori	r24, 0x02	; 2
    218c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    218e:	80 81       	ld	r24, Z
    2190:	81 60       	ori	r24, 0x01	; 1
    2192:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2194:	e0 e8       	ldi	r30, 0x80	; 128
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	81 60       	ori	r24, 0x01	; 1
    219c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    219e:	e1 eb       	ldi	r30, 0xB1	; 177
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	84 60       	ori	r24, 0x04	; 4
    21a6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    21a8:	e0 eb       	ldi	r30, 0xB0	; 176
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	81 60       	ori	r24, 0x01	; 1
    21b0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    21b2:	ea e7       	ldi	r30, 0x7A	; 122
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	84 60       	ori	r24, 0x04	; 4
    21ba:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    21bc:	80 81       	ld	r24, Z
    21be:	82 60       	ori	r24, 0x02	; 2
    21c0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    21c2:	80 81       	ld	r24, Z
    21c4:	81 60       	ori	r24, 0x01	; 1
    21c6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    21c8:	80 81       	ld	r24, Z
    21ca:	80 68       	ori	r24, 0x80	; 128
    21cc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    21ce:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    21d2:	08 95       	ret

000021d4 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    21d4:	1f 93       	push	r17
    21d6:	cf 93       	push	r28
    21d8:	df 93       	push	r29
    21da:	18 2f       	mov	r17, r24
    21dc:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    21de:	61 e0       	ldi	r22, 0x01	; 1
    21e0:	0e 94 72 11 	call	0x22e4	; 0x22e4 <pinMode>
	if (val == 0)
    21e4:	20 97       	sbiw	r28, 0x00	; 0
    21e6:	11 f4       	brne	.+4      	; 0x21ec <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	04 c0       	rjmp	.+8      	; 0x21f4 <analogWrite+0x20>
	}
	else if (val == 255)
    21ec:	cf 3f       	cpi	r28, 0xFF	; 255
    21ee:	d1 05       	cpc	r29, r1
    21f0:	39 f4       	brne	.+14     	; 0x2200 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    21fc:	0c 94 ae 11 	jmp	0x235c	; 0x235c <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2200:	e1 2f       	mov	r30, r17
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	ea 56       	subi	r30, 0x6A	; 106
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	e4 91       	lpm	r30, Z
    220a:	e3 30       	cpi	r30, 0x03	; 3
    220c:	f9 f0       	breq	.+62     	; 0x224c <analogWrite+0x78>
    220e:	48 f4       	brcc	.+18     	; 0x2222 <analogWrite+0x4e>
    2210:	e1 30       	cpi	r30, 0x01	; 1
    2212:	b9 f0       	breq	.+46     	; 0x2242 <analogWrite+0x6e>
    2214:	e2 30       	cpi	r30, 0x02	; 2
    2216:	a1 f5       	brne	.+104    	; 0x2280 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2218:	84 b5       	in	r24, 0x24	; 36
    221a:	80 62       	ori	r24, 0x20	; 32
    221c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    221e:	c8 bd       	out	0x28, r28	; 40
				break;
    2220:	34 c0       	rjmp	.+104    	; 0x228a <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2222:	e7 30       	cpi	r30, 0x07	; 7
    2224:	e9 f0       	breq	.+58     	; 0x2260 <analogWrite+0x8c>
    2226:	e8 30       	cpi	r30, 0x08	; 8
    2228:	19 f1       	breq	.+70     	; 0x2270 <analogWrite+0x9c>
    222a:	e4 30       	cpi	r30, 0x04	; 4
    222c:	49 f5       	brne	.+82     	; 0x2280 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    222e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2232:	80 62       	ori	r24, 0x20	; 32
    2234:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    2238:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    223c:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    2240:	24 c0       	rjmp	.+72     	; 0x228a <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2242:	84 b5       	in	r24, 0x24	; 36
    2244:	80 68       	ori	r24, 0x80	; 128
    2246:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2248:	c7 bd       	out	0x27, r28	; 39
				break;
    224a:	1f c0       	rjmp	.+62     	; 0x228a <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    224c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2250:	80 68       	ori	r24, 0x80	; 128
    2252:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    2256:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    225a:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    225e:	15 c0       	rjmp	.+42     	; 0x228a <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2260:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2264:	80 68       	ori	r24, 0x80	; 128
    2266:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    226a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    226e:	0d c0       	rjmp	.+26     	; 0x228a <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2270:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2274:	80 62       	ori	r24, 0x20	; 32
    2276:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    227a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    227e:	05 c0       	rjmp	.+10     	; 0x228a <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2280:	c0 38       	cpi	r28, 0x80	; 128
    2282:	d1 05       	cpc	r29, r1
    2284:	0c f0       	brlt	.+2      	; 0x2288 <analogWrite+0xb4>
    2286:	b5 cf       	rjmp	.-150    	; 0x21f2 <analogWrite+0x1e>
    2288:	af cf       	rjmp	.-162    	; 0x21e8 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	1f 91       	pop	r17
    2290:	08 95       	ret

00002292 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2292:	83 30       	cpi	r24, 0x03	; 3
    2294:	81 f0       	breq	.+32     	; 0x22b6 <turnOffPWM+0x24>
    2296:	28 f4       	brcc	.+10     	; 0x22a2 <turnOffPWM+0x10>
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	99 f0       	breq	.+38     	; 0x22c2 <turnOffPWM+0x30>
    229c:	82 30       	cpi	r24, 0x02	; 2
    229e:	a1 f0       	breq	.+40     	; 0x22c8 <turnOffPWM+0x36>
    22a0:	08 95       	ret
    22a2:	87 30       	cpi	r24, 0x07	; 7
    22a4:	a9 f0       	breq	.+42     	; 0x22d0 <turnOffPWM+0x3e>
    22a6:	88 30       	cpi	r24, 0x08	; 8
    22a8:	b9 f0       	breq	.+46     	; 0x22d8 <turnOffPWM+0x46>
    22aa:	84 30       	cpi	r24, 0x04	; 4
    22ac:	d1 f4       	brne	.+52     	; 0x22e2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    22ae:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    22b2:	8f 7d       	andi	r24, 0xDF	; 223
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    22b6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    22ba:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    22bc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    22c0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    22c2:	84 b5       	in	r24, 0x24	; 36
    22c4:	8f 77       	andi	r24, 0x7F	; 127
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    22c8:	84 b5       	in	r24, 0x24	; 36
    22ca:	8f 7d       	andi	r24, 0xDF	; 223
    22cc:	84 bd       	out	0x24, r24	; 36
    22ce:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    22d0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    22d4:	8f 77       	andi	r24, 0x7F	; 127
    22d6:	03 c0       	rjmp	.+6      	; 0x22de <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    22d8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    22dc:	8f 7d       	andi	r24, 0xDF	; 223
    22de:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    22e2:	08 95       	ret

000022e4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	fc 01       	movw	r30, r24
    22ec:	e6 55       	subi	r30, 0x56	; 86
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    22f2:	fc 01       	movw	r30, r24
    22f4:	e2 54       	subi	r30, 0x42	; 66
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    22fa:	88 23       	and	r24, r24
    22fc:	61 f1       	breq	.+88     	; 0x2356 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	fc 01       	movw	r30, r24
    2306:	e4 52       	subi	r30, 0x24	; 36
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	c5 91       	lpm	r28, Z+
    230c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    230e:	fc 01       	movw	r30, r24
    2310:	ee 52       	subi	r30, 0x2E	; 46
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	a5 91       	lpm	r26, Z+
    2316:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2318:	61 11       	cpse	r22, r1
    231a:	09 c0       	rjmp	.+18     	; 0x232e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    231c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    231e:	f8 94       	cli
		*reg &= ~bit;
    2320:	88 81       	ld	r24, Y
    2322:	20 95       	com	r18
    2324:	82 23       	and	r24, r18
    2326:	88 83       	st	Y, r24
		*out &= ~bit;
    2328:	ec 91       	ld	r30, X
    232a:	2e 23       	and	r18, r30
    232c:	0b c0       	rjmp	.+22     	; 0x2344 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    232e:	62 30       	cpi	r22, 0x02	; 2
    2330:	61 f4       	brne	.+24     	; 0x234a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2332:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2334:	f8 94       	cli
		*reg &= ~bit;
    2336:	38 81       	ld	r19, Y
    2338:	82 2f       	mov	r24, r18
    233a:	80 95       	com	r24
    233c:	83 23       	and	r24, r19
    233e:	88 83       	st	Y, r24
		*out |= bit;
    2340:	ec 91       	ld	r30, X
    2342:	2e 2b       	or	r18, r30
    2344:	2c 93       	st	X, r18
		SREG = oldSREG;
    2346:	9f bf       	out	0x3f, r25	; 63
    2348:	06 c0       	rjmp	.+12     	; 0x2356 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    234a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    234c:	f8 94       	cli
		*reg |= bit;
    234e:	e8 81       	ld	r30, Y
    2350:	2e 2b       	or	r18, r30
    2352:	28 83       	st	Y, r18
		SREG = oldSREG;
    2354:	8f bf       	out	0x3f, r24	; 63
	}
}
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	08 95       	ret

0000235c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    235c:	1f 93       	push	r17
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	f9 01       	movw	r30, r18
    2368:	ea 56       	subi	r30, 0x6A	; 106
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    236e:	f9 01       	movw	r30, r18
    2370:	e6 55       	subi	r30, 0x56	; 86
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2376:	f9 01       	movw	r30, r18
    2378:	e2 54       	subi	r30, 0x42	; 66
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    237e:	cc 23       	and	r28, r28
    2380:	c9 f0       	breq	.+50     	; 0x23b4 <digitalWrite+0x58>
    2382:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2384:	81 11       	cpse	r24, r1
    2386:	0e 94 49 11 	call	0x2292	; 0x2292 <turnOffPWM>

	out = portOutputRegister(port);
    238a:	ec 2f       	mov	r30, r28
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	ee 52       	subi	r30, 0x2E	; 46
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	a5 91       	lpm	r26, Z+
    2398:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    239a:	8f b7       	in	r24, 0x3f	; 63
	cli();
    239c:	f8 94       	cli

	if (val == LOW) {
    239e:	11 11       	cpse	r17, r1
    23a0:	05 c0       	rjmp	.+10     	; 0x23ac <digitalWrite+0x50>
		*out &= ~bit;
    23a2:	9c 91       	ld	r25, X
    23a4:	ed 2f       	mov	r30, r29
    23a6:	e0 95       	com	r30
    23a8:	e9 23       	and	r30, r25
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <digitalWrite+0x54>
	} else {
		*out |= bit;
    23ac:	ec 91       	ld	r30, X
    23ae:	ed 2b       	or	r30, r29
    23b0:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    23b2:	8f bf       	out	0x3f, r24	; 63
}
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	08 95       	ret

000023bc <_ZN6StringD1Ev>:

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
	return *this;
}
    23bc:	fc 01       	movw	r30, r24
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <free>

000023c6 <_ZN6String10invalidateEv>:
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	ec 01       	movw	r28, r24
    23cc:	88 81       	ld	r24, Y
    23ce:	99 81       	ldd	r25, Y+1	; 0x01
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	11 f0       	breq	.+4      	; 0x23d8 <_ZN6String10invalidateEv+0x12>
    23d4:	0e 94 c4 19 	call	0x3388	; 0x3388 <free>
    23d8:	19 82       	std	Y+1, r1	; 0x01
    23da:	18 82       	st	Y, r1
    23dc:	1d 82       	std	Y+5, r1	; 0x05
    23de:	1c 82       	std	Y+4, r1	; 0x04
    23e0:	1b 82       	std	Y+3, r1	; 0x03
    23e2:	1a 82       	std	Y+2, r1	; 0x02
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	08 95       	ret

000023ea <_ZN6String12changeBufferEj>:
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	ec 01       	movw	r28, r24
    23f4:	8b 01       	movw	r16, r22
    23f6:	6f 5f       	subi	r22, 0xFF	; 255
    23f8:	7f 4f       	sbci	r23, 0xFF	; 255
    23fa:	88 81       	ld	r24, Y
    23fc:	99 81       	ldd	r25, Y+1	; 0x01
    23fe:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <realloc>
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	31 f0       	breq	.+12     	; 0x2412 <_ZN6String12changeBufferEj+0x28>
    2406:	99 83       	std	Y+1, r25	; 0x01
    2408:	88 83       	st	Y, r24
    240a:	1b 83       	std	Y+3, r17	; 0x03
    240c:	0a 83       	std	Y+2, r16	; 0x02
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <_ZN6String12changeBufferEj+0x2a>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	1f 91       	pop	r17
    241a:	0f 91       	pop	r16
    241c:	08 95       	ret

0000241e <_ZN6String7reserveEj>:
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	ec 01       	movw	r28, r24
    2424:	88 81       	ld	r24, Y
    2426:	99 81       	ldd	r25, Y+1	; 0x01
    2428:	89 2b       	or	r24, r25
    242a:	29 f0       	breq	.+10     	; 0x2436 <_ZN6String7reserveEj+0x18>
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	9b 81       	ldd	r25, Y+3	; 0x03
    2430:	86 17       	cp	r24, r22
    2432:	97 07       	cpc	r25, r23
    2434:	60 f4       	brcc	.+24     	; 0x244e <_ZN6String7reserveEj+0x30>
    2436:	ce 01       	movw	r24, r28
    2438:	0e 94 f5 11 	call	0x23ea	; 0x23ea <_ZN6String12changeBufferEj>
    243c:	88 23       	and	r24, r24
    243e:	41 f0       	breq	.+16     	; 0x2450 <_ZN6String7reserveEj+0x32>
    2440:	8c 81       	ldd	r24, Y+4	; 0x04
    2442:	9d 81       	ldd	r25, Y+5	; 0x05
    2444:	89 2b       	or	r24, r25
    2446:	19 f4       	brne	.+6      	; 0x244e <_ZN6String7reserveEj+0x30>
    2448:	e8 81       	ld	r30, Y
    244a:	f9 81       	ldd	r31, Y+1	; 0x01
    244c:	10 82       	st	Z, r1
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <_ZN6String4copyEPKcj>:
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	ec 01       	movw	r28, r24
    2464:	7b 01       	movw	r14, r22
    2466:	8a 01       	movw	r16, r20
    2468:	ba 01       	movw	r22, r20
    246a:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN6String7reserveEj>
    246e:	81 11       	cpse	r24, r1
    2470:	04 c0       	rjmp	.+8      	; 0x247a <_ZN6String4copyEPKcj+0x24>
    2472:	ce 01       	movw	r24, r28
    2474:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6String10invalidateEv>
    2478:	07 c0       	rjmp	.+14     	; 0x2488 <_ZN6String4copyEPKcj+0x32>
    247a:	1d 83       	std	Y+5, r17	; 0x05
    247c:	0c 83       	std	Y+4, r16	; 0x04
    247e:	b7 01       	movw	r22, r14
    2480:	88 81       	ld	r24, Y
    2482:	99 81       	ldd	r25, Y+1	; 0x01
    2484:	0e 94 2f 1b 	call	0x365e	; 0x365e <strcpy>
    2488:	ce 01       	movw	r24, r28
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	1f 91       	pop	r17
    2490:	0f 91       	pop	r16
    2492:	ff 90       	pop	r15
    2494:	ef 90       	pop	r14
    2496:	08 95       	ret

00002498 <_ZN6StringC1EPKc>:
    2498:	fc 01       	movw	r30, r24
    249a:	11 82       	std	Z+1, r1	; 0x01
    249c:	10 82       	st	Z, r1
    249e:	13 82       	std	Z+3, r1	; 0x03
    24a0:	12 82       	std	Z+2, r1	; 0x02
    24a2:	15 82       	std	Z+5, r1	; 0x05
    24a4:	14 82       	std	Z+4, r1	; 0x04
    24a6:	61 15       	cp	r22, r1
    24a8:	71 05       	cpc	r23, r1
    24aa:	51 f0       	breq	.+20     	; 0x24c0 <_ZN6StringC1EPKc+0x28>
    24ac:	fb 01       	movw	r30, r22
    24ae:	01 90       	ld	r0, Z+
    24b0:	00 20       	and	r0, r0
    24b2:	e9 f7       	brne	.-6      	; 0x24ae <_ZN6StringC1EPKc+0x16>
    24b4:	31 97       	sbiw	r30, 0x01	; 1
    24b6:	af 01       	movw	r20, r30
    24b8:	46 1b       	sub	r20, r22
    24ba:	57 0b       	sbc	r21, r23
    24bc:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <_ZN6String4copyEPKcj>
    24c0:	08 95       	ret

000024c2 <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	ec 01       	movw	r28, r24
	if (cstr) copy(cstr, strlen(cstr));
    24c8:	61 15       	cp	r22, r1
    24ca:	71 05       	cpc	r23, r1
    24cc:	59 f0       	breq	.+22     	; 0x24e4 <_ZN6StringaSEPKc+0x22>
    24ce:	fb 01       	movw	r30, r22
    24d0:	01 90       	ld	r0, Z+
    24d2:	00 20       	and	r0, r0
    24d4:	e9 f7       	brne	.-6      	; 0x24d0 <_ZN6StringaSEPKc+0xe>
    24d6:	31 97       	sbiw	r30, 0x01	; 1
    24d8:	af 01       	movw	r20, r30
    24da:	46 1b       	sub	r20, r22
    24dc:	57 0b       	sbc	r21, r23
    24de:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN6String4copyEPKcj>
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <_ZN6StringaSEPKc+0x26>
	else invalidate();
    24e4:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN6String10invalidateEv>
	
	return *this;
}
    24e8:	ce 01       	movw	r24, r28
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	08 95       	ret

000024f0 <_ZN24Adafruit_HMC5883_UnifiedD1Ev>:
    value = Wire.receive();
  #endif  
  Wire.endTransmission();

  return value;
}
    24f0:	08 95       	ret

000024f2 <_ZN24Adafruit_HMC5883_Unified9getSensorEP8sensor_t>:
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	8c 01       	movw	r16, r24
    24fc:	eb 01       	movw	r28, r22
    24fe:	88 e2       	ldi	r24, 0x28	; 40
    2500:	fb 01       	movw	r30, r22
    2502:	11 92       	st	Z+, r1
    2504:	8a 95       	dec	r24
    2506:	e9 f7       	brne	.-6      	; 0x2502 <_ZN24Adafruit_HMC5883_Unified9getSensorEP8sensor_t+0x10>
    2508:	4b e0       	ldi	r20, 0x0B	; 11
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	67 e0       	ldi	r22, 0x07	; 7
    250e:	72 e0       	ldi	r23, 0x02	; 2
    2510:	ce 01       	movw	r24, r28
    2512:	0e 94 36 1b 	call	0x366c	; 0x366c <strncpy>
    2516:	1b 86       	std	Y+11, r1	; 0x0b
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	a0 e0       	ldi	r26, 0x00	; 0
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	8c 87       	std	Y+12, r24	; 0x0c
    2522:	9d 87       	std	Y+13, r25	; 0x0d
    2524:	ae 87       	std	Y+14, r26	; 0x0e
    2526:	bf 87       	std	Y+15, r27	; 0x0f
    2528:	f8 01       	movw	r30, r16
    252a:	84 89       	ldd	r24, Z+20	; 0x14
    252c:	95 89       	ldd	r25, Z+21	; 0x15
    252e:	a6 89       	ldd	r26, Z+22	; 0x16
    2530:	b7 89       	ldd	r27, Z+23	; 0x17
    2532:	88 8b       	std	Y+16, r24	; 0x10
    2534:	99 8b       	std	Y+17, r25	; 0x11
    2536:	aa 8b       	std	Y+18, r26	; 0x12
    2538:	bb 8b       	std	Y+19, r27	; 0x13
    253a:	82 e0       	ldi	r24, 0x02	; 2
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	a0 e0       	ldi	r26, 0x00	; 0
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	8c 8b       	std	Y+20, r24	; 0x14
    2544:	9d 8b       	std	Y+21, r25	; 0x15
    2546:	ae 8b       	std	Y+22, r26	; 0x16
    2548:	bf 8b       	std	Y+23, r27	; 0x17
    254a:	1c a2       	std	Y+36, r1	; 0x24
    254c:	1d a2       	std	Y+37, r1	; 0x25
    254e:	1e a2       	std	Y+38, r1	; 0x26
    2550:	1f a2       	std	Y+39, r1	; 0x27
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	a8 e4       	ldi	r26, 0x48	; 72
    2558:	b4 e4       	ldi	r27, 0x44	; 68
    255a:	88 8f       	std	Y+24, r24	; 0x18
    255c:	99 8f       	std	Y+25, r25	; 0x19
    255e:	aa 8f       	std	Y+26, r26	; 0x1a
    2560:	bb 8f       	std	Y+27, r27	; 0x1b
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	a8 e4       	ldi	r26, 0x48	; 72
    2568:	b4 ec       	ldi	r27, 0xC4	; 196
    256a:	8c 8f       	std	Y+28, r24	; 0x1c
    256c:	9d 8f       	std	Y+29, r25	; 0x1d
    256e:	ae 8f       	std	Y+30, r26	; 0x1e
    2570:	bf 8f       	std	Y+31, r27	; 0x1f
    2572:	8d ec       	ldi	r24, 0xCD	; 205
    2574:	9c ec       	ldi	r25, 0xCC	; 204
    2576:	ac e4       	ldi	r26, 0x4C	; 76
    2578:	be e3       	ldi	r27, 0x3E	; 62
    257a:	88 a3       	std	Y+32, r24	; 0x20
    257c:	99 a3       	std	Y+33, r25	; 0x21
    257e:	aa a3       	std	Y+34, r26	; 0x22
    2580:	bb a3       	std	Y+35, r27	; 0x23
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	1f 91       	pop	r17
    2588:	0f 91       	pop	r16
    258a:	08 95       	ret

0000258c <_ZN24Adafruit_HMC5883_UnifiedD0Ev>:
    258c:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <_ZdlPv>

00002590 <_ZN24Adafruit_HMC5883_UnifiedC1El>:
    2590:	23 e1       	ldi	r18, 0x13	; 19
    2592:	32 e0       	ldi	r19, 0x02	; 2
    2594:	fc 01       	movw	r30, r24
    2596:	31 83       	std	Z+1, r19	; 0x01
    2598:	20 83       	st	Z, r18
    259a:	44 8b       	std	Z+20, r20	; 0x14
    259c:	55 8b       	std	Z+21, r21	; 0x15
    259e:	66 8b       	std	Z+22, r22	; 0x16
    25a0:	77 8b       	std	Z+23, r23	; 0x17
    25a2:	08 95       	ret

000025a4 <_ZN24Adafruit_HMC5883_Unified4readEv>:
/*!
    @brief  Reads the raw data from the sensor
*/
/**************************************************************************/
void Adafruit_HMC5883_Unified::read()
{
    25a4:	6f 92       	push	r6
    25a6:	7f 92       	push	r7
    25a8:	8f 92       	push	r8
    25aa:	9f 92       	push	r9
    25ac:	af 92       	push	r10
    25ae:	bf 92       	push	r11
    25b0:	cf 92       	push	r12
    25b2:	df 92       	push	r13
    25b4:	ef 92       	push	r14
    25b6:	ff 92       	push	r15
    25b8:	0f 93       	push	r16
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	8c 01       	movw	r16, r24
  // Read the magnetometer
  Wire.beginTransmission((byte)HMC5883_ADDRESS_MAG);
    25c2:	6e e1       	ldi	r22, 0x1E	; 30
    25c4:	83 e8       	ldi	r24, 0x83	; 131
    25c6:	93 e0       	ldi	r25, 0x03	; 3
    25c8:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_ZN7TwoWire17beginTransmissionEh>
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    25cc:	63 e0       	ldi	r22, 0x03	; 3
    25ce:	83 e8       	ldi	r24, 0x83	; 131
    25d0:	93 e0       	ldi	r25, 0x03	; 3
    25d2:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_ZN7TwoWire5writeEh>
  #if ARDUINO >= 100
    Wire.write(HMC5883_REGISTER_MAG_OUT_X_H_M);
  #else
    Wire.send(HMC5883_REGISTER_MAG_OUT_X_H_M);
  #endif
  Wire.endTransmission();
    25d6:	83 e8       	ldi	r24, 0x83	; 131
    25d8:	93 e0       	ldi	r25, 0x03	; 3
    25da:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((byte)HMC5883_ADDRESS_MAG, (byte)6);
    25de:	46 e0       	ldi	r20, 0x06	; 6
    25e0:	6e e1       	ldi	r22, 0x1E	; 30
    25e2:	83 e8       	ldi	r24, 0x83	; 131
    25e4:	93 e0       	ldi	r25, 0x03	; 3
    25e6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZN7TwoWire11requestFromEhh>
  
  // Wait around until enough data is available
  while (Wire.available() < 6);
    25ea:	83 e8       	ldi	r24, 0x83	; 131
    25ec:	93 e0       	ldi	r25, 0x03	; 3
    25ee:	0e 94 90 15 	call	0x2b20	; 0x2b20 <_ZN7TwoWire9availableEv>
    25f2:	06 97       	sbiw	r24, 0x06	; 6
    25f4:	d4 f3       	brlt	.-12     	; 0x25ea <_ZN24Adafruit_HMC5883_Unified4readEv+0x46>

  // Note high before low (different than accel)  
  #if ARDUINO >= 100
    uint8_t xhi = Wire.read();
    25f6:	83 e8       	ldi	r24, 0x83	; 131
    25f8:	93 e0       	ldi	r25, 0x03	; 3
    25fa:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
    25fe:	68 2e       	mov	r6, r24
    uint8_t xlo = Wire.read();
    2600:	83 e8       	ldi	r24, 0x83	; 131
    2602:	93 e0       	ldi	r25, 0x03	; 3
    2604:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
    2608:	78 2e       	mov	r7, r24
    uint8_t zhi = Wire.read();
    260a:	83 e8       	ldi	r24, 0x83	; 131
    260c:	93 e0       	ldi	r25, 0x03	; 3
    260e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
    2612:	a8 2e       	mov	r10, r24
    uint8_t zlo = Wire.read();
    2614:	83 e8       	ldi	r24, 0x83	; 131
    2616:	93 e0       	ldi	r25, 0x03	; 3
    2618:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
    261c:	b8 2e       	mov	r11, r24
    uint8_t yhi = Wire.read();
    261e:	83 e8       	ldi	r24, 0x83	; 131
    2620:	93 e0       	ldi	r25, 0x03	; 3
    2622:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
    2626:	88 2e       	mov	r8, r24
    uint8_t ylo = Wire.read();
    2628:	83 e8       	ldi	r24, 0x83	; 131
    262a:	93 e0       	ldi	r25, 0x03	; 3
    262c:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN7TwoWire4readEv>
    2630:	98 2e       	mov	r9, r24
    uint8_t yhi = Wire.receive();
    uint8_t ylo = Wire.receive();
  #endif
  
  // Shift values to create properly formed integer (low byte first)
  _magData.x = (int16_t)(xlo | ((int16_t)xhi << 8));
    2632:	d6 2c       	mov	r13, r6
    2634:	c1 2c       	mov	r12, r1
    2636:	b6 01       	movw	r22, r12
    2638:	67 29       	or	r22, r7
    263a:	07 2e       	mov	r0, r23
    263c:	00 0c       	add	r0, r0
    263e:	88 0b       	sbc	r24, r24
    2640:	99 0b       	sbc	r25, r25
    2642:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatsisf>
    2646:	f8 01       	movw	r30, r16
    2648:	64 83       	std	Z+4, r22	; 0x04
    264a:	75 83       	std	Z+5, r23	; 0x05
    264c:	86 83       	std	Z+6, r24	; 0x06
    264e:	97 83       	std	Z+7, r25	; 0x07
  _magData.y = (int16_t)(ylo | ((int16_t)yhi << 8));
    2650:	f8 2c       	mov	r15, r8
    2652:	e1 2c       	mov	r14, r1
    2654:	b7 01       	movw	r22, r14
    2656:	69 29       	or	r22, r9
    2658:	07 2e       	mov	r0, r23
    265a:	00 0c       	add	r0, r0
    265c:	88 0b       	sbc	r24, r24
    265e:	99 0b       	sbc	r25, r25
    2660:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatsisf>
    2664:	f8 01       	movw	r30, r16
    2666:	60 87       	std	Z+8, r22	; 0x08
    2668:	71 87       	std	Z+9, r23	; 0x09
    266a:	82 87       	std	Z+10, r24	; 0x0a
    266c:	93 87       	std	Z+11, r25	; 0x0b
  _magData.z = (int16_t)(zlo | ((int16_t)zhi << 8));
    266e:	da 2d       	mov	r29, r10
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	cf 2f       	mov	r28, r31
    2674:	be 01       	movw	r22, r28
    2676:	6b 29       	or	r22, r11
    2678:	07 2e       	mov	r0, r23
    267a:	00 0c       	add	r0, r0
    267c:	88 0b       	sbc	r24, r24
    267e:	99 0b       	sbc	r25, r25
    2680:	0e 94 98 0a 	call	0x1530	; 0x1530 <__floatsisf>
    2684:	f8 01       	movw	r30, r16
    2686:	64 87       	std	Z+12, r22	; 0x0c
    2688:	75 87       	std	Z+13, r23	; 0x0d
    268a:	86 87       	std	Z+14, r24	; 0x0e
    268c:	97 87       	std	Z+15, r25	; 0x0f
  
  // ToDo: Calculate orientation
  _magData.orientation = 0.0;
    268e:	10 8a       	std	Z+16, r1	; 0x10
    2690:	11 8a       	std	Z+17, r1	; 0x11
    2692:	12 8a       	std	Z+18, r1	; 0x12
    2694:	13 8a       	std	Z+19, r1	; 0x13
}
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	ff 90       	pop	r15
    26a0:	ef 90       	pop	r14
    26a2:	df 90       	pop	r13
    26a4:	cf 90       	pop	r12
    26a6:	bf 90       	pop	r11
    26a8:	af 90       	pop	r10
    26aa:	9f 90       	pop	r9
    26ac:	8f 90       	pop	r8
    26ae:	7f 90       	pop	r7
    26b0:	6f 90       	pop	r6
    26b2:	08 95       	ret

000026b4 <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t>:
/**************************************************************************/
/*! 
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_HMC5883_Unified::getEvent(sensors_event_t *event) {
    26b4:	cf 92       	push	r12
    26b6:	df 92       	push	r13
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	8c 01       	movw	r16, r24
    26c6:	eb 01       	movw	r28, r22
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
    26c8:	84 e2       	ldi	r24, 0x24	; 36
    26ca:	fb 01       	movw	r30, r22
    26cc:	11 92       	st	Z+, r1
    26ce:	8a 95       	dec	r24
    26d0:	e9 f7       	brne	.-6      	; 0x26cc <_ZN24Adafruit_HMC5883_Unified8getEventEP15sensors_event_t+0x18>

  /* Read new data */
  read();
    26d2:	c8 01       	movw	r24, r16
    26d4:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <_ZN24Adafruit_HMC5883_Unified4readEv>
  
  event->version   = sizeof(sensors_event_t);
    26d8:	84 e2       	ldi	r24, 0x24	; 36
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	a0 e0       	ldi	r26, 0x00	; 0
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	88 83       	st	Y, r24
    26e2:	99 83       	std	Y+1, r25	; 0x01
    26e4:	aa 83       	std	Y+2, r26	; 0x02
    26e6:	bb 83       	std	Y+3, r27	; 0x03
  event->sensor_id = _sensorID;
    26e8:	f8 01       	movw	r30, r16
    26ea:	84 89       	ldd	r24, Z+20	; 0x14
    26ec:	95 89       	ldd	r25, Z+21	; 0x15
    26ee:	a6 89       	ldd	r26, Z+22	; 0x16
    26f0:	b7 89       	ldd	r27, Z+23	; 0x17
    26f2:	8c 83       	std	Y+4, r24	; 0x04
    26f4:	9d 83       	std	Y+5, r25	; 0x05
    26f6:	ae 83       	std	Y+6, r26	; 0x06
    26f8:	bf 83       	std	Y+7, r27	; 0x07
  event->type      = SENSOR_TYPE_MAGNETIC_FIELD;
    26fa:	82 e0       	ldi	r24, 0x02	; 2
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	a0 e0       	ldi	r26, 0x00	; 0
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	88 87       	std	Y+8, r24	; 0x08
    2704:	99 87       	std	Y+9, r25	; 0x09
    2706:	aa 87       	std	Y+10, r26	; 0x0a
    2708:	bb 87       	std	Y+11, r27	; 0x0b
  event->timestamp = 0;
    270a:	18 8a       	std	Y+16, r1	; 0x10
    270c:	19 8a       	std	Y+17, r1	; 0x11
    270e:	1a 8a       	std	Y+18, r1	; 0x12
    2710:	1b 8a       	std	Y+19, r1	; 0x13
  event->magnetic.x = _magData.x / _hmc5883_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA;
    2712:	c0 90 2c 01 	lds	r12, 0x012C	; 0x80012c <_ZL21_hmc5883_Gauss_LSB_XY>
    2716:	d0 90 2d 01 	lds	r13, 0x012D	; 0x80012d <_ZL21_hmc5883_Gauss_LSB_XY+0x1>
    271a:	e0 90 2e 01 	lds	r14, 0x012E	; 0x80012e <_ZL21_hmc5883_Gauss_LSB_XY+0x2>
    271e:	f0 90 2f 01 	lds	r15, 0x012F	; 0x80012f <_ZL21_hmc5883_Gauss_LSB_XY+0x3>
    2722:	a7 01       	movw	r20, r14
    2724:	96 01       	movw	r18, r12
    2726:	64 81       	ldd	r22, Z+4	; 0x04
    2728:	75 81       	ldd	r23, Z+5	; 0x05
    272a:	86 81       	ldd	r24, Z+6	; 0x06
    272c:	97 81       	ldd	r25, Z+7	; 0x07
    272e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	48 ec       	ldi	r20, 0xC8	; 200
    2738:	52 e4       	ldi	r21, 0x42	; 66
    273a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    273e:	6c 8b       	std	Y+20, r22	; 0x14
    2740:	7d 8b       	std	Y+21, r23	; 0x15
    2742:	8e 8b       	std	Y+22, r24	; 0x16
    2744:	9f 8b       	std	Y+23, r25	; 0x17
  event->magnetic.y = _magData.y / _hmc5883_Gauss_LSB_XY * SENSORS_GAUSS_TO_MICROTESLA;
    2746:	a7 01       	movw	r20, r14
    2748:	96 01       	movw	r18, r12
    274a:	f8 01       	movw	r30, r16
    274c:	60 85       	ldd	r22, Z+8	; 0x08
    274e:	71 85       	ldd	r23, Z+9	; 0x09
    2750:	82 85       	ldd	r24, Z+10	; 0x0a
    2752:	93 85       	ldd	r25, Z+11	; 0x0b
    2754:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	48 ec       	ldi	r20, 0xC8	; 200
    275e:	52 e4       	ldi	r21, 0x42	; 66
    2760:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    2764:	68 8f       	std	Y+24, r22	; 0x18
    2766:	79 8f       	std	Y+25, r23	; 0x19
    2768:	8a 8f       	std	Y+26, r24	; 0x1a
    276a:	9b 8f       	std	Y+27, r25	; 0x1b
  event->magnetic.z = _magData.z / _hmc5883_Gauss_LSB_Z * SENSORS_GAUSS_TO_MICROTESLA;
    276c:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <_ZL20_hmc5883_Gauss_LSB_Z>
    2770:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <_ZL20_hmc5883_Gauss_LSB_Z+0x1>
    2774:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <_ZL20_hmc5883_Gauss_LSB_Z+0x2>
    2778:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <_ZL20_hmc5883_Gauss_LSB_Z+0x3>
    277c:	f8 01       	movw	r30, r16
    277e:	64 85       	ldd	r22, Z+12	; 0x0c
    2780:	75 85       	ldd	r23, Z+13	; 0x0d
    2782:	86 85       	ldd	r24, Z+14	; 0x0e
    2784:	97 85       	ldd	r25, Z+15	; 0x0f
    2786:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	48 ec       	ldi	r20, 0xC8	; 200
    2790:	52 e4       	ldi	r21, 0x42	; 66
    2792:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    2796:	6c 8f       	std	Y+28, r22	; 0x1c
    2798:	7d 8f       	std	Y+29, r23	; 0x1d
    279a:	8e 8f       	std	Y+30, r24	; 0x1e
    279c:	9f 8f       	std	Y+31, r25	; 0x1f
  
  return true;
}
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	1f 91       	pop	r17
    27a6:	0f 91       	pop	r16
    27a8:	ff 90       	pop	r15
    27aa:	ef 90       	pop	r14
    27ac:	df 90       	pop	r13
    27ae:	cf 90       	pop	r12
    27b0:	08 95       	ret

000027b2 <_ZN6KalmanC1Ev>:
 e-mail   :  kristianl@tkjelectronics.com
 */

#include "Kalman.h"

Kalman::Kalman() {
    27b2:	fc 01       	movw	r30, r24
    /* We will set the variables like so, these can also be tuned by the user */
    Q_angle = 0.001f;
    27b4:	8f e6       	ldi	r24, 0x6F	; 111
    27b6:	92 e1       	ldi	r25, 0x12	; 18
    27b8:	a3 e8       	ldi	r26, 0x83	; 131
    27ba:	ba e3       	ldi	r27, 0x3A	; 58
    27bc:	80 83       	st	Z, r24
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	a2 83       	std	Z+2, r26	; 0x02
    27c2:	b3 83       	std	Z+3, r27	; 0x03
    Q_bias = 0.003f;
    27c4:	86 ea       	ldi	r24, 0xA6	; 166
    27c6:	9b e9       	ldi	r25, 0x9B	; 155
    27c8:	a4 e4       	ldi	r26, 0x44	; 68
    27ca:	bb e3       	ldi	r27, 0x3B	; 59
    27cc:	84 83       	std	Z+4, r24	; 0x04
    27ce:	95 83       	std	Z+5, r25	; 0x05
    27d0:	a6 83       	std	Z+6, r26	; 0x06
    27d2:	b7 83       	std	Z+7, r27	; 0x07
    R_measure = 0.03f;
    27d4:	8f e8       	ldi	r24, 0x8F	; 143
    27d6:	92 ec       	ldi	r25, 0xC2	; 194
    27d8:	a5 ef       	ldi	r26, 0xF5	; 245
    27da:	bc e3       	ldi	r27, 0x3C	; 60
    27dc:	80 87       	std	Z+8, r24	; 0x08
    27de:	91 87       	std	Z+9, r25	; 0x09
    27e0:	a2 87       	std	Z+10, r26	; 0x0a
    27e2:	b3 87       	std	Z+11, r27	; 0x0b

    angle = 0.0f; // Reset the angle
    27e4:	14 86       	std	Z+12, r1	; 0x0c
    27e6:	15 86       	std	Z+13, r1	; 0x0d
    27e8:	16 86       	std	Z+14, r1	; 0x0e
    27ea:	17 86       	std	Z+15, r1	; 0x0f
    bias = 0.0f; // Reset bias
    27ec:	10 8a       	std	Z+16, r1	; 0x10
    27ee:	11 8a       	std	Z+17, r1	; 0x11
    27f0:	12 8a       	std	Z+18, r1	; 0x12
    27f2:	13 8a       	std	Z+19, r1	; 0x13

    P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
    27f4:	10 8e       	std	Z+24, r1	; 0x18
    27f6:	11 8e       	std	Z+25, r1	; 0x19
    27f8:	12 8e       	std	Z+26, r1	; 0x1a
    27fa:	13 8e       	std	Z+27, r1	; 0x1b
    P[0][1] = 0.0f;
    27fc:	14 8e       	std	Z+28, r1	; 0x1c
    27fe:	15 8e       	std	Z+29, r1	; 0x1d
    2800:	16 8e       	std	Z+30, r1	; 0x1e
    2802:	17 8e       	std	Z+31, r1	; 0x1f
    P[1][0] = 0.0f;
    2804:	10 a2       	std	Z+32, r1	; 0x20
    2806:	11 a2       	std	Z+33, r1	; 0x21
    2808:	12 a2       	std	Z+34, r1	; 0x22
    280a:	13 a2       	std	Z+35, r1	; 0x23
    P[1][1] = 0.0f;
    280c:	14 a2       	std	Z+36, r1	; 0x24
    280e:	15 a2       	std	Z+37, r1	; 0x25
    2810:	16 a2       	std	Z+38, r1	; 0x26
    2812:	17 a2       	std	Z+39, r1	; 0x27
    2814:	08 95       	ret

00002816 <_ZN6Kalman8getAngleEfff>:
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float Kalman::getAngle(float newAngle, float newRate, float dt) {
    2816:	2f 92       	push	r2
    2818:	3f 92       	push	r3
    281a:	4f 92       	push	r4
    281c:	5f 92       	push	r5
    281e:	6f 92       	push	r6
    2820:	7f 92       	push	r7
    2822:	8f 92       	push	r8
    2824:	9f 92       	push	r9
    2826:	af 92       	push	r10
    2828:	bf 92       	push	r11
    282a:	cf 92       	push	r12
    282c:	df 92       	push	r13
    282e:	ef 92       	push	r14
    2830:	ff 92       	push	r15
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
    2836:	cf 93       	push	r28
    2838:	df 93       	push	r29
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	6c 97       	sbiw	r28, 0x1c	; 28
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	1c 01       	movw	r2, r24
    284c:	4d 8b       	std	Y+21, r20	; 0x15
    284e:	5e 8b       	std	Y+22, r21	; 0x16
    2850:	6f 8b       	std	Y+23, r22	; 0x17
    2852:	78 8f       	std	Y+24, r23	; 0x18
    2854:	c9 01       	movw	r24, r18
    2856:	b8 01       	movw	r22, r16
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
    2858:	d1 01       	movw	r26, r2
    285a:	50 96       	adiw	r26, 0x10	; 16
    285c:	2d 91       	ld	r18, X+
    285e:	3d 91       	ld	r19, X+
    2860:	4d 91       	ld	r20, X+
    2862:	5c 91       	ld	r21, X
    2864:	53 97       	sbiw	r26, 0x13	; 19
    2866:	29 8b       	std	Y+17, r18	; 0x11
    2868:	3a 8b       	std	Y+18, r19	; 0x12
    286a:	4b 8b       	std	Y+19, r20	; 0x13
    286c:	5c 8b       	std	Y+20, r21	; 0x14
    286e:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    2872:	9b 01       	movw	r18, r22
    2874:	ac 01       	movw	r20, r24
    2876:	f1 01       	movw	r30, r2
    2878:	64 8b       	std	Z+20, r22	; 0x14
    287a:	75 8b       	std	Z+21, r23	; 0x15
    287c:	86 8b       	std	Z+22, r24	; 0x16
    287e:	97 8b       	std	Z+23, r25	; 0x17
    angle += dt * rate;
    2880:	c7 01       	movw	r24, r14
    2882:	b6 01       	movw	r22, r12
    2884:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    2888:	d1 01       	movw	r26, r2
    288a:	1c 96       	adiw	r26, 0x0c	; 12
    288c:	2d 91       	ld	r18, X+
    288e:	3d 91       	ld	r19, X+
    2890:	4d 91       	ld	r20, X+
    2892:	5c 91       	ld	r21, X
    2894:	1f 97       	sbiw	r26, 0x0f	; 15
    2896:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
    289a:	6d 87       	std	Y+13, r22	; 0x0d
    289c:	7e 87       	std	Y+14, r23	; 0x0e
    289e:	8f 87       	std	Y+15, r24	; 0x0f
    28a0:	98 8b       	std	Y+16, r25	; 0x10

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
    28a2:	d1 01       	movw	r26, r2
    28a4:	94 96       	adiw	r26, 0x24	; 36
    28a6:	2d 91       	ld	r18, X+
    28a8:	3d 91       	ld	r19, X+
    28aa:	4d 91       	ld	r20, X+
    28ac:	5c 91       	ld	r21, X
    28ae:	97 97       	sbiw	r26, 0x27	; 39
    28b0:	2d 83       	std	Y+5, r18	; 0x05
    28b2:	3e 83       	std	Y+6, r19	; 0x06
    28b4:	4f 83       	std	Y+7, r20	; 0x07
    28b6:	58 87       	std	Y+8, r21	; 0x08
    28b8:	c7 01       	movw	r24, r14
    28ba:	b6 01       	movw	r22, r12
    28bc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    28c0:	4b 01       	movw	r8, r22
    28c2:	5c 01       	movw	r10, r24
    28c4:	f1 01       	movw	r30, r2
    28c6:	44 8c       	ldd	r4, Z+28	; 0x1c
    28c8:	55 8c       	ldd	r5, Z+29	; 0x1d
    28ca:	66 8c       	ldd	r6, Z+30	; 0x1e
    28cc:	77 8c       	ldd	r7, Z+31	; 0x1f
    28ce:	20 a1       	ldd	r18, Z+32	; 0x20
    28d0:	31 a1       	ldd	r19, Z+33	; 0x21
    28d2:	42 a1       	ldd	r20, Z+34	; 0x22
    28d4:	53 a1       	ldd	r21, Z+35	; 0x23
    28d6:	29 87       	std	Y+9, r18	; 0x09
    28d8:	3a 87       	std	Y+10, r19	; 0x0a
    28da:	4b 87       	std	Y+11, r20	; 0x0b
    28dc:	5c 87       	std	Y+12, r21	; 0x0c
    28de:	a3 01       	movw	r20, r6
    28e0:	92 01       	movw	r18, r4
    28e2:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    28e6:	29 85       	ldd	r18, Y+9	; 0x09
    28e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    28ea:	4b 85       	ldd	r20, Y+11	; 0x0b
    28ec:	5c 85       	ldd	r21, Y+12	; 0x0c
    28ee:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    28f2:	f1 01       	movw	r30, r2
    28f4:	20 81       	ld	r18, Z
    28f6:	31 81       	ldd	r19, Z+1	; 0x01
    28f8:	42 81       	ldd	r20, Z+2	; 0x02
    28fa:	53 81       	ldd	r21, Z+3	; 0x03
    28fc:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
    2900:	9b 01       	movw	r18, r22
    2902:	ac 01       	movw	r20, r24
    2904:	c7 01       	movw	r24, r14
    2906:	b6 01       	movw	r22, r12
    2908:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    290c:	d1 01       	movw	r26, r2
    290e:	58 96       	adiw	r26, 0x18	; 24
    2910:	2d 91       	ld	r18, X+
    2912:	3d 91       	ld	r19, X+
    2914:	4d 91       	ld	r20, X+
    2916:	5c 91       	ld	r21, X
    2918:	5b 97       	sbiw	r26, 0x1b	; 27
    291a:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
    291e:	69 83       	std	Y+1, r22	; 0x01
    2920:	7a 83       	std	Y+2, r23	; 0x02
    2922:	8b 83       	std	Y+3, r24	; 0x03
    2924:	9c 83       	std	Y+4, r25	; 0x04
    P[0][1] -= dt * P[1][1];
    2926:	a5 01       	movw	r20, r10
    2928:	94 01       	movw	r18, r8
    292a:	c3 01       	movw	r24, r6
    292c:	b2 01       	movw	r22, r4
    292e:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    2932:	2b 01       	movw	r4, r22
    2934:	3c 01       	movw	r6, r24
    P[1][0] -= dt * P[1][1];
    2936:	a5 01       	movw	r20, r10
    2938:	94 01       	movw	r18, r8
    293a:	69 85       	ldd	r22, Y+9	; 0x09
    293c:	7a 85       	ldd	r23, Y+10	; 0x0a
    293e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2940:	9c 85       	ldd	r25, Y+12	; 0x0c
    2942:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    2946:	69 87       	std	Y+9, r22	; 0x09
    2948:	7a 87       	std	Y+10, r23	; 0x0a
    294a:	8b 87       	std	Y+11, r24	; 0x0b
    294c:	9c 87       	std	Y+12, r25	; 0x0c
    P[1][1] += Q_bias * dt;
    294e:	f1 01       	movw	r30, r2
    2950:	24 81       	ldd	r18, Z+4	; 0x04
    2952:	35 81       	ldd	r19, Z+5	; 0x05
    2954:	46 81       	ldd	r20, Z+6	; 0x06
    2956:	57 81       	ldd	r21, Z+7	; 0x07
    2958:	c7 01       	movw	r24, r14
    295a:	b6 01       	movw	r22, r12
    295c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    2960:	9b 01       	movw	r18, r22
    2962:	ac 01       	movw	r20, r24
    2964:	6d 81       	ldd	r22, Y+5	; 0x05
    2966:	7e 81       	ldd	r23, Y+6	; 0x06
    2968:	8f 81       	ldd	r24, Y+7	; 0x07
    296a:	98 85       	ldd	r25, Y+8	; 0x08
    296c:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
    2970:	69 8f       	std	Y+25, r22	; 0x19
    2972:	7a 8f       	std	Y+26, r23	; 0x1a
    2974:	8b 8f       	std	Y+27, r24	; 0x1b
    2976:	9c 8f       	std	Y+28, r25	; 0x1c

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = P[0][0] + R_measure; // Estimate error
    2978:	d1 01       	movw	r26, r2
    297a:	18 96       	adiw	r26, 0x08	; 8
    297c:	2d 91       	ld	r18, X+
    297e:	3d 91       	ld	r19, X+
    2980:	4d 91       	ld	r20, X+
    2982:	5c 91       	ld	r21, X
    2984:	1b 97       	sbiw	r26, 0x0b	; 11
    2986:	69 81       	ldd	r22, Y+1	; 0x01
    2988:	7a 81       	ldd	r23, Y+2	; 0x02
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	9c 81       	ldd	r25, Y+4	; 0x04
    298e:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
    2992:	6b 01       	movw	r12, r22
    2994:	7c 01       	movw	r14, r24
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
    2996:	9b 01       	movw	r18, r22
    2998:	ac 01       	movw	r20, r24
    299a:	69 81       	ldd	r22, Y+1	; 0x01
    299c:	7a 81       	ldd	r23, Y+2	; 0x02
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	9c 81       	ldd	r25, Y+4	; 0x04
    29a2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
    29a6:	4b 01       	movw	r8, r22
    29a8:	5c 01       	movw	r10, r24
    K[1] = P[1][0] / S;
    29aa:	a7 01       	movw	r20, r14
    29ac:	96 01       	movw	r18, r12
    29ae:	69 85       	ldd	r22, Y+9	; 0x09
    29b0:	7a 85       	ldd	r23, Y+10	; 0x0a
    29b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    29b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    29b6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divsf3>
    29ba:	6b 01       	movw	r12, r22
    29bc:	7c 01       	movw	r14, r24

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
    29be:	2d 85       	ldd	r18, Y+13	; 0x0d
    29c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    29c2:	4f 85       	ldd	r20, Y+15	; 0x0f
    29c4:	58 89       	ldd	r21, Y+16	; 0x10
    29c6:	6d 89       	ldd	r22, Y+21	; 0x15
    29c8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ca:	8f 89       	ldd	r24, Y+23	; 0x17
    29cc:	98 8d       	ldd	r25, Y+24	; 0x18
    29ce:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    29d2:	6d 83       	std	Y+5, r22	; 0x05
    29d4:	7e 83       	std	Y+6, r23	; 0x06
    29d6:	8f 83       	std	Y+7, r24	; 0x07
    29d8:	98 87       	std	Y+8, r25	; 0x08
    /* Step 6 */
    angle += K[0] * y;
    29da:	9b 01       	movw	r18, r22
    29dc:	ac 01       	movw	r20, r24
    29de:	c5 01       	movw	r24, r10
    29e0:	b4 01       	movw	r22, r8
    29e2:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    29e6:	9b 01       	movw	r18, r22
    29e8:	ac 01       	movw	r20, r24
    29ea:	6d 85       	ldd	r22, Y+13	; 0x0d
    29ec:	7e 85       	ldd	r23, Y+14	; 0x0e
    29ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    29f0:	98 89       	ldd	r25, Y+16	; 0x10
    29f2:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
    29f6:	6d 87       	std	Y+13, r22	; 0x0d
    29f8:	7e 87       	std	Y+14, r23	; 0x0e
    29fa:	8f 87       	std	Y+15, r24	; 0x0f
    29fc:	98 8b       	std	Y+16, r25	; 0x10
    29fe:	f1 01       	movw	r30, r2
    2a00:	64 87       	std	Z+12, r22	; 0x0c
    2a02:	75 87       	std	Z+13, r23	; 0x0d
    2a04:	86 87       	std	Z+14, r24	; 0x0e
    2a06:	97 87       	std	Z+15, r25	; 0x0f
    bias += K[1] * y;
    2a08:	2d 81       	ldd	r18, Y+5	; 0x05
    2a0a:	3e 81       	ldd	r19, Y+6	; 0x06
    2a0c:	4f 81       	ldd	r20, Y+7	; 0x07
    2a0e:	58 85       	ldd	r21, Y+8	; 0x08
    2a10:	c7 01       	movw	r24, r14
    2a12:	b6 01       	movw	r22, r12
    2a14:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    2a18:	9b 01       	movw	r18, r22
    2a1a:	ac 01       	movw	r20, r24
    2a1c:	69 89       	ldd	r22, Y+17	; 0x11
    2a1e:	7a 89       	ldd	r23, Y+18	; 0x12
    2a20:	8b 89       	ldd	r24, Y+19	; 0x13
    2a22:	9c 89       	ldd	r25, Y+20	; 0x14
    2a24:	0e 94 0b 09 	call	0x1216	; 0x1216 <__addsf3>
    2a28:	d1 01       	movw	r26, r2
    2a2a:	50 96       	adiw	r26, 0x10	; 16
    2a2c:	6d 93       	st	X+, r22
    2a2e:	7d 93       	st	X+, r23
    2a30:	8d 93       	st	X+, r24
    2a32:	9c 93       	st	X, r25
    2a34:	53 97       	sbiw	r26, 0x13	; 19
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
    2a36:	29 81       	ldd	r18, Y+1	; 0x01
    2a38:	3a 81       	ldd	r19, Y+2	; 0x02
    2a3a:	4b 81       	ldd	r20, Y+3	; 0x03
    2a3c:	5c 81       	ldd	r21, Y+4	; 0x04
    2a3e:	c5 01       	movw	r24, r10
    2a40:	b4 01       	movw	r22, r8
    2a42:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    2a46:	9b 01       	movw	r18, r22
    2a48:	ac 01       	movw	r20, r24
    2a4a:	69 81       	ldd	r22, Y+1	; 0x01
    2a4c:	7a 81       	ldd	r23, Y+2	; 0x02
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	9c 81       	ldd	r25, Y+4	; 0x04
    2a52:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    2a56:	f1 01       	movw	r30, r2
    2a58:	60 8f       	std	Z+24, r22	; 0x18
    2a5a:	71 8f       	std	Z+25, r23	; 0x19
    2a5c:	82 8f       	std	Z+26, r24	; 0x1a
    2a5e:	93 8f       	std	Z+27, r25	; 0x1b
    P[0][1] -= K[0] * P01_temp;
    2a60:	a3 01       	movw	r20, r6
    2a62:	92 01       	movw	r18, r4
    2a64:	c5 01       	movw	r24, r10
    2a66:	b4 01       	movw	r22, r8
    2a68:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    2a6c:	9b 01       	movw	r18, r22
    2a6e:	ac 01       	movw	r20, r24
    2a70:	c3 01       	movw	r24, r6
    2a72:	b2 01       	movw	r22, r4
    2a74:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    2a78:	d1 01       	movw	r26, r2
    2a7a:	5c 96       	adiw	r26, 0x1c	; 28
    2a7c:	6d 93       	st	X+, r22
    2a7e:	7d 93       	st	X+, r23
    2a80:	8d 93       	st	X+, r24
    2a82:	9c 93       	st	X, r25
    2a84:	5f 97       	sbiw	r26, 0x1f	; 31
    P[1][0] -= K[1] * P00_temp;
    2a86:	29 81       	ldd	r18, Y+1	; 0x01
    2a88:	3a 81       	ldd	r19, Y+2	; 0x02
    2a8a:	4b 81       	ldd	r20, Y+3	; 0x03
    2a8c:	5c 81       	ldd	r21, Y+4	; 0x04
    2a8e:	c7 01       	movw	r24, r14
    2a90:	b6 01       	movw	r22, r12
    2a92:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    2a96:	9b 01       	movw	r18, r22
    2a98:	ac 01       	movw	r20, r24
    2a9a:	69 85       	ldd	r22, Y+9	; 0x09
    2a9c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aa0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aa2:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    2aa6:	f1 01       	movw	r30, r2
    2aa8:	60 a3       	std	Z+32, r22	; 0x20
    2aaa:	71 a3       	std	Z+33, r23	; 0x21
    2aac:	82 a3       	std	Z+34, r24	; 0x22
    2aae:	93 a3       	std	Z+35, r25	; 0x23
    P[1][1] -= K[1] * P01_temp;
    2ab0:	a3 01       	movw	r20, r6
    2ab2:	92 01       	movw	r18, r4
    2ab4:	c7 01       	movw	r24, r14
    2ab6:	b6 01       	movw	r22, r12
    2ab8:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__mulsf3>
    2abc:	9b 01       	movw	r18, r22
    2abe:	ac 01       	movw	r20, r24
    2ac0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac8:	0e 94 0a 09 	call	0x1214	; 0x1214 <__subsf3>
    2acc:	d1 01       	movw	r26, r2
    2ace:	94 96       	adiw	r26, 0x24	; 36
    2ad0:	6d 93       	st	X+, r22
    2ad2:	7d 93       	st	X+, r23
    2ad4:	8d 93       	st	X+, r24
    2ad6:	9c 93       	st	X, r25
    2ad8:	97 97       	sbiw	r26, 0x27	; 39

    return angle;
};
    2ada:	6d 85       	ldd	r22, Y+13	; 0x0d
    2adc:	7e 85       	ldd	r23, Y+14	; 0x0e
    2ade:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ae0:	98 89       	ldd	r25, Y+16	; 0x10
    2ae2:	6c 96       	adiw	r28, 0x1c	; 28
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	1f 91       	pop	r17
    2af4:	0f 91       	pop	r16
    2af6:	ff 90       	pop	r15
    2af8:	ef 90       	pop	r14
    2afa:	df 90       	pop	r13
    2afc:	cf 90       	pop	r12
    2afe:	bf 90       	pop	r11
    2b00:	af 90       	pop	r10
    2b02:	9f 90       	pop	r9
    2b04:	8f 90       	pop	r8
    2b06:	7f 90       	pop	r7
    2b08:	6f 90       	pop	r6
    2b0a:	5f 90       	pop	r5
    2b0c:	4f 90       	pop	r4
    2b0e:	3f 90       	pop	r3
    2b10:	2f 90       	pop	r2
    2b12:	08 95       	ret

00002b14 <_ZN6Kalman8setAngleEf>:

void Kalman::setAngle(float angle) { this->angle = angle; }; // Used to set angle, this should be set as the starting angle
    2b14:	fc 01       	movw	r30, r24
    2b16:	44 87       	std	Z+12, r20	; 0x0c
    2b18:	55 87       	std	Z+13, r21	; 0x0d
    2b1a:	66 87       	std	Z+14, r22	; 0x0e
    2b1c:	77 87       	std	Z+15, r23	; 0x0f
    2b1e:	08 95       	ret

00002b20 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2b20:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <_ZN7TwoWire14rxBufferLengthE>
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <_ZN7TwoWire13rxBufferIndexE>
    2b2a:	82 1b       	sub	r24, r18
    2b2c:	91 09       	sbc	r25, r1
    2b2e:	08 95       	ret

00002b30 <_ZN7TwoWire4readEv>:
    2b30:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <_ZN7TwoWire13rxBufferIndexE>
    2b34:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <_ZN7TwoWire14rxBufferLengthE>
    2b38:	98 17       	cp	r25, r24
    2b3a:	50 f4       	brcc	.+20     	; 0x2b50 <_ZN7TwoWire4readEv+0x20>
    2b3c:	e9 2f       	mov	r30, r25
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	eb 54       	subi	r30, 0x4B	; 75
    2b42:	fc 4f       	sbci	r31, 0xFC	; 252
    2b44:	20 81       	ld	r18, Z
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	9f 5f       	subi	r25, 0xFF	; 255
    2b4a:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <_ZN7TwoWire13rxBufferIndexE>
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <_ZN7TwoWire4readEv+0x24>
    2b50:	2f ef       	ldi	r18, 0xFF	; 255
    2b52:	3f ef       	ldi	r19, 0xFF	; 255
    2b54:	c9 01       	movw	r24, r18
    2b56:	08 95       	ret

00002b58 <_ZN7TwoWire4peekEv>:
    2b58:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <_ZN7TwoWire13rxBufferIndexE>
    2b5c:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <_ZN7TwoWire14rxBufferLengthE>
    2b60:	e8 17       	cp	r30, r24
    2b62:	30 f4       	brcc	.+12     	; 0x2b70 <_ZN7TwoWire4peekEv+0x18>
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	eb 54       	subi	r30, 0x4B	; 75
    2b68:	fc 4f       	sbci	r31, 0xFC	; 252
    2b6a:	80 81       	ld	r24, Z
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	08 95       	ret
    2b70:	8f ef       	ldi	r24, 0xFF	; 255
    2b72:	9f ef       	ldi	r25, 0xFF	; 255
    2b74:	08 95       	ret

00002b76 <_ZN7TwoWire5flushEv>:
    2b76:	08 95       	ret

00002b78 <_ZN7TwoWire5writeEPKhj>:
    2b78:	cf 92       	push	r12
    2b7a:	df 92       	push	r13
    2b7c:	ef 92       	push	r14
    2b7e:	ff 92       	push	r15
    2b80:	0f 93       	push	r16
    2b82:	1f 93       	push	r17
    2b84:	cf 93       	push	r28
    2b86:	df 93       	push	r29
    2b88:	7c 01       	movw	r14, r24
    2b8a:	26 2f       	mov	r18, r22
    2b8c:	97 2f       	mov	r25, r23
    2b8e:	8a 01       	movw	r16, r20
    2b90:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <_ZN7TwoWire12transmittingE>
    2b94:	88 23       	and	r24, r24
    2b96:	91 f0       	breq	.+36     	; 0x2bbc <_ZN7TwoWire5writeEPKhj+0x44>
    2b98:	c6 2f       	mov	r28, r22
    2b9a:	d7 2f       	mov	r29, r23
    2b9c:	6e 01       	movw	r12, r28
    2b9e:	c4 0e       	add	r12, r20
    2ba0:	d5 1e       	adc	r13, r21
    2ba2:	cc 15       	cp	r28, r12
    2ba4:	dd 05       	cpc	r29, r13
    2ba6:	71 f0       	breq	.+28     	; 0x2bc4 <_ZN7TwoWire5writeEPKhj+0x4c>
    2ba8:	69 91       	ld	r22, Y+
    2baa:	d7 01       	movw	r26, r14
    2bac:	ed 91       	ld	r30, X+
    2bae:	fc 91       	ld	r31, X
    2bb0:	01 90       	ld	r0, Z+
    2bb2:	f0 81       	ld	r31, Z
    2bb4:	e0 2d       	mov	r30, r0
    2bb6:	c7 01       	movw	r24, r14
    2bb8:	09 95       	icall
    2bba:	f3 cf       	rjmp	.-26     	; 0x2ba2 <_ZN7TwoWire5writeEPKhj+0x2a>
    2bbc:	64 2f       	mov	r22, r20
    2bbe:	82 2f       	mov	r24, r18
    2bc0:	0e 94 84 17 	call	0x2f08	; 0x2f08 <twi_transmit>
    2bc4:	c8 01       	movw	r24, r16
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	ff 90       	pop	r15
    2bd0:	ef 90       	pop	r14
    2bd2:	df 90       	pop	r13
    2bd4:	cf 90       	pop	r12
    2bd6:	08 95       	ret

00002bd8 <_ZN7TwoWire5writeEh>:
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	1f 92       	push	r1
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	69 83       	std	Y+1, r22	; 0x01
    2be4:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <_ZN7TwoWire12transmittingE>
    2be8:	22 23       	and	r18, r18
    2bea:	d1 f0       	breq	.+52     	; 0x2c20 <_ZN7TwoWire5writeEh+0x48>
    2bec:	20 91 90 03 	lds	r18, 0x0390	; 0x800390 <_ZN7TwoWire14txBufferLengthE>
    2bf0:	20 32       	cpi	r18, 0x20	; 32
    2bf2:	40 f0       	brcs	.+16     	; 0x2c04 <_ZN7TwoWire5writeEh+0x2c>
    2bf4:	21 e0       	ldi	r18, 0x01	; 1
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	33 83       	std	Z+3, r19	; 0x03
    2bfc:	22 83       	std	Z+2, r18	; 0x02
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	15 c0       	rjmp	.+42     	; 0x2c2e <_ZN7TwoWire5writeEh+0x56>
    2c04:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <_ZN7TwoWire13txBufferIndexE>
    2c08:	e8 2f       	mov	r30, r24
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	ee 56       	subi	r30, 0x6E	; 110
    2c0e:	fc 4f       	sbci	r31, 0xFC	; 252
    2c10:	99 81       	ldd	r25, Y+1	; 0x01
    2c12:	90 83       	st	Z, r25
    2c14:	8f 5f       	subi	r24, 0xFF	; 255
    2c16:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <_ZN7TwoWire13txBufferIndexE>
    2c1a:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <_ZN7TwoWire14txBufferLengthE>
    2c1e:	05 c0       	rjmp	.+10     	; 0x2c2a <_ZN7TwoWire5writeEh+0x52>
    2c20:	61 e0       	ldi	r22, 0x01	; 1
    2c22:	ce 01       	movw	r24, r28
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	0e 94 84 17 	call	0x2f08	; 0x2f08 <twi_transmit>
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	0f 90       	pop	r0
    2c30:	df 91       	pop	r29
    2c32:	cf 91       	pop	r28
    2c34:	08 95       	ret

00002c36 <_ZN7TwoWireC1Ev>:
    2c36:	fc 01       	movw	r30, r24
    2c38:	13 82       	std	Z+3, r1	; 0x03
    2c3a:	12 82       	std	Z+2, r1	; 0x02
    2c3c:	88 ee       	ldi	r24, 0xE8	; 232
    2c3e:	93 e0       	ldi	r25, 0x03	; 3
    2c40:	a0 e0       	ldi	r26, 0x00	; 0
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	84 83       	std	Z+4, r24	; 0x04
    2c46:	95 83       	std	Z+5, r25	; 0x05
    2c48:	a6 83       	std	Z+6, r26	; 0x06
    2c4a:	b7 83       	std	Z+7, r27	; 0x07
    2c4c:	81 e2       	ldi	r24, 0x21	; 33
    2c4e:	92 e0       	ldi	r25, 0x02	; 2
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	80 83       	st	Z, r24
    2c54:	08 95       	ret

00002c56 <_ZN7TwoWire5beginEv>:
    2c56:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <_ZN7TwoWire13rxBufferIndexE>
    2c5a:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <_ZN7TwoWire14rxBufferLengthE>
    2c5e:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <_ZN7TwoWire13txBufferIndexE>
    2c62:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <_ZN7TwoWire14txBufferLengthE>
    2c66:	0c 94 c8 16 	jmp	0x2d90	; 0x2d90 <twi_init>

00002c6a <_ZN7TwoWire17beginTransmissionEh>:
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <_ZN7TwoWire12transmittingE>
    2c70:	60 93 b2 03 	sts	0x03B2, r22	; 0x8003b2 <_ZN7TwoWire9txAddressE>
    2c74:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <_ZN7TwoWire13txBufferIndexE>
    2c78:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <_ZN7TwoWire14txBufferLengthE>
    2c7c:	08 95       	ret

00002c7e <_ZN7TwoWire17beginTransmissionEi>:
    2c7e:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <_ZN7TwoWire17beginTransmissionEh>

00002c82 <_ZN7TwoWire15endTransmissionEh>:
    2c82:	0f 93       	push	r16
    2c84:	06 2f       	mov	r16, r22
    2c86:	21 e0       	ldi	r18, 0x01	; 1
    2c88:	40 91 90 03 	lds	r20, 0x0390	; 0x800390 <_ZN7TwoWire14txBufferLengthE>
    2c8c:	62 e9       	ldi	r22, 0x92	; 146
    2c8e:	73 e0       	ldi	r23, 0x03	; 3
    2c90:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <_ZN7TwoWire9txAddressE>
    2c94:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <twi_writeTo>
    2c98:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <_ZN7TwoWire13txBufferIndexE>
    2c9c:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <_ZN7TwoWire14txBufferLengthE>
    2ca0:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <_ZN7TwoWire12transmittingE>
    2ca4:	0f 91       	pop	r16
    2ca6:	08 95       	ret

00002ca8 <_ZN7TwoWire11requestFromEhhmhh>:
    2ca8:	4f 92       	push	r4
    2caa:	5f 92       	push	r5
    2cac:	6f 92       	push	r6
    2cae:	7f 92       	push	r7
    2cb0:	af 92       	push	r10
    2cb2:	bf 92       	push	r11
    2cb4:	cf 92       	push	r12
    2cb6:	ef 92       	push	r14
    2cb8:	ff 92       	push	r15
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	5c 01       	movw	r10, r24
    2cc4:	f6 2e       	mov	r15, r22
    2cc6:	d4 2f       	mov	r29, r20
    2cc8:	28 01       	movw	r4, r16
    2cca:	39 01       	movw	r6, r18
    2ccc:	ee 20       	and	r14, r14
    2cce:	21 f1       	breq	.+72     	; 0x2d18 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2cd0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_ZN7TwoWire17beginTransmissionEh>
    2cd4:	ce 2d       	mov	r28, r14
    2cd6:	c4 30       	cpi	r28, 0x04	; 4
    2cd8:	08 f0       	brcs	.+2      	; 0x2cdc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2cda:	c3 e0       	ldi	r28, 0x03	; 3
    2cdc:	c1 50       	subi	r28, 0x01	; 1
    2cde:	c0 f0       	brcs	.+48     	; 0x2d10 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2ce0:	d5 01       	movw	r26, r10
    2ce2:	ed 91       	ld	r30, X+
    2ce4:	fc 91       	ld	r31, X
    2ce6:	b8 e0       	ldi	r27, 0x08	; 8
    2ce8:	cb 9f       	mul	r28, r27
    2cea:	c0 01       	movw	r24, r0
    2cec:	11 24       	eor	r1, r1
    2cee:	a3 01       	movw	r20, r6
    2cf0:	92 01       	movw	r18, r4
    2cf2:	04 c0       	rjmp	.+8      	; 0x2cfc <_ZN7TwoWire11requestFromEhhmhh+0x54>
    2cf4:	56 95       	lsr	r21
    2cf6:	47 95       	ror	r20
    2cf8:	37 95       	ror	r19
    2cfa:	27 95       	ror	r18
    2cfc:	8a 95       	dec	r24
    2cfe:	d2 f7       	brpl	.-12     	; 0x2cf4 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    2d00:	ca 01       	movw	r24, r20
    2d02:	b9 01       	movw	r22, r18
    2d04:	01 90       	ld	r0, Z+
    2d06:	f0 81       	ld	r31, Z
    2d08:	e0 2d       	mov	r30, r0
    2d0a:	c5 01       	movw	r24, r10
    2d0c:	09 95       	icall
    2d0e:	e6 cf       	rjmp	.-52     	; 0x2cdc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2d10:	60 e0       	ldi	r22, 0x00	; 0
    2d12:	c5 01       	movw	r24, r10
    2d14:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZN7TwoWire15endTransmissionEh>
    2d18:	4d 2f       	mov	r20, r29
    2d1a:	d1 32       	cpi	r29, 0x21	; 33
    2d1c:	08 f0       	brcs	.+2      	; 0x2d20 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2d1e:	40 e2       	ldi	r20, 0x20	; 32
    2d20:	2c 2d       	mov	r18, r12
    2d22:	65 eb       	ldi	r22, 0xB5	; 181
    2d24:	73 e0       	ldi	r23, 0x03	; 3
    2d26:	8f 2d       	mov	r24, r15
    2d28:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <twi_readFrom>
    2d2c:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <_ZN7TwoWire13rxBufferIndexE>
    2d30:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <_ZN7TwoWire14rxBufferLengthE>
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	ff 90       	pop	r15
    2d3e:	ef 90       	pop	r14
    2d40:	cf 90       	pop	r12
    2d42:	bf 90       	pop	r11
    2d44:	af 90       	pop	r10
    2d46:	7f 90       	pop	r7
    2d48:	6f 90       	pop	r6
    2d4a:	5f 90       	pop	r5
    2d4c:	4f 90       	pop	r4
    2d4e:	08 95       	ret

00002d50 <_ZN7TwoWire11requestFromEhhh>:
    2d50:	cf 92       	push	r12
    2d52:	ef 92       	push	r14
    2d54:	0f 93       	push	r16
    2d56:	1f 93       	push	r17
    2d58:	c2 2e       	mov	r12, r18
    2d5a:	e1 2c       	mov	r14, r1
    2d5c:	00 e0       	ldi	r16, 0x00	; 0
    2d5e:	10 e0       	ldi	r17, 0x00	; 0
    2d60:	98 01       	movw	r18, r16
    2d62:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <_ZN7TwoWire11requestFromEhhmhh>
    2d66:	1f 91       	pop	r17
    2d68:	0f 91       	pop	r16
    2d6a:	ef 90       	pop	r14
    2d6c:	cf 90       	pop	r12
    2d6e:	08 95       	ret

00002d70 <_ZN7TwoWire11requestFromEhh>:
    2d70:	21 e0       	ldi	r18, 0x01	; 1
    2d72:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <_ZN7TwoWire11requestFromEhhh>

00002d76 <_ZN7TwoWire11requestFromEii>:
    2d76:	21 e0       	ldi	r18, 0x01	; 1
    2d78:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <_ZN7TwoWire11requestFromEhhh>

00002d7c <_ZN7TwoWire15endTransmissionEv>:
    2d7c:	61 e0       	ldi	r22, 0x01	; 1
    2d7e:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <_ZN7TwoWire15endTransmissionEh>

00002d82 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2d82:	83 e8       	ldi	r24, 0x83	; 131
    2d84:	93 e0       	ldi	r25, 0x03	; 3
    2d86:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <_ZN7TwoWireC1Ev>

00002d8a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2d8a:	08 95       	ret

00002d8c <_ZdlPv>:
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    2d8c:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <free>

00002d90 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d90:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <twi_state>
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <twi_sendStop>
    2d9a:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <twi_inRepStart>
    2d9e:	61 e0       	ldi	r22, 0x01	; 1
    2da0:	82 e1       	ldi	r24, 0x12	; 18
    2da2:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
    2da6:	61 e0       	ldi	r22, 0x01	; 1
    2da8:	83 e1       	ldi	r24, 0x13	; 19
    2daa:	0e 94 ae 11 	call	0x235c	; 0x235c <digitalWrite>
    2dae:	e9 eb       	ldi	r30, 0xB9	; 185
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	8e 7f       	andi	r24, 0xFE	; 254
    2db6:	80 83       	st	Z, r24
    2db8:	80 81       	ld	r24, Z
    2dba:	8d 7f       	andi	r24, 0xFD	; 253
    2dbc:	80 83       	st	Z, r24
    2dbe:	88 e4       	ldi	r24, 0x48	; 72
    2dc0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2dc4:	85 e4       	ldi	r24, 0x45	; 69
    2dc6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2dca:	08 95       	ret

00002dcc <twi_readFrom>:
    2dcc:	41 32       	cpi	r20, 0x21	; 33
    2dce:	08 f0       	brcs	.+2      	; 0x2dd2 <twi_readFrom+0x6>
    2dd0:	43 c0       	rjmp	.+134    	; 0x2e58 <twi_readFrom+0x8c>
    2dd2:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <twi_state>
    2dd6:	91 11       	cpse	r25, r1
    2dd8:	fc cf       	rjmp	.-8      	; 0x2dd2 <twi_readFrom+0x6>
    2dda:	91 e0       	ldi	r25, 0x01	; 1
    2ddc:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <twi_state>
    2de0:	20 93 40 04 	sts	0x0440, r18	; 0x800440 <twi_sendStop>
    2de4:	2f ef       	ldi	r18, 0xFF	; 255
    2de6:	20 93 d5 03 	sts	0x03D5, r18	; 0x8003d5 <twi_error>
    2dea:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <twi_masterBufferIndex>
    2dee:	24 0f       	add	r18, r20
    2df0:	20 93 19 04 	sts	0x0419, r18	; 0x800419 <twi_masterBufferLength>
    2df4:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <twi_slarw>
    2df8:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <twi_slarw>
    2dfc:	88 0f       	add	r24, r24
    2dfe:	89 2b       	or	r24, r25
    2e00:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <twi_slarw>
    2e04:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <twi_inRepStart>
    2e08:	81 30       	cpi	r24, 0x01	; 1
    2e0a:	61 f4       	brne	.+24     	; 0x2e24 <twi_readFrom+0x58>
    2e0c:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <twi_inRepStart>
    2e10:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <twi_slarw>
    2e14:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2e18:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e1c:	83 fd       	sbrc	r24, 3
    2e1e:	f8 cf       	rjmp	.-16     	; 0x2e10 <twi_readFrom+0x44>
    2e20:	85 ec       	ldi	r24, 0xC5	; 197
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <twi_readFrom+0x5a>
    2e24:	85 ee       	ldi	r24, 0xE5	; 229
    2e26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e2a:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <twi_state>
    2e2e:	81 30       	cpi	r24, 0x01	; 1
    2e30:	e1 f3       	breq	.-8      	; 0x2e2a <twi_readFrom+0x5e>
    2e32:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <twi_masterBufferIndex>
    2e36:	84 17       	cp	r24, r20
    2e38:	10 f4       	brcc	.+4      	; 0x2e3e <twi_readFrom+0x72>
    2e3a:	40 91 1a 04 	lds	r20, 0x041A	; 0x80041a <twi_masterBufferIndex>
    2e3e:	2b e1       	ldi	r18, 0x1B	; 27
    2e40:	34 e0       	ldi	r19, 0x04	; 4
    2e42:	fb 01       	movw	r30, r22
    2e44:	d9 01       	movw	r26, r18
    2e46:	8a 2f       	mov	r24, r26
    2e48:	82 1b       	sub	r24, r18
    2e4a:	84 17       	cp	r24, r20
    2e4c:	18 f4       	brcc	.+6      	; 0x2e54 <twi_readFrom+0x88>
    2e4e:	8d 91       	ld	r24, X+
    2e50:	81 93       	st	Z+, r24
    2e52:	f9 cf       	rjmp	.-14     	; 0x2e46 <twi_readFrom+0x7a>
    2e54:	84 2f       	mov	r24, r20
    2e56:	08 95       	ret
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	08 95       	ret

00002e5c <twi_writeTo>:
    2e5c:	0f 93       	push	r16
    2e5e:	41 32       	cpi	r20, 0x21	; 33
    2e60:	08 f0       	brcs	.+2      	; 0x2e64 <twi_writeTo+0x8>
    2e62:	4a c0       	rjmp	.+148    	; 0x2ef8 <twi_writeTo+0x9c>
    2e64:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <twi_state>
    2e68:	91 11       	cpse	r25, r1
    2e6a:	fc cf       	rjmp	.-8      	; 0x2e64 <twi_writeTo+0x8>
    2e6c:	32 e0       	ldi	r19, 0x02	; 2
    2e6e:	30 93 42 04 	sts	0x0442, r19	; 0x800442 <twi_state>
    2e72:	00 93 40 04 	sts	0x0440, r16	; 0x800440 <twi_sendStop>
    2e76:	3f ef       	ldi	r19, 0xFF	; 255
    2e78:	30 93 d5 03 	sts	0x03D5, r19	; 0x8003d5 <twi_error>
    2e7c:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <twi_masterBufferIndex>
    2e80:	40 93 19 04 	sts	0x0419, r20	; 0x800419 <twi_masterBufferLength>
    2e84:	fb 01       	movw	r30, r22
    2e86:	6b e1       	ldi	r22, 0x1B	; 27
    2e88:	74 e0       	ldi	r23, 0x04	; 4
    2e8a:	db 01       	movw	r26, r22
    2e8c:	3a 2f       	mov	r19, r26
    2e8e:	36 1b       	sub	r19, r22
    2e90:	34 17       	cp	r19, r20
    2e92:	18 f4       	brcc	.+6      	; 0x2e9a <twi_writeTo+0x3e>
    2e94:	31 91       	ld	r19, Z+
    2e96:	3d 93       	st	X+, r19
    2e98:	f9 cf       	rjmp	.-14     	; 0x2e8c <twi_writeTo+0x30>
    2e9a:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <twi_slarw>
    2e9e:	30 91 41 04 	lds	r19, 0x0441	; 0x800441 <twi_slarw>
    2ea2:	88 0f       	add	r24, r24
    2ea4:	83 2b       	or	r24, r19
    2ea6:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <twi_slarw>
    2eaa:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <twi_inRepStart>
    2eae:	81 30       	cpi	r24, 0x01	; 1
    2eb0:	61 f4       	brne	.+24     	; 0x2eca <twi_writeTo+0x6e>
    2eb2:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <twi_inRepStart>
    2eb6:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <twi_slarw>
    2eba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2ebe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2ec2:	83 fd       	sbrc	r24, 3
    2ec4:	f8 cf       	rjmp	.-16     	; 0x2eb6 <twi_writeTo+0x5a>
    2ec6:	85 ec       	ldi	r24, 0xC5	; 197
    2ec8:	01 c0       	rjmp	.+2      	; 0x2ecc <twi_writeTo+0x70>
    2eca:	85 ee       	ldi	r24, 0xE5	; 229
    2ecc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2ed0:	22 23       	and	r18, r18
    2ed2:	21 f0       	breq	.+8      	; 0x2edc <twi_writeTo+0x80>
    2ed4:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <twi_state>
    2ed8:	82 30       	cpi	r24, 0x02	; 2
    2eda:	d1 f3       	breq	.-12     	; 0x2ed0 <twi_writeTo+0x74>
    2edc:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_error>
    2ee0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ee2:	79 f0       	breq	.+30     	; 0x2f02 <twi_writeTo+0xa6>
    2ee4:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_error>
    2ee8:	80 32       	cpi	r24, 0x20	; 32
    2eea:	41 f0       	breq	.+16     	; 0x2efc <twi_writeTo+0xa0>
    2eec:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <twi_error>
    2ef0:	80 33       	cpi	r24, 0x30	; 48
    2ef2:	31 f0       	breq	.+12     	; 0x2f00 <twi_writeTo+0xa4>
    2ef4:	94 e0       	ldi	r25, 0x04	; 4
    2ef6:	05 c0       	rjmp	.+10     	; 0x2f02 <twi_writeTo+0xa6>
    2ef8:	91 e0       	ldi	r25, 0x01	; 1
    2efa:	03 c0       	rjmp	.+6      	; 0x2f02 <twi_writeTo+0xa6>
    2efc:	92 e0       	ldi	r25, 0x02	; 2
    2efe:	01 c0       	rjmp	.+2      	; 0x2f02 <twi_writeTo+0xa6>
    2f00:	93 e0       	ldi	r25, 0x03	; 3
    2f02:	89 2f       	mov	r24, r25
    2f04:	0f 91       	pop	r16
    2f06:	08 95       	ret

00002f08 <twi_transmit>:
    2f08:	61 32       	cpi	r22, 0x21	; 33
    2f0a:	98 f4       	brcc	.+38     	; 0x2f32 <twi_transmit+0x2a>
    2f0c:	20 91 42 04 	lds	r18, 0x0442	; 0x800442 <twi_state>
    2f10:	24 30       	cpi	r18, 0x04	; 4
    2f12:	89 f4       	brne	.+34     	; 0x2f36 <twi_transmit+0x2e>
    2f14:	60 93 f7 03 	sts	0x03F7, r22	; 0x8003f7 <twi_txBufferLength>
    2f18:	fc 01       	movw	r30, r24
    2f1a:	29 ef       	ldi	r18, 0xF9	; 249
    2f1c:	33 e0       	ldi	r19, 0x03	; 3
    2f1e:	d9 01       	movw	r26, r18
    2f20:	8a 2f       	mov	r24, r26
    2f22:	82 1b       	sub	r24, r18
    2f24:	86 17       	cp	r24, r22
    2f26:	18 f4       	brcc	.+6      	; 0x2f2e <twi_transmit+0x26>
    2f28:	81 91       	ld	r24, Z+
    2f2a:	8d 93       	st	X+, r24
    2f2c:	f9 cf       	rjmp	.-14     	; 0x2f20 <twi_transmit+0x18>
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	08 95       	ret
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	08 95       	ret
    2f36:	82 e0       	ldi	r24, 0x02	; 2
    2f38:	08 95       	ret

00002f3a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2f3a:	85 ed       	ldi	r24, 0xD5	; 213
    2f3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2f40:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f44:	84 fd       	sbrc	r24, 4
    2f46:	fc cf       	rjmp	.-8      	; 0x2f40 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2f48:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <twi_state>
    2f4c:	08 95       	ret

00002f4e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2f4e:	85 ec       	ldi	r24, 0xC5	; 197
    2f50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2f54:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <twi_state>
    2f58:	08 95       	ret

00002f5a <__vector_24>:
}

ISR(TWI_vect)
{
    2f5a:	1f 92       	push	r1
    2f5c:	0f 92       	push	r0
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	0f 92       	push	r0
    2f62:	11 24       	eor	r1, r1
    2f64:	2f 93       	push	r18
    2f66:	3f 93       	push	r19
    2f68:	4f 93       	push	r20
    2f6a:	5f 93       	push	r21
    2f6c:	6f 93       	push	r22
    2f6e:	7f 93       	push	r23
    2f70:	8f 93       	push	r24
    2f72:	9f 93       	push	r25
    2f74:	af 93       	push	r26
    2f76:	bf 93       	push	r27
    2f78:	ef 93       	push	r30
    2f7a:	ff 93       	push	r31
  switch(TW_STATUS){
    2f7c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2f80:	88 7f       	andi	r24, 0xF8	; 248
    2f82:	80 36       	cpi	r24, 0x60	; 96
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <__vector_24+0x2e>
    2f86:	9e c0       	rjmp	.+316    	; 0x30c4 <__vector_24+0x16a>
    2f88:	78 f5       	brcc	.+94     	; 0x2fe8 <__vector_24+0x8e>
    2f8a:	88 32       	cpi	r24, 0x28	; 40
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <__vector_24+0x36>
    2f8e:	5d c0       	rjmp	.+186    	; 0x304a <__vector_24+0xf0>
    2f90:	90 f4       	brcc	.+36     	; 0x2fb6 <__vector_24+0x5c>
    2f92:	80 31       	cpi	r24, 0x10	; 16
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <__vector_24+0x3e>
    2f96:	56 c0       	rjmp	.+172    	; 0x3044 <__vector_24+0xea>
    2f98:	38 f4       	brcc	.+14     	; 0x2fa8 <__vector_24+0x4e>
    2f9a:	88 23       	and	r24, r24
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <__vector_24+0x46>
    2f9e:	f5 c0       	rjmp	.+490    	; 0x318a <__vector_24+0x230>
    2fa0:	88 30       	cpi	r24, 0x08	; 8
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <__vector_24+0x4c>
    2fa4:	4f c0       	rjmp	.+158    	; 0x3044 <__vector_24+0xea>
    2fa6:	f5 c0       	rjmp	.+490    	; 0x3192 <__vector_24+0x238>
    2fa8:	88 31       	cpi	r24, 0x18	; 24
    2faa:	09 f4       	brne	.+2      	; 0x2fae <__vector_24+0x54>
    2fac:	4e c0       	rjmp	.+156    	; 0x304a <__vector_24+0xf0>
    2fae:	80 32       	cpi	r24, 0x20	; 32
    2fb0:	09 f4       	brne	.+2      	; 0x2fb4 <__vector_24+0x5a>
    2fb2:	5f c0       	rjmp	.+190    	; 0x3072 <__vector_24+0x118>
    2fb4:	ee c0       	rjmp	.+476    	; 0x3192 <__vector_24+0x238>
    2fb6:	80 34       	cpi	r24, 0x40	; 64
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <__vector_24+0x62>
    2fba:	6a c0       	rjmp	.+212    	; 0x3090 <__vector_24+0x136>
    2fbc:	58 f4       	brcc	.+22     	; 0x2fd4 <__vector_24+0x7a>
    2fbe:	80 33       	cpi	r24, 0x30	; 48
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <__vector_24+0x6a>
    2fc2:	57 c0       	rjmp	.+174    	; 0x3072 <__vector_24+0x118>
    2fc4:	88 33       	cpi	r24, 0x38	; 56
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <__vector_24+0x70>
    2fc8:	e4 c0       	rjmp	.+456    	; 0x3192 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2fca:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_error>
      twi_releaseBus();
    2fce:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <twi_releaseBus>
      break;
    2fd2:	df c0       	rjmp	.+446    	; 0x3192 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2fd4:	80 35       	cpi	r24, 0x50	; 80
    2fd6:	09 f4       	brne	.+2      	; 0x2fda <__vector_24+0x80>
    2fd8:	4f c0       	rjmp	.+158    	; 0x3078 <__vector_24+0x11e>
    2fda:	88 35       	cpi	r24, 0x58	; 88
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <__vector_24+0x86>
    2fde:	5d c0       	rjmp	.+186    	; 0x309a <__vector_24+0x140>
    2fe0:	88 34       	cpi	r24, 0x48	; 72
    2fe2:	09 f0       	breq	.+2      	; 0x2fe6 <__vector_24+0x8c>
    2fe4:	d6 c0       	rjmp	.+428    	; 0x3192 <__vector_24+0x238>
    2fe6:	d3 c0       	rjmp	.+422    	; 0x318e <__vector_24+0x234>
    2fe8:	88 39       	cpi	r24, 0x98	; 152
    2fea:	09 f4       	brne	.+2      	; 0x2fee <__vector_24+0x94>
    2fec:	c4 c0       	rjmp	.+392    	; 0x3176 <__vector_24+0x21c>
    2fee:	a8 f4       	brcc	.+42     	; 0x301a <__vector_24+0xc0>
    2ff0:	88 37       	cpi	r24, 0x78	; 120
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <__vector_24+0x9c>
    2ff4:	67 c0       	rjmp	.+206    	; 0x30c4 <__vector_24+0x16a>
    2ff6:	38 f4       	brcc	.+14     	; 0x3006 <__vector_24+0xac>
    2ff8:	88 36       	cpi	r24, 0x68	; 104
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <__vector_24+0xa4>
    2ffc:	63 c0       	rjmp	.+198    	; 0x30c4 <__vector_24+0x16a>
    2ffe:	80 37       	cpi	r24, 0x70	; 112
    3000:	09 f4       	brne	.+2      	; 0x3004 <__vector_24+0xaa>
    3002:	60 c0       	rjmp	.+192    	; 0x30c4 <__vector_24+0x16a>
    3004:	c6 c0       	rjmp	.+396    	; 0x3192 <__vector_24+0x238>
    3006:	88 38       	cpi	r24, 0x88	; 136
    3008:	09 f4       	brne	.+2      	; 0x300c <__vector_24+0xb2>
    300a:	b5 c0       	rjmp	.+362    	; 0x3176 <__vector_24+0x21c>
    300c:	80 39       	cpi	r24, 0x90	; 144
    300e:	09 f4       	brne	.+2      	; 0x3012 <__vector_24+0xb8>
    3010:	5f c0       	rjmp	.+190    	; 0x30d0 <__vector_24+0x176>
    3012:	80 38       	cpi	r24, 0x80	; 128
    3014:	09 f0       	breq	.+2      	; 0x3018 <__vector_24+0xbe>
    3016:	bd c0       	rjmp	.+378    	; 0x3192 <__vector_24+0x238>
    3018:	5b c0       	rjmp	.+182    	; 0x30d0 <__vector_24+0x176>
    301a:	80 3b       	cpi	r24, 0xB0	; 176
    301c:	09 f4       	brne	.+2      	; 0x3020 <__vector_24+0xc6>
    301e:	83 c0       	rjmp	.+262    	; 0x3126 <__vector_24+0x1cc>
    3020:	38 f4       	brcc	.+14     	; 0x3030 <__vector_24+0xd6>
    3022:	80 3a       	cpi	r24, 0xA0	; 160
    3024:	09 f4       	brne	.+2      	; 0x3028 <__vector_24+0xce>
    3026:	66 c0       	rjmp	.+204    	; 0x30f4 <__vector_24+0x19a>
    3028:	88 3a       	cpi	r24, 0xA8	; 168
    302a:	09 f4       	brne	.+2      	; 0x302e <__vector_24+0xd4>
    302c:	7c c0       	rjmp	.+248    	; 0x3126 <__vector_24+0x1cc>
    302e:	b1 c0       	rjmp	.+354    	; 0x3192 <__vector_24+0x238>
    3030:	80 3c       	cpi	r24, 0xC0	; 192
    3032:	09 f4       	brne	.+2      	; 0x3036 <__vector_24+0xdc>
    3034:	a4 c0       	rjmp	.+328    	; 0x317e <__vector_24+0x224>
    3036:	88 3c       	cpi	r24, 0xC8	; 200
    3038:	09 f4       	brne	.+2      	; 0x303c <__vector_24+0xe2>
    303a:	a1 c0       	rjmp	.+322    	; 0x317e <__vector_24+0x224>
    303c:	88 3b       	cpi	r24, 0xB8	; 184
    303e:	09 f4       	brne	.+2      	; 0x3042 <__vector_24+0xe8>
    3040:	87 c0       	rjmp	.+270    	; 0x3150 <__vector_24+0x1f6>
    3042:	a7 c0       	rjmp	.+334    	; 0x3192 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3044:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <twi_slarw>
    3048:	10 c0       	rjmp	.+32     	; 0x306a <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    304a:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <twi_masterBufferIndex>
    304e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <twi_masterBufferLength>
    3052:	98 17       	cp	r25, r24
    3054:	70 f5       	brcc	.+92     	; 0x30b2 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3056:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <twi_masterBufferIndex>
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	8e 0f       	add	r24, r30
    305e:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <twi_masterBufferIndex>
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	e5 5e       	subi	r30, 0xE5	; 229
    3066:	fb 4f       	sbci	r31, 0xFB	; 251
    3068:	80 81       	ld	r24, Z
    306a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    306e:	85 ec       	ldi	r24, 0xC5	; 197
    3070:	83 c0       	rjmp	.+262    	; 0x3178 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3072:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <twi_error>
    3076:	8b c0       	rjmp	.+278    	; 0x318e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3078:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <twi_masterBufferIndex>
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	8e 0f       	add	r24, r30
    3080:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <twi_masterBufferIndex>
    3084:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	e5 5e       	subi	r30, 0xE5	; 229
    308c:	fb 4f       	sbci	r31, 0xFB	; 251
    308e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3090:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <twi_masterBufferIndex>
    3094:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <twi_masterBufferLength>
    3098:	6b c0       	rjmp	.+214    	; 0x3170 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    309a:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <twi_masterBufferIndex>
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	8e 0f       	add	r24, r30
    30a2:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <twi_masterBufferIndex>
    30a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	e5 5e       	subi	r30, 0xE5	; 229
    30ae:	fb 4f       	sbci	r31, 0xFB	; 251
    30b0:	80 83       	st	Z, r24
	if (twi_sendStop)
    30b2:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <twi_sendStop>
    30b6:	81 11       	cpse	r24, r1
    30b8:	6a c0       	rjmp	.+212    	; 0x318e <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    30c0:	84 ea       	ldi	r24, 0xA4	; 164
    30c2:	5e c0       	rjmp	.+188    	; 0x3180 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    30c4:	83 e0       	ldi	r24, 0x03	; 3
    30c6:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    30ca:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <twi_rxBufferIndex>
    30ce:	cf cf       	rjmp	.-98     	; 0x306e <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    30d0:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <twi_rxBufferIndex>
    30d4:	80 32       	cpi	r24, 0x20	; 32
    30d6:	08 f0       	brcs	.+2      	; 0x30da <__vector_24+0x180>
    30d8:	4e c0       	rjmp	.+156    	; 0x3176 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    30da:	e0 91 d6 03 	lds	r30, 0x03D6	; 0x8003d6 <twi_rxBufferIndex>
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	8e 0f       	add	r24, r30
    30e2:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <twi_rxBufferIndex>
    30e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	e9 52       	subi	r30, 0x29	; 41
    30ee:	fc 4f       	sbci	r31, 0xFC	; 252
    30f0:	80 83       	st	Z, r24
    30f2:	bd cf       	rjmp	.-134    	; 0x306e <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    30f4:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    30f8:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <twi_rxBufferIndex>
    30fc:	80 32       	cpi	r24, 0x20	; 32
    30fe:	30 f4       	brcc	.+12     	; 0x310c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3100:	e0 91 d6 03 	lds	r30, 0x03D6	; 0x8003d6 <twi_rxBufferIndex>
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	e9 52       	subi	r30, 0x29	; 41
    3108:	fc 4f       	sbci	r31, 0xFC	; 252
    310a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    310c:	60 91 d6 03 	lds	r22, 0x03D6	; 0x8003d6 <twi_rxBufferIndex>
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <twi_onSlaveReceive>
    3116:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <twi_onSlaveReceive+0x1>
    311a:	87 ed       	ldi	r24, 0xD7	; 215
    311c:	93 e0       	ldi	r25, 0x03	; 3
    311e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3120:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <twi_rxBufferIndex>
      break;
    3124:	36 c0       	rjmp	.+108    	; 0x3192 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3126:	84 e0       	ldi	r24, 0x04	; 4
    3128:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    312c:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3130:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3134:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <twi_onSlaveTransmit>
    3138:	f0 91 3e 04 	lds	r31, 0x043E	; 0x80043e <twi_onSlaveTransmit+0x1>
    313c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    313e:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <twi_txBufferLength>
    3142:	81 11       	cpse	r24, r1
    3144:	05 c0       	rjmp	.+10     	; 0x3150 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    314c:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3150:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <twi_txBufferIndex>
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	8e 0f       	add	r24, r30
    3158:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <twi_txBufferIndex>
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	e7 50       	subi	r30, 0x07	; 7
    3160:	fc 4f       	sbci	r31, 0xFC	; 252
    3162:	80 81       	ld	r24, Z
    3164:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3168:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <twi_txBufferIndex>
    316c:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <twi_txBufferLength>
    3170:	98 17       	cp	r25, r24
    3172:	08 f4       	brcc	.+2      	; 0x3176 <__vector_24+0x21c>
    3174:	7c cf       	rjmp	.-264    	; 0x306e <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3176:	85 e8       	ldi	r24, 0x85	; 133
    3178:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    317c:	0a c0       	rjmp	.+20     	; 0x3192 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    317e:	85 ec       	ldi	r24, 0xC5	; 197
    3180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3184:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <twi_state>
      break;
    3188:	04 c0       	rjmp	.+8      	; 0x3192 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    318a:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <twi_error>
      twi_stop();
    318e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <twi_stop>
      break;
  }
}
    3192:	ff 91       	pop	r31
    3194:	ef 91       	pop	r30
    3196:	bf 91       	pop	r27
    3198:	af 91       	pop	r26
    319a:	9f 91       	pop	r25
    319c:	8f 91       	pop	r24
    319e:	7f 91       	pop	r23
    31a0:	6f 91       	pop	r22
    31a2:	5f 91       	pop	r21
    31a4:	4f 91       	pop	r20
    31a6:	3f 91       	pop	r19
    31a8:	2f 91       	pop	r18
    31aa:	0f 90       	pop	r0
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	0f 90       	pop	r0
    31b0:	1f 90       	pop	r1
    31b2:	18 95       	reti

000031b4 <__unordsf2>:
    31b4:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__fp_cmp>
    31b8:	88 0b       	sbc	r24, r24
    31ba:	99 0b       	sbc	r25, r25
    31bc:	08 95       	ret

000031be <__divmodhi4>:
    31be:	97 fb       	bst	r25, 7
    31c0:	07 2e       	mov	r0, r23
    31c2:	16 f4       	brtc	.+4      	; 0x31c8 <__divmodhi4+0xa>
    31c4:	00 94       	com	r0
    31c6:	07 d0       	rcall	.+14     	; 0x31d6 <__divmodhi4_neg1>
    31c8:	77 fd       	sbrc	r23, 7
    31ca:	09 d0       	rcall	.+18     	; 0x31de <__divmodhi4_neg2>
    31cc:	0e 94 15 19 	call	0x322a	; 0x322a <__udivmodhi4>
    31d0:	07 fc       	sbrc	r0, 7
    31d2:	05 d0       	rcall	.+10     	; 0x31de <__divmodhi4_neg2>
    31d4:	3e f4       	brtc	.+14     	; 0x31e4 <__divmodhi4_exit>

000031d6 <__divmodhi4_neg1>:
    31d6:	90 95       	com	r25
    31d8:	81 95       	neg	r24
    31da:	9f 4f       	sbci	r25, 0xFF	; 255
    31dc:	08 95       	ret

000031de <__divmodhi4_neg2>:
    31de:	70 95       	com	r23
    31e0:	61 95       	neg	r22
    31e2:	7f 4f       	sbci	r23, 0xFF	; 255

000031e4 <__divmodhi4_exit>:
    31e4:	08 95       	ret

000031e6 <__udivmodsi4>:
    31e6:	a1 e2       	ldi	r26, 0x21	; 33
    31e8:	1a 2e       	mov	r1, r26
    31ea:	aa 1b       	sub	r26, r26
    31ec:	bb 1b       	sub	r27, r27
    31ee:	fd 01       	movw	r30, r26
    31f0:	0d c0       	rjmp	.+26     	; 0x320c <__udivmodsi4_ep>

000031f2 <__udivmodsi4_loop>:
    31f2:	aa 1f       	adc	r26, r26
    31f4:	bb 1f       	adc	r27, r27
    31f6:	ee 1f       	adc	r30, r30
    31f8:	ff 1f       	adc	r31, r31
    31fa:	a2 17       	cp	r26, r18
    31fc:	b3 07       	cpc	r27, r19
    31fe:	e4 07       	cpc	r30, r20
    3200:	f5 07       	cpc	r31, r21
    3202:	20 f0       	brcs	.+8      	; 0x320c <__udivmodsi4_ep>
    3204:	a2 1b       	sub	r26, r18
    3206:	b3 0b       	sbc	r27, r19
    3208:	e4 0b       	sbc	r30, r20
    320a:	f5 0b       	sbc	r31, r21

0000320c <__udivmodsi4_ep>:
    320c:	66 1f       	adc	r22, r22
    320e:	77 1f       	adc	r23, r23
    3210:	88 1f       	adc	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	1a 94       	dec	r1
    3216:	69 f7       	brne	.-38     	; 0x31f2 <__udivmodsi4_loop>
    3218:	60 95       	com	r22
    321a:	70 95       	com	r23
    321c:	80 95       	com	r24
    321e:	90 95       	com	r25
    3220:	9b 01       	movw	r18, r22
    3222:	ac 01       	movw	r20, r24
    3224:	bd 01       	movw	r22, r26
    3226:	cf 01       	movw	r24, r30
    3228:	08 95       	ret

0000322a <__udivmodhi4>:
    322a:	aa 1b       	sub	r26, r26
    322c:	bb 1b       	sub	r27, r27
    322e:	51 e1       	ldi	r21, 0x11	; 17
    3230:	07 c0       	rjmp	.+14     	; 0x3240 <__udivmodhi4_ep>

00003232 <__udivmodhi4_loop>:
    3232:	aa 1f       	adc	r26, r26
    3234:	bb 1f       	adc	r27, r27
    3236:	a6 17       	cp	r26, r22
    3238:	b7 07       	cpc	r27, r23
    323a:	10 f0       	brcs	.+4      	; 0x3240 <__udivmodhi4_ep>
    323c:	a6 1b       	sub	r26, r22
    323e:	b7 0b       	sbc	r27, r23

00003240 <__udivmodhi4_ep>:
    3240:	88 1f       	adc	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	5a 95       	dec	r21
    3246:	a9 f7       	brne	.-22     	; 0x3232 <__udivmodhi4_loop>
    3248:	80 95       	com	r24
    324a:	90 95       	com	r25
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	08 95       	ret

00003252 <__tablejump2__>:
    3252:	ee 0f       	add	r30, r30
    3254:	ff 1f       	adc	r31, r31
    3256:	05 90       	lpm	r0, Z+
    3258:	f4 91       	lpm	r31, Z
    325a:	e0 2d       	mov	r30, r0
    325c:	09 94       	ijmp

0000325e <malloc>:
    325e:	cf 93       	push	r28
    3260:	df 93       	push	r29
    3262:	82 30       	cpi	r24, 0x02	; 2
    3264:	91 05       	cpc	r25, r1
    3266:	10 f4       	brcc	.+4      	; 0x326c <malloc+0xe>
    3268:	82 e0       	ldi	r24, 0x02	; 2
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <__flp>
    3270:	f0 91 46 04 	lds	r31, 0x0446	; 0x800446 <__flp+0x1>
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	c0 e0       	ldi	r28, 0x00	; 0
    327a:	d0 e0       	ldi	r29, 0x00	; 0
    327c:	30 97       	sbiw	r30, 0x00	; 0
    327e:	11 f1       	breq	.+68     	; 0x32c4 <malloc+0x66>
    3280:	40 81       	ld	r20, Z
    3282:	51 81       	ldd	r21, Z+1	; 0x01
    3284:	48 17       	cp	r20, r24
    3286:	59 07       	cpc	r21, r25
    3288:	c0 f0       	brcs	.+48     	; 0x32ba <malloc+0x5c>
    328a:	48 17       	cp	r20, r24
    328c:	59 07       	cpc	r21, r25
    328e:	61 f4       	brne	.+24     	; 0x32a8 <malloc+0x4a>
    3290:	82 81       	ldd	r24, Z+2	; 0x02
    3292:	93 81       	ldd	r25, Z+3	; 0x03
    3294:	20 97       	sbiw	r28, 0x00	; 0
    3296:	19 f0       	breq	.+6      	; 0x329e <malloc+0x40>
    3298:	9b 83       	std	Y+3, r25	; 0x03
    329a:	8a 83       	std	Y+2, r24	; 0x02
    329c:	2b c0       	rjmp	.+86     	; 0x32f4 <malloc+0x96>
    329e:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <__flp+0x1>
    32a2:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__flp>
    32a6:	26 c0       	rjmp	.+76     	; 0x32f4 <malloc+0x96>
    32a8:	21 15       	cp	r18, r1
    32aa:	31 05       	cpc	r19, r1
    32ac:	19 f0       	breq	.+6      	; 0x32b4 <malloc+0x56>
    32ae:	42 17       	cp	r20, r18
    32b0:	53 07       	cpc	r21, r19
    32b2:	18 f4       	brcc	.+6      	; 0x32ba <malloc+0x5c>
    32b4:	9a 01       	movw	r18, r20
    32b6:	be 01       	movw	r22, r28
    32b8:	df 01       	movw	r26, r30
    32ba:	ef 01       	movw	r28, r30
    32bc:	02 80       	ldd	r0, Z+2	; 0x02
    32be:	f3 81       	ldd	r31, Z+3	; 0x03
    32c0:	e0 2d       	mov	r30, r0
    32c2:	dc cf       	rjmp	.-72     	; 0x327c <malloc+0x1e>
    32c4:	21 15       	cp	r18, r1
    32c6:	31 05       	cpc	r19, r1
    32c8:	09 f1       	breq	.+66     	; 0x330c <malloc+0xae>
    32ca:	28 1b       	sub	r18, r24
    32cc:	39 0b       	sbc	r19, r25
    32ce:	24 30       	cpi	r18, 0x04	; 4
    32d0:	31 05       	cpc	r19, r1
    32d2:	90 f4       	brcc	.+36     	; 0x32f8 <malloc+0x9a>
    32d4:	12 96       	adiw	r26, 0x02	; 2
    32d6:	8d 91       	ld	r24, X+
    32d8:	9c 91       	ld	r25, X
    32da:	13 97       	sbiw	r26, 0x03	; 3
    32dc:	61 15       	cp	r22, r1
    32de:	71 05       	cpc	r23, r1
    32e0:	21 f0       	breq	.+8      	; 0x32ea <malloc+0x8c>
    32e2:	fb 01       	movw	r30, r22
    32e4:	93 83       	std	Z+3, r25	; 0x03
    32e6:	82 83       	std	Z+2, r24	; 0x02
    32e8:	04 c0       	rjmp	.+8      	; 0x32f2 <malloc+0x94>
    32ea:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <__flp+0x1>
    32ee:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__flp>
    32f2:	fd 01       	movw	r30, r26
    32f4:	32 96       	adiw	r30, 0x02	; 2
    32f6:	44 c0       	rjmp	.+136    	; 0x3380 <malloc+0x122>
    32f8:	fd 01       	movw	r30, r26
    32fa:	e2 0f       	add	r30, r18
    32fc:	f3 1f       	adc	r31, r19
    32fe:	81 93       	st	Z+, r24
    3300:	91 93       	st	Z+, r25
    3302:	22 50       	subi	r18, 0x02	; 2
    3304:	31 09       	sbc	r19, r1
    3306:	2d 93       	st	X+, r18
    3308:	3c 93       	st	X, r19
    330a:	3a c0       	rjmp	.+116    	; 0x3380 <malloc+0x122>
    330c:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <__brkval>
    3310:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <__brkval+0x1>
    3314:	23 2b       	or	r18, r19
    3316:	41 f4       	brne	.+16     	; 0x3328 <malloc+0xca>
    3318:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    331c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3320:	30 93 44 04 	sts	0x0444, r19	; 0x800444 <__brkval+0x1>
    3324:	20 93 43 04 	sts	0x0443, r18	; 0x800443 <__brkval>
    3328:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    332c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3330:	21 15       	cp	r18, r1
    3332:	31 05       	cpc	r19, r1
    3334:	41 f4       	brne	.+16     	; 0x3346 <malloc+0xe8>
    3336:	2d b7       	in	r18, 0x3d	; 61
    3338:	3e b7       	in	r19, 0x3e	; 62
    333a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    333e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3342:	24 1b       	sub	r18, r20
    3344:	35 0b       	sbc	r19, r21
    3346:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <__brkval>
    334a:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <__brkval+0x1>
    334e:	e2 17       	cp	r30, r18
    3350:	f3 07       	cpc	r31, r19
    3352:	a0 f4       	brcc	.+40     	; 0x337c <malloc+0x11e>
    3354:	2e 1b       	sub	r18, r30
    3356:	3f 0b       	sbc	r19, r31
    3358:	28 17       	cp	r18, r24
    335a:	39 07       	cpc	r19, r25
    335c:	78 f0       	brcs	.+30     	; 0x337c <malloc+0x11e>
    335e:	ac 01       	movw	r20, r24
    3360:	4e 5f       	subi	r20, 0xFE	; 254
    3362:	5f 4f       	sbci	r21, 0xFF	; 255
    3364:	24 17       	cp	r18, r20
    3366:	35 07       	cpc	r19, r21
    3368:	48 f0       	brcs	.+18     	; 0x337c <malloc+0x11e>
    336a:	4e 0f       	add	r20, r30
    336c:	5f 1f       	adc	r21, r31
    336e:	50 93 44 04 	sts	0x0444, r21	; 0x800444 <__brkval+0x1>
    3372:	40 93 43 04 	sts	0x0443, r20	; 0x800443 <__brkval>
    3376:	81 93       	st	Z+, r24
    3378:	91 93       	st	Z+, r25
    337a:	02 c0       	rjmp	.+4      	; 0x3380 <malloc+0x122>
    337c:	e0 e0       	ldi	r30, 0x00	; 0
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	cf 01       	movw	r24, r30
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	08 95       	ret

00003388 <free>:
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	cf 93       	push	r28
    338e:	df 93       	push	r29
    3390:	00 97       	sbiw	r24, 0x00	; 0
    3392:	09 f4       	brne	.+2      	; 0x3396 <free+0xe>
    3394:	8c c0       	rjmp	.+280    	; 0x34ae <free+0x126>
    3396:	fc 01       	movw	r30, r24
    3398:	32 97       	sbiw	r30, 0x02	; 2
    339a:	13 82       	std	Z+3, r1	; 0x03
    339c:	12 82       	std	Z+2, r1	; 0x02
    339e:	00 91 45 04 	lds	r16, 0x0445	; 0x800445 <__flp>
    33a2:	10 91 46 04 	lds	r17, 0x0446	; 0x800446 <__flp+0x1>
    33a6:	01 15       	cp	r16, r1
    33a8:	11 05       	cpc	r17, r1
    33aa:	81 f4       	brne	.+32     	; 0x33cc <free+0x44>
    33ac:	20 81       	ld	r18, Z
    33ae:	31 81       	ldd	r19, Z+1	; 0x01
    33b0:	82 0f       	add	r24, r18
    33b2:	93 1f       	adc	r25, r19
    33b4:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <__brkval>
    33b8:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <__brkval+0x1>
    33bc:	28 17       	cp	r18, r24
    33be:	39 07       	cpc	r19, r25
    33c0:	79 f5       	brne	.+94     	; 0x3420 <free+0x98>
    33c2:	f0 93 44 04 	sts	0x0444, r31	; 0x800444 <__brkval+0x1>
    33c6:	e0 93 43 04 	sts	0x0443, r30	; 0x800443 <__brkval>
    33ca:	71 c0       	rjmp	.+226    	; 0x34ae <free+0x126>
    33cc:	d8 01       	movw	r26, r16
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	ae 17       	cp	r26, r30
    33d4:	bf 07       	cpc	r27, r31
    33d6:	50 f4       	brcc	.+20     	; 0x33ec <free+0x64>
    33d8:	12 96       	adiw	r26, 0x02	; 2
    33da:	2d 91       	ld	r18, X+
    33dc:	3c 91       	ld	r19, X
    33de:	13 97       	sbiw	r26, 0x03	; 3
    33e0:	ad 01       	movw	r20, r26
    33e2:	21 15       	cp	r18, r1
    33e4:	31 05       	cpc	r19, r1
    33e6:	09 f1       	breq	.+66     	; 0x342a <free+0xa2>
    33e8:	d9 01       	movw	r26, r18
    33ea:	f3 cf       	rjmp	.-26     	; 0x33d2 <free+0x4a>
    33ec:	9d 01       	movw	r18, r26
    33ee:	da 01       	movw	r26, r20
    33f0:	33 83       	std	Z+3, r19	; 0x03
    33f2:	22 83       	std	Z+2, r18	; 0x02
    33f4:	60 81       	ld	r22, Z
    33f6:	71 81       	ldd	r23, Z+1	; 0x01
    33f8:	86 0f       	add	r24, r22
    33fa:	97 1f       	adc	r25, r23
    33fc:	82 17       	cp	r24, r18
    33fe:	93 07       	cpc	r25, r19
    3400:	69 f4       	brne	.+26     	; 0x341c <free+0x94>
    3402:	ec 01       	movw	r28, r24
    3404:	28 81       	ld	r18, Y
    3406:	39 81       	ldd	r19, Y+1	; 0x01
    3408:	26 0f       	add	r18, r22
    340a:	37 1f       	adc	r19, r23
    340c:	2e 5f       	subi	r18, 0xFE	; 254
    340e:	3f 4f       	sbci	r19, 0xFF	; 255
    3410:	31 83       	std	Z+1, r19	; 0x01
    3412:	20 83       	st	Z, r18
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	9b 81       	ldd	r25, Y+3	; 0x03
    3418:	93 83       	std	Z+3, r25	; 0x03
    341a:	82 83       	std	Z+2, r24	; 0x02
    341c:	45 2b       	or	r20, r21
    341e:	29 f4       	brne	.+10     	; 0x342a <free+0xa2>
    3420:	f0 93 46 04 	sts	0x0446, r31	; 0x800446 <__flp+0x1>
    3424:	e0 93 45 04 	sts	0x0445, r30	; 0x800445 <__flp>
    3428:	42 c0       	rjmp	.+132    	; 0x34ae <free+0x126>
    342a:	13 96       	adiw	r26, 0x03	; 3
    342c:	fc 93       	st	X, r31
    342e:	ee 93       	st	-X, r30
    3430:	12 97       	sbiw	r26, 0x02	; 2
    3432:	ed 01       	movw	r28, r26
    3434:	49 91       	ld	r20, Y+
    3436:	59 91       	ld	r21, Y+
    3438:	9e 01       	movw	r18, r28
    343a:	24 0f       	add	r18, r20
    343c:	35 1f       	adc	r19, r21
    343e:	e2 17       	cp	r30, r18
    3440:	f3 07       	cpc	r31, r19
    3442:	71 f4       	brne	.+28     	; 0x3460 <free+0xd8>
    3444:	80 81       	ld	r24, Z
    3446:	91 81       	ldd	r25, Z+1	; 0x01
    3448:	84 0f       	add	r24, r20
    344a:	95 1f       	adc	r25, r21
    344c:	02 96       	adiw	r24, 0x02	; 2
    344e:	11 96       	adiw	r26, 0x01	; 1
    3450:	9c 93       	st	X, r25
    3452:	8e 93       	st	-X, r24
    3454:	82 81       	ldd	r24, Z+2	; 0x02
    3456:	93 81       	ldd	r25, Z+3	; 0x03
    3458:	13 96       	adiw	r26, 0x03	; 3
    345a:	9c 93       	st	X, r25
    345c:	8e 93       	st	-X, r24
    345e:	12 97       	sbiw	r26, 0x02	; 2
    3460:	e0 e0       	ldi	r30, 0x00	; 0
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	d8 01       	movw	r26, r16
    3466:	12 96       	adiw	r26, 0x02	; 2
    3468:	8d 91       	ld	r24, X+
    346a:	9c 91       	ld	r25, X
    346c:	13 97       	sbiw	r26, 0x03	; 3
    346e:	00 97       	sbiw	r24, 0x00	; 0
    3470:	19 f0       	breq	.+6      	; 0x3478 <free+0xf0>
    3472:	f8 01       	movw	r30, r16
    3474:	8c 01       	movw	r16, r24
    3476:	f6 cf       	rjmp	.-20     	; 0x3464 <free+0xdc>
    3478:	8d 91       	ld	r24, X+
    347a:	9c 91       	ld	r25, X
    347c:	98 01       	movw	r18, r16
    347e:	2e 5f       	subi	r18, 0xFE	; 254
    3480:	3f 4f       	sbci	r19, 0xFF	; 255
    3482:	82 0f       	add	r24, r18
    3484:	93 1f       	adc	r25, r19
    3486:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <__brkval>
    348a:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <__brkval+0x1>
    348e:	28 17       	cp	r18, r24
    3490:	39 07       	cpc	r19, r25
    3492:	69 f4       	brne	.+26     	; 0x34ae <free+0x126>
    3494:	30 97       	sbiw	r30, 0x00	; 0
    3496:	29 f4       	brne	.+10     	; 0x34a2 <free+0x11a>
    3498:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <__flp+0x1>
    349c:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <__flp>
    34a0:	02 c0       	rjmp	.+4      	; 0x34a6 <free+0x11e>
    34a2:	13 82       	std	Z+3, r1	; 0x03
    34a4:	12 82       	std	Z+2, r1	; 0x02
    34a6:	10 93 44 04 	sts	0x0444, r17	; 0x800444 <__brkval+0x1>
    34aa:	00 93 43 04 	sts	0x0443, r16	; 0x800443 <__brkval>
    34ae:	df 91       	pop	r29
    34b0:	cf 91       	pop	r28
    34b2:	1f 91       	pop	r17
    34b4:	0f 91       	pop	r16
    34b6:	08 95       	ret

000034b8 <realloc>:
    34b8:	a0 e0       	ldi	r26, 0x00	; 0
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	e2 e6       	ldi	r30, 0x62	; 98
    34be:	fa e1       	ldi	r31, 0x1A	; 26
    34c0:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <__prologue_saves__+0x8>
    34c4:	ec 01       	movw	r28, r24
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	21 f4       	brne	.+8      	; 0x34d2 <realloc+0x1a>
    34ca:	cb 01       	movw	r24, r22
    34cc:	0e 94 2f 19 	call	0x325e	; 0x325e <malloc>
    34d0:	b8 c0       	rjmp	.+368    	; 0x3642 <realloc+0x18a>
    34d2:	fc 01       	movw	r30, r24
    34d4:	e6 0f       	add	r30, r22
    34d6:	f7 1f       	adc	r31, r23
    34d8:	9c 01       	movw	r18, r24
    34da:	22 50       	subi	r18, 0x02	; 2
    34dc:	31 09       	sbc	r19, r1
    34de:	e2 17       	cp	r30, r18
    34e0:	f3 07       	cpc	r31, r19
    34e2:	08 f4       	brcc	.+2      	; 0x34e6 <realloc+0x2e>
    34e4:	ac c0       	rjmp	.+344    	; 0x363e <realloc+0x186>
    34e6:	d9 01       	movw	r26, r18
    34e8:	0d 91       	ld	r16, X+
    34ea:	1c 91       	ld	r17, X
    34ec:	11 97       	sbiw	r26, 0x01	; 1
    34ee:	06 17       	cp	r16, r22
    34f0:	17 07       	cpc	r17, r23
    34f2:	b0 f0       	brcs	.+44     	; 0x3520 <realloc+0x68>
    34f4:	05 30       	cpi	r16, 0x05	; 5
    34f6:	11 05       	cpc	r17, r1
    34f8:	08 f4       	brcc	.+2      	; 0x34fc <realloc+0x44>
    34fa:	9f c0       	rjmp	.+318    	; 0x363a <realloc+0x182>
    34fc:	c8 01       	movw	r24, r16
    34fe:	04 97       	sbiw	r24, 0x04	; 4
    3500:	86 17       	cp	r24, r22
    3502:	97 07       	cpc	r25, r23
    3504:	08 f4       	brcc	.+2      	; 0x3508 <realloc+0x50>
    3506:	99 c0       	rjmp	.+306    	; 0x363a <realloc+0x182>
    3508:	02 50       	subi	r16, 0x02	; 2
    350a:	11 09       	sbc	r17, r1
    350c:	06 1b       	sub	r16, r22
    350e:	17 0b       	sbc	r17, r23
    3510:	01 93       	st	Z+, r16
    3512:	11 93       	st	Z+, r17
    3514:	6d 93       	st	X+, r22
    3516:	7c 93       	st	X, r23
    3518:	cf 01       	movw	r24, r30
    351a:	0e 94 c4 19 	call	0x3388	; 0x3388 <free>
    351e:	8d c0       	rjmp	.+282    	; 0x363a <realloc+0x182>
    3520:	5b 01       	movw	r10, r22
    3522:	a0 1a       	sub	r10, r16
    3524:	b1 0a       	sbc	r11, r17
    3526:	4c 01       	movw	r8, r24
    3528:	80 0e       	add	r8, r16
    352a:	91 1e       	adc	r9, r17
    352c:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <__flp>
    3530:	b0 91 46 04 	lds	r27, 0x0446	; 0x800446 <__flp+0x1>
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	e1 2c       	mov	r14, r1
    353a:	f1 2c       	mov	r15, r1
    353c:	10 97       	sbiw	r26, 0x00	; 0
    353e:	09 f4       	brne	.+2      	; 0x3542 <realloc+0x8a>
    3540:	4a c0       	rjmp	.+148    	; 0x35d6 <realloc+0x11e>
    3542:	a8 15       	cp	r26, r8
    3544:	b9 05       	cpc	r27, r9
    3546:	d1 f5       	brne	.+116    	; 0x35bc <realloc+0x104>
    3548:	6d 90       	ld	r6, X+
    354a:	7c 90       	ld	r7, X
    354c:	11 97       	sbiw	r26, 0x01	; 1
    354e:	63 01       	movw	r12, r6
    3550:	82 e0       	ldi	r24, 0x02	; 2
    3552:	c8 0e       	add	r12, r24
    3554:	d1 1c       	adc	r13, r1
    3556:	ca 14       	cp	r12, r10
    3558:	db 04       	cpc	r13, r11
    355a:	80 f1       	brcs	.+96     	; 0x35bc <realloc+0x104>
    355c:	a3 01       	movw	r20, r6
    355e:	4a 19       	sub	r20, r10
    3560:	5b 09       	sbc	r21, r11
    3562:	6a 01       	movw	r12, r20
    3564:	82 e0       	ldi	r24, 0x02	; 2
    3566:	c8 0e       	add	r12, r24
    3568:	d1 1c       	adc	r13, r1
    356a:	12 96       	adiw	r26, 0x02	; 2
    356c:	bc 90       	ld	r11, X
    356e:	12 97       	sbiw	r26, 0x02	; 2
    3570:	13 96       	adiw	r26, 0x03	; 3
    3572:	ac 91       	ld	r26, X
    3574:	b5 e0       	ldi	r27, 0x05	; 5
    3576:	cb 16       	cp	r12, r27
    3578:	d1 04       	cpc	r13, r1
    357a:	40 f0       	brcs	.+16     	; 0x358c <realloc+0xd4>
    357c:	b2 82       	std	Z+2, r11	; 0x02
    357e:	a3 83       	std	Z+3, r26	; 0x03
    3580:	51 83       	std	Z+1, r21	; 0x01
    3582:	40 83       	st	Z, r20
    3584:	d9 01       	movw	r26, r18
    3586:	6d 93       	st	X+, r22
    3588:	7c 93       	st	X, r23
    358a:	0a c0       	rjmp	.+20     	; 0x35a0 <realloc+0xe8>
    358c:	0e 5f       	subi	r16, 0xFE	; 254
    358e:	1f 4f       	sbci	r17, 0xFF	; 255
    3590:	c3 01       	movw	r24, r6
    3592:	80 0f       	add	r24, r16
    3594:	91 1f       	adc	r25, r17
    3596:	f9 01       	movw	r30, r18
    3598:	91 83       	std	Z+1, r25	; 0x01
    359a:	80 83       	st	Z, r24
    359c:	eb 2d       	mov	r30, r11
    359e:	fa 2f       	mov	r31, r26
    35a0:	e1 14       	cp	r14, r1
    35a2:	f1 04       	cpc	r15, r1
    35a4:	31 f0       	breq	.+12     	; 0x35b2 <realloc+0xfa>
    35a6:	d7 01       	movw	r26, r14
    35a8:	13 96       	adiw	r26, 0x03	; 3
    35aa:	fc 93       	st	X, r31
    35ac:	ee 93       	st	-X, r30
    35ae:	12 97       	sbiw	r26, 0x02	; 2
    35b0:	44 c0       	rjmp	.+136    	; 0x363a <realloc+0x182>
    35b2:	f0 93 46 04 	sts	0x0446, r31	; 0x800446 <__flp+0x1>
    35b6:	e0 93 45 04 	sts	0x0445, r30	; 0x800445 <__flp>
    35ba:	3f c0       	rjmp	.+126    	; 0x363a <realloc+0x182>
    35bc:	8d 91       	ld	r24, X+
    35be:	9c 91       	ld	r25, X
    35c0:	11 97       	sbiw	r26, 0x01	; 1
    35c2:	48 17       	cp	r20, r24
    35c4:	59 07       	cpc	r21, r25
    35c6:	08 f4       	brcc	.+2      	; 0x35ca <realloc+0x112>
    35c8:	ac 01       	movw	r20, r24
    35ca:	7d 01       	movw	r14, r26
    35cc:	12 96       	adiw	r26, 0x02	; 2
    35ce:	0d 90       	ld	r0, X+
    35d0:	bc 91       	ld	r27, X
    35d2:	a0 2d       	mov	r26, r0
    35d4:	b3 cf       	rjmp	.-154    	; 0x353c <realloc+0x84>
    35d6:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <__brkval>
    35da:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <__brkval+0x1>
    35de:	88 15       	cp	r24, r8
    35e0:	99 05       	cpc	r25, r9
    35e2:	e1 f4       	brne	.+56     	; 0x361c <realloc+0x164>
    35e4:	46 17       	cp	r20, r22
    35e6:	57 07       	cpc	r21, r23
    35e8:	c8 f4       	brcc	.+50     	; 0x361c <realloc+0x164>
    35ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    35ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    35f2:	00 97       	sbiw	r24, 0x00	; 0
    35f4:	41 f4       	brne	.+16     	; 0x3606 <realloc+0x14e>
    35f6:	8d b7       	in	r24, 0x3d	; 61
    35f8:	9e b7       	in	r25, 0x3e	; 62
    35fa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    35fe:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3602:	84 1b       	sub	r24, r20
    3604:	95 0b       	sbc	r25, r21
    3606:	e8 17       	cp	r30, r24
    3608:	f9 07       	cpc	r31, r25
    360a:	c8 f4       	brcc	.+50     	; 0x363e <realloc+0x186>
    360c:	f0 93 44 04 	sts	0x0444, r31	; 0x800444 <__brkval+0x1>
    3610:	e0 93 43 04 	sts	0x0443, r30	; 0x800443 <__brkval>
    3614:	f9 01       	movw	r30, r18
    3616:	71 83       	std	Z+1, r23	; 0x01
    3618:	60 83       	st	Z, r22
    361a:	0f c0       	rjmp	.+30     	; 0x363a <realloc+0x182>
    361c:	cb 01       	movw	r24, r22
    361e:	0e 94 2f 19 	call	0x325e	; 0x325e <malloc>
    3622:	7c 01       	movw	r14, r24
    3624:	00 97       	sbiw	r24, 0x00	; 0
    3626:	59 f0       	breq	.+22     	; 0x363e <realloc+0x186>
    3628:	a8 01       	movw	r20, r16
    362a:	be 01       	movw	r22, r28
    362c:	0e 94 26 1b 	call	0x364c	; 0x364c <memcpy>
    3630:	ce 01       	movw	r24, r28
    3632:	0e 94 c4 19 	call	0x3388	; 0x3388 <free>
    3636:	c7 01       	movw	r24, r14
    3638:	04 c0       	rjmp	.+8      	; 0x3642 <realloc+0x18a>
    363a:	ce 01       	movw	r24, r28
    363c:	02 c0       	rjmp	.+4      	; 0x3642 <realloc+0x18a>
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	ee e0       	ldi	r30, 0x0E	; 14
    3648:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <__epilogue_restores__+0x8>

0000364c <memcpy>:
    364c:	fb 01       	movw	r30, r22
    364e:	dc 01       	movw	r26, r24
    3650:	02 c0       	rjmp	.+4      	; 0x3656 <memcpy+0xa>
    3652:	01 90       	ld	r0, Z+
    3654:	0d 92       	st	X+, r0
    3656:	41 50       	subi	r20, 0x01	; 1
    3658:	50 40       	sbci	r21, 0x00	; 0
    365a:	d8 f7       	brcc	.-10     	; 0x3652 <memcpy+0x6>
    365c:	08 95       	ret

0000365e <strcpy>:
    365e:	fb 01       	movw	r30, r22
    3660:	dc 01       	movw	r26, r24
    3662:	01 90       	ld	r0, Z+
    3664:	0d 92       	st	X+, r0
    3666:	00 20       	and	r0, r0
    3668:	e1 f7       	brne	.-8      	; 0x3662 <strcpy+0x4>
    366a:	08 95       	ret

0000366c <strncpy>:
    366c:	fb 01       	movw	r30, r22
    366e:	dc 01       	movw	r26, r24
    3670:	41 50       	subi	r20, 0x01	; 1
    3672:	50 40       	sbci	r21, 0x00	; 0
    3674:	48 f0       	brcs	.+18     	; 0x3688 <strncpy+0x1c>
    3676:	01 90       	ld	r0, Z+
    3678:	0d 92       	st	X+, r0
    367a:	00 20       	and	r0, r0
    367c:	c9 f7       	brne	.-14     	; 0x3670 <strncpy+0x4>
    367e:	01 c0       	rjmp	.+2      	; 0x3682 <strncpy+0x16>
    3680:	1d 92       	st	X+, r1
    3682:	41 50       	subi	r20, 0x01	; 1
    3684:	50 40       	sbci	r21, 0x00	; 0
    3686:	e0 f7       	brcc	.-8      	; 0x3680 <strncpy+0x14>
    3688:	08 95       	ret

0000368a <__prologue_saves__>:
    368a:	2f 92       	push	r2
    368c:	3f 92       	push	r3
    368e:	4f 92       	push	r4
    3690:	5f 92       	push	r5
    3692:	6f 92       	push	r6
    3694:	7f 92       	push	r7
    3696:	8f 92       	push	r8
    3698:	9f 92       	push	r9
    369a:	af 92       	push	r10
    369c:	bf 92       	push	r11
    369e:	cf 92       	push	r12
    36a0:	df 92       	push	r13
    36a2:	ef 92       	push	r14
    36a4:	ff 92       	push	r15
    36a6:	0f 93       	push	r16
    36a8:	1f 93       	push	r17
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	cd b7       	in	r28, 0x3d	; 61
    36b0:	de b7       	in	r29, 0x3e	; 62
    36b2:	ca 1b       	sub	r28, r26
    36b4:	db 0b       	sbc	r29, r27
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	cd bf       	out	0x3d, r28	; 61
    36c0:	09 94       	ijmp

000036c2 <__epilogue_restores__>:
    36c2:	2a 88       	ldd	r2, Y+18	; 0x12
    36c4:	39 88       	ldd	r3, Y+17	; 0x11
    36c6:	48 88       	ldd	r4, Y+16	; 0x10
    36c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    36ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    36cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    36ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    36d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    36d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    36d4:	b9 84       	ldd	r11, Y+9	; 0x09
    36d6:	c8 84       	ldd	r12, Y+8	; 0x08
    36d8:	df 80       	ldd	r13, Y+7	; 0x07
    36da:	ee 80       	ldd	r14, Y+6	; 0x06
    36dc:	fd 80       	ldd	r15, Y+5	; 0x05
    36de:	0c 81       	ldd	r16, Y+4	; 0x04
    36e0:	1b 81       	ldd	r17, Y+3	; 0x03
    36e2:	aa 81       	ldd	r26, Y+2	; 0x02
    36e4:	b9 81       	ldd	r27, Y+1	; 0x01
    36e6:	ce 0f       	add	r28, r30
    36e8:	d1 1d       	adc	r29, r1
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	de bf       	out	0x3e, r29	; 62
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	cd bf       	out	0x3d, r28	; 61
    36f4:	ed 01       	movw	r28, r26
    36f6:	08 95       	ret

000036f8 <__do_global_dtors>:
    36f8:	10 e0       	ldi	r17, 0x00	; 0
    36fa:	c6 e7       	ldi	r28, 0x76	; 118
    36fc:	d0 e0       	ldi	r29, 0x00	; 0
    36fe:	04 c0       	rjmp	.+8      	; 0x3708 <__do_global_dtors+0x10>
    3700:	fe 01       	movw	r30, r28
    3702:	0e 94 29 19 	call	0x3252	; 0x3252 <__tablejump2__>
    3706:	21 96       	adiw	r28, 0x01	; 1
    3708:	c7 37       	cpi	r28, 0x77	; 119
    370a:	d1 07       	cpc	r29, r17
    370c:	c9 f7       	brne	.-14     	; 0x3700 <__do_global_dtors+0x8>
    370e:	f8 94       	cli

00003710 <__stop_program>:
    3710:	ff cf       	rjmp	.-2      	; 0x3710 <__stop_program>
